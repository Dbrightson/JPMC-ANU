import{p as J,w as H,o as m,c as _,z as e,h as y,l as q,a2 as f,a3 as B,b as t,a4 as F,F as M,L as T,a as c,a5 as E,G as W,t as i,O as g}from"./chunks/framework.ccd7224a.js";import{ac as Z,S as K,C as Q,H as $,V as R,A as ee,l as L,o as N,J as V,$ as O,ae as j,a as G,k as ae,af as se}from"./chunks/anu.32f81ff5.js";import{s as I}from"./chunks/sequential.29eb7f40.js";const oe={class:"canvas-container"},te=e("canvas",{id:"canvas"},null,-1),le=[te],ne={__name:"chroma",props:{type:String,scheme:String,material:String,meshes:Number,steps:Number},setup(w){const s=w;return J(()=>{const D=document.querySelector("#canvas"),A=new Z(D,!0);let n=new K(A);n.clearColor=new Q(30/256,30/256,32/256),new $("light1",new R(0,10,0),n);const l=new ee("Camera",-(Math.PI/4)*3,Math.PI/4,10,new R(0,0,0),n);l.position=new R(0,0,-s.meshes),l.lowerRadiusLimit=s.meshes,l.upperRadiusLimit=s.meshes,l.attachControl(!0);let p=[...Array(s.meshes).keys()].map(o=>({data:o})),d=L().domain([0,s.meshes-1]).range([-s.meshes/2,s.meshes/2]),u=N(V(s.scheme)[s.material=="Color3"?"toColor3":s.material=="Color4"?"toColor4":s.material=="Standard Material"?"toStandardMaterial":s.material=="PBR Rough"?"toPBRMaterialRough":s.material=="PBR Glossy"?"toPBRMaterialGlossy":null](s.steps>0?s.steps:void 0)),P=I(O(s.scheme).toColor3(s.steps>0?s.steps:void 0)).domain([0,s.meshes-1]),b=s.type=="Ordinal"?u:P,h=j("sphere",{},p).positionX(o=>d(o.data));s.material=="Color3"||s.material=="Color4"?h.material(()=>new G("materialName")).diffuseColor(o=>b(o)):h.material(o=>b(o)),A.runRenderLoop(()=>{n.render()}),window.addEventListener("resize",function(){A.resize()}),H(()=>[s.type,s.meshes,s.steps,s.material,s.scheme],([o,a,S,r,k])=>{ae("sphere",n).dispose(),l.lowerRadiusLimit=a,l.upperRadiusLimit=a,l.position=new R(0,0,-a);let U=[...Array(a).keys()].map(C=>({data:C})),Y=L().domain([0,a-1]).range([-a/2,a/2]),z=N(V(k)[r=="Color3"?"toColor3":r=="Color4"?"toColor4":r=="Standard Material"?"toStandardMaterial":r=="PBR Rough"?"toPBRMaterialRough":r=="PBR Glossy"?"toPBRMaterialGlossy":null](S>0?S:void 0)),X=I(O(k)[r=="Color3"?"toColor3":r=="Color4"?"toColor4":r=="Standard Material"?"toStandardMaterial":r=="PBR Rough"?"toPBRMaterialRough":r=="PBR Glossy"?"toPBRMaterialGlossy":null](S>0?S:void 0)).domain([0,a-1]),v=o=="Ordinal"?z:X;console.log(v(0),v(a-1));let x=j("sphere",{},U).positionX(C=>Y(C.data));r=="Color3"||r=="Color4"?x.material(()=>new G("materialName")).diffuseColor(C=>v(C.data)):x.material(C=>v(C.data))})}),(D,A)=>(m(),_("div",oe,le))}};const re=g(`<h1 id="color-scales" tabindex="-1">Color Scales <a class="header-anchor" href="#color-scales" aria-label="Permalink to &quot;Color Scales&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The color scale prefab provides utility class and methods for generating color scales and returning them in a variety of formats (hex, color3, material, etc.). This prefab can be used standalone or in conjunction with <a href="https://d3js.org/d3-scale" target="_blank" rel="noreferrer">d3-scale</a>. Additionally, these functions implement <a href="https://gka.github.io/chroma.js/" target="_blank" rel="noreferrer">chroma.js</a> to provide a variety of predefined schemes like <a href="https://colorbrewer2.org/#type=sequential&amp;scheme=BuGn&amp;n=3" target="_blank" rel="noreferrer">color brewer</a>, or your own custom color maps. We are also working on a few schemes of our own to come out later.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//returns list of color from scheme name or list of color hex codes</span></span>
<span class="line"><span style="color:#A6ACCD;">anu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ordinalChromatic</span><span style="color:#A6ACCD;">(string </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> string[])</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toColor3</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//returns function that accepts int 0-1 and returns corresponding color</span></span>
<span class="line"><span style="color:#A6ACCD;">anu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sequentialChromatic</span><span style="color:#A6ACCD;">(string </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> string[])</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toColor3</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><h2 id="color-and-material-formats" tabindex="-1">Color and Material Formats <a class="header-anchor" href="#color-and-material-formats" aria-label="Permalink to &quot;Color and Material Formats&quot;">​</a></h2><table><thead><tr><th>Method</th><th>Return</th></tr></thead><tbody><tr><td>toColor3(steps)</td><td>returns type of <a href="https://doc.babylonjs.com/typedoc/classes/BABYLON.Color3" target="_blank" rel="noreferrer">color3</a> length of steps or scheme by default</td></tr><tr><td>toColor4(steps)</td><td>returns type of <a href="https://doc.babylonjs.com/typedoc/classes/BABYLON.Color4" target="_blank" rel="noreferrer">color4</a> length of steps or scheme by default</td></tr><tr><td>toStandardMaterial(steps)</td><td>returns type of <a href="https://doc.babylonjs.com/typedoc/classes/BABYLON.StandardMaterial" target="_blank" rel="noreferrer">standardMaterial</a> length of steps or scheme by default</td></tr><tr><td>toPBRMaterialRough(steps)</td><td>returns type of <a href="https://doc.babylonjs.com/typedoc/classes/BABYLON.PBRMetallicRoughnessMaterial" target="_blank" rel="noreferrer">PBRMetallicRoughnessMaterial</a> length of steps or scheme by default</td></tr><tr><td>toPBRMaterialGlossy(steps)</td><td>returns type of <a href="https://doc.babylonjs.com/typedoc/classes/BABYLON.PBRSpecularGlossinessMaterial" target="_blank" rel="noreferrer">PBRSpecularGlossinessMaterial</a> length of steps or scheme by default</td></tr></tbody></table><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2>`,8),ce={class:"container2"},ie={class:"ui"},pe=["selected","value"],de=["value","selected"],ue=["value","selected"],he={class:"sliders"},ye={class:"language-js"},me=e("button",{title:"Copy Code",class:"copy"},null,-1),_e=e("span",{class:"lang"},"js",-1),Ce={class:"shiki material-theme-palenight"},Ae=e("span",{class:"line"},[e("span",{style:{color:"#676E95","font-style":"italic"}},'//Creating some "data" as a simple object list of numbers 0-n')],-1),De={class:"line"},fe=g('<span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#82AAFF;">Array</span>',6),Fe={style:{color:"#A6ACCD"}},ge=g('<span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">()]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">)</span>',25),be=e("span",{class:"line"},null,-1),Se=e("span",{class:"line"},[e("span",{style:{color:"#676E95","font-style":"italic"}},"//Create our color scale function")],-1),ve={class:"line"},Re=e("span",{style:{color:"#C792EA"}},"let",-1),Pe=e("span",{style:{color:"#A6ACCD"}}," color ",-1),Be=e("span",{style:{color:"#89DDFF"}},"=",-1),Me=e("span",{style:{color:"#A6ACCD"}}," ",-1),Te={style:{color:"#82AAFF"}},we=e("span",{style:{color:"#A6ACCD"}},"(",-1),ke=e("span",{style:{color:"#89DDFF"}},"'",-1),xe={style:{color:"#C3E88D"}},qe=e("span",{style:{color:"#89DDFF"}},"'",-1),Ee=e("span",{style:{color:"#A6ACCD"}},")",-1),Le=e("span",{style:{color:"#89DDFF"}},".",-1),Ne={style:{color:"#82AAFF"}},Ve={style:{color:"#A6ACCD"}},Oe=e("span",{class:"line"},null,-1),je=e("span",{class:"line"},[e("span",{style:{color:"#676E95","font-style":"italic"}},"//Create spheres and bind our data to them, ")],-1),Ge=e("span",{class:"line"},[e("span",{style:{color:"#676E95","font-style":"italic"}},"//move spheres into position and apply our color or material")],-1),Ie=g('<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> spheres </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> anu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sphere</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> data)</span></span>',1),Ue=g('<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">positionX</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">d</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> d</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data)</span></span>',1),Ye={class:"line"},ze=e("span",{style:{color:"#A6ACCD"}},"       ",-1),Xe=e("span",{style:{color:"#89DDFF"}},".",-1),Je={style:{color:"#A6ACCD"}},Qe=JSON.parse('{"title":"Color Scales","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/prefabs/chromatic.md","filePath":"guide/prefabs/chromatic.md"}'),He={name:"guide/prefabs/chromatic.md"},$e=Object.assign(He,{setup(w){const s=y({Ordinal:{name:"Ordinal",method:"d3.scaleOrdinal(anu.ordinalChromatic"},Sequential:{name:"Sequential",method:"d3.scaleSequential(anu.sequentialChromatic"}}),D=y({Color3:{name:"Color3",method:"toColor3"},Color4:{name:"Color4",method:"toColor4"},Standard_Material:{name:"Standard Material",method:"toStandardMaterial"},PBR_Rough:{name:"PBR Rough",method:"toPBRMaterialRough"},PBR_Glossy:{name:"PBR Glossy",method:"toPBRMaterialGlossy"}}),A=y(Object.keys(se).reverse());let n=y(["Ordinal"]),l=y(["Color3"]),p=y(["d310"]),d=y(10),u=y(0),P=q(()=>".domain([0,"+(d.value-1)+"])"),b=q(()=>l.value[0]=="Color3"||l.value[0]=="Color4"?`material(() => new BABYLON.StandardMaterial("mat"))
       .diffuseColor((d) => color(d.data))`:l.value[0]=="Standard Material"||l.value[0]=="PBR Rough"||l.value[0]=="PBR Glossy"?"material((d) => color(d.data))":null);return(h,o)=>(m(),_("div",null,[re,e("div",ce,[e("div",ie,[f(e("select",{class:"form-control",required:!0,onChange:o[0]||(o[0]=(...a)=>h.changeLocation&&h.changeLocation(...a)),multiple:"",size:"2","onUpdate:modelValue":o[1]||(o[1]=a=>F(n)?n.value=a:n=a)},[(m(!0),_(M,null,T(s.value,a=>(m(),_("option",{selected:t(n)===a.name,value:a.name},i(a.name),9,pe))),256))],544),[[B,t(n)]]),f(e("select",{class:"form-control",required:!0,onChange:o[2]||(o[2]=(...a)=>h.changeLocation&&h.changeLocation(...a)),multiple:"",size:"5","onUpdate:modelValue":o[3]||(o[3]=a=>F(l)?l.value=a:l=a)},[(m(!0),_(M,null,T(D.value,a=>(m(),_("option",{value:a.name,selected:t(l)===a.name},i(a.name),9,de))),256))],544),[[B,t(l)]]),f(e("select",{class:"form-control",required:!0,onChange:o[4]||(o[4]=(...a)=>h.changeLocation&&h.changeLocation(...a)),multiple:"",size:"5","onUpdate:modelValue":o[5]||(o[5]=a=>F(p)?p.value=a:p=a)},[(m(!0),_(M,null,T(A.value,a=>(m(),_("option",{value:a,selected:t(p)===a},i(a),9,ue))),256))],544),[[B,t(p)]]),e("div",he,[e("label",null,[c(" Meshes "),f(e("input",{type:"range",min:"5",max:"50",class:"slider","onUpdate:modelValue":o[6]||(o[6]=a=>F(d)?d.value=a:d=a)},null,512),[[E,t(d),void 0,{number:!0}]])]),e("label",null,[c(" Steps "),f(e("input",{type:"range",min:"0",max:"100",class:"slider","onUpdate:modelValue":o[7]||(o[7]=a=>F(u)?u.value=a:u=a)},null,512),[[E,t(u),void 0,{number:!0}]])])])]),W(ne,{type:t(n)[0],scheme:t(p)[0],material:t(l)[0],meshes:t(d),steps:t(u)},null,8,["type","scheme","material","meshes","steps"])]),e("div",ye,[me,_e,e("pre",Ce,[e("code",null,[Ae,c(`
`),e("span",De,[fe,e("span",Fe,"("+i(t(d))+")",1),ge]),c(`
`),be,c(`
`),Se,c(`
`),e("span",ve,[Re,Pe,Be,Me,e("span",Te,i(s.value[t(n)[0]].method),1),we,ke,e("span",xe,i(t(p)[0]),1),qe,Ee,Le,e("span",Ne,i(D.value[t(l)[0].replace(/ /g,"_")].method),1),e("span",Ve,"("+i(t(u)>0?t(u):null)+"))"+i(t(n)[0]=="Sequential"?t(P):null),1)]),c(`
`),Oe,c(`
`),je,c(`
`),Ge,c(`
`),Ie,c(`
`),Ue,c(`
`),e("span",Ye,[ze,Xe,e("span",Je,i(t(b)),1)])])])])]))}});export{Qe as __pageData,$e as default};
