import{_ as s,o as a,c as e,a as n,O as t,z as l}from"./chunks/framework.eb48dd0f.js";const h=JSON.parse('{"title":"Axes","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/prefabs/axes.md","filePath":"guide/prefabs/axes.md"}'),o={name:"guide/prefabs/axes.md"},p=t(`<h1 id="axes" tabindex="-1">Axes <a class="header-anchor" href="#axes" aria-label="Permalink to &quot;Axes&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Axes are critical components of data visualizations. Anu provides the tools you need to create axes from scratch, but this prefab makes it easier to create axes with best practices to give you a jump start. The default settings will produce good looking axes for many visualizations, but this prefab provides many ways to customize the output leveraging the best features of Anu, Babylon, and D3. This prefab integrates <a href="https://github.com/d3/d3-scale" target="_blank" rel="noreferrer">d3-scale</a> to help position elements and generate ticks, and labels. Axes can be rendered by invoking the <a href="/api/modules.html#createaxes">createAxes()</a> method which returns an instance of the Axes class, and will produce 3D, 2D, or 1D axes depending on the options set.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//Returns instance of Axes Class</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> axes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> anu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createAxes</span><span style="color:#A6ACCD;">(name: String</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> scene: Scene</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options: </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Selection object of the main axis line using GreasedLine mesh</span></span>
<span class="line"><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domain </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Selection object {x,y,z} of axes background using Plane mesh</span></span>
<span class="line"><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">background</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#676E95;font-style:italic;">//y or z</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Selection object {x,y,z} of axes grid using LineSystem mesh</span></span>
<span class="line"><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">grid</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#676E95;font-style:italic;">//y or z </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Selection object {x,y,z} of axes labels using PlaneText prefab</span></span>
<span class="line"><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">label</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#676E95;font-style:italic;">//y or z</span></span></code></pre></div><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table><thead><tr><th>Property</th><th>Value</th><th>Default</th></tr></thead><tbody><tr><td>scale</td><td>({x?: scale, y?: scale, z?: scale}) the scale(s) of the axes you want to render. At least one is required</td><td>Required</td></tr><tr><td>parent</td><td>(Selection) Selection that defines the parent node. If not set a parent node will be created at the root of the scene graph.</td><td>undefined</td></tr><tr><td>domain</td><td>(boolean) render the domain or not</td><td>true</td></tr><tr><td>domainOptions</td><td>(Object) initial options of the <a href="https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/greased_line" target="_blank" rel="noreferrer">GreasedLine</a> mesh</td><td>{}</td></tr><tr><td>domainMaterialOptions</td><td>(Object) initial options of the <a href="https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/greased_line" target="_blank" rel="noreferrer">GreasedLine</a> material</td><td>{}</td></tr><tr><td>grid</td><td>(boolean) render the grid lines or not</td><td>true</td></tr><tr><td>gridOptions</td><td>(Object) initial options of the <a href="https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/line_system" target="_blank" rel="noreferrer">LineSystem</a> mesh</td><td>{}</td></tr><tr><td>gridProperties</td><td>(Object) post rendering properties of the <a href="https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/line_system" target="_blank" rel="noreferrer">LineSystem</a> mesh</td><td>{}</td></tr><tr><td>gridTicks</td><td>({x\\y\\z: []}) array of values for ticks to be drawn. If nothing is passed scale.ticks() or scale.domain used</td><td>{}</td></tr><tr><td>label</td><td>(boolean) render the labels or not</td><td>true</td></tr><tr><td>labelOptions</td><td>(Object) initial options of the <a href="/guide/prefabs/planetext.html">PlaneText</a> mesh</td><td>{}</td></tr><tr><td>labelProperties</td><td>(Object) post rendering properties of the <a href="/guide/prefabs/planetext.html">PlaneText</a> mesh</td><td>{}</td></tr><tr><td>labelTicks</td><td>({x\\y\\z: []}) array of values for ticks to be drawn. If nothing is passed scale.ticks() or scale.domain used</td><td>{}</td></tr><tr><td>labelTicks</td><td>({x\\y\\z: (text: string) =&gt; string}) a function that takes a string and returns a new string. If not set this will default to text from scale.ticks() or scale.domain()</td><td>{}</td></tr></tbody></table><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><h3 id="default-3d-axes" tabindex="-1">Default 3D Axes <a class="header-anchor" href="#default-3d-axes" aria-label="Permalink to &quot;Default 3D Axes&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> extentX </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">extent</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(iris</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">d</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sepalLength</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> extentY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">extent</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(iris</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">d</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">petalLength</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> extentZ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">extent</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(iris</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">d</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sepalWidth</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> scaleX </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scaleLinear</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">domain</span><span style="color:#A6ACCD;">(extentX)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">range</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nice</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> scaleY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scaleLinear</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">domain</span><span style="color:#A6ACCD;">(extentY)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">range</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nice</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> scaleZ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scaleLinear</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">domain</span><span style="color:#A6ACCD;">(extentZ)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">range</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nice</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">anu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createAxes</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myAxes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> scene</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">scale</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> scaleX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> scaleY</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">z</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> scaleZ</span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,10),r=l("iframe",{id:"inlineFrameExample",title:"Inline Frame Example",width:"100%",height:"400",src:"/index.html/?example=axesTest"},`
  `,-1);function c(i,y,D,A,d,F){return a(),e("div",null,[p,n(),r])}const f=s(o,[["render",c]]);export{h as __pageData,f as default};
