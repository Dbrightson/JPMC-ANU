import{D as n}from"./chunks/anu.DphG6d7S.js";import{S as l,H as r,V as t,A as h,C as p}from"./chunks/flowGraphSceneTickEventBlock.CVmhT_RE.js";import{E as o,c as d,J as k,p as c,a5 as E,o as g}from"./chunks/framework.Dom3zjHH.js";const u=function(i){const a=new l(i);new r("light1",new t(0,10,0),a);const s=new h("Camera",-(Math.PI/4)*3,Math.PI/4,10,new t(0,0,0),a);s.attachControl(!0),s.position=new t(25,0,-15);let e={text:"Hello World",color:p.Green()};return n("myText",e,a).position.x=-1,a},m=E(`<h1 id="plane-text" tabindex="-1">Plane Text <a class="header-anchor" href="#plane-text" aria-label="Permalink to &quot;Plane Text&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The plane text prefab enables rendering 2D text in Babylon by integrating <a href="https://github.com/bhushan6/babylon-msdf-text" target="_blank" rel="noreferrer">babylon-msdf-text</a>. Plane Text can be created by calling <a href="/anu/api/modules.html#createplanetext">createPlaneText()</a>, <a href="/anu/api/modules.html#create">create()</a>, or <a href="/anu/api/modules.html#bind">bind()</a> returning a Mesh or <a href="/anu/api/classes/Selection.html">Selection</a>. The returned mesh is an empty parent mesh of the rendered text. The default font included is Roboto Regular. To use a different font, generate a texture atlas and json specification for your font using the <a href="https://msdf-bmfont.donmccurdy.com/" target="_blank" rel="noreferrer">MSDF font generator</a>.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//With createPlaneText() returns Mesh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">anu.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createPlaneText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: string, options: {}, scene: Scene);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//With create() returns Mesh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">anu.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;planeText&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: string, scene: Scene, options: {}, data: {});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//With bind() returns Selection</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">anu.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;planeText&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, scene: Scene, options: {}, data: [{}]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//With bind() from a Selection returns a new Selection</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Selection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;planeText&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options: {}, data: [{}]);</span></span></code></pre></div><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table><thead><tr><th>Property</th><th>Value</th><th>Default</th></tr></thead><tbody><tr><td>text</td><td>(string) text to be rendered</td><td>&#39;undefined&#39;</td></tr><tr><td>size</td><td>(number) scaling factor to be baked into the vertices</td><td>1</td></tr><tr><td>opacity</td><td>(number) opacity value between 0 and 1</td><td>1</td></tr><tr><td>color</td><td>(Color3) color value of the mesh material</td><td>Color3.White()</td></tr><tr><td>font</td><td>(json) json spec of the MSDF text font</td><td>roboto-standard.json</td></tr><tr><td>atlas</td><td>(png) texture atlas of the MSDF text font</td><td>roboto-standard.png</td></tr></tbody></table><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    color: Color3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">anu.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createPlaneText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text2d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options, scene);</span></span></code></pre></div>`,9),F=JSON.parse('{"title":"Plane Text","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/prefabs/planetext.md","filePath":"guide/prefabs/planetext.md"}'),b={name:"guide/prefabs/planetext.md"},_=Object.assign(b,{setup(i){return(a,s)=>{const e=o("singleView");return g(),d("div",null,[m,k(e,{scene:c(u)},null,8,["scene"])])}}});export{F as __pageData,_ as default};
