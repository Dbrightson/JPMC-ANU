import{_ as s,o as a,c as e,a as n,O as t,z as l}from"./chunks/framework.ccd7224a.js";const C=JSON.parse('{"title":"Plane Text","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/prefabs/planetext.md","filePath":"guide/prefabs/planetext.md"}'),o={name:"guide/prefabs/planetext.md"},p=t(`<h1 id="plane-text" tabindex="-1">Plane Text <a class="header-anchor" href="#plane-text" aria-label="Permalink to &quot;Plane Text&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The plane text prefab enables rendering 2D text in Babylon by integrating <a href="https://github.com/bhushan6/babylon-msdf-text" target="_blank" rel="noreferrer">babylon-msdf-text</a>. Plane Text can be created by calling <a href="/anu/api/modules.html#createplanetext">createPlaneText()</a>, <a href="/anu/api/modules.html#create">create()</a>, or <a href="/anu/api/modules.html#bind">bind()</a> returning a Mesh or <a href="/anu/api/classes/Selection.html">Selection</a>. The returned mesh is an empty parent mesh of the rendered text. The default font included is Roboto Regular. To use a different font, generate a texture atlas and json specification for your font using the <a href="https://msdf-bmfont.donmccurdy.com/" target="_blank" rel="noreferrer">MSDF font generator</a>.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//With createPlaneText() returns Mesh</span></span>
<span class="line"><span style="color:#A6ACCD;">anu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createPlaneText</span><span style="color:#A6ACCD;">(name: string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options: </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> scene: Scene)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//With create() returns Mesh</span></span>
<span class="line"><span style="color:#A6ACCD;">anu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">planeText</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> name: string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> scene: Scene</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options: </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> data: </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//With bind() returns Selection</span></span>
<span class="line"><span style="color:#A6ACCD;">anu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">planeText</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> scene: Scene</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options: </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> data: [</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//With bind() from a Selection returns a new Selection</span></span>
<span class="line"><span style="color:#A6ACCD;">Selection</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">planeText</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options: </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> data: [</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table><thead><tr><th>Property</th><th>Value</th><th>Default</th></tr></thead><tbody><tr><td>text</td><td>(string) text to be rendered</td><td>&#39;undefined&#39;</td></tr><tr><td>size</td><td>(number) scaling factor to be baked into the vertices</td><td>1</td></tr><tr><td>opacity</td><td>(number) opacity value between 0 and 1</td><td>1</td></tr><tr><td>color</td><td>(Color3) color value of the mesh material</td><td>Color3.White()</td></tr><tr><td>font</td><td>(json) json spec of the MSDF text font</td><td>roboto-standard.json</td></tr><tr><td>atlas</td><td>(png) texture atlas of the MSDF text font</td><td>roboto-standard.png</td></tr></tbody></table><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> options </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Color3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Green</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">anu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createPlaneText</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text2d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> scene)</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,9),r=l("iframe",{id:"inlineFrameExample",title:"Inline Frame Example",width:"100%",height:"400",src:"/anu/examples.html?example=text"},`
  `,-1);function c(i,D,d,y,F,h){return a(),e("div",null,[p,n(),r])}const u=s(o,[["render",c]]);export{C as __pageData,u as default};
