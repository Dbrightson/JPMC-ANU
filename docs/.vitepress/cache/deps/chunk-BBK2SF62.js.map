{
  "version": 3,
  "sources": ["../../../dev/core/src/XR/webXRFeaturesManager.ts"],
  "sourcesContent": ["import type { WebXRSessionManager } from \"./webXRSessionManager\";\r\nimport type { IDisposable } from \"../scene\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\n\r\n/**\r\n * Defining the interface required for a (webxr) feature\r\n */\r\nexport interface IWebXRFeature extends IDisposable {\r\n    /**\r\n     * Is this feature attached\r\n     */\r\n    attached: boolean;\r\n    /**\r\n     * Should auto-attach be disabled?\r\n     */\r\n    disableAutoAttach: boolean;\r\n\r\n    /**\r\n     * Attach the feature to the session\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @param force should attachment be forced (even when already attached)\r\n     * @returns true if successful.\r\n     */\r\n    attach(force?: boolean): boolean;\r\n    /**\r\n     * Detach the feature from the session\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    detach(): boolean;\r\n\r\n    /**\r\n     * This function will be executed during before enabling the feature and can be used to not-allow enabling it.\r\n     * Note that at this point the session has NOT started, so this is purely checking if the browser supports it\r\n     *\r\n     * @returns whether or not the feature is compatible in this environment\r\n     */\r\n    isCompatible(): boolean;\r\n\r\n    /**\r\n     * Was this feature disposed;\r\n     */\r\n    isDisposed: boolean;\r\n\r\n    /**\r\n     * The name of the native xr feature name, if applicable (like anchor, hit-test, or hand-tracking)\r\n     */\r\n    xrNativeFeatureName?: string;\r\n\r\n    /**\r\n     * A list of (Babylon WebXR) features this feature depends on\r\n     */\r\n    dependsOn?: string[];\r\n\r\n    /**\r\n     * If this feature requires to extend the XRSessionInit object, this function will return the partial XR session init object\r\n     */\r\n    getXRSessionInitExtension?: () => Promise<Partial<XRSessionInit>>;\r\n\r\n    /**\r\n     * Triggered when the feature is attached\r\n     */\r\n    onFeatureAttachObservable: Observable<IWebXRFeature>;\r\n    /**\r\n     * Triggered when the feature is detached\r\n     */\r\n    onFeatureDetachObservable: Observable<IWebXRFeature>;\r\n}\r\n\r\n/**\r\n * A list of the currently available features without referencing them\r\n */\r\nexport class WebXRFeatureName {\r\n    /**\r\n     * The name of the anchor system feature\r\n     */\r\n    public static readonly ANCHOR_SYSTEM = \"xr-anchor-system\";\r\n    /**\r\n     * The name of the background remover feature\r\n     */\r\n    public static readonly BACKGROUND_REMOVER = \"xr-background-remover\";\r\n    /**\r\n     * The name of the hit test feature\r\n     */\r\n    public static readonly HIT_TEST = \"xr-hit-test\";\r\n    /**\r\n     * The name of the mesh detection feature\r\n     */\r\n    public static readonly MESH_DETECTION = \"xr-mesh-detection\";\r\n    /**\r\n     * physics impostors for xr controllers feature\r\n     */\r\n    public static readonly PHYSICS_CONTROLLERS = \"xr-physics-controller\";\r\n    /**\r\n     * The name of the plane detection feature\r\n     */\r\n    public static readonly PLANE_DETECTION = \"xr-plane-detection\";\r\n    /**\r\n     * The name of the pointer selection feature\r\n     */\r\n    public static readonly POINTER_SELECTION = \"xr-controller-pointer-selection\";\r\n    /**\r\n     * The name of the teleportation feature\r\n     */\r\n    public static readonly TELEPORTATION = \"xr-controller-teleportation\";\r\n    /**\r\n     * The name of the feature points feature.\r\n     */\r\n    public static readonly FEATURE_POINTS = \"xr-feature-points\";\r\n    /**\r\n     * The name of the hand tracking feature.\r\n     */\r\n    public static readonly HAND_TRACKING = \"xr-hand-tracking\";\r\n    /**\r\n     * The name of the image tracking feature\r\n     */\r\n    public static readonly IMAGE_TRACKING = \"xr-image-tracking\";\r\n    /**\r\n     * The name of the near interaction feature\r\n     */\r\n    public static readonly NEAR_INTERACTION = \"xr-near-interaction\";\r\n    /**\r\n     * The name of the DOM overlay feature\r\n     */\r\n    public static readonly DOM_OVERLAY = \"xr-dom-overlay\";\r\n    /**\r\n     * The name of the movement feature\r\n     */\r\n    public static readonly MOVEMENT = \"xr-controller-movement\";\r\n    /**\r\n     * The name of the light estimation feature\r\n     */\r\n    public static readonly LIGHT_ESTIMATION = \"xr-light-estimation\";\r\n    /**\r\n     * The name of the eye tracking feature\r\n     */\r\n    public static readonly EYE_TRACKING = \"xr-eye-tracking\";\r\n    /**\r\n     * The name of the walking locomotion feature\r\n     */\r\n    public static readonly WALKING_LOCOMOTION = \"xr-walking-locomotion\";\r\n    /**\r\n     * The name of the composition layers feature\r\n     */\r\n    public static readonly LAYERS = \"xr-layers\";\r\n    /**\r\n     * The name of the depth sensing feature\r\n     */\r\n    public static readonly DEPTH_SENSING = \"xr-depth-sensing\";\r\n    /**\r\n     * The name of the WebXR Space Warp feature\r\n     */\r\n    public static readonly SPACE_WARP = \"xr-space-warp\";\r\n    /**\r\n     * The name of the WebXR Raw Camera Access feature\r\n     */\r\n    public static readonly RAW_CAMERA_ACCESS = \"xr-raw-camera-access\";\r\n}\r\n\r\n/**\r\n * Defining the constructor of a feature. Used to register the modules.\r\n */\r\nexport type WebXRFeatureConstructor = (xrSessionManager: WebXRSessionManager, options?: any) => () => IWebXRFeature;\r\n\r\n/**\r\n * The WebXR features manager is responsible of enabling or disabling features required for the current XR session.\r\n * It is mainly used in AR sessions.\r\n *\r\n * A feature can have a version that is defined by Babylon (and does not correspond with the webxr version).\r\n */\r\nexport class WebXRFeaturesManager implements IDisposable {\r\n    private static readonly _AvailableFeatures: {\r\n        [name: string]: {\r\n            stable: number;\r\n            latest: number;\r\n            [version: number]: WebXRFeatureConstructor;\r\n        };\r\n    } = {};\r\n\r\n    private _features: {\r\n        [name: string]: {\r\n            featureImplementation: IWebXRFeature;\r\n            version: number;\r\n            enabled: boolean;\r\n            required: boolean;\r\n        };\r\n    } = {};\r\n\r\n    /**\r\n     * The key is the feature to check and the value is the feature that conflicts.\r\n     */\r\n    private static readonly _ConflictingFeatures: { [key: string]: string } = {\r\n        [WebXRFeatureName.TELEPORTATION]: WebXRFeatureName.MOVEMENT,\r\n        [WebXRFeatureName.MOVEMENT]: WebXRFeatureName.TELEPORTATION,\r\n    };\r\n\r\n    /**\r\n     * constructs a new features manages.\r\n     *\r\n     * @param _xrSessionManager an instance of WebXRSessionManager\r\n     */\r\n    constructor(private _xrSessionManager: WebXRSessionManager) {\r\n        // when session starts / initialized - attach\r\n        this._xrSessionManager.onXRSessionInit.add(() => {\r\n            this.getEnabledFeatures().forEach((featureName) => {\r\n                const feature = this._features[featureName];\r\n                if (feature.enabled && !feature.featureImplementation.attached && !feature.featureImplementation.disableAutoAttach) {\r\n                    this.attachFeature(featureName);\r\n                }\r\n            });\r\n        });\r\n\r\n        // when session ends - detach\r\n        this._xrSessionManager.onXRSessionEnded.add(() => {\r\n            this.getEnabledFeatures().forEach((featureName) => {\r\n                const feature = this._features[featureName];\r\n                if (feature.enabled && feature.featureImplementation.attached) {\r\n                    // detach, but don't disable!\r\n                    this.detachFeature(featureName);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Used to register a module. After calling this function a developer can use this feature in the scene.\r\n     * Mainly used internally.\r\n     *\r\n     * @param featureName the name of the feature to register\r\n     * @param constructorFunction the function used to construct the module\r\n     * @param version the (babylon) version of the module\r\n     * @param stable is that a stable version of this module\r\n     */\r\n    public static AddWebXRFeature(featureName: string, constructorFunction: WebXRFeatureConstructor, version: number = 1, stable: boolean = false) {\r\n        this._AvailableFeatures[featureName] = this._AvailableFeatures[featureName] || { latest: version };\r\n        if (version > this._AvailableFeatures[featureName].latest) {\r\n            this._AvailableFeatures[featureName].latest = version;\r\n        }\r\n        if (stable) {\r\n            this._AvailableFeatures[featureName].stable = version;\r\n        }\r\n        this._AvailableFeatures[featureName][version] = constructorFunction;\r\n    }\r\n\r\n    /**\r\n     * Returns a constructor of a specific feature.\r\n     *\r\n     * @param featureName the name of the feature to construct\r\n     * @param version the version of the feature to load\r\n     * @param xrSessionManager the xrSessionManager. Used to construct the module\r\n     * @param options optional options provided to the module.\r\n     * @returns a function that, when called, will return a new instance of this feature\r\n     */\r\n    public static ConstructFeature(featureName: string, version: number = 1, xrSessionManager: WebXRSessionManager, options?: any): () => IWebXRFeature {\r\n        const constructorFunction = this._AvailableFeatures[featureName][version];\r\n        if (!constructorFunction) {\r\n            // throw an error? return nothing?\r\n            throw new Error(\"feature not found\");\r\n        }\r\n\r\n        return constructorFunction(xrSessionManager, options);\r\n    }\r\n\r\n    /**\r\n     * Can be used to return the list of features currently registered\r\n     *\r\n     * @returns an Array of available features\r\n     */\r\n    public static GetAvailableFeatures() {\r\n        return Object.keys(this._AvailableFeatures);\r\n    }\r\n\r\n    /**\r\n     * Gets the versions available for a specific feature\r\n     * @param featureName the name of the feature\r\n     * @returns an array with the available versions\r\n     */\r\n    public static GetAvailableVersions(featureName: string) {\r\n        return Object.keys(this._AvailableFeatures[featureName]);\r\n    }\r\n\r\n    /**\r\n     * Return the latest unstable version of this feature\r\n     * @param featureName the name of the feature to search\r\n     * @returns the version number. if not found will return -1\r\n     */\r\n    public static GetLatestVersionOfFeature(featureName: string): number {\r\n        return (this._AvailableFeatures[featureName] && this._AvailableFeatures[featureName].latest) || -1;\r\n    }\r\n\r\n    /**\r\n     * Return the latest stable version of this feature\r\n     * @param featureName the name of the feature to search\r\n     * @returns the version number. if not found will return -1\r\n     */\r\n    public static GetStableVersionOfFeature(featureName: string): number {\r\n        return (this._AvailableFeatures[featureName] && this._AvailableFeatures[featureName].stable) || -1;\r\n    }\r\n\r\n    /**\r\n     * Attach a feature to the current session. Mainly used when session started to start the feature effect.\r\n     * Can be used during a session to start a feature\r\n     * @param featureName the name of feature to attach\r\n     */\r\n    public attachFeature(featureName: string) {\r\n        const feature = this._features[featureName];\r\n        if (feature && feature.enabled && !feature.featureImplementation.attached) {\r\n            const attached = feature.featureImplementation.attach();\r\n            if (!attached) {\r\n                Tools.Warn(`Feature ${featureName} failed to attach`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Can be used inside a session or when the session ends to detach a specific feature\r\n     * @param featureName the name of the feature to detach\r\n     */\r\n    public detachFeature(featureName: string) {\r\n        const feature = this._features[featureName];\r\n        if (feature && feature.featureImplementation.attached) {\r\n            const detached = feature.featureImplementation.detach();\r\n            if (!detached) {\r\n                Tools.Warn(`Feature ${featureName} failed to detach`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used to disable an already-enabled feature\r\n     * The feature will be disposed and will be recreated once enabled.\r\n     * @param featureName the feature to disable\r\n     * @returns true if disable was successful\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public disableFeature(featureName: string | { Name: string }): boolean {\r\n        const name = typeof featureName === \"string\" ? featureName : featureName.Name;\r\n        const feature = this._features[name];\r\n        if (feature && feature.enabled) {\r\n            feature.enabled = false;\r\n            this.detachFeature(name);\r\n            feature.featureImplementation.dispose();\r\n            delete this._features[name];\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * dispose this features manager\r\n     */\r\n    public dispose(): void {\r\n        this.getEnabledFeatures().forEach((feature) => {\r\n            this.disableFeature(feature);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Enable a feature using its name and a version. This will enable it in the scene, and will be responsible to attach it when the session starts.\r\n     * If used twice, the old version will be disposed and a new one will be constructed. This way you can re-enable with different configuration.\r\n     *\r\n     * @param featureName the name of the feature to load or the class of the feature\r\n     * @param version optional version to load. if not provided the latest version will be enabled\r\n     * @param moduleOptions options provided to the module. Ses the module documentation / constructor\r\n     * @param attachIfPossible if set to true (default) the feature will be automatically attached, if it is currently possible\r\n     * @param required is this feature required to the app. If set to true the session init will fail if the feature is not available.\r\n     * @returns a new constructed feature or throws an error if feature not found or conflicts with another enabled feature.\r\n     */\r\n    public enableFeature(\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        featureName: string | { Name: string },\r\n        version: number | string = \"latest\",\r\n        moduleOptions: any = {},\r\n        attachIfPossible: boolean = true,\r\n        required: boolean = true\r\n    ): IWebXRFeature {\r\n        const name = typeof featureName === \"string\" ? featureName : featureName.Name;\r\n        let versionToLoad = 0;\r\n        if (typeof version === \"string\") {\r\n            if (!version) {\r\n                throw new Error(`Error in provided version - ${name} (${version})`);\r\n            }\r\n            if (version === \"stable\") {\r\n                versionToLoad = WebXRFeaturesManager.GetStableVersionOfFeature(name);\r\n            } else if (version === \"latest\") {\r\n                versionToLoad = WebXRFeaturesManager.GetLatestVersionOfFeature(name);\r\n            } else {\r\n                // try loading the number the string represents\r\n                versionToLoad = +version;\r\n            }\r\n            if (versionToLoad === -1 || isNaN(versionToLoad)) {\r\n                throw new Error(`feature not found - ${name} (${version})`);\r\n            }\r\n        } else {\r\n            versionToLoad = version;\r\n        }\r\n\r\n        // check if there is a feature conflict\r\n        const conflictingFeature = WebXRFeaturesManager._ConflictingFeatures[name];\r\n        if (conflictingFeature !== undefined && this.getEnabledFeatures().indexOf(conflictingFeature) !== -1) {\r\n            throw new Error(`Feature ${name} cannot be enabled while ${conflictingFeature} is enabled.`);\r\n        }\r\n\r\n        // check if already initialized\r\n        const feature = this._features[name];\r\n        const constructFunction = WebXRFeaturesManager.ConstructFeature(name, versionToLoad, this._xrSessionManager, moduleOptions);\r\n        if (!constructFunction) {\r\n            // report error?\r\n            throw new Error(`feature not found - ${name}`);\r\n        }\r\n\r\n        /* If the feature is already enabled, detach and dispose it, and create a new one */\r\n        if (feature) {\r\n            this.disableFeature(name);\r\n        }\r\n\r\n        const constructed = constructFunction();\r\n        if (constructed.dependsOn) {\r\n            const dependentsFound = constructed.dependsOn.every((featureName) => !!this._features[featureName]);\r\n            if (!dependentsFound) {\r\n                throw new Error(`Dependant features missing. Make sure the following features are enabled - ${constructed.dependsOn.join(\", \")}`);\r\n            }\r\n        }\r\n        if (constructed.isCompatible()) {\r\n            this._features[name] = {\r\n                featureImplementation: constructed,\r\n                enabled: true,\r\n                version: versionToLoad,\r\n                required,\r\n            };\r\n\r\n            if (attachIfPossible) {\r\n                // if session started already, request and enable\r\n                if (this._xrSessionManager.session && !this._features[name].featureImplementation.attached) {\r\n                    // enable feature\r\n                    this.attachFeature(name);\r\n                }\r\n            } else {\r\n                // disable auto-attach when session starts\r\n                this._features[name].featureImplementation.disableAutoAttach = true;\r\n            }\r\n\r\n            return this._features[name].featureImplementation;\r\n        } else {\r\n            if (required) {\r\n                throw new Error(\"required feature not compatible\");\r\n            } else {\r\n                Tools.Warn(`Feature ${name} not compatible with the current environment/browser and was not enabled.`);\r\n                return constructed;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the implementation of an enabled feature.\r\n     * @param featureName the name of the feature to load\r\n     * @returns the feature class, if found\r\n     */\r\n    public getEnabledFeature(featureName: string): IWebXRFeature {\r\n        return this._features[featureName] && this._features[featureName].featureImplementation;\r\n    }\r\n\r\n    /**\r\n     * Get the list of enabled features\r\n     * @returns an array of enabled features\r\n     */\r\n    public getEnabledFeatures() {\r\n        return Object.keys(this._features);\r\n    }\r\n\r\n    /**\r\n     * This function will extend the session creation configuration object with enabled features.\r\n     * If, for example, the anchors feature is enabled, it will be automatically added to the optional or required features list,\r\n     * according to the defined \"required\" variable, provided during enableFeature call\r\n     * @param xrSessionInit the xr Session init object to extend\r\n     *\r\n     * @returns an extended XRSessionInit object\r\n     */\r\n    public async _extendXRSessionInitObject(xrSessionInit: XRSessionInit): Promise<XRSessionInit> {\r\n        const enabledFeatures = this.getEnabledFeatures();\r\n        for (const featureName of enabledFeatures) {\r\n            const feature = this._features[featureName];\r\n            const nativeName = feature.featureImplementation.xrNativeFeatureName;\r\n            if (nativeName) {\r\n                if (feature.required) {\r\n                    xrSessionInit.requiredFeatures = xrSessionInit.requiredFeatures || [];\r\n                    if (xrSessionInit.requiredFeatures.indexOf(nativeName) === -1) {\r\n                        xrSessionInit.requiredFeatures.push(nativeName);\r\n                    }\r\n                } else {\r\n                    xrSessionInit.optionalFeatures = xrSessionInit.optionalFeatures || [];\r\n                    if (xrSessionInit.optionalFeatures.indexOf(nativeName) === -1) {\r\n                        xrSessionInit.optionalFeatures.push(nativeName);\r\n                    }\r\n                }\r\n            }\r\n            if (feature.featureImplementation.getXRSessionInitExtension) {\r\n                const extended = await feature.featureImplementation.getXRSessionInitExtension();\r\n                xrSessionInit = {\r\n                    ...xrSessionInit,\r\n                    ...extended,\r\n                };\r\n            }\r\n        }\r\n        return xrSessionInit;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["featureName"]
}
