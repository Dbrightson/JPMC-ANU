{
  "version": 3,
  "sources": ["../../../dev/core/src/XR/features/WebXRAbstractFeature.ts", "../../../dev/core/src/Misc/coroutine.ts", "../../../dev/core/src/Collisions/intersectionInfo.ts", "../../../dev/core/src/Culling/boundingBox.ts", "../../../dev/core/src/Culling/boundingSphere.ts", "../../../dev/core/src/Culling/boundingInfo.ts", "../../../dev/core/src/Maths/math.functions.ts", "../../../dev/core/src/Meshes/subMesh.ts", "../../../dev/core/src/Meshes/mesh.vertexData.ts", "../../../dev/core/src/node.ts", "../../../dev/core/src/Maths/math.axis.ts", "../../../dev/core/src/Meshes/transformNode.ts", "../../../dev/core/src/Collisions/meshCollisionData.ts", "../../../dev/core/src/Meshes/abstractMesh.ts", "../../../dev/core/src/Maths/math.viewport.ts", "../../../dev/core/src/Cameras/camera.ts", "../../../dev/core/src/Loading/sceneLoaderFlags.ts", "../../../dev/core/src/Compat/compatibilityOptions.ts", "../../../dev/core/src/Meshes/geometry.ts", "../../../dev/core/src/Materials/materialStencilState.ts", "../../../dev/core/src/Materials/materialPluginEvent.ts", "../../../dev/core/src/Materials/clipPlaneMaterialHelper.ts", "../../../dev/core/src/Materials/materialHelper.functions.ts", "../../../dev/core/src/Materials/material.ts", "../../../dev/core/src/Materials/multiMaterial.ts", "../../../dev/core/src/Meshes/meshLODLevel.ts", "../../../dev/core/src/Meshes/mesh.ts", "../../../dev/core/src/Physics/v1/physicsJoint.ts", "../../../dev/core/src/Physics/v1/physicsImpostor.ts", "../../../dev/core/src/Loading/sceneLoader.ts", "../../../dev/core/src/Materials/pushMaterial.ts", "../../../dev/core/src/Materials/Node/Enums/nodeMaterialBlockConnectionPointTypes.ts", "../../../dev/core/src/Materials/Node/Enums/nodeMaterialBlockTargets.ts", "../../../dev/core/src/Materials/Node/nodeMaterialBuildState.ts", "../../../dev/core/src/Materials/Node/nodeMaterialBuildStateSharedData.ts", "../../../dev/core/src/Materials/materialDefines.ts", "../../../dev/core/src/Materials/Node/nodeMaterialBlockConnectionPoint.ts", "../../../dev/core/src/Materials/Node/nodeMaterialBlock.ts", "../../../dev/core/src/Materials/Node/Blocks/transformBlock.ts", "../../../dev/core/src/Materials/Node/Blocks/Vertex/vertexOutputBlock.ts", "../../../dev/core/src/Decorators/nodeDecorator.ts", "../../../dev/core/src/Materials/Node/Blocks/Fragment/fragmentOutputBlock.ts", "../../../dev/core/src/Materials/Node/Enums/nodeMaterialBlockConnectionPointMode.ts", "../../../dev/core/src/Materials/Node/Enums/nodeMaterialSystemValues.ts", "../../../dev/core/src/Maths/math.path.ts", "../../../dev/core/src/Maths/math.size.ts", "../../../dev/core/src/Maths/math.vertexFormat.ts", "../../../dev/core/src/Maths/math.ts", "../../../dev/core/src/Materials/Node/Blocks/Input/animatedInputBlockTypes.ts", "../../../dev/core/src/Materials/Node/Blocks/Input/inputBlock.ts", "../../../dev/core/src/Materials/Textures/thinTexture.ts", "../../../dev/core/src/Materials/Textures/baseTexture.ts", "../../../dev/core/src/Misc/copyTools.ts", "../../../dev/core/src/Materials/Textures/texture.ts", "../../../dev/core/src/Materials/Node/Blocks/Dual/currentScreenBlock.ts", "../../../dev/core/src/Materials/Node/Blocks/Particle/particleTextureBlock.ts", "../../../dev/core/src/Materials/Node/Blocks/Particle/particleRampGradientBlock.ts", "../../../dev/core/src/Materials/Node/Blocks/Particle/particleBlendMultiplyBlock.ts", "../../../dev/core/src/Materials/effectFallbacks.ts", "../../../dev/core/src/Shaders/postprocess.vertex.ts", "../../../dev/core/src/Engines/renderTargetWrapper.ts", "../../../dev/core/src/Engines/WebGL/webGLRenderTargetWrapper.ts", "../../../dev/core/src/Engines/Extensions/engine.renderTarget.ts", "../../../dev/core/src/PostProcesses/postProcess.ts", "../../../dev/core/src/Materials/Node/Blocks/vectorMergerBlock.ts", "../../../dev/core/src/Materials/Node/Blocks/remapBlock.ts", "../../../dev/core/src/Materials/Node/Blocks/multiplyBlock.ts", "../../../dev/core/src/Materials/Node/Enums/nodeMaterialModes.ts", "../../../dev/core/src/Materials/imageProcessingConfiguration.defines.ts", "../../../dev/core/src/Particles/baseParticleSystem.ts", "../../../dev/core/src/Materials/Node/Blocks/colorSplitterBlock.ts", "../../../dev/core/src/Engines/Extensions/engine.renderTargetCube.ts", "../../../dev/core/src/Materials/effectRenderer.ts", "../../../dev/core/src/Shaders/pass.fragment.ts", "../../../dev/core/src/Misc/dumpTools.ts", "../../../dev/core/src/Materials/Textures/renderTargetTexture.ts", "../../../dev/core/src/Materials/Textures/Procedurals/proceduralTextureSceneComponent.ts", "../../../dev/core/src/Shaders/procedural.vertex.ts", "../../../dev/core/src/Materials/Textures/Procedurals/proceduralTexture.ts", "../../../dev/core/src/Materials/Node/Blocks/trigonometryBlock.ts", "../../../dev/core/src/Materials/Node/nodeMaterial.ts", "../../../dev/core/src/Meshes/Builders/icoSphereBuilder.ts", "../../../dev/core/src/XR/features/WebXRHandTracking.ts"],
  "sourcesContent": ["import type { IWebXRFeature } from \"../webXRFeaturesManager\";\r\nimport type { Observer, EventState } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\n/**\r\n * This is the base class for all WebXR features.\r\n * Since most features require almost the same resources and callbacks, this class can be used to simplify the development\r\n * Note that since the features manager is using the `IWebXRFeature` you are in no way obligated to use this class\r\n */\r\nexport abstract class WebXRAbstractFeature implements IWebXRFeature {\r\n    private _attached: boolean = false;\r\n    private _removeOnDetach: {\r\n        observer: Nullable<Observer<any>>;\r\n        observable: Observable<any>;\r\n    }[] = [];\r\n\r\n    /**\r\n     * Is this feature disposed?\r\n     */\r\n    public isDisposed: boolean = false;\r\n\r\n    /**\r\n     * Should auto-attach be disabled?\r\n     */\r\n    public disableAutoAttach: boolean = false;\r\n\r\n    protected _xrNativeFeatureName: string = \"\";\r\n\r\n    /**\r\n     * The name of the native xr feature name (like anchor, hit-test, or hand-tracking)\r\n     */\r\n    public get xrNativeFeatureName() {\r\n        return this._xrNativeFeatureName;\r\n    }\r\n\r\n    public set xrNativeFeatureName(name: string) {\r\n        // check if feature was initialized while in session but needs to be initialized before the session starts\r\n        if (!this._xrSessionManager.isNative && name && this._xrSessionManager.inXRSession && this._xrSessionManager.enabledFeatures?.indexOf(name) === -1) {\r\n            Logger.Warn(`The feature ${name} needs to be enabled before starting the XR session. Note - It is still possible it is not supported.`);\r\n        }\r\n        this._xrNativeFeatureName = name;\r\n    }\r\n\r\n    /**\r\n     * Observers registered here will be executed when the feature is attached\r\n     */\r\n    public onFeatureAttachObservable: Observable<IWebXRFeature> = new Observable();\r\n    /**\r\n     * Observers registered here will be executed when the feature is detached\r\n     */\r\n    public onFeatureDetachObservable: Observable<IWebXRFeature> = new Observable();\r\n\r\n    /**\r\n     * The dependencies of this feature, if any\r\n     */\r\n    public dependsOn?: string[];\r\n\r\n    /**\r\n     * Construct a new (abstract) WebXR feature\r\n     * @param _xrSessionManager the xr session manager for this feature\r\n     */\r\n    constructor(protected _xrSessionManager: WebXRSessionManager) {}\r\n\r\n    /**\r\n     * Is this feature attached\r\n     */\r\n    public get attached() {\r\n        return this._attached;\r\n    }\r\n\r\n    /**\r\n     * attach this feature\r\n     *\r\n     * @param force should attachment be forced (even when already attached)\r\n     * @returns true if successful, false is failed or already attached\r\n     */\r\n    public attach(force?: boolean): boolean {\r\n        // do not attach a disposed feature\r\n        if (this.isDisposed) {\r\n            return false;\r\n        }\r\n        if (!force) {\r\n            if (this.attached) {\r\n                return false;\r\n            }\r\n        } else {\r\n            if (this.attached) {\r\n                // detach first, to be sure\r\n                this.detach();\r\n            }\r\n        }\r\n\r\n        // if this is a native WebXR feature, check if it is enabled on the session\r\n        // For now only check if not using babylon native\r\n        // vision OS doesn't support the enabledFeatures array, so just warn instead of failing\r\n        if (!this._xrSessionManager.enabledFeatures) {\r\n            Logger.Warn(\"session.enabledFeatures is not available on this device. It is possible that this feature is not supported.\");\r\n        } else if (!this._xrSessionManager.isNative && this.xrNativeFeatureName && this._xrSessionManager.enabledFeatures.indexOf(this.xrNativeFeatureName) === -1) {\r\n            return false;\r\n        }\r\n\r\n        this._attached = true;\r\n        this._addNewAttachObserver(this._xrSessionManager.onXRFrameObservable, (frame) => this._onXRFrame(frame));\r\n        this.onFeatureAttachObservable.notifyObservers(this);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * detach this feature.\r\n     *\r\n     * @returns true if successful, false if failed or already detached\r\n     */\r\n    public detach(): boolean {\r\n        if (!this._attached) {\r\n            this.disableAutoAttach = true;\r\n            return false;\r\n        }\r\n        this._attached = false;\r\n        this._removeOnDetach.forEach((toRemove) => {\r\n            toRemove.observable.remove(toRemove.observer);\r\n        });\r\n        this.onFeatureDetachObservable.notifyObservers(this);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        this.detach();\r\n        this.isDisposed = true;\r\n        this.onFeatureAttachObservable.clear();\r\n        this.onFeatureDetachObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * This function will be executed during before enabling the feature and can be used to not-allow enabling it.\r\n     * Note that at this point the session has NOT started, so this is purely checking if the browser supports it\r\n     *\r\n     * @returns whether or not the feature is compatible in this environment\r\n     */\r\n    public isCompatible(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This is used to register callbacks that will automatically be removed when detach is called.\r\n     * @param observable the observable to which the observer will be attached\r\n     * @param callback the callback to register\r\n     * @param insertFirst should the callback be executed as soon as it is registered\r\n     */\r\n    protected _addNewAttachObserver<T>(observable: Observable<T>, callback: (eventData: T, eventState: EventState) => void, insertFirst?: boolean) {\r\n        this._removeOnDetach.push({\r\n            observable,\r\n            observer: observable.add(callback, undefined, insertFirst),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Code in this function will be executed on each xrFrame received from the browser.\r\n     * This function will not execute after the feature is detached.\r\n     * @param _xrFrame the current frame\r\n     */\r\n    protected abstract _onXRFrame(_xrFrame: XRFrame): void;\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\n// \"Coroutines are computer program components that generalize subroutines for non-preemptive multitasking, by allowing execution to be suspended and resumed.\"\r\n// https://en.wikipedia.org/wiki/Coroutine\r\n\r\n// In this implementation, coroutines are typically created via generator functions (function* with yield statements).\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\r\n\r\n// In this implementation, the generator function (possibly parameterized) is referred to as a coroutine factory, and the returned iterator is referred to as the coroutine.\r\n// Technically yielding generator functions are not required - anything that implements the contract of Coroutine<T> can be run as a coroutine.\r\n\r\n// The coroutine is started with the first call to next on the iterator, it is suspended with yield statements, and it is resumed with additional calls to next on the iterator.\r\n// To create an object satisfying the Coroutine<T> contract with a generator function, it must not yield values, but rather only void via a plain \"yield;\" statement.\r\n// Coroutines can call other coroutines via:\r\n// 1. yield* someOtherCoroutine(); // If the called coroutine does not return a value\r\n// 2. const result = yield* someOtherCoroutine(); // If the called coroutine returns a value\r\n\r\n// Coroutines are run with the runCoroutine function, which takes a Coroutine<T>, a CoroutineScheduler<T>, and a success and error callback.\r\n// A scheduler is responsible for scheduling the next step of a coroutine, either synchronously or asynchronously.\r\n\r\n/**\r\n * A Coroutine<T> is the intersection of:\r\n * 1. An Iterator that yields void, returns a T, and is not passed values with calls to next.\r\n * 2. An IterableIterator of void (since it only yields void).\r\n */\r\ntype CoroutineBase<TStep, TReturn> = Iterator<TStep, TReturn, void> & IterableIterator<TStep>;\r\n/** @internal */\r\nexport type Coroutine<T> = CoroutineBase<void, T>;\r\n/** @internal */\r\nexport type AsyncCoroutine<T> = CoroutineBase<void | Promise<void>, T>;\r\n\r\n// A CoroutineStep<T> represents a single step of a coroutine, and is an IteratorResult as returned from Coroutine<T>.next().\r\n/** @internal */\r\nexport type CoroutineStep<T> = IteratorResult<void, T>;\r\n\r\n// A CoroutineScheduler<T> is responsible for scheduling the call to Coroutine<T>.next and invokes the success or error callback after next is called.\r\n/** @internal */\r\nexport type CoroutineScheduler<T> = (coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) => void;\r\n\r\n// The inline scheduler simply steps the coroutine synchronously. This is useful for running a coroutine synchronously, and also as a helper function for other schedulers.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function inlineScheduler<T>(coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) {\r\n    try {\r\n        const step = coroutine.next();\r\n\r\n        if (step.done) {\r\n            onStep(step);\r\n        } else if (!step.value) {\r\n            // NOTE: The properties of step have been narrowed, but the type of step itself is not narrowed, so the cast below is the most type safe way to deal with this without instantiating a new object to hold the values.\r\n            onStep(step as { done: typeof step.done; value: typeof step.value });\r\n        } else {\r\n            step.value.then(() => {\r\n                step.value = undefined;\r\n                onStep(step as { done: typeof step.done; value: typeof step.value });\r\n            }, onError);\r\n        }\r\n    } catch (error) {\r\n        onError(error);\r\n    }\r\n}\r\n\r\n// The yielding scheduler steps the coroutine synchronously until the specified time interval has elapsed, then yields control so other operations can be performed.\r\n// A single instance of a yielding scheduler could be shared across multiple coroutines to yield when their collective work exceeds the threshold.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function createYieldingScheduler<T>(yieldAfterMS = 25) {\r\n    let startTime: number | undefined;\r\n    return (coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) => {\r\n        const currentTime = performance.now();\r\n\r\n        if (startTime === undefined || currentTime - startTime > yieldAfterMS) {\r\n            // If this is the first coroutine step, or if the time interval has elapsed, record a new start time, and schedule the coroutine step to happen later, effectively yielding control of the execution context.\r\n            startTime = currentTime;\r\n            setTimeout(() => {\r\n                inlineScheduler(coroutine, onStep, onError);\r\n            }, 0);\r\n        } else {\r\n            // Otherwise it is not time to yield yet, so step the coroutine synchronously.\r\n            inlineScheduler(coroutine, onStep, onError);\r\n        }\r\n    };\r\n}\r\n\r\n// Runs the specified coroutine with the specified scheduler. The success or error callback will be invoked when the coroutine finishes.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function runCoroutine<T>(\r\n    coroutine: AsyncCoroutine<T>,\r\n    scheduler: CoroutineScheduler<T>,\r\n    onSuccess: (result: T) => void,\r\n    onError: (error: any) => void,\r\n    abortSignal?: AbortSignal\r\n) {\r\n    const resume = () => {\r\n        let reschedule: boolean | undefined;\r\n\r\n        const onStep = (stepResult: CoroutineStep<T>) => {\r\n            if (stepResult.done) {\r\n                // If the coroutine is done, report success.\r\n                onSuccess(stepResult.value);\r\n            } else {\r\n                // If the coroutine is not done, resume the coroutine (via the scheduler).\r\n                if (reschedule === undefined) {\r\n                    // If reschedule is undefined at this point, then the coroutine must have stepped synchronously, so just flag another loop iteration.\r\n                    reschedule = true;\r\n                } else {\r\n                    // If reschedule is defined at this point, then the coroutine must have stepped asynchronously, so call resume to restart the step loop.\r\n                    resume();\r\n                }\r\n            }\r\n        };\r\n\r\n        do {\r\n            reschedule = undefined;\r\n\r\n            if (!abortSignal || !abortSignal.aborted) {\r\n                scheduler(coroutine, onStep, onError);\r\n            } else {\r\n                onError(new Error(\"Aborted\"));\r\n            }\r\n\r\n            if (reschedule === undefined) {\r\n                // If reschedule is undefined at this point, then the coroutine must have stepped asynchronously, so stop looping and let the coroutine be resumed later.\r\n                reschedule = false;\r\n            }\r\n        } while (reschedule);\r\n    };\r\n\r\n    resume();\r\n}\r\n\r\n// Runs the specified coroutine synchronously.\r\n/**\r\n * @internal\r\n */\r\nexport function runCoroutineSync<T>(coroutine: Coroutine<T>, abortSignal?: AbortSignal): T {\r\n    // Run the coroutine with the inline scheduler, storing the returned value, or re-throwing the error (since the error callback will be called synchronously by the inline scheduler).\r\n    let result: T | undefined;\r\n    runCoroutine(\r\n        coroutine,\r\n        inlineScheduler,\r\n        (r: T) => (result = r),\r\n        (e: any) => {\r\n            throw e;\r\n        },\r\n        abortSignal\r\n    );\r\n\r\n    // Synchronously return the result of the coroutine.\r\n    return result!;\r\n}\r\n\r\n// Runs the specified coroutine asynchronously with the specified scheduler.\r\n/**\r\n * @internal\r\n */\r\nexport function runCoroutineAsync<T>(coroutine: AsyncCoroutine<T>, scheduler: CoroutineScheduler<T>, abortSignal?: AbortSignal): Promise<T> {\r\n    // Run the coroutine with a yielding scheduler, resolving or rejecting the result promise when the coroutine finishes.\r\n    return new Promise((resolve, reject) => {\r\n        runCoroutine(coroutine, scheduler, resolve, reject, abortSignal);\r\n    });\r\n}\r\n\r\n/**\r\n * Given a function that returns a Coroutine<T>, produce a function with the same parameters that returns a T.\r\n * The returned function runs the coroutine synchronously.\r\n * @param coroutineFactory A function that returns a Coroutine<T>.\r\n * @param abortSignal\r\n * @returns A function that runs the coroutine synchronously.\r\n * @internal\r\n */\r\nexport function makeSyncFunction<TParams extends unknown[], TReturn>(\r\n    coroutineFactory: (...params: TParams) => Coroutine<TReturn>,\r\n    abortSignal?: AbortSignal\r\n): (...params: TParams) => TReturn {\r\n    return (...params: TParams) => {\r\n        // Run the coroutine synchronously.\r\n        return runCoroutineSync(coroutineFactory(...params), abortSignal);\r\n    };\r\n}\r\n\r\n/**\r\n * Given a function that returns a Coroutine<T>, product a function with the same parameters that returns a Promise<T>.\r\n * The returned function runs the coroutine asynchronously, yield control of the execution context occasionally to enable a more responsive experience.\r\n * @param coroutineFactory A function that returns a Coroutine<T>.\r\n * @param scheduler\r\n * @param abortSignal\r\n * @returns A function that runs the coroutine asynchronously.\r\n * @internal\r\n */\r\nexport function makeAsyncFunction<TParams extends unknown[], TReturn>(\r\n    coroutineFactory: (...params: TParams) => AsyncCoroutine<TReturn>,\r\n    scheduler: CoroutineScheduler<TReturn>,\r\n    abortSignal?: AbortSignal\r\n): (...params: TParams) => Promise<TReturn> {\r\n    return (...params: TParams) => {\r\n        // Run the coroutine asynchronously.\r\n        return runCoroutineAsync(coroutineFactory(...params), scheduler, abortSignal);\r\n    };\r\n}\r\n", "import type { Nullable } from \"../types\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class IntersectionInfo {\r\n    public faceId = 0;\r\n    public subMeshId = 0;\r\n\r\n    constructor(\r\n        public bu: Nullable<number>,\r\n        public bv: Nullable<number>,\r\n        public distance: number\r\n    ) {}\r\n}\r\n", "import type { DeepImmutable, Nullable } from \"../types\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { BoundingSphere } from \"../Culling/boundingSphere\";\r\n\r\nimport type { ICullable } from \"./boundingInfo\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\nimport type { DrawWrapper } from \"../Materials/drawWrapper\";\r\n\r\n/**\r\n * Class used to store bounding box information\r\n */\r\nexport class BoundingBox implements ICullable {\r\n    /**\r\n     * Gets the 8 vectors representing the bounding box in local space\r\n     */\r\n    public readonly vectors: Vector3[] = ArrayTools.BuildArray(8, Vector3.Zero);\r\n    /**\r\n     * Gets the center of the bounding box in local space\r\n     */\r\n    public readonly center: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the center of the bounding box in world space\r\n     */\r\n    public readonly centerWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the extend size in local space\r\n     */\r\n    public readonly extendSize: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the extend size in world space\r\n     */\r\n    public readonly extendSizeWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the OBB (object bounding box) directions\r\n     */\r\n    public readonly directions: Vector3[] = ArrayTools.BuildArray(3, Vector3.Zero);\r\n    /**\r\n     * Gets the 8 vectors representing the bounding box in world space\r\n     */\r\n    public readonly vectorsWorld: Vector3[] = ArrayTools.BuildArray(8, Vector3.Zero);\r\n    /**\r\n     * Gets the minimum vector in world space\r\n     */\r\n    public readonly minimumWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in world space\r\n     */\r\n    public readonly maximumWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the minimum vector in local space\r\n     */\r\n    public readonly minimum: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in local space\r\n     */\r\n    public readonly maximum: Vector3 = Vector3.Zero();\r\n\r\n    private _worldMatrix: DeepImmutable<Matrix>;\r\n    private static readonly _TmpVector3 = ArrayTools.BuildArray(3, Vector3.Zero);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _tag: number;\r\n\r\n    /** @internal */\r\n    public _drawWrapperFront: Nullable<DrawWrapper> = null;\r\n    /** @internal */\r\n    public _drawWrapperBack: Nullable<DrawWrapper> = null;\r\n\r\n    /**\r\n     * Creates a new bounding box\r\n     * @param min defines the minimum vector (in local space)\r\n     * @param max defines the maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Recreates the entire bounding box from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        const minX = min.x,\r\n            minY = min.y,\r\n            minZ = min.z,\r\n            maxX = max.x,\r\n            maxY = max.y,\r\n            maxZ = max.z;\r\n        const vectors = this.vectors;\r\n\r\n        this.minimum.copyFromFloats(minX, minY, minZ);\r\n        this.maximum.copyFromFloats(maxX, maxY, maxZ);\r\n        vectors[0].copyFromFloats(minX, minY, minZ);\r\n        vectors[1].copyFromFloats(maxX, maxY, maxZ);\r\n        vectors[2].copyFromFloats(maxX, minY, minZ);\r\n        vectors[3].copyFromFloats(minX, maxY, minZ);\r\n        vectors[4].copyFromFloats(minX, minY, maxZ);\r\n        vectors[5].copyFromFloats(maxX, maxY, minZ);\r\n        vectors[6].copyFromFloats(minX, maxY, maxZ);\r\n        vectors[7].copyFromFloats(maxX, minY, maxZ);\r\n\r\n        // OBB\r\n        max.addToRef(min, this.center).scaleInPlace(0.5);\r\n        max.subtractToRef(min, this.extendSize).scaleInPlace(0.5);\r\n\r\n        this._worldMatrix = worldMatrix || Matrix.IdentityReadOnly;\r\n\r\n        this._update(this._worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding box by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding box\r\n     */\r\n    public scale(factor: number): BoundingBox {\r\n        const tmpVectors = BoundingBox._TmpVector3;\r\n        const diff = this.maximum.subtractToRef(this.minimum, tmpVectors[0]);\r\n        const len = diff.length();\r\n        diff.normalizeFromLength(len);\r\n        const distance = len * factor;\r\n        const newRadius = diff.scaleInPlace(distance * 0.5);\r\n\r\n        const min = this.center.subtractToRef(newRadius, tmpVectors[1]);\r\n        const max = this.center.addToRef(newRadius, tmpVectors[2]);\r\n\r\n        this.reConstruct(min, max, this._worldMatrix);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the world matrix of the bounding box\r\n     * @returns a matrix\r\n     */\r\n    public getWorldMatrix(): DeepImmutable<Matrix> {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _update(world: DeepImmutable<Matrix>): void {\r\n        const minWorld = this.minimumWorld;\r\n        const maxWorld = this.maximumWorld;\r\n        const directions = this.directions;\r\n        const vectorsWorld = this.vectorsWorld;\r\n        const vectors = this.vectors;\r\n\r\n        if (!world.isIdentity()) {\r\n            minWorld.setAll(Number.MAX_VALUE);\r\n            maxWorld.setAll(-Number.MAX_VALUE);\r\n\r\n            for (let index = 0; index < 8; ++index) {\r\n                const v = vectorsWorld[index];\r\n                Vector3.TransformCoordinatesToRef(vectors[index], world, v);\r\n                minWorld.minimizeInPlace(v);\r\n                maxWorld.maximizeInPlace(v);\r\n            }\r\n\r\n            // Extend\r\n            maxWorld.subtractToRef(minWorld, this.extendSizeWorld).scaleInPlace(0.5);\r\n            maxWorld.addToRef(minWorld, this.centerWorld).scaleInPlace(0.5);\r\n        } else {\r\n            minWorld.copyFrom(this.minimum);\r\n            maxWorld.copyFrom(this.maximum);\r\n            for (let index = 0; index < 8; ++index) {\r\n                vectorsWorld[index].copyFrom(vectors[index]);\r\n            }\r\n\r\n            // Extend\r\n            this.extendSizeWorld.copyFrom(this.extendSize);\r\n            this.centerWorld.copyFrom(this.center);\r\n        }\r\n\r\n        Vector3.FromArrayToRef(world.m, 0, directions[0]);\r\n        Vector3.FromArrayToRef(world.m, 4, directions[1]);\r\n        Vector3.FromArrayToRef(world.m, 8, directions[2]);\r\n\r\n        this._worldMatrix = world;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box is intersecting the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        return BoundingBox.IsInFrustum(this.vectorsWorld, frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box is entirely inside the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an inclusion\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        return BoundingBox.IsCompletelyInFrustum(this.vectorsWorld, frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is inside the bounding box\r\n     * @param point defines the point to test\r\n     * @returns true if the point is inside the bounding box\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        const min = this.minimumWorld;\r\n        const max = this.maximumWorld;\r\n        const minX = min.x,\r\n            minY = min.y,\r\n            minZ = min.z,\r\n            maxX = max.x,\r\n            maxY = max.y,\r\n            maxZ = max.z;\r\n        const pointX = point.x,\r\n            pointY = point.y,\r\n            pointZ = point.z;\r\n        const delta = -Epsilon;\r\n\r\n        if (maxX - pointX < delta || delta > pointX - minX) {\r\n            return false;\r\n        }\r\n\r\n        if (maxY - pointY < delta || delta > pointY - minY) {\r\n            return false;\r\n        }\r\n\r\n        if (maxZ - pointZ < delta || delta > pointZ - minZ) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box intersects with a bounding sphere\r\n     * @param sphere defines the sphere to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsSphere(sphere: DeepImmutable<BoundingSphere>): boolean {\r\n        return BoundingBox.IntersectsSphere(this.minimumWorld, this.maximumWorld, sphere.centerWorld, sphere.radiusWorld);\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box intersects with a box defined by a min and max vectors\r\n     * @param min defines the min vector to use\r\n     * @param max defines the max vector to use\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsMinMax(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>): boolean {\r\n        const myMin = this.minimumWorld;\r\n        const myMax = this.maximumWorld;\r\n        const myMinX = myMin.x,\r\n            myMinY = myMin.y,\r\n            myMinZ = myMin.z,\r\n            myMaxX = myMax.x,\r\n            myMaxY = myMax.y,\r\n            myMaxZ = myMax.z;\r\n        const minX = min.x,\r\n            minY = min.y,\r\n            minZ = min.z,\r\n            maxX = max.x,\r\n            maxY = max.y,\r\n            maxZ = max.z;\r\n        if (myMaxX < minX || myMinX > maxX) {\r\n            return false;\r\n        }\r\n\r\n        if (myMaxY < minY || myMinY > maxY) {\r\n            return false;\r\n        }\r\n\r\n        if (myMaxZ < minZ || myMinZ > maxZ) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Disposes the resources of the class\r\n     */\r\n    public dispose(): void {\r\n        this._drawWrapperFront?.dispose();\r\n        this._drawWrapperBack?.dispose();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Tests if two bounding boxes are intersections\r\n     * @param box0 defines the first box to test\r\n     * @param box1 defines the second box to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public static Intersects(box0: DeepImmutable<BoundingBox>, box1: DeepImmutable<BoundingBox>): boolean {\r\n        return box0.intersectsMinMax(box1.minimumWorld, box1.maximumWorld);\r\n    }\r\n\r\n    /**\r\n     * Tests if a bounding box defines by a min/max vectors intersects a sphere\r\n     * @param minPoint defines the minimum vector of the bounding box\r\n     * @param maxPoint defines the maximum vector of the bounding box\r\n     * @param sphereCenter defines the sphere center\r\n     * @param sphereRadius defines the sphere radius\r\n     * @returns true if there is an intersection\r\n     */\r\n    public static IntersectsSphere(minPoint: DeepImmutable<Vector3>, maxPoint: DeepImmutable<Vector3>, sphereCenter: DeepImmutable<Vector3>, sphereRadius: number): boolean {\r\n        const vector = BoundingBox._TmpVector3[0];\r\n        Vector3.ClampToRef(sphereCenter, minPoint, maxPoint, vector);\r\n        const num = Vector3.DistanceSquared(sphereCenter, vector);\r\n        return num <= sphereRadius * sphereRadius;\r\n    }\r\n\r\n    /**\r\n     * Tests if a bounding box defined with 8 vectors is entirely inside frustum planes\r\n     * @param boundingVectors defines an array of 8 vectors representing a bounding box\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an inclusion\r\n     */\r\n    public static IsCompletelyInFrustum(boundingVectors: Array<DeepImmutable<Vector3>>, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        for (let p = 0; p < 6; ++p) {\r\n            const frustumPlane = frustumPlanes[p];\r\n            for (let i = 0; i < 8; ++i) {\r\n                if (frustumPlane.dotCoordinate(boundingVectors[i]) < 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if a bounding box defined with 8 vectors intersects frustum planes\r\n     * @param boundingVectors defines an array of 8 vectors representing a bounding box\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public static IsInFrustum(boundingVectors: Array<DeepImmutable<Vector3>>, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        for (let p = 0; p < 6; ++p) {\r\n            let canReturnFalse = true;\r\n            const frustumPlane = frustumPlanes[p];\r\n            for (let i = 0; i < 8; ++i) {\r\n                if (frustumPlane.dotCoordinate(boundingVectors[i]) >= 0) {\r\n                    canReturnFalse = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (canReturnFalse) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n", "import type { DeepImmutable } from \"../types\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\n/**\r\n * Class used to store bounding sphere information\r\n */\r\nexport class BoundingSphere {\r\n    /**\r\n     * Gets the center of the bounding sphere in local space\r\n     */\r\n    public readonly center = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in local space\r\n     */\r\n    public radius: number;\r\n    /**\r\n     * Gets the center of the bounding sphere in world space\r\n     */\r\n    public readonly centerWorld = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in world space\r\n     */\r\n    public radiusWorld: number;\r\n    /**\r\n     * Gets the minimum vector in local space\r\n     */\r\n    public readonly minimum = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in local space\r\n     */\r\n    public readonly maximum = Vector3.Zero();\r\n\r\n    private _worldMatrix: DeepImmutable<Matrix>;\r\n    private static readonly _TmpVector3 = ArrayTools.BuildArray(3, Vector3.Zero);\r\n\r\n    /**\r\n     * Creates a new bounding sphere\r\n     * @param min defines the minimum vector (in local space)\r\n     * @param max defines the maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Recreates the entire bounding sphere from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.minimum.copyFrom(min);\r\n        this.maximum.copyFrom(max);\r\n\r\n        const distance = Vector3.Distance(min, max);\r\n\r\n        max.addToRef(min, this.center).scaleInPlace(0.5);\r\n        this.radius = distance * 0.5;\r\n\r\n        this._update(worldMatrix || Matrix.IdentityReadOnly);\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding sphere by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding box\r\n     */\r\n    public scale(factor: number): BoundingSphere {\r\n        const newRadius = this.radius * factor;\r\n        const tmpVectors = BoundingSphere._TmpVector3;\r\n        const tempRadiusVector = tmpVectors[0].setAll(newRadius);\r\n        const min = this.center.subtractToRef(tempRadiusVector, tmpVectors[1]);\r\n        const max = this.center.addToRef(tempRadiusVector, tmpVectors[2]);\r\n\r\n        this.reConstruct(min, max, this._worldMatrix);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the world matrix of the bounding box\r\n     * @returns a matrix\r\n     */\r\n    public getWorldMatrix(): DeepImmutable<Matrix> {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * @internal\r\n     */\r\n    public _update(worldMatrix: DeepImmutable<Matrix>): void {\r\n        if (!worldMatrix.isIdentity()) {\r\n            Vector3.TransformCoordinatesToRef(this.center, worldMatrix, this.centerWorld);\r\n            const tempVector = BoundingSphere._TmpVector3[0];\r\n            Vector3.TransformNormalFromFloatsToRef(1.0, 1.0, 1.0, worldMatrix, tempVector);\r\n            this.radiusWorld = Math.max(Math.abs(tempVector.x), Math.abs(tempVector.y), Math.abs(tempVector.z)) * this.radius;\r\n        } else {\r\n            this.centerWorld.copyFrom(this.center);\r\n            this.radiusWorld = this.radius;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere is intersecting the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        const center = this.centerWorld;\r\n        const radius = this.radiusWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) <= -radius) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere center is in between the frustum planes.\r\n     * Used for optimistic fast inclusion.\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if the sphere center is in between the frustum planes\r\n     */\r\n    public isCenterInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        const center = this.centerWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is inside the bounding sphere\r\n     * @param point defines the point to test\r\n     * @returns true if the point is inside the bounding sphere\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(this.centerWorld, point);\r\n        if (this.radiusWorld * this.radiusWorld < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Checks if two sphere intersect\r\n     * @param sphere0 sphere 0\r\n     * @param sphere1 sphere 1\r\n     * @returns true if the spheres intersect\r\n     */\r\n    public static Intersects(sphere0: DeepImmutable<BoundingSphere>, sphere1: DeepImmutable<BoundingSphere>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(sphere0.centerWorld, sphere1.centerWorld);\r\n        const radiusSum = sphere0.radiusWorld + sphere1.radiusWorld;\r\n\r\n        if (radiusSum * radiusSum < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere from a center and a radius\r\n     * @param center The center\r\n     * @param radius radius\r\n     * @param matrix Optional worldMatrix\r\n     * @returns The sphere\r\n     */\r\n    public static CreateFromCenterAndRadius(center: DeepImmutable<Vector3>, radius: number, matrix?: DeepImmutable<Matrix>): BoundingSphere {\r\n        this._TmpVector3[0].copyFrom(center);\r\n        this._TmpVector3[1].copyFromFloats(0, 0, radius);\r\n        this._TmpVector3[2].copyFrom(center);\r\n        this._TmpVector3[0].addInPlace(this._TmpVector3[1]);\r\n        this._TmpVector3[2].subtractInPlace(this._TmpVector3[1]);\r\n\r\n        const sphere = new BoundingSphere(this._TmpVector3[0], this._TmpVector3[2]);\r\n\r\n        if (matrix) {\r\n            sphere._worldMatrix = matrix;\r\n        } else {\r\n            sphere._worldMatrix = Matrix.Identity();\r\n        }\r\n\r\n        return sphere;\r\n    }\r\n}\r\n", "import type { DeepImmutable } from \"../types\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport { TmpVectors } from \"../Maths/math.vector\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { BoundingBox } from \"./boundingBox\";\r\nimport { BoundingSphere } from \"./boundingSphere\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\nimport type { Collider } from \"../Collisions/collider\";\r\n\r\nconst _result0 = { min: 0, max: 0 };\r\nconst _result1 = { min: 0, max: 0 };\r\nconst computeBoxExtents = (axis: DeepImmutable<Vector3>, box: DeepImmutable<BoundingBox>, result: { min: number; max: number }) => {\r\n    const p = Vector3.Dot(box.centerWorld, axis);\r\n\r\n    const r0 = Math.abs(Vector3.Dot(box.directions[0], axis)) * box.extendSize.x;\r\n    const r1 = Math.abs(Vector3.Dot(box.directions[1], axis)) * box.extendSize.y;\r\n    const r2 = Math.abs(Vector3.Dot(box.directions[2], axis)) * box.extendSize.z;\r\n\r\n    const r = r0 + r1 + r2;\r\n    result.min = p - r;\r\n    result.max = p + r;\r\n};\r\n\r\nconst axisOverlap = (axis: DeepImmutable<Vector3>, box0: DeepImmutable<BoundingBox>, box1: DeepImmutable<BoundingBox>): boolean => {\r\n    computeBoxExtents(axis, box0, _result0);\r\n    computeBoxExtents(axis, box1, _result1);\r\n    return !(_result0.min > _result1.max || _result1.min > _result0.max);\r\n};\r\n\r\n/**\r\n * Interface for cullable objects\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#back-face-culling\r\n */\r\nexport interface ICullable {\r\n    /**\r\n     * Checks if the object or part of the object is in the frustum\r\n     * @param frustumPlanes Camera near/planes\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    isInFrustum(frustumPlanes: Plane[]): boolean;\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * Unlike isInFrustum this checks the full bounding box\r\n     * @param frustumPlanes Camera near/planes\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    isCompletelyInFrustum(frustumPlanes: Plane[]): boolean;\r\n}\r\n\r\n/**\r\n * Info for a bounding data of a mesh\r\n */\r\nexport class BoundingInfo implements ICullable {\r\n    /**\r\n     * Bounding box for the mesh\r\n     */\r\n    public readonly boundingBox: BoundingBox;\r\n    /**\r\n     * Bounding sphere for the mesh\r\n     */\r\n    public readonly boundingSphere: BoundingSphere;\r\n\r\n    private _isLocked = false;\r\n\r\n    private static readonly _TmpVector3 = ArrayTools.BuildArray(2, Vector3.Zero);\r\n\r\n    /**\r\n     * Constructs bounding info\r\n     * @param minimum min vector of the bounding box/sphere\r\n     * @param maximum max vector of the bounding box/sphere\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(minimum: DeepImmutable<Vector3>, maximum: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.boundingBox = new BoundingBox(minimum, maximum, worldMatrix);\r\n        this.boundingSphere = new BoundingSphere(minimum, maximum, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Recreates the entire bounding info from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.boundingBox.reConstruct(min, max, worldMatrix);\r\n        this.boundingSphere.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * min vector of the bounding box/sphere\r\n     */\r\n    public get minimum(): Vector3 {\r\n        return this.boundingBox.minimum;\r\n    }\r\n\r\n    /**\r\n     * max vector of the bounding box/sphere\r\n     */\r\n    public get maximum(): Vector3 {\r\n        return this.boundingBox.maximum;\r\n    }\r\n\r\n    /**\r\n     * If the info is locked and won't be updated to avoid perf overhead\r\n     */\r\n    public get isLocked(): boolean {\r\n        return this._isLocked;\r\n    }\r\n\r\n    public set isLocked(value: boolean) {\r\n        this._isLocked = value;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Updates the bounding sphere and box\r\n     * @param world world matrix to be used to update\r\n     */\r\n    public update(world: DeepImmutable<Matrix>) {\r\n        if (this._isLocked) {\r\n            return;\r\n        }\r\n        this.boundingBox._update(world);\r\n        this.boundingSphere._update(world);\r\n    }\r\n\r\n    /**\r\n     * Recreate the bounding info to be centered around a specific point given a specific extend.\r\n     * @param center New center of the bounding info\r\n     * @param extend New extend of the bounding info\r\n     * @returns the current bounding info\r\n     */\r\n    public centerOn(center: DeepImmutable<Vector3>, extend: DeepImmutable<Vector3>): BoundingInfo {\r\n        const minimum = BoundingInfo._TmpVector3[0].copyFrom(center).subtractInPlace(extend);\r\n        const maximum = BoundingInfo._TmpVector3[1].copyFrom(center).addInPlace(extend);\r\n\r\n        this.boundingBox.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\r\n        this.boundingSphere.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Grows the bounding info to include the given point.\r\n     * @param point The point that will be included in the current bounding info (in local space)\r\n     * @returns the current bounding info\r\n     */\r\n    public encapsulate(point: Vector3): BoundingInfo {\r\n        const minimum = Vector3.Minimize(this.minimum, point);\r\n        const maximum = Vector3.Maximize(this.maximum, point);\r\n        this.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Grows the bounding info to encapsulate the given bounding info.\r\n     * @param toEncapsulate The bounding info that will be encapsulated in the current bounding info\r\n     * @returns the current bounding info\r\n     */\r\n    public encapsulateBoundingInfo(toEncapsulate: BoundingInfo): BoundingInfo {\r\n        const invw = TmpVectors.Matrix[0];\r\n        this.boundingBox.getWorldMatrix().invertToRef(invw);\r\n\r\n        const v = TmpVectors.Vector3[0];\r\n\r\n        Vector3.TransformCoordinatesToRef(toEncapsulate.boundingBox.minimumWorld, invw, v);\r\n        this.encapsulate(v);\r\n\r\n        Vector3.TransformCoordinatesToRef(toEncapsulate.boundingBox.maximumWorld, invw, v);\r\n        this.encapsulate(v);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding info by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding info\r\n     */\r\n    public scale(factor: number): BoundingInfo {\r\n        this.boundingBox.scale(factor);\r\n        this.boundingSphere.scale(factor);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the bounding info is within the frustum defined by the passed array of planes.\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @param strategy defines the strategy to use for the culling (default is BABYLON.AbstractMesh.CULLINGSTRATEGY_STANDARD)\r\n     * The different strategies available are:\r\n     * * BABYLON.AbstractMesh.CULLINGSTRATEGY_STANDARD most accurate but slower @see https://doc.babylonjs.com/typedoc/classes/BABYLON.AbstractMesh#CULLINGSTRATEGY_STANDARD\r\n     * * BABYLON.AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY faster but less accurate @see https://doc.babylonjs.com/typedoc/classes/BABYLON.AbstractMesh#CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\r\n     * * BABYLON.AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION can be faster if always visible @see https://doc.babylonjs.com/typedoc/classes/BABYLON.AbstractMesh#CULLINGSTRATEGY_OPTIMISTIC_INCLUSION\r\n     * * BABYLON.AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY can be faster if always visible @see https://doc.babylonjs.com/typedoc/classes/BABYLON.AbstractMesh#CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY\r\n     * @returns true if the bounding info is in the frustum planes\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>, strategy: number = Constants.MESHES_CULLINGSTRATEGY_STANDARD): boolean {\r\n        const inclusionTest =\r\n            strategy === Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION || strategy === Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY;\r\n        if (inclusionTest) {\r\n            if (this.boundingSphere.isCenterInFrustum(frustumPlanes)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.boundingSphere.isInFrustum(frustumPlanes)) {\r\n            return false;\r\n        }\r\n\r\n        const bSphereOnlyTest =\r\n            strategy === Constants.MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY || strategy === Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY;\r\n        if (bSphereOnlyTest) {\r\n            return true;\r\n        }\r\n\r\n        return this.boundingBox.isInFrustum(frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Gets the world distance between the min and max points of the bounding box\r\n     */\r\n    public get diagonalLength(): number {\r\n        const boundingBox = this.boundingBox;\r\n        const diag = boundingBox.maximumWorld.subtractToRef(boundingBox.minimumWorld, BoundingInfo._TmpVector3[0]);\r\n        return diag.length();\r\n    }\r\n\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * Unlike isInFrustum this checks the full bounding box\r\n     * @param frustumPlanes Camera near/planes\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        return this.boundingBox.isCompletelyInFrustum(frustumPlanes);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _checkCollision(collider: Collider): boolean {\r\n        return collider._canDoCollision(this.boundingSphere.centerWorld, this.boundingSphere.radiusWorld, this.boundingBox.minimumWorld, this.boundingBox.maximumWorld);\r\n    }\r\n\r\n    /**\r\n     * Checks if a point is inside the bounding box and bounding sphere or the mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/mesh_intersect\r\n     * @param point the point to check intersection with\r\n     * @returns if the point intersects\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        if (!this.boundingSphere.centerWorld) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.boundingSphere.intersectsPoint(point)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.boundingBox.intersectsPoint(point)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks if another bounding info intersects the bounding box and bounding sphere or the mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/mesh_intersect\r\n     * @param boundingInfo the bounding info to check intersection with\r\n     * @param precise if the intersection should be done using OBB\r\n     * @returns if the bounding info intersects\r\n     */\r\n    public intersects(boundingInfo: DeepImmutable<BoundingInfo>, precise: boolean): boolean {\r\n        if (!BoundingSphere.Intersects(this.boundingSphere, boundingInfo.boundingSphere)) {\r\n            return false;\r\n        }\r\n\r\n        if (!BoundingBox.Intersects(this.boundingBox, boundingInfo.boundingBox)) {\r\n            return false;\r\n        }\r\n\r\n        if (!precise) {\r\n            return true;\r\n        }\r\n\r\n        const box0 = this.boundingBox;\r\n        const box1 = boundingInfo.boundingBox;\r\n\r\n        if (!axisOverlap(box0.directions[0], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box0.directions[1], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box0.directions[2], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box1.directions[0], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box1.directions[1], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box1.directions[2], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[0]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[1]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[2]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[0]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[1]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[2]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[0]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[1]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[2]), box0, box1)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n", "import type { FloatArray, Nullable, IndicesArray } from \"../types\";\r\nimport type { Vector2 } from \"./math.vector\";\r\nimport { Vector3 } from \"./math.vector\";\r\nimport { nativeOverride } from \"../Misc/decorators\";\r\n\r\n// This helper class is only here so we can apply the nativeOverride decorator to functions.\r\nclass MathHelpers {\r\n    @nativeOverride.filter((...[positions, indices]: Parameters<typeof MathHelpers.extractMinAndMaxIndexed>) => !Array.isArray(positions) && !Array.isArray(indices))\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static extractMinAndMaxIndexed(positions: FloatArray, indices: IndicesArray, indexStart: number, indexCount: number, minimum: Vector3, maximum: Vector3): void {\r\n        for (let index = indexStart; index < indexStart + indexCount; index++) {\r\n            const offset = indices[index] * 3;\r\n            const x = positions[offset];\r\n            const y = positions[offset + 1];\r\n            const z = positions[offset + 2];\r\n            minimum.minimizeInPlaceFromFloats(x, y, z);\r\n            maximum.maximizeInPlaceFromFloats(x, y, z);\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[positions]: Parameters<typeof MathHelpers.extractMinAndMax>) => !Array.isArray(positions))\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static extractMinAndMax(positions: FloatArray, start: number, count: number, stride: number, minimum: Vector3, maximum: Vector3): void {\r\n        for (let index = start, offset = start * stride; index < start + count; index++, offset += stride) {\r\n            const x = positions[offset];\r\n            const y = positions[offset + 1];\r\n            const z = positions[offset + 2];\r\n            minimum.minimizeInPlaceFromFloats(x, y, z);\r\n            maximum.maximizeInPlaceFromFloats(x, y, z);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Extracts minimum and maximum values from a list of indexed positions\r\n * @param positions defines the positions to use\r\n * @param indices defines the indices to the positions\r\n * @param indexStart defines the start index\r\n * @param indexCount defines the end index\r\n * @param bias defines bias value to add to the result\r\n * @returns minimum and maximum values\r\n */\r\nexport function extractMinAndMaxIndexed(\r\n    positions: FloatArray,\r\n    indices: IndicesArray,\r\n    indexStart: number,\r\n    indexCount: number,\r\n    bias: Nullable<Vector2> = null\r\n): { minimum: Vector3; maximum: Vector3 } {\r\n    const minimum = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    const maximum = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\r\n    MathHelpers.extractMinAndMaxIndexed(positions, indices, indexStart, indexCount, minimum, maximum);\r\n\r\n    if (bias) {\r\n        minimum.x -= minimum.x * bias.x + bias.y;\r\n        minimum.y -= minimum.y * bias.x + bias.y;\r\n        minimum.z -= minimum.z * bias.x + bias.y;\r\n        maximum.x += maximum.x * bias.x + bias.y;\r\n        maximum.y += maximum.y * bias.x + bias.y;\r\n        maximum.z += maximum.z * bias.x + bias.y;\r\n    }\r\n\r\n    return {\r\n        minimum: minimum,\r\n        maximum: maximum,\r\n    };\r\n}\r\n\r\n/**\r\n * Extracts minimum and maximum values from a list of positions\r\n * @param positions defines the positions to use\r\n * @param start defines the start index in the positions array\r\n * @param count defines the number of positions to handle\r\n * @param bias defines bias value to add to the result\r\n * @param stride defines the stride size to use (distance between two positions in the positions array)\r\n * @returns minimum and maximum values\r\n */\r\nexport function extractMinAndMax(positions: FloatArray, start: number, count: number, bias: Nullable<Vector2> = null, stride?: number): { minimum: Vector3; maximum: Vector3 } {\r\n    const minimum = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    const maximum = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\r\n    if (!stride) {\r\n        stride = 3;\r\n    }\r\n\r\n    MathHelpers.extractMinAndMax(positions, start, count, stride, minimum, maximum);\r\n\r\n    if (bias) {\r\n        minimum.x -= minimum.x * bias.x + bias.y;\r\n        minimum.y -= minimum.y * bias.x + bias.y;\r\n        minimum.z -= minimum.z * bias.x + bias.y;\r\n        maximum.x += maximum.x * bias.x + bias.y;\r\n        maximum.y += maximum.y * bias.x + bias.y;\r\n        maximum.z += maximum.z * bias.x + bias.y;\r\n    }\r\n\r\n    return {\r\n        minimum: minimum,\r\n        maximum: maximum,\r\n    };\r\n}\r\n", "import type { Nullable, IndicesArray, DeepImmutable, FloatArray } from \"../types\";\r\nimport type { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { IntersectionInfo } from \"../Collisions/intersectionInfo\";\r\nimport type { ICullable } from \"../Culling/boundingInfo\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { extractMinAndMaxIndexed } from \"../Maths/math.functions\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport { DrawWrapper } from \"../Materials/drawWrapper\";\r\nimport type { IMaterialContext } from \"../Engines/IMaterialContext\";\r\n\r\nimport type { Collider } from \"../Collisions/collider\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport type { MultiMaterial } from \"../Materials/multiMaterial\";\r\nimport type { AbstractMesh } from \"./abstractMesh\";\r\nimport type { Mesh } from \"./mesh\";\r\nimport type { Ray } from \"../Culling/ray\";\r\nimport type { TrianglePickingPredicate } from \"../Culling/ray\";\r\n\r\n/**\r\n * Defines a subdivision inside a mesh\r\n */\r\nexport class SubMesh implements ICullable {\r\n    private _engine: Engine;\r\n    /** @internal */\r\n    public _drawWrappers: Array<DrawWrapper>; // index in this array = pass id\r\n    private _mainDrawWrapperOverride: Nullable<DrawWrapper> = null;\r\n\r\n    /**\r\n     * Gets material defines used by the effect associated to the sub mesh\r\n     */\r\n    public get materialDefines(): Nullable<MaterialDefines> {\r\n        return this._mainDrawWrapperOverride ? (this._mainDrawWrapperOverride.defines as MaterialDefines) : (this._getDrawWrapper()?.defines as Nullable<MaterialDefines>);\r\n    }\r\n\r\n    /**\r\n     * Sets material defines used by the effect associated to the sub mesh\r\n     */\r\n    public set materialDefines(defines: Nullable<MaterialDefines>) {\r\n        const drawWrapper = this._mainDrawWrapperOverride ?? this._getDrawWrapper(undefined, true)!;\r\n        drawWrapper.defines = defines;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getDrawWrapper(passId?: number, createIfNotExisting = false): DrawWrapper | undefined {\r\n        passId = passId ?? this._engine.currentRenderPassId;\r\n        let drawWrapper = this._drawWrappers[passId];\r\n        if (!drawWrapper && createIfNotExisting) {\r\n            this._drawWrappers[passId] = drawWrapper = new DrawWrapper(this._mesh.getScene().getEngine());\r\n        }\r\n        return drawWrapper;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _removeDrawWrapper(passId: number, disposeWrapper = true) {\r\n        if (disposeWrapper) {\r\n            this._drawWrappers[passId]?.dispose();\r\n        }\r\n        this._drawWrappers[passId] = undefined as any;\r\n    }\r\n\r\n    /**\r\n     * Gets associated (main) effect (possibly the effect override if defined)\r\n     */\r\n    public get effect(): Nullable<Effect> {\r\n        return this._mainDrawWrapperOverride ? this._mainDrawWrapperOverride.effect : this._getDrawWrapper()?.effect ?? null;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _drawWrapper(): DrawWrapper {\r\n        return this._mainDrawWrapperOverride ?? this._getDrawWrapper(undefined, true)!;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _drawWrapperOverride(): Nullable<DrawWrapper> {\r\n        return this._mainDrawWrapperOverride;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setMainDrawWrapperOverride(wrapper: Nullable<DrawWrapper>): void {\r\n        this._mainDrawWrapperOverride = wrapper;\r\n    }\r\n\r\n    /**\r\n     * Sets associated effect (effect used to render this submesh)\r\n     * @param effect defines the effect to associate with\r\n     * @param defines defines the set of defines used to compile this effect\r\n     * @param materialContext material context associated to the effect\r\n     * @param resetContext true to reset the draw context\r\n     */\r\n    public setEffect(effect: Nullable<Effect>, defines: Nullable<string | MaterialDefines> = null, materialContext?: IMaterialContext, resetContext = true) {\r\n        const drawWrapper = this._drawWrapper;\r\n        drawWrapper.setEffect(effect, defines, resetContext);\r\n        if (materialContext !== undefined) {\r\n            drawWrapper.materialContext = materialContext;\r\n        }\r\n        if (!effect) {\r\n            drawWrapper.defines = null;\r\n            drawWrapper.materialContext = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache\r\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\r\n     */\r\n    public resetDrawCache(passId?: number): void {\r\n        if (this._drawWrappers) {\r\n            if (passId !== undefined) {\r\n                this._removeDrawWrapper(passId);\r\n                return;\r\n            } else {\r\n                for (const drawWrapper of this._drawWrappers) {\r\n                    drawWrapper?.dispose();\r\n                }\r\n            }\r\n        }\r\n        this._drawWrappers = [];\r\n    }\r\n\r\n    /** @internal */\r\n    public _linesIndexCount: number = 0;\r\n    private _mesh: AbstractMesh;\r\n    private _renderingMesh: Mesh;\r\n    private _boundingInfo: BoundingInfo;\r\n    private _linesIndexBuffer: Nullable<DataBuffer> = null;\r\n    /** @internal */\r\n    public _lastColliderWorldVertices: Nullable<Vector3[]> = null;\r\n    /** @internal */\r\n    public _trianglePlanes: Plane[];\r\n    /** @internal */\r\n    public _lastColliderTransformMatrix: Nullable<Matrix> = null;\r\n    /** @internal */\r\n    public _wasDispatched = false;\r\n\r\n    /** @internal */\r\n    public _renderId = 0;\r\n    /** @internal */\r\n    public _alphaIndex: number = 0;\r\n    /** @internal */\r\n    public _distanceToCamera: number = 0;\r\n    /** @internal */\r\n    public _id: number;\r\n\r\n    private _currentMaterial: Nullable<Material> = null;\r\n\r\n    /**\r\n     * Add a new submesh to a mesh\r\n     * @param materialIndex defines the material index to use\r\n     * @param verticesStart defines vertex index start\r\n     * @param verticesCount defines vertices count\r\n     * @param indexStart defines index start\r\n     * @param indexCount defines indices count\r\n     * @param mesh defines the parent mesh\r\n     * @param renderingMesh defines an optional rendering mesh\r\n     * @param createBoundingBox defines if bounding box should be created for this submesh\r\n     * @returns the new submesh\r\n     */\r\n    public static AddToMesh(\r\n        materialIndex: number,\r\n        verticesStart: number,\r\n        verticesCount: number,\r\n        indexStart: number,\r\n        indexCount: number,\r\n        mesh: AbstractMesh,\r\n        renderingMesh?: Mesh,\r\n        createBoundingBox: boolean = true\r\n    ): SubMesh {\r\n        return new SubMesh(materialIndex, verticesStart, verticesCount, indexStart, indexCount, mesh, renderingMesh, createBoundingBox);\r\n    }\r\n\r\n    /**\r\n     * Creates a new submesh\r\n     * @param materialIndex defines the material index to use\r\n     * @param verticesStart defines vertex index start\r\n     * @param verticesCount defines vertices count\r\n     * @param indexStart defines index start\r\n     * @param indexCount defines indices count\r\n     * @param mesh defines the parent mesh\r\n     * @param renderingMesh defines an optional rendering mesh\r\n     * @param createBoundingBox defines if bounding box should be created for this submesh\r\n     * @param addToMesh defines a boolean indicating that the submesh must be added to the mesh.subMeshes array (true by default)\r\n     */\r\n    constructor(\r\n        /** the material index to use */\r\n        public materialIndex: number,\r\n        /** vertex index start */\r\n        public verticesStart: number,\r\n        /** vertices count */\r\n        public verticesCount: number,\r\n        /** index start */\r\n        public indexStart: number,\r\n        /** indices count */\r\n        public indexCount: number,\r\n        mesh: AbstractMesh,\r\n        renderingMesh?: Mesh,\r\n        createBoundingBox: boolean = true,\r\n        addToMesh = true\r\n    ) {\r\n        this._mesh = mesh;\r\n        this._renderingMesh = renderingMesh || <Mesh>mesh;\r\n        if (addToMesh) {\r\n            mesh.subMeshes.push(this);\r\n        }\r\n\r\n        this._engine = this._mesh.getScene().getEngine();\r\n        this.resetDrawCache();\r\n        this._trianglePlanes = [];\r\n\r\n        this._id = mesh.subMeshes.length - 1;\r\n\r\n        if (createBoundingBox) {\r\n            this.refreshBoundingInfo();\r\n            mesh.computeWorldMatrix(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if this submesh covers the entire parent mesh\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public get IsGlobal(): boolean {\r\n        return this.verticesStart === 0 && this.verticesCount === this._mesh.getTotalVertices() && this.indexStart === 0 && this.indexCount === this._mesh.getTotalIndices();\r\n    }\r\n\r\n    /**\r\n     * Returns the submesh BoundingInfo object\r\n     * @returns current bounding info (or mesh's one if the submesh is global)\r\n     */\r\n    public getBoundingInfo(): BoundingInfo {\r\n        if (this.IsGlobal || this._mesh.hasThinInstances) {\r\n            return this._mesh.getBoundingInfo();\r\n        }\r\n\r\n        return this._boundingInfo;\r\n    }\r\n\r\n    /**\r\n     * Sets the submesh BoundingInfo\r\n     * @param boundingInfo defines the new bounding info to use\r\n     * @returns the SubMesh\r\n     */\r\n    public setBoundingInfo(boundingInfo: BoundingInfo): SubMesh {\r\n        this._boundingInfo = boundingInfo;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh of the current submesh\r\n     * @returns the parent mesh\r\n     */\r\n    public getMesh(): AbstractMesh {\r\n        return this._mesh;\r\n    }\r\n\r\n    /**\r\n     * Returns the rendering mesh of the submesh\r\n     * @returns the rendering mesh (could be different from parent mesh)\r\n     */\r\n    public getRenderingMesh(): Mesh {\r\n        return this._renderingMesh;\r\n    }\r\n\r\n    /**\r\n     * Returns the replacement mesh of the submesh\r\n     * @returns the replacement mesh (could be different from parent mesh)\r\n     */\r\n    public getReplacementMesh(): Nullable<AbstractMesh> {\r\n        return this._mesh._internalAbstractMeshDataInfo._actAsRegularMesh ? this._mesh : null;\r\n    }\r\n\r\n    /**\r\n     * Returns the effective mesh of the submesh\r\n     * @returns the effective mesh (could be different from parent mesh)\r\n     */\r\n    public getEffectiveMesh(): AbstractMesh {\r\n        const replacementMesh = this._mesh._internalAbstractMeshDataInfo._actAsRegularMesh ? this._mesh : null;\r\n\r\n        return replacementMesh ? replacementMesh : this._renderingMesh;\r\n    }\r\n\r\n    /**\r\n     * Returns the submesh material\r\n     * @param getDefaultMaterial Defines whether or not to get the default material if nothing has been defined.\r\n     * @returns null or the current material\r\n     */\r\n    public getMaterial(getDefaultMaterial = true): Nullable<Material> {\r\n        const rootMaterial = this._renderingMesh.getMaterialForRenderPass(this._engine.currentRenderPassId) ?? this._renderingMesh.material;\r\n\r\n        if (!rootMaterial) {\r\n            return getDefaultMaterial ? this._mesh.getScene().defaultMaterial : null;\r\n        } else if (this._isMultiMaterial(rootMaterial)) {\r\n            const effectiveMaterial = rootMaterial.getSubMaterial(this.materialIndex);\r\n\r\n            if (this._currentMaterial !== effectiveMaterial) {\r\n                this._currentMaterial = effectiveMaterial;\r\n                this.resetDrawCache();\r\n            }\r\n\r\n            return effectiveMaterial;\r\n        }\r\n\r\n        return rootMaterial;\r\n    }\r\n\r\n    private _isMultiMaterial(material: Material): material is MultiMaterial {\r\n        return (material as MultiMaterial).getSubMaterial !== undefined;\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Sets a new updated BoundingInfo object to the submesh\r\n     * @param data defines an optional position array to use to determine the bounding info\r\n     * @returns the SubMesh\r\n     */\r\n    public refreshBoundingInfo(data: Nullable<FloatArray> = null): SubMesh {\r\n        this._lastColliderWorldVertices = null;\r\n\r\n        if (this.IsGlobal || !this._renderingMesh || !this._renderingMesh.geometry) {\r\n            return this;\r\n        }\r\n\r\n        if (!data) {\r\n            data = this._renderingMesh.getVerticesData(VertexBuffer.PositionKind);\r\n        }\r\n\r\n        if (!data) {\r\n            this._boundingInfo = this._mesh.getBoundingInfo();\r\n            return this;\r\n        }\r\n\r\n        const indices = <IndicesArray>this._renderingMesh.getIndices();\r\n        let extend: { minimum: Vector3; maximum: Vector3 };\r\n\r\n        //is this the only submesh?\r\n        if (this.indexStart === 0 && this.indexCount === indices.length) {\r\n            const boundingInfo = this._renderingMesh.getBoundingInfo();\r\n\r\n            //the rendering mesh's bounding info can be used, it is the standard submesh for all indices.\r\n            extend = { minimum: boundingInfo.minimum.clone(), maximum: boundingInfo.maximum.clone() };\r\n        } else {\r\n            extend = extractMinAndMaxIndexed(data, indices, this.indexStart, this.indexCount, this._renderingMesh.geometry.boundingBias);\r\n        }\r\n\r\n        if (this._boundingInfo) {\r\n            this._boundingInfo.reConstruct(extend.minimum, extend.maximum);\r\n        } else {\r\n            this._boundingInfo = new BoundingInfo(extend.minimum, extend.maximum);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _checkCollision(collider: Collider): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n\r\n        return boundingInfo._checkCollision(collider);\r\n    }\r\n\r\n    /**\r\n     * Updates the submesh BoundingInfo\r\n     * @param world defines the world matrix to use to update the bounding info\r\n     * @returns the submesh\r\n     */\r\n    public updateBoundingInfo(world: DeepImmutable<Matrix>): SubMesh {\r\n        let boundingInfo = this.getBoundingInfo();\r\n\r\n        if (!boundingInfo) {\r\n            this.refreshBoundingInfo();\r\n            boundingInfo = this.getBoundingInfo();\r\n        }\r\n        if (boundingInfo) {\r\n            (<BoundingInfo>boundingInfo).update(world);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * True is the submesh bounding box intersects the frustum defined by the passed array of planes.\r\n     * @param frustumPlanes defines the frustum planes\r\n     * @returns true if the submesh is intersecting with the frustum\r\n     */\r\n    public isInFrustum(frustumPlanes: Plane[]): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n\r\n        if (!boundingInfo) {\r\n            return false;\r\n        }\r\n        return boundingInfo.isInFrustum(frustumPlanes, this._mesh.cullingStrategy);\r\n    }\r\n\r\n    /**\r\n     * True is the submesh bounding box is completely inside the frustum defined by the passed array of planes\r\n     * @param frustumPlanes defines the frustum planes\r\n     * @returns true if the submesh is inside the frustum\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Plane[]): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n\r\n        if (!boundingInfo) {\r\n            return false;\r\n        }\r\n        return boundingInfo.isCompletelyInFrustum(frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Renders the submesh\r\n     * @param enableAlphaMode defines if alpha needs to be used\r\n     * @returns the submesh\r\n     */\r\n    public render(enableAlphaMode: boolean): SubMesh {\r\n        this._renderingMesh.render(this, enableAlphaMode, this._mesh._internalAbstractMeshDataInfo._actAsRegularMesh ? this._mesh : undefined);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getLinesIndexBuffer(indices: IndicesArray, engine: Engine): DataBuffer {\r\n        if (!this._linesIndexBuffer) {\r\n            const linesIndices = [];\r\n\r\n            for (let index = this.indexStart; index < this.indexStart + this.indexCount; index += 3) {\r\n                linesIndices.push(indices[index], indices[index + 1], indices[index + 1], indices[index + 2], indices[index + 2], indices[index]);\r\n            }\r\n\r\n            this._linesIndexBuffer = engine.createIndexBuffer(linesIndices);\r\n            this._linesIndexCount = linesIndices.length;\r\n        }\r\n        return this._linesIndexBuffer;\r\n    }\r\n\r\n    /**\r\n     * Checks if the submesh intersects with a ray\r\n     * @param ray defines the ray to test\r\n     * @returns true is the passed ray intersects the submesh bounding box\r\n     */\r\n    public canIntersects(ray: Ray): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n\r\n        if (!boundingInfo) {\r\n            return false;\r\n        }\r\n        return ray.intersectsBox(boundingInfo.boundingBox);\r\n    }\r\n\r\n    /**\r\n     * Intersects current submesh with a ray\r\n     * @param ray defines the ray to test\r\n     * @param positions defines mesh's positions array\r\n     * @param indices defines mesh's indices array\r\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @returns intersection info or null if no intersection\r\n     */\r\n    public intersects(ray: Ray, positions: Vector3[], indices: IndicesArray, fastCheck?: boolean, trianglePredicate?: TrianglePickingPredicate): Nullable<IntersectionInfo> {\r\n        const material = this.getMaterial();\r\n        if (!material) {\r\n            return null;\r\n        }\r\n        let step = 3;\r\n        let checkStopper = false;\r\n\r\n        switch (material.fillMode) {\r\n            case Constants.MATERIAL_PointListDrawMode:\r\n            case Constants.MATERIAL_LineLoopDrawMode:\r\n            case Constants.MATERIAL_LineStripDrawMode:\r\n            case Constants.MATERIAL_TriangleFanDrawMode:\r\n                return null;\r\n            case Constants.MATERIAL_TriangleStripDrawMode:\r\n                step = 1;\r\n                checkStopper = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // LineMesh first as it's also a Mesh...\r\n        if (material.fillMode === Constants.MATERIAL_LineListDrawMode) {\r\n            // Check if mesh is unindexed\r\n            if (!indices.length) {\r\n                return this._intersectUnIndexedLines(ray, positions, indices, (this._mesh as any).intersectionThreshold, fastCheck);\r\n            }\r\n            return this._intersectLines(ray, positions, indices, (this._mesh as any).intersectionThreshold, fastCheck);\r\n        } else {\r\n            // Check if mesh is unindexed\r\n            if (!indices.length && this._mesh._unIndexed) {\r\n                return this._intersectUnIndexedTriangles(ray, positions, indices, fastCheck, trianglePredicate);\r\n            }\r\n\r\n            return this._intersectTriangles(ray, positions, indices, step, checkStopper, fastCheck, trianglePredicate);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _intersectLines(ray: Ray, positions: Vector3[], indices: IndicesArray, intersectionThreshold: number, fastCheck?: boolean): Nullable<IntersectionInfo> {\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        // Line test\r\n        for (let index = this.indexStart; index < this.indexStart + this.indexCount; index += 2) {\r\n            const p0 = positions[indices[index]];\r\n            const p1 = positions[indices[index + 1]];\r\n\r\n            const length = ray.intersectionSegment(p0, p1, intersectionThreshold);\r\n            if (length < 0) {\r\n                continue;\r\n            }\r\n\r\n            if (fastCheck || !intersectInfo || length < intersectInfo.distance) {\r\n                intersectInfo = new IntersectionInfo(null, null, length);\r\n                intersectInfo.faceId = index / 2;\r\n                if (fastCheck) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return intersectInfo;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _intersectUnIndexedLines(ray: Ray, positions: Vector3[], indices: IndicesArray, intersectionThreshold: number, fastCheck?: boolean): Nullable<IntersectionInfo> {\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        // Line test\r\n        for (let index = this.verticesStart; index < this.verticesStart + this.verticesCount; index += 2) {\r\n            const p0 = positions[index];\r\n            const p1 = positions[index + 1];\r\n\r\n            const length = ray.intersectionSegment(p0, p1, intersectionThreshold);\r\n            if (length < 0) {\r\n                continue;\r\n            }\r\n\r\n            if (fastCheck || !intersectInfo || length < intersectInfo.distance) {\r\n                intersectInfo = new IntersectionInfo(null, null, length);\r\n                intersectInfo.faceId = index / 2;\r\n                if (fastCheck) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return intersectInfo;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _intersectTriangles(\r\n        ray: Ray,\r\n        positions: Vector3[],\r\n        indices: IndicesArray,\r\n        step: number,\r\n        checkStopper: boolean,\r\n        fastCheck?: boolean,\r\n        trianglePredicate?: TrianglePickingPredicate\r\n    ): Nullable<IntersectionInfo> {\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        // Triangles test\r\n        let faceId = -1;\r\n        for (let index = this.indexStart; index < this.indexStart + this.indexCount - (3 - step); index += step) {\r\n            faceId++;\r\n            const indexA = indices[index];\r\n            const indexB = indices[index + 1];\r\n            const indexC = indices[index + 2];\r\n\r\n            if (checkStopper && indexC === 0xffffffff) {\r\n                index += 2;\r\n                continue;\r\n            }\r\n\r\n            const p0 = positions[indexA];\r\n            const p1 = positions[indexB];\r\n            const p2 = positions[indexC];\r\n\r\n            // stay defensive and don't check against undefined positions.\r\n            if (!p0 || !p1 || !p2) {\r\n                continue;\r\n            }\r\n\r\n            if (trianglePredicate && !trianglePredicate(p0, p1, p2, ray, indexA, indexB, indexC)) {\r\n                continue;\r\n            }\r\n\r\n            const currentIntersectInfo = ray.intersectsTriangle(p0, p1, p2);\r\n\r\n            if (currentIntersectInfo) {\r\n                if (currentIntersectInfo.distance < 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (fastCheck || !intersectInfo || currentIntersectInfo.distance < intersectInfo.distance) {\r\n                    intersectInfo = currentIntersectInfo;\r\n                    intersectInfo.faceId = faceId;\r\n\r\n                    if (fastCheck) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return intersectInfo;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _intersectUnIndexedTriangles(\r\n        ray: Ray,\r\n        positions: Vector3[],\r\n        indices: IndicesArray,\r\n        fastCheck?: boolean,\r\n        trianglePredicate?: TrianglePickingPredicate\r\n    ): Nullable<IntersectionInfo> {\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n        // Triangles test\r\n        for (let index = this.verticesStart; index < this.verticesStart + this.verticesCount; index += 3) {\r\n            const p0 = positions[index];\r\n            const p1 = positions[index + 1];\r\n            const p2 = positions[index + 2];\r\n\r\n            if (trianglePredicate && !trianglePredicate(p0, p1, p2, ray, -1, -1, -1)) {\r\n                continue;\r\n            }\r\n\r\n            const currentIntersectInfo = ray.intersectsTriangle(p0, p1, p2);\r\n\r\n            if (currentIntersectInfo) {\r\n                if (currentIntersectInfo.distance < 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (fastCheck || !intersectInfo || currentIntersectInfo.distance < intersectInfo.distance) {\r\n                    intersectInfo = currentIntersectInfo;\r\n                    intersectInfo.faceId = index / 3;\r\n\r\n                    if (fastCheck) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return intersectInfo;\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        if (this._linesIndexBuffer) {\r\n            this._linesIndexBuffer = null;\r\n        }\r\n    }\r\n\r\n    // Clone\r\n    /**\r\n     * Creates a new submesh from the passed mesh\r\n     * @param newMesh defines the new hosting mesh\r\n     * @param newRenderingMesh defines an optional rendering mesh\r\n     * @returns the new submesh\r\n     */\r\n    public clone(newMesh: AbstractMesh, newRenderingMesh?: Mesh): SubMesh {\r\n        const result = new SubMesh(this.materialIndex, this.verticesStart, this.verticesCount, this.indexStart, this.indexCount, newMesh, newRenderingMesh, false);\r\n\r\n        if (!this.IsGlobal) {\r\n            const boundingInfo = this.getBoundingInfo();\r\n\r\n            if (!boundingInfo) {\r\n                return result;\r\n            }\r\n\r\n            result._boundingInfo = new BoundingInfo(boundingInfo.minimum, boundingInfo.maximum);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Dispose\r\n\r\n    /**\r\n     * Release associated resources\r\n     */\r\n    public dispose(): void {\r\n        if (this._linesIndexBuffer) {\r\n            this._mesh.getScene().getEngine()._releaseBuffer(this._linesIndexBuffer);\r\n            this._linesIndexBuffer = null;\r\n        }\r\n\r\n        // Remove from mesh\r\n        const index = this._mesh.subMeshes.indexOf(this);\r\n        this._mesh.subMeshes.splice(index, 1);\r\n\r\n        this.resetDrawCache();\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"SubMesh\".\r\n     */\r\n    public getClassName(): string {\r\n        return \"SubMesh\";\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new submesh from indices data\r\n     * @param materialIndex the index of the main mesh material\r\n     * @param startIndex the index where to start the copy in the mesh indices array\r\n     * @param indexCount the number of indices to copy then from the startIndex\r\n     * @param mesh the main mesh to create the submesh from\r\n     * @param renderingMesh the optional rendering mesh\r\n     * @param createBoundingBox defines if bounding box should be created for this submesh\r\n     * @returns a new submesh\r\n     */\r\n    public static CreateFromIndices(\r\n        materialIndex: number,\r\n        startIndex: number,\r\n        indexCount: number,\r\n        mesh: AbstractMesh,\r\n        renderingMesh?: Mesh,\r\n        createBoundingBox: boolean = true\r\n    ): SubMesh {\r\n        let minVertexIndex = Number.MAX_VALUE;\r\n        let maxVertexIndex = -Number.MAX_VALUE;\r\n\r\n        const whatWillRender = renderingMesh || mesh;\r\n        const indices = whatWillRender!.getIndices()!;\r\n\r\n        for (let index = startIndex; index < startIndex + indexCount; index++) {\r\n            const vertexIndex = indices[index];\r\n\r\n            if (vertexIndex < minVertexIndex) {\r\n                minVertexIndex = vertexIndex;\r\n            }\r\n            if (vertexIndex > maxVertexIndex) {\r\n                maxVertexIndex = vertexIndex;\r\n            }\r\n        }\r\n\r\n        return new SubMesh(materialIndex, minVertexIndex, maxVertexIndex - minVertexIndex + 1, startIndex, indexCount, mesh, renderingMesh, createBoundingBox);\r\n    }\r\n}\r\n", "/* eslint-disable jsdoc/require-returns-check */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Nullable, FloatArray, IndicesArray, DeepImmutable } from \"../types\";\r\nimport type { Matrix, Vector2 } from \"../Maths/math.vector\";\r\nimport { Vector3, Vector4, TmpVectors } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { Color3 } from \"../Maths/math.color\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { nativeOverride } from \"../Misc/decorators\";\r\nimport type { Coroutine } from \"../Misc/coroutine\";\r\nimport { makeSyncFunction, runCoroutineSync } from \"../Misc/coroutine\";\r\nimport type { ICreateCapsuleOptions } from \"./Builders/capsuleBuilder\";\r\nimport { RuntimeError, ErrorCodes } from \"../Misc/error\";\r\n\r\nimport type { Geometry } from \"../Meshes/geometry\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { SubMesh } from \"./subMesh\";\r\n\r\n/**\r\n * Define an interface for all classes that will get and set the data on vertices\r\n */\r\nexport interface IGetSetVerticesData {\r\n    /**\r\n     * Gets a boolean indicating if specific vertex data is present\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns true is data kind is present\r\n     */\r\n    isVerticesDataPresent(kind: string): boolean;\r\n    /**\r\n     * Gets a specific vertex data attached to this geometry. Float data is constructed if the vertex buffer data cannot be returned directly.\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns a float array containing vertex data\r\n     */\r\n    getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean): Nullable<FloatArray>;\r\n    /**\r\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\r\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns the indices array or an empty array if the mesh has no geometry\r\n     */\r\n    getIndices(copyWhenShared?: boolean, forceCopy?: boolean): Nullable<IndicesArray>;\r\n    /**\r\n     * Set specific vertex data\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the vertex data to use\r\n     * @param updatable defines if the vertex must be flagged as updatable (false as default)\r\n     * @param stride defines the stride to use (0 by default). This value is deduced from the kind value if not specified\r\n     */\r\n    setVerticesData(kind: string, data: FloatArray, updatable: boolean): void;\r\n    /**\r\n     * Update a specific associated vertex buffer\r\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\r\n     * @param makeItUnique defines if the geometry associated with the mesh must be cloned to make the change only for this mesh (and not all meshes associated with the same geometry)\r\n     */\r\n    updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): void;\r\n    /**\r\n     * Creates a new index buffer\r\n     * @param indices defines the indices to store in the index buffer\r\n     * @param totalVertices defines the total number of vertices (could be null)\r\n     * @param updatable defines if the index buffer must be flagged as updatable (false by default)\r\n     */\r\n    setIndices(indices: IndicesArray, totalVertices: Nullable<number>, updatable?: boolean): void;\r\n}\r\n\r\n/** Class used to attach material info to sub section of a vertex data class */\r\nexport class VertexDataMaterialInfo {\r\n    /** Defines the material index to use */\r\n    public materialIndex: number;\r\n    /** Defines vertex index start*/\r\n    public verticesStart: number;\r\n    /** Defines vertices count */\r\n    public verticesCount: number;\r\n    /** Defines index start */\r\n    public indexStart: number;\r\n    /** Defines indices count */\r\n    public indexCount: number;\r\n}\r\n\r\n/**\r\n * This class contains the various kinds of data on every vertex of a mesh used in determining its shape and appearance\r\n */\r\nexport class VertexData {\r\n    /**\r\n     * Mesh side orientation : usually the external or front surface\r\n     */\r\n    public static readonly FRONTSIDE = 0;\r\n    /**\r\n     * Mesh side orientation : usually the internal or back surface\r\n     */\r\n    public static readonly BACKSIDE = 1;\r\n    /**\r\n     * Mesh side orientation : both internal and external or front and back surfaces\r\n     */\r\n    public static readonly DOUBLESIDE = 2;\r\n    /**\r\n     * Mesh side orientation : by default, `FRONTSIDE`\r\n     */\r\n    public static readonly DEFAULTSIDE = 0;\r\n\r\n    private static _UniqueIDGenerator = 0;\r\n\r\n    /**\r\n     * An array of the x, y, z position of each vertex  [...., x, y, z, .....]\r\n     */\r\n    public positions: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the x, y, z normal vector of each vertex  [...., x, y, z, .....]\r\n     */\r\n    public normals: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the x, y, z tangent vector of each vertex  [...., x, y, z, .....]\r\n     */\r\n    public tangents: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A second array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs2: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A third array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs3: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A fourth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs4: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A fifth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs5: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A sixth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs6: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the r, g, b, a, color of each vertex  [...., r, g, b, a, .....]\r\n     */\r\n    public colors: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array containing the list of indices to the array of matrices produced by bones, each vertex have up to 4 indices (8 if the matricesIndicesExtra is set).\r\n     */\r\n    public matricesIndices: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array containing the list of weights defining the weight of each indexed matrix in the final computation\r\n     */\r\n    public matricesWeights: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array extending the number of possible indices\r\n     */\r\n    public matricesIndicesExtra: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array extending the number of possible weights when the number of indices is extended\r\n     */\r\n    public matricesWeightsExtra: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of i, j, k the three vertex indices required for each triangular facet  [...., i, j, k .....]\r\n     */\r\n    public indices: Nullable<IndicesArray>;\r\n\r\n    /**\r\n     * An array defining material association for sub sections of the vertex data\r\n     */\r\n    public materialInfos: Nullable<Array<VertexDataMaterialInfo>>;\r\n\r\n    /**\r\n     * Gets the unique ID of this vertex Data\r\n     */\r\n    public uniqueId = 0;\r\n\r\n    /**\r\n     * Metadata used to store contextual values\r\n     */\r\n    public metadata: any = {};\r\n\r\n    /**\r\n     * Gets or sets a value indicating that the mesh must be flagged with hasVertexAlpha = true\r\n     */\r\n    public hasVertexAlpha: boolean;\r\n\r\n    /**\r\n     * Creates a new VertexData\r\n     */\r\n    public constructor() {\r\n        this.uniqueId = VertexData._UniqueIDGenerator;\r\n        VertexData._UniqueIDGenerator++;\r\n    }\r\n\r\n    /**\r\n     * Uses the passed data array to set the set the values for the specified kind of data\r\n     * @param data a linear array of floating numbers\r\n     * @param kind the type of data that is being set, eg positions, colors etc\r\n     */\r\n    public set(data: FloatArray, kind: string) {\r\n        if (!data.length) {\r\n            Logger.Warn(`Setting vertex data kind '${kind}' with an empty array`);\r\n        }\r\n\r\n        switch (kind) {\r\n            case VertexBuffer.PositionKind:\r\n                this.positions = data;\r\n                break;\r\n            case VertexBuffer.NormalKind:\r\n                this.normals = data;\r\n                break;\r\n            case VertexBuffer.TangentKind:\r\n                this.tangents = data;\r\n                break;\r\n            case VertexBuffer.UVKind:\r\n                this.uvs = data;\r\n                break;\r\n            case VertexBuffer.UV2Kind:\r\n                this.uvs2 = data;\r\n                break;\r\n            case VertexBuffer.UV3Kind:\r\n                this.uvs3 = data;\r\n                break;\r\n            case VertexBuffer.UV4Kind:\r\n                this.uvs4 = data;\r\n                break;\r\n            case VertexBuffer.UV5Kind:\r\n                this.uvs5 = data;\r\n                break;\r\n            case VertexBuffer.UV6Kind:\r\n                this.uvs6 = data;\r\n                break;\r\n            case VertexBuffer.ColorKind:\r\n                this.colors = data;\r\n                break;\r\n            case VertexBuffer.MatricesIndicesKind:\r\n                this.matricesIndices = data;\r\n                break;\r\n            case VertexBuffer.MatricesWeightsKind:\r\n                this.matricesWeights = data;\r\n                break;\r\n            case VertexBuffer.MatricesIndicesExtraKind:\r\n                this.matricesIndicesExtra = data;\r\n                break;\r\n            case VertexBuffer.MatricesWeightsExtraKind:\r\n                this.matricesWeightsExtra = data;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Associates the vertexData to the passed Mesh.\r\n     * Sets it as updatable or not (default `false`)\r\n     * @param mesh the mesh the vertexData is applied to\r\n     * @param updatable when used and having the value true allows new data to update the vertexData\r\n     * @returns the VertexData\r\n     */\r\n    public applyToMesh(mesh: Mesh, updatable?: boolean): VertexData {\r\n        this._applyTo(mesh, updatable, false);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Associates the vertexData to the passed Geometry.\r\n     * Sets it as updatable or not (default `false`)\r\n     * @param geometry the geometry the vertexData is applied to\r\n     * @param updatable when used and having the value true allows new data to update the vertexData\r\n     * @returns VertexData\r\n     */\r\n    public applyToGeometry(geometry: Geometry, updatable?: boolean): VertexData {\r\n        this._applyTo(geometry, updatable, false);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the associated mesh\r\n     * @param mesh the mesh to be updated\r\n     * @returns VertexData\r\n     */\r\n    public updateMesh(mesh: Mesh): VertexData {\r\n        this._update(mesh);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the associated geometry\r\n     * @param geometry the geometry to be updated\r\n     * @returns VertexData.\r\n     */\r\n    public updateGeometry(geometry: Geometry): VertexData {\r\n        this._update(geometry);\r\n        return this;\r\n    }\r\n\r\n    private readonly _applyTo = makeSyncFunction(this._applyToCoroutine.bind(this));\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public *_applyToCoroutine(meshOrGeometry: IGetSetVerticesData, updatable: boolean = false, isAsync: boolean): Coroutine<VertexData> {\r\n        if (this.positions) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.PositionKind, this.positions, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.normals) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.NormalKind, this.normals, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.tangents) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.TangentKind, this.tangents, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UVKind, this.uvs, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs2) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV2Kind, this.uvs2, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs3) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV3Kind, this.uvs3, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs4) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV4Kind, this.uvs4, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs5) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV5Kind, this.uvs5, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs6) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV6Kind, this.uvs6, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.colors) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.ColorKind, this.colors, updatable);\r\n            if (this.hasVertexAlpha && (meshOrGeometry as any).hasVertexAlpha !== undefined) {\r\n                (meshOrGeometry as any).hasVertexAlpha = true;\r\n            }\r\n\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesIndices) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesIndicesKind, this.matricesIndices, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesWeights) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesWeightsKind, this.matricesWeights, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesIndicesExtra) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesWeightsExtra) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.indices) {\r\n            meshOrGeometry.setIndices(this.indices, null, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        } else {\r\n            meshOrGeometry.setIndices([], null);\r\n        }\r\n\r\n        if ((meshOrGeometry as Mesh).subMeshes && this.materialInfos && this.materialInfos.length > 1) {\r\n            const mesh = meshOrGeometry as Mesh;\r\n            mesh.subMeshes = [];\r\n            for (const matInfo of this.materialInfos) {\r\n                new SubMesh(matInfo.materialIndex, matInfo.verticesStart, matInfo.verticesCount, matInfo.indexStart, matInfo.indexCount, mesh);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _update(meshOrGeometry: IGetSetVerticesData, updateExtends?: boolean, makeItUnique?: boolean): VertexData {\r\n        if (this.positions) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.PositionKind, this.positions, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.normals) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.NormalKind, this.normals, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.tangents) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.TangentKind, this.tangents, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UVKind, this.uvs, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs2) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV2Kind, this.uvs2, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs3) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV3Kind, this.uvs3, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs4) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV4Kind, this.uvs4, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs5) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV5Kind, this.uvs5, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs6) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV6Kind, this.uvs6, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.colors) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.ColorKind, this.colors, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesIndices) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesIndicesKind, this.matricesIndices, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesWeights) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesWeightsKind, this.matricesWeights, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesIndicesExtra) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesWeightsExtra) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.indices) {\r\n            meshOrGeometry.setIndices(this.indices, null);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    @nativeOverride.filter((...[coordinates]: Parameters<typeof VertexData._TransformVector3Coordinates>) => !Array.isArray(coordinates))\r\n    private static _TransformVector3Coordinates(coordinates: FloatArray, transformation: DeepImmutable<Matrix>, offset = 0, length = coordinates.length) {\r\n        const coordinate = TmpVectors.Vector3[0];\r\n        const transformedCoordinate = TmpVectors.Vector3[1];\r\n        for (let index = offset; index < offset + length; index += 3) {\r\n            Vector3.FromArrayToRef(coordinates, index, coordinate);\r\n            Vector3.TransformCoordinatesToRef(coordinate, transformation, transformedCoordinate);\r\n            coordinates[index] = transformedCoordinate.x;\r\n            coordinates[index + 1] = transformedCoordinate.y;\r\n            coordinates[index + 2] = transformedCoordinate.z;\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[normals]: Parameters<typeof VertexData._TransformVector3Normals>) => !Array.isArray(normals))\r\n    private static _TransformVector3Normals(normals: FloatArray, transformation: DeepImmutable<Matrix>, offset = 0, length = normals.length) {\r\n        const normal = TmpVectors.Vector3[0];\r\n        const transformedNormal = TmpVectors.Vector3[1];\r\n        for (let index = offset; index < offset + length; index += 3) {\r\n            Vector3.FromArrayToRef(normals, index, normal);\r\n            Vector3.TransformNormalToRef(normal, transformation, transformedNormal);\r\n            normals[index] = transformedNormal.x;\r\n            normals[index + 1] = transformedNormal.y;\r\n            normals[index + 2] = transformedNormal.z;\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[normals]: Parameters<typeof VertexData._TransformVector4Normals>) => !Array.isArray(normals))\r\n    private static _TransformVector4Normals(normals: FloatArray, transformation: DeepImmutable<Matrix>, offset = 0, length = normals.length) {\r\n        const normal = TmpVectors.Vector4[0];\r\n        const transformedNormal = TmpVectors.Vector4[1];\r\n        for (let index = offset; index < offset + length; index += 4) {\r\n            Vector4.FromArrayToRef(normals, index, normal);\r\n            Vector4.TransformNormalToRef(normal, transformation, transformedNormal);\r\n            normals[index] = transformedNormal.x;\r\n            normals[index + 1] = transformedNormal.y;\r\n            normals[index + 2] = transformedNormal.z;\r\n            normals[index + 3] = transformedNormal.w;\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[indices]: Parameters<typeof VertexData._FlipFaces>) => !Array.isArray(indices))\r\n    private static _FlipFaces(indices: IndicesArray, offset = 0, length = indices.length) {\r\n        for (let index = offset; index < offset + length; index += 3) {\r\n            const tmp = indices[index + 1];\r\n            indices[index + 1] = indices[index + 2];\r\n            indices[index + 2] = tmp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transforms each position and each normal of the vertexData according to the passed Matrix\r\n     * @param matrix the transforming matrix\r\n     * @returns the VertexData\r\n     */\r\n    public transform(matrix: Matrix): VertexData {\r\n        const flip = matrix.determinant() < 0;\r\n        if (this.positions) {\r\n            VertexData._TransformVector3Coordinates(this.positions, matrix);\r\n        }\r\n\r\n        if (this.normals) {\r\n            VertexData._TransformVector3Normals(this.normals, matrix);\r\n        }\r\n\r\n        if (this.tangents) {\r\n            VertexData._TransformVector4Normals(this.tangents, matrix);\r\n        }\r\n\r\n        if (flip && this.indices) {\r\n            VertexData._FlipFaces(this.indices);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Generates an array of vertex data where each vertex data only has one material info\r\n     * @returns An array of VertexData\r\n     */\r\n    public splitBasedOnMaterialID() {\r\n        if (!this.materialInfos || this.materialInfos.length < 2) {\r\n            return [this];\r\n        }\r\n\r\n        const result: VertexData[] = [];\r\n        for (const materialInfo of this.materialInfos) {\r\n            const vertexData = new VertexData();\r\n\r\n            if (this.positions) {\r\n                vertexData.positions = this.positions.slice(materialInfo.verticesStart * 3, (materialInfo.verticesCount + materialInfo.verticesStart) * 3);\r\n            }\r\n\r\n            if (this.normals) {\r\n                vertexData.normals = this.normals.slice(materialInfo.verticesStart * 3, (materialInfo.verticesCount + materialInfo.verticesStart) * 3);\r\n            }\r\n\r\n            if (this.tangents) {\r\n                vertexData.tangents = this.tangents.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.colors) {\r\n                vertexData.colors = this.colors.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.uvs) {\r\n                vertexData.uvs = this.uvs.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs2) {\r\n                vertexData.uvs2 = this.uvs2.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs3) {\r\n                vertexData.uvs3 = this.uvs3.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs4) {\r\n                vertexData.uvs4 = this.uvs4.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs5) {\r\n                vertexData.uvs5 = this.uvs5.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs6) {\r\n                vertexData.uvs6 = this.uvs6.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.matricesIndices) {\r\n                vertexData.matricesIndices = this.matricesIndices.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.matricesIndicesExtra) {\r\n                vertexData.matricesIndicesExtra = this.matricesIndicesExtra.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.matricesWeights) {\r\n                vertexData.matricesWeights = this.matricesWeights.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.matricesWeightsExtra) {\r\n                vertexData.matricesWeightsExtra = this.matricesWeightsExtra.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.indices) {\r\n                vertexData.indices = [];\r\n                for (let index = materialInfo.indexStart; index < materialInfo.indexStart + materialInfo.indexCount; index++) {\r\n                    vertexData.indices.push(this.indices[index] - materialInfo.verticesStart);\r\n                }\r\n            }\r\n\r\n            const newMaterialInfo = new VertexDataMaterialInfo();\r\n            newMaterialInfo.indexStart = 0;\r\n            newMaterialInfo.indexCount = vertexData.indices ? vertexData.indices.length : 0;\r\n            newMaterialInfo.materialIndex = materialInfo.materialIndex;\r\n            newMaterialInfo.verticesStart = 0;\r\n            newMaterialInfo.verticesCount = (vertexData.positions ? vertexData.positions.length : 0) / 3;\r\n            vertexData.materialInfos = [newMaterialInfo];\r\n\r\n            result.push(vertexData);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Merges the passed VertexData into the current one\r\n     * @param others the VertexData to be merged into the current one\r\n     * @param use32BitsIndices defines a boolean indicating if indices must be store in a 32 bits array\r\n     * @param forceCloneIndices defines a boolean indicating if indices are forced to be cloned\r\n     * @param mergeMaterialIds defines a boolean indicating if we need to merge the material infos\r\n     * @param enableCompletion defines a boolean indicating if the vertex data should be completed to be compatible\r\n     * @returns the modified VertexData\r\n     */\r\n    public merge(others: VertexData | VertexData[], use32BitsIndices = false, forceCloneIndices = false, mergeMaterialIds = false, enableCompletion = false) {\r\n        const vertexDatas: { vertexData: VertexData; transform?: Matrix }[] = Array.isArray(others)\r\n            ? others.map((other) => {\r\n                  return { vertexData: other };\r\n              })\r\n            : [{ vertexData: others }];\r\n        return runCoroutineSync(this._mergeCoroutine(undefined, vertexDatas, use32BitsIndices, false, forceCloneIndices, mergeMaterialIds, enableCompletion));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public *_mergeCoroutine(\r\n        transform: Matrix | undefined,\r\n        vertexDatas: { vertexData: VertexData; transform?: Matrix }[],\r\n        use32BitsIndices = false,\r\n        isAsync: boolean,\r\n        forceCloneIndices: boolean,\r\n        mergeMaterialIds = false,\r\n        enableCompletion = false\r\n    ): Coroutine<VertexData> {\r\n        this._validate();\r\n\r\n        let others = vertexDatas.map((vertexData) => vertexData.vertexData);\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        let root: VertexData = this;\r\n\r\n        if (enableCompletion) {\r\n            // First let's make sure we have the max set of attributes on the main vertex data\r\n            for (const other of others) {\r\n                if (!other) {\r\n                    continue;\r\n                }\r\n\r\n                other._validate();\r\n\r\n                if (!this.normals && other.normals) {\r\n                    this.normals = new Float32Array(this.positions!.length);\r\n                }\r\n\r\n                if (!this.tangents && other.tangents) {\r\n                    this.tangents = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (!this.uvs && other.uvs) {\r\n                    this.uvs = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs2 && other.uvs2) {\r\n                    this.uvs2 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs3 && other.uvs3) {\r\n                    this.uvs3 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs4 && other.uvs4) {\r\n                    this.uvs4 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs5 && other.uvs5) {\r\n                    this.uvs5 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs6 && other.uvs6) {\r\n                    this.uvs6 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.colors && other.colors) {\r\n                    this.colors = new Float32Array((this.positions!.length / 3) * 4);\r\n                    this.colors.fill(1); // Set to white by default\r\n                }\r\n\r\n                if (!this.matricesIndices && other.matricesIndices) {\r\n                    this.matricesIndices = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (!this.matricesWeights && other.matricesWeights) {\r\n                    this.matricesWeights = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (!this.matricesIndicesExtra && other.matricesIndicesExtra) {\r\n                    this.matricesIndicesExtra = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (!this.matricesWeightsExtra && other.matricesWeightsExtra) {\r\n                    this.matricesWeightsExtra = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const other of others) {\r\n            if (!other) {\r\n                continue;\r\n            }\r\n\r\n            if (!enableCompletion) {\r\n                other._validate();\r\n                if (\r\n                    !this.normals !== !other.normals ||\r\n                    !this.tangents !== !other.tangents ||\r\n                    !this.uvs !== !other.uvs ||\r\n                    !this.uvs2 !== !other.uvs2 ||\r\n                    !this.uvs3 !== !other.uvs3 ||\r\n                    !this.uvs4 !== !other.uvs4 ||\r\n                    !this.uvs5 !== !other.uvs5 ||\r\n                    !this.uvs6 !== !other.uvs6 ||\r\n                    !this.colors !== !other.colors ||\r\n                    !this.matricesIndices !== !other.matricesIndices ||\r\n                    !this.matricesWeights !== !other.matricesWeights ||\r\n                    !this.matricesIndicesExtra !== !other.matricesIndicesExtra ||\r\n                    !this.matricesWeightsExtra !== !other.matricesWeightsExtra\r\n                ) {\r\n                    throw new Error(\"Cannot merge vertex data that do not have the same set of attributes\");\r\n                }\r\n            } else {\r\n                // Align the others with main set of attributes\r\n                if (this.normals && !other.normals) {\r\n                    other.normals = new Float32Array(other.positions!.length);\r\n                }\r\n\r\n                if (this.tangents && !other.tangents) {\r\n                    other.tangents = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (this.uvs && !other.uvs) {\r\n                    other.uvs = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.uvs2 && !other.uvs2) {\r\n                    other.uvs2 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.uvs3 && !other.uvs3) {\r\n                    other.uvs3 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.uvs4 && !other.uvs4) {\r\n                    other.uvs4 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n                if (this.uvs5 && !other.uvs5) {\r\n                    other.uvs5 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.uvs6 && !other.uvs6) {\r\n                    other.uvs6 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.colors && !other.colors) {\r\n                    other.colors = new Float32Array((other.positions!.length / 3) * 4);\r\n                    other.colors.fill(1); // Set to white by default\r\n                }\r\n\r\n                if (this.matricesIndices && !other.matricesIndices) {\r\n                    other.matricesIndices = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n                if (this.matricesWeights && !other.matricesWeights) {\r\n                    other.matricesWeights = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (this.matricesIndicesExtra && !other.matricesIndicesExtra) {\r\n                    other.matricesIndicesExtra = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (this.matricesWeightsExtra && !other.matricesWeightsExtra) {\r\n                    other.matricesWeightsExtra = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (mergeMaterialIds) {\r\n            // Merge material infos\r\n            let materialIndex = 0;\r\n            let indexOffset = 0;\r\n            let vertexOffset = 0;\r\n            const materialInfos: VertexDataMaterialInfo[] = [];\r\n            let currentMaterialInfo: Nullable<VertexDataMaterialInfo> = null;\r\n            const vertexDataList: { vertexData: VertexData; transform?: Matrix }[] = [];\r\n\r\n            // We need to split vertexData with more than one materialInfo\r\n            for (const split of this.splitBasedOnMaterialID()) {\r\n                vertexDataList.push({ vertexData: split, transform: transform });\r\n            }\r\n\r\n            for (const data of vertexDatas) {\r\n                if (!data.vertexData) {\r\n                    continue;\r\n                }\r\n                for (const split of data.vertexData.splitBasedOnMaterialID()) {\r\n                    vertexDataList.push({ vertexData: split, transform: data.transform });\r\n                }\r\n            }\r\n\r\n            // Sort by material IDs\r\n            vertexDataList.sort((a, b) => {\r\n                const matInfoA = a.vertexData.materialInfos ? a.vertexData.materialInfos[0].materialIndex : 0;\r\n                const matInfoB = b.vertexData.materialInfos ? b.vertexData.materialInfos[0].materialIndex : 0;\r\n\r\n                if (matInfoA > matInfoB) {\r\n                    return 1;\r\n                }\r\n\r\n                if (matInfoA === matInfoB) {\r\n                    return 0;\r\n                }\r\n\r\n                return -1;\r\n            });\r\n\r\n            // Build the new material info\r\n            for (const vertexDataSource of vertexDataList) {\r\n                const vertexData = vertexDataSource.vertexData;\r\n                if (vertexData.materialInfos) {\r\n                    materialIndex = vertexData.materialInfos[0].materialIndex;\r\n                } else {\r\n                    materialIndex = 0;\r\n                }\r\n                if (currentMaterialInfo && currentMaterialInfo.materialIndex === materialIndex) {\r\n                    currentMaterialInfo.indexCount += vertexData.indices!.length;\r\n                    currentMaterialInfo.verticesCount += vertexData.positions!.length / 3;\r\n                } else {\r\n                    const materialInfo = new VertexDataMaterialInfo();\r\n                    materialInfo.materialIndex = materialIndex;\r\n                    materialInfo.indexStart = indexOffset;\r\n                    materialInfo.indexCount = vertexData.indices!.length;\r\n                    materialInfo.verticesStart = vertexOffset;\r\n                    materialInfo.verticesCount = vertexData.positions!.length / 3;\r\n\r\n                    materialInfos.push(materialInfo);\r\n                    currentMaterialInfo = materialInfo;\r\n                }\r\n                indexOffset += vertexData.indices!.length;\r\n                vertexOffset += vertexData.positions!.length / 3;\r\n            }\r\n            // Extract sorted values\r\n            const first = vertexDataList.splice(0, 1)[0];\r\n            root = first.vertexData;\r\n            transform = first.transform;\r\n            others = vertexDataList.map((v) => v.vertexData);\r\n            vertexDatas = vertexDataList;\r\n\r\n            this.materialInfos = materialInfos;\r\n        }\r\n\r\n        // Merge geometries\r\n        const totalIndices = others.reduce((indexSum, vertexData) => indexSum + (vertexData.indices?.length ?? 0), root.indices?.length ?? 0);\r\n        const sliceIndices = forceCloneIndices || others.some((vertexData) => vertexData.indices === root.indices);\r\n        let indices = sliceIndices ? root.indices?.slice() : root.indices;\r\n        if (totalIndices > 0) {\r\n            let indicesOffset = indices?.length ?? 0;\r\n\r\n            if (!indices) {\r\n                indices = new Array<number>(totalIndices);\r\n            }\r\n\r\n            if (indices.length !== totalIndices) {\r\n                if (Array.isArray(indices)) {\r\n                    indices.length = totalIndices;\r\n                } else {\r\n                    const temp = use32BitsIndices || indices instanceof Uint32Array ? new Uint32Array(totalIndices) : new Uint16Array(totalIndices);\r\n                    temp.set(indices);\r\n                    indices = temp;\r\n                }\r\n\r\n                if (transform && transform.determinant() < 0) {\r\n                    VertexData._FlipFaces(indices, 0, indicesOffset);\r\n                }\r\n            }\r\n\r\n            let positionsOffset = root.positions ? root.positions.length / 3 : 0;\r\n            for (const { vertexData: other, transform } of vertexDatas) {\r\n                if (other.indices) {\r\n                    for (let index = 0; index < other.indices.length; index++) {\r\n                        indices[indicesOffset + index] = other.indices[index] + positionsOffset;\r\n                    }\r\n\r\n                    if (transform && transform.determinant() < 0) {\r\n                        VertexData._FlipFaces(indices, indicesOffset, other.indices.length);\r\n                    }\r\n\r\n                    // The call to _validate already checked for positions\r\n                    positionsOffset += other.positions!.length / 3;\r\n                    indicesOffset += other.indices.length;\r\n\r\n                    if (isAsync) {\r\n                        yield;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.indices = indices!;\r\n\r\n        this.positions = VertexData._MergeElement(\r\n            VertexBuffer.PositionKind,\r\n            root.positions,\r\n            transform,\r\n            vertexDatas.map((other) => [other.vertexData.positions, other.transform])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        if (root.normals) {\r\n            this.normals = VertexData._MergeElement(\r\n                VertexBuffer.NormalKind,\r\n                root.normals,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.normals, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.tangents) {\r\n            this.tangents = VertexData._MergeElement(\r\n                VertexBuffer.TangentKind,\r\n                root.tangents,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.tangents, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs) {\r\n            this.uvs = VertexData._MergeElement(\r\n                VertexBuffer.UVKind,\r\n                root.uvs,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs2) {\r\n            this.uvs2 = VertexData._MergeElement(\r\n                VertexBuffer.UV2Kind,\r\n                root.uvs2,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs2, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs3) {\r\n            this.uvs3 = VertexData._MergeElement(\r\n                VertexBuffer.UV3Kind,\r\n                root.uvs3,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs3, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs4) {\r\n            this.uvs4 = VertexData._MergeElement(\r\n                VertexBuffer.UV4Kind,\r\n                root.uvs4,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs4, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs5) {\r\n            this.uvs5 = VertexData._MergeElement(\r\n                VertexBuffer.UV5Kind,\r\n                root.uvs5,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs5, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs6) {\r\n            this.uvs6 = VertexData._MergeElement(\r\n                VertexBuffer.UV6Kind,\r\n                root.uvs6,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs6, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.colors) {\r\n            this.colors = VertexData._MergeElement(\r\n                VertexBuffer.ColorKind,\r\n                root.colors,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.colors, other.transform])\r\n            );\r\n            if (root.hasVertexAlpha !== undefined || vertexDatas.some((other) => other.vertexData.hasVertexAlpha !== undefined)) {\r\n                this.hasVertexAlpha = root.hasVertexAlpha || vertexDatas.some((other) => other.vertexData.hasVertexAlpha);\r\n            }\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.matricesIndices) {\r\n            this.matricesIndices = VertexData._MergeElement(\r\n                VertexBuffer.MatricesIndicesKind,\r\n                root.matricesIndices,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.matricesIndices, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.matricesWeights) {\r\n            this.matricesWeights = VertexData._MergeElement(\r\n                VertexBuffer.MatricesWeightsKind,\r\n                root.matricesWeights,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.matricesWeights, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.matricesIndicesExtra) {\r\n            this.matricesIndicesExtra = VertexData._MergeElement(\r\n                VertexBuffer.MatricesIndicesExtraKind,\r\n                root.matricesIndicesExtra,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.matricesIndicesExtra, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.matricesWeightsExtra) {\r\n            this.matricesWeightsExtra = VertexData._MergeElement(\r\n                VertexBuffer.MatricesWeightsExtraKind,\r\n                root.matricesWeightsExtra,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.matricesWeightsExtra, other.transform])\r\n            );\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private static _MergeElement(\r\n        kind: string,\r\n        source: Nullable<FloatArray>,\r\n        transform: Matrix | undefined,\r\n        others: readonly (readonly [element: Nullable<FloatArray>, transform?: Matrix])[]\r\n    ): Nullable<FloatArray> {\r\n        const nonNullOthers = others.filter((other): other is [element: FloatArray, transform?: Matrix] => other[0] !== null && other[0] !== undefined);\r\n\r\n        // If there is no source to copy and no other non-null sources then skip this element.\r\n        if (!source && nonNullOthers.length == 0) {\r\n            return source;\r\n        }\r\n\r\n        if (!source) {\r\n            return this._MergeElement(kind, nonNullOthers[0][0], nonNullOthers[0][1], nonNullOthers.slice(1));\r\n        }\r\n\r\n        const len = nonNullOthers.reduce((sumLen, elements) => sumLen + elements[0].length, source.length);\r\n\r\n        const transformRange =\r\n            kind === VertexBuffer.PositionKind\r\n                ? VertexData._TransformVector3Coordinates\r\n                : kind === VertexBuffer.NormalKind\r\n                  ? VertexData._TransformVector3Normals\r\n                  : kind === VertexBuffer.TangentKind\r\n                    ? VertexData._TransformVector4Normals\r\n                    : () => {};\r\n\r\n        if (source instanceof Float32Array) {\r\n            // use non-loop method when the source is Float32Array\r\n            const ret32 = new Float32Array(len);\r\n            ret32.set(source);\r\n            transform && transformRange(ret32, transform, 0, source.length);\r\n\r\n            let offset = source.length;\r\n            for (const [vertexData, transform] of nonNullOthers) {\r\n                ret32.set(vertexData, offset);\r\n                transform && transformRange(ret32, transform, offset, vertexData.length);\r\n                offset += vertexData.length;\r\n            }\r\n            return ret32;\r\n        } else {\r\n            // don't use concat as it is super slow, just loop for other cases\r\n            const ret = new Array<number>(len);\r\n            for (let i = 0; i < source.length; i++) {\r\n                ret[i] = source[i];\r\n            }\r\n            transform && transformRange(ret, transform, 0, source.length);\r\n\r\n            let offset = source.length;\r\n            for (const [vertexData, transform] of nonNullOthers) {\r\n                for (let i = 0; i < vertexData.length; i++) {\r\n                    ret[offset + i] = vertexData[i];\r\n                }\r\n                transform && transformRange(ret, transform, offset, vertexData.length);\r\n                offset += vertexData.length;\r\n            }\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    private _validate(): void {\r\n        if (!this.positions) {\r\n            throw new RuntimeError(\"Positions are required\", ErrorCodes.MeshInvalidPositionsError);\r\n        }\r\n\r\n        const getElementCount = (kind: string, values: FloatArray) => {\r\n            const stride = VertexBuffer.DeduceStride(kind);\r\n            if (values.length % stride !== 0) {\r\n                throw new Error(\"The \" + kind + \"s array count must be a multiple of \" + stride);\r\n            }\r\n\r\n            return values.length / stride;\r\n        };\r\n\r\n        const positionsElementCount = getElementCount(VertexBuffer.PositionKind, this.positions);\r\n\r\n        const validateElementCount = (kind: string, values: FloatArray) => {\r\n            const elementCount = getElementCount(kind, values);\r\n            if (elementCount !== positionsElementCount) {\r\n                throw new Error(\"The \" + kind + \"s element count (\" + elementCount + \") does not match the positions count (\" + positionsElementCount + \")\");\r\n            }\r\n        };\r\n\r\n        if (this.normals) {\r\n            validateElementCount(VertexBuffer.NormalKind, this.normals);\r\n        }\r\n        if (this.tangents) {\r\n            validateElementCount(VertexBuffer.TangentKind, this.tangents);\r\n        }\r\n        if (this.uvs) {\r\n            validateElementCount(VertexBuffer.UVKind, this.uvs);\r\n        }\r\n        if (this.uvs2) {\r\n            validateElementCount(VertexBuffer.UV2Kind, this.uvs2);\r\n        }\r\n        if (this.uvs3) {\r\n            validateElementCount(VertexBuffer.UV3Kind, this.uvs3);\r\n        }\r\n        if (this.uvs4) {\r\n            validateElementCount(VertexBuffer.UV4Kind, this.uvs4);\r\n        }\r\n        if (this.uvs5) {\r\n            validateElementCount(VertexBuffer.UV5Kind, this.uvs5);\r\n        }\r\n        if (this.uvs6) {\r\n            validateElementCount(VertexBuffer.UV6Kind, this.uvs6);\r\n        }\r\n        if (this.colors) {\r\n            validateElementCount(VertexBuffer.ColorKind, this.colors);\r\n        }\r\n        if (this.matricesIndices) {\r\n            validateElementCount(VertexBuffer.MatricesIndicesKind, this.matricesIndices);\r\n        }\r\n        if (this.matricesWeights) {\r\n            validateElementCount(VertexBuffer.MatricesWeightsKind, this.matricesWeights);\r\n        }\r\n        if (this.matricesIndicesExtra) {\r\n            validateElementCount(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra);\r\n        }\r\n        if (this.matricesWeightsExtra) {\r\n            validateElementCount(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone the current vertex data\r\n     * @returns a copy of the current data\r\n     */\r\n    public clone() {\r\n        const serializationObject = this.serialize();\r\n        return VertexData.Parse(serializationObject);\r\n    }\r\n\r\n    /**\r\n     * Serializes the VertexData\r\n     * @returns a serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        if (this.positions) {\r\n            serializationObject.positions = Array.from(this.positions);\r\n        }\r\n\r\n        if (this.normals) {\r\n            serializationObject.normals = Array.from(this.normals);\r\n        }\r\n\r\n        if (this.tangents) {\r\n            serializationObject.tangents = Array.from(this.tangents);\r\n        }\r\n\r\n        if (this.uvs) {\r\n            serializationObject.uvs = Array.from(this.uvs);\r\n        }\r\n\r\n        if (this.uvs2) {\r\n            serializationObject.uvs2 = Array.from(this.uvs2);\r\n        }\r\n\r\n        if (this.uvs3) {\r\n            serializationObject.uvs3 = Array.from(this.uvs3);\r\n        }\r\n\r\n        if (this.uvs4) {\r\n            serializationObject.uvs4 = Array.from(this.uvs4);\r\n        }\r\n\r\n        if (this.uvs5) {\r\n            serializationObject.uvs5 = Array.from(this.uvs5);\r\n        }\r\n\r\n        if (this.uvs6) {\r\n            serializationObject.uvs6 = Array.from(this.uvs6);\r\n        }\r\n\r\n        if (this.colors) {\r\n            serializationObject.colors = Array.from(this.colors);\r\n            serializationObject.hasVertexAlpha = this.hasVertexAlpha;\r\n        }\r\n\r\n        if (this.matricesIndices) {\r\n            serializationObject.matricesIndices = Array.from(this.matricesIndices);\r\n            serializationObject.matricesIndices._isExpanded = true;\r\n        }\r\n\r\n        if (this.matricesWeights) {\r\n            serializationObject.matricesWeights = Array.from(this.matricesWeights);\r\n        }\r\n\r\n        if (this.matricesIndicesExtra) {\r\n            serializationObject.matricesIndicesExtra = Array.from(this.matricesIndicesExtra);\r\n            serializationObject.matricesIndicesExtra._isExpanded = true;\r\n        }\r\n\r\n        if (this.matricesWeightsExtra) {\r\n            serializationObject.matricesWeightsExtra = Array.from(this.matricesWeightsExtra);\r\n        }\r\n\r\n        serializationObject.indices = Array.from(this.indices as number[]);\r\n\r\n        if (this.materialInfos) {\r\n            serializationObject.materialInfos = [];\r\n            for (const materialInfo of this.materialInfos) {\r\n                const materialInfoSerializationObject = {\r\n                    indexStart: materialInfo.indexStart,\r\n                    indexCount: materialInfo.indexCount,\r\n                    materialIndex: materialInfo.materialIndex,\r\n                    verticesStart: materialInfo.verticesStart,\r\n                    verticesCount: materialInfo.verticesCount,\r\n                };\r\n                serializationObject.materialInfos.push(materialInfoSerializationObject);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Extracts the vertexData from a mesh\r\n     * @param mesh the mesh from which to extract the VertexData\r\n     * @param copyWhenShared defines if the VertexData must be cloned when shared between multiple meshes, optional, default false\r\n     * @param forceCopy indicating that the VertexData must be cloned, optional, default false\r\n     * @returns the object VertexData associated to the passed mesh\r\n     */\r\n    public static ExtractFromMesh(mesh: Mesh, copyWhenShared?: boolean, forceCopy?: boolean): VertexData {\r\n        return VertexData._ExtractFrom(mesh, copyWhenShared, forceCopy);\r\n    }\r\n\r\n    /**\r\n     * Extracts the vertexData from the geometry\r\n     * @param geometry the geometry from which to extract the VertexData\r\n     * @param copyWhenShared defines if the VertexData must be cloned when the geometry is shared between multiple meshes, optional, default false\r\n     * @param forceCopy indicating that the VertexData must be cloned, optional, default false\r\n     * @returns the object VertexData associated to the passed mesh\r\n     */\r\n    public static ExtractFromGeometry(geometry: Geometry, copyWhenShared?: boolean, forceCopy?: boolean): VertexData {\r\n        return VertexData._ExtractFrom(geometry, copyWhenShared, forceCopy);\r\n    }\r\n\r\n    private static _ExtractFrom(meshOrGeometry: IGetSetVerticesData, copyWhenShared?: boolean, forceCopy?: boolean): VertexData {\r\n        const result = new VertexData();\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            result.positions = meshOrGeometry.getVerticesData(VertexBuffer.PositionKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            result.normals = meshOrGeometry.getVerticesData(VertexBuffer.NormalKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            result.tangents = meshOrGeometry.getVerticesData(VertexBuffer.TangentKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            result.uvs = meshOrGeometry.getVerticesData(VertexBuffer.UVKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n            result.uvs2 = meshOrGeometry.getVerticesData(VertexBuffer.UV2Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV3Kind)) {\r\n            result.uvs3 = meshOrGeometry.getVerticesData(VertexBuffer.UV3Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV4Kind)) {\r\n            result.uvs4 = meshOrGeometry.getVerticesData(VertexBuffer.UV4Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV5Kind)) {\r\n            result.uvs5 = meshOrGeometry.getVerticesData(VertexBuffer.UV5Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV6Kind)) {\r\n            result.uvs6 = meshOrGeometry.getVerticesData(VertexBuffer.UV6Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            result.colors = meshOrGeometry.getVerticesData(VertexBuffer.ColorKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\r\n            result.matricesIndices = meshOrGeometry.getVerticesData(VertexBuffer.MatricesIndicesKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            result.matricesWeights = meshOrGeometry.getVerticesData(VertexBuffer.MatricesWeightsKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesIndicesExtraKind)) {\r\n            result.matricesIndicesExtra = meshOrGeometry.getVerticesData(VertexBuffer.MatricesIndicesExtraKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\r\n            result.matricesWeightsExtra = meshOrGeometry.getVerticesData(VertexBuffer.MatricesWeightsExtraKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        result.indices = meshOrGeometry.getIndices(copyWhenShared, forceCopy);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Ribbon\r\n     * @param options an object used to set the following optional parameters for the ribbon, required but can be empty\r\n     * * pathArray array of paths, each of which an array of successive Vector3\r\n     * * closeArray creates a seam between the first and the last paths of the pathArray, optional, default false\r\n     * * closePath creates a seam between the first and the last points of each path of the path array, optional, default false\r\n     * * offset a positive integer, only used when pathArray contains a single path (offset = 10 means the point 1 is joined to the point 11), default rounded half size of the pathArray length\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * * invertUV swaps in the U and V coordinates when applying a texture, optional, default false\r\n     * * uvs a linear array, of length 2 * number of vertices, of custom UV values, optional\r\n     * * colors a linear array, of length 4 * number of vertices, of custom color values, optional\r\n     * @returns the VertexData of the ribbon\r\n     * @deprecated use CreateRibbonVertexData instead\r\n     */\r\n    public static CreateRibbon(options: {\r\n        pathArray: Vector3[][];\r\n        closeArray?: boolean;\r\n        closePath?: boolean;\r\n        offset?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        invertUV?: boolean;\r\n        uvs?: Vector2[];\r\n        colors?: Color4[];\r\n    }): VertexData {\r\n        throw _WarnImport(\"ribbonBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a box\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * size sets the width, height and depth of the box to the value of size, optional default 1\r\n     * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\r\n     * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\r\n     * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\r\n     * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n     * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the box\r\n     * @deprecated Please use CreateBoxVertexData from the BoxBuilder file instead\r\n     */\r\n    public static CreateBox(options: {\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"boxBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a tiled box\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * faceTiles sets the pattern, tile size and number of tiles for a face\r\n     * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n     * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * @param options.pattern\r\n     * @param options.width\r\n     * @param options.height\r\n     * @param options.depth\r\n     * @param options.tileSize\r\n     * @param options.tileWidth\r\n     * @param options.tileHeight\r\n     * @param options.alignHorizontal\r\n     * @param options.alignVertical\r\n     * @param options.faceUV\r\n     * @param options.faceColors\r\n     * @param options.sideOrientation\r\n     * @returns the VertexData of the box\r\n     * @deprecated Please use CreateTiledBoxVertexData instead\r\n     */\r\n    public static CreateTiledBox(options: {\r\n        pattern?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        tileSize?: number;\r\n        tileWidth?: number;\r\n        tileHeight?: number;\r\n        alignHorizontal?: number;\r\n        alignVertical?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n    }): VertexData {\r\n        throw _WarnImport(\"tiledBoxBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a tiled plane\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * pattern a limited pattern arrangement depending on the number\r\n     * * tileSize sets the width, height and depth of the tile to the value of size, optional default 1\r\n     * * tileWidth sets the width (x direction) of the tile, overwrites the width set by size, optional, default size\r\n     * * tileHeight sets the height (y direction) of the tile, overwrites the height set by size, optional, default size\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the tiled plane\r\n     * @deprecated use CreateTiledPlaneVertexData instead\r\n     */\r\n    public static CreateTiledPlane(options: {\r\n        pattern?: number;\r\n        tileSize?: number;\r\n        tileWidth?: number;\r\n        tileHeight?: number;\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        alignHorizontal?: number;\r\n        alignVertical?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"tiledPlaneBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for an ellipsoid, defaults to a sphere\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * segments sets the number of horizontal strips optional, default 32\r\n     * * diameter sets the axes dimensions, diameterX, diameterY and diameterZ to the value of diameter, optional default 1\r\n     * * diameterX sets the diameterX (x direction) of the ellipsoid, overwrites the diameterX set by diameter, optional, default diameter\r\n     * * diameterY sets the diameterY (y direction) of the ellipsoid, overwrites the diameterY set by diameter, optional, default diameter\r\n     * * diameterZ sets the diameterZ (z direction) of the ellipsoid, overwrites the diameterZ set by diameter, optional, default diameter\r\n     * * arc a number from 0 to 1, to create an unclosed ellipsoid based on the fraction of the circumference (latitude) given by the arc value, optional, default 1\r\n     * * slice a number from 0 to 1, to create an unclosed ellipsoid based on the fraction of the height (latitude) given by the arc value, optional, default 1\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the ellipsoid\r\n     * @deprecated use CreateSphereVertexData instead\r\n     */\r\n    public static CreateSphere(options: {\r\n        segments?: number;\r\n        diameter?: number;\r\n        diameterX?: number;\r\n        diameterY?: number;\r\n        diameterZ?: number;\r\n        arc?: number;\r\n        slice?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"sphereBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a cylinder, cone or prism\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * height sets the height (y direction) of the cylinder, optional, default 2\r\n     * * diameterTop sets the diameter of the top of the cone, overwrites diameter,  optional, default diameter\r\n     * * diameterBottom sets the diameter of the bottom of the cone, overwrites diameter,  optional, default diameter\r\n     * * diameter sets the diameter of the top and bottom of the cone, optional default 1\r\n     * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n     * * subdivisions` the number of rings along the cylinder height, optional, default 1\r\n     * * arc a number from 0 to 1, to create an unclosed cylinder based on the fraction of the circumference given by the arc value, optional, default 1\r\n     * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n     * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n     * * hasRings when true makes each subdivision independently treated as a face for faceUV and faceColors, optional, default false\r\n     * * enclose when true closes an open cylinder by adding extra flat faces between the height axis and vertical edges, think cut cake\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the cylinder, cone or prism\r\n     * @deprecated please use CreateCylinderVertexData instead\r\n     */\r\n    public static CreateCylinder(options: {\r\n        height?: number;\r\n        diameterTop?: number;\r\n        diameterBottom?: number;\r\n        diameter?: number;\r\n        tessellation?: number;\r\n        subdivisions?: number;\r\n        arc?: number;\r\n        faceColors?: Color4[];\r\n        faceUV?: Vector4[];\r\n        hasRings?: boolean;\r\n        enclose?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"cylinderBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a torus\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * diameter the diameter of the torus, optional default 1\r\n     * * thickness the diameter of the tube forming the torus, optional default 0.5\r\n     * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the torus\r\n     * @deprecated use CreateTorusVertexData instead\r\n     */\r\n    public static CreateTorus(options: {\r\n        diameter?: number;\r\n        thickness?: number;\r\n        tessellation?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"torusBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the LineSystem\r\n     * @param options an object used to set the following optional parameters for the LineSystem, required but can be empty\r\n     *  - lines an array of lines, each line being an array of successive Vector3\r\n     *  - colors an array of line colors, each of the line colors being an array of successive Color4, one per line point\r\n     * @returns the VertexData of the LineSystem\r\n     * @deprecated use CreateLineSystemVertexData instead\r\n     */\r\n    public static CreateLineSystem(options: { lines: Vector3[][]; colors?: Nullable<Color4[][]> }): VertexData {\r\n        throw _WarnImport(\"linesBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Create the VertexData for a DashedLines\r\n     * @param options an object used to set the following optional parameters for the DashedLines, required but can be empty\r\n     *  - points an array successive Vector3\r\n     *  - dashSize the size of the dashes relative to the dash number, optional, default 3\r\n     *  - gapSize the size of the gap between two successive dashes relative to the dash number, optional, default 1\r\n     *  - dashNb the intended total number of dashes, optional, default 200\r\n     * @returns the VertexData for the DashedLines\r\n     * @deprecated use CreateDashedLinesVertexData instead\r\n     */\r\n    public static CreateDashedLines(options: { points: Vector3[]; dashSize?: number; gapSize?: number; dashNb?: number }): VertexData {\r\n        throw _WarnImport(\"linesBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Ground\r\n     * @param options an object used to set the following optional parameters for the Ground, required but can be empty\r\n     *  - width the width (x direction) of the ground, optional, default 1\r\n     *  - height the height (z direction) of the ground, optional, default 1\r\n     *  - subdivisions the number of subdivisions per side, optional, default 1\r\n     * @returns the VertexData of the Ground\r\n     * @deprecated Please use CreateGroundVertexData instead\r\n     */\r\n    public static CreateGround(options: { width?: number; height?: number; subdivisions?: number; subdivisionsX?: number; subdivisionsY?: number }): VertexData {\r\n        throw _WarnImport(\"groundBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a TiledGround by subdividing the ground into tiles\r\n     * @param options an object used to set the following optional parameters for the Ground, required but can be empty\r\n     * * xmin the ground minimum X coordinate, optional, default -1\r\n     * * zmin the ground minimum Z coordinate, optional, default -1\r\n     * * xmax the ground maximum X coordinate, optional, default 1\r\n     * * zmax the ground maximum Z coordinate, optional, default 1\r\n     * * subdivisions a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the ground width and height creating 'tiles', default {w: 6, h: 6}\r\n     * * precision a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the tile width and height, default {w: 2, h: 2}\r\n     * @returns the VertexData of the TiledGround\r\n     * @deprecated use CreateTiledGroundVertexData instead\r\n     */\r\n    public static CreateTiledGround(options: {\r\n        xmin: number;\r\n        zmin: number;\r\n        xmax: number;\r\n        zmax: number;\r\n        subdivisions?: { w: number; h: number };\r\n        precision?: { w: number; h: number };\r\n    }): VertexData {\r\n        throw _WarnImport(\"groundBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the Ground designed from a heightmap\r\n     * @param options an object used to set the following parameters for the Ground, required and provided by CreateGroundFromHeightMap\r\n     * * width the width (x direction) of the ground\r\n     * * height the height (z direction) of the ground\r\n     * * subdivisions the number of subdivisions per side\r\n     * * minHeight the minimum altitude on the ground, optional, default 0\r\n     * * maxHeight the maximum altitude on the ground, optional default 1\r\n     * * colorFilter the filter to apply to the image pixel colors to compute the height, optional Color3, default (0.3, 0.59, 0.11)\r\n     * * buffer the array holding the image color data\r\n     * * bufferWidth the width of image\r\n     * * bufferHeight the height of image\r\n     * * alphaFilter Remove any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n     * @returns the VertexData of the Ground designed from a heightmap\r\n     * @deprecated use CreateGroundFromHeightMapVertexData instead\r\n     */\r\n    public static CreateGroundFromHeightMap(options: {\r\n        width: number;\r\n        height: number;\r\n        subdivisions: number;\r\n        minHeight: number;\r\n        maxHeight: number;\r\n        colorFilter: Color3;\r\n        buffer: Uint8Array;\r\n        bufferWidth: number;\r\n        bufferHeight: number;\r\n        alphaFilter: number;\r\n    }): VertexData {\r\n        throw _WarnImport(\"groundBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Plane\r\n     * @param options an object used to set the following optional parameters for the plane, required but can be empty\r\n     * * size sets the width and height of the plane to the value of size, optional default 1\r\n     * * width sets the width (x direction) of the plane, overwrites the width set by size, optional, default size\r\n     * * height sets the height (y direction) of the plane, overwrites the height set by size, optional, default size\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the box\r\n     * @deprecated use CreatePlaneVertexData instead\r\n     */\r\n    public static CreatePlane(options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n        throw _WarnImport(\"planeBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the Disc or regular Polygon\r\n     * @param options an object used to set the following optional parameters for the disc, required but can be empty\r\n     * * radius the radius of the disc, optional default 0.5\r\n     * * tessellation the number of polygon sides, optional, default 64\r\n     * * arc a number from 0 to 1, to create an unclosed polygon based on the fraction of the circumference given by the arc value, optional, default 1\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the box\r\n     * @deprecated use CreateDiscVertexData instead\r\n     */\r\n    public static CreateDisc(options: { radius?: number; tessellation?: number; arc?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n        throw _WarnImport(\"discBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for an irregular Polygon in the XoZ plane using a mesh built by polygonTriangulation.build()\r\n     * All parameters are provided by CreatePolygon as needed\r\n     * @param polygon a mesh built from polygonTriangulation.build()\r\n     * @param sideOrientation takes the values Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * @param fUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n     * @param fColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n     * @param frontUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param wrap a boolean, default false, when true and fUVs used texture is wrapped around all sides, when false texture is applied side\r\n     * @returns the VertexData of the Polygon\r\n     * @deprecated use CreatePolygonVertexData instead\r\n     */\r\n    public static CreatePolygon(polygon: Mesh, sideOrientation: number, fUV?: Vector4[], fColors?: Color4[], frontUVs?: Vector4, backUVs?: Vector4, wrap?: boolean): VertexData {\r\n        throw _WarnImport(\"polygonBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the IcoSphere\r\n     * @param options an object used to set the following optional parameters for the IcoSphere, required but can be empty\r\n     * * radius the radius of the IcoSphere, optional default 1\r\n     * * radiusX allows stretching in the x direction, optional, default radius\r\n     * * radiusY allows stretching in the y direction, optional, default radius\r\n     * * radiusZ allows stretching in the z direction, optional, default radius\r\n     * * flat when true creates a flat shaded mesh, optional, default true\r\n     * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the IcoSphere\r\n     * @deprecated use CreateIcoSphereVertexData instead\r\n     */\r\n    public static CreateIcoSphere(options: {\r\n        radius?: number;\r\n        radiusX?: number;\r\n        radiusY?: number;\r\n        radiusZ?: number;\r\n        flat?: boolean;\r\n        subdivisions?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"icoSphereBuilder\");\r\n    }\r\n\r\n    // inspired from // http://stemkoski.github.io/Three.js/Polyhedra.html\r\n    /**\r\n     * Creates the VertexData for a Polyhedron\r\n     * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n     * * type provided types are:\r\n     *  * 0 : Tetrahedron, 1 : Octahedron, 2 : Dodecahedron, 3 : Icosahedron, 4 : Rhombicuboctahedron, 5 : Triangular Prism, 6 : Pentagonal Prism, 7 : Hexagonal Prism, 8 : Square Pyramid (J1)\r\n     *  * 9 : Pentagonal Pyramid (J2), 10 : Triangular Dipyramid (J12), 11 : Pentagonal Dipyramid (J13), 12 : Elongated Square Dipyramid (J15), 13 : Elongated Pentagonal Dipyramid (J16), 14 : Elongated Pentagonal Cupola (J20)\r\n     * * size the size of the IcoSphere, optional default 1\r\n     * * sizeX allows stretching in the x direction, optional, default size\r\n     * * sizeY allows stretching in the y direction, optional, default size\r\n     * * sizeZ allows stretching in the z direction, optional, default size\r\n     * * custom a number that overwrites the type to create from an extended set of polyhedron from https://www.babylonjs-playground.com/#21QRSK#15 with minimised editor\r\n     * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n     * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n     * * flat when true creates a flat shaded mesh, optional, default true\r\n     * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the Polyhedron\r\n     * @deprecated use CreatePolyhedronVertexData instead\r\n     */\r\n    public static CreatePolyhedron(options: {\r\n        type?: number;\r\n        size?: number;\r\n        sizeX?: number;\r\n        sizeY?: number;\r\n        sizeZ?: number;\r\n        custom?: any;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        flat?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"polyhedronBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Capsule, inspired from https://github.com/maximeq/three-js-capsule-geometry/blob/master/src/CapsuleBufferGeometry.js\r\n     * @param options an object used to set the following optional parameters for the capsule, required but can be empty\r\n     * @returns the VertexData of the Capsule\r\n     * @deprecated Please use CreateCapsuleVertexData from the capsuleBuilder file instead\r\n     */\r\n    public static CreateCapsule(\r\n        options: ICreateCapsuleOptions = {\r\n            orientation: Vector3.Up(),\r\n            subdivisions: 2,\r\n            tessellation: 16,\r\n            height: 1,\r\n            radius: 0.25,\r\n            capSubdivisions: 6,\r\n        }\r\n    ): VertexData {\r\n        throw _WarnImport(\"capsuleBuilder\");\r\n    }\r\n\r\n    // based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\r\n    /**\r\n     * Creates the VertexData for a TorusKnot\r\n     * @param options an object used to set the following optional parameters for the TorusKnot, required but can be empty\r\n     * * radius the radius of the torus knot, optional, default 2\r\n     * * tube the thickness of the tube, optional, default 0.5\r\n     * * radialSegments the number of sides on each tube segments, optional, default 32\r\n     * * tubularSegments the number of tubes to decompose the knot into, optional, default 32\r\n     * * p the number of windings around the z axis, optional,  default 2\r\n     * * q the number of windings around the x axis, optional,  default 3\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the Torus Knot\r\n     * @deprecated use CreateTorusKnotVertexData instead\r\n     */\r\n    public static CreateTorusKnot(options: {\r\n        radius?: number;\r\n        tube?: number;\r\n        radialSegments?: number;\r\n        tubularSegments?: number;\r\n        p?: number;\r\n        q?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"torusKnotBuilder\");\r\n    }\r\n\r\n    // Tools\r\n\r\n    /**\r\n     * Compute normals for given positions and indices\r\n     * @param positions an array of vertex positions, [...., x, y, z, ......]\r\n     * @param indices an array of indices in groups of three for each triangular facet, [...., i, j, k, ......]\r\n     * @param normals an array of vertex normals, [...., x, y, z, ......]\r\n     * @param options an object used to set the following optional parameters for the TorusKnot, optional\r\n     * * facetNormals : optional array of facet normals (vector3)\r\n     * * facetPositions : optional array of facet positions (vector3)\r\n     * * facetPartitioning : optional partitioning array. facetPositions is required for facetPartitioning computation\r\n     * * ratio : optional partitioning ratio / bounding box, required for facetPartitioning computation\r\n     * * bInfo : optional bounding info, required for facetPartitioning computation\r\n     * * bbSize : optional bounding box size data, required for facetPartitioning computation\r\n     * * subDiv : optional partitioning data about subdivisions on  each axis (int), required for facetPartitioning computation\r\n     * * useRightHandedSystem: optional boolean to for right handed system computation\r\n     * * depthSort : optional boolean to enable the facet depth sort computation\r\n     * * distanceTo : optional Vector3 to compute the facet depth from this location\r\n     * * depthSortedFacets : optional array of depthSortedFacets to store the facet distances from the reference location\r\n     */\r\n    public static ComputeNormals(\r\n        positions: any,\r\n        indices: any,\r\n        normals: any,\r\n        options?: {\r\n            facetNormals?: any;\r\n            facetPositions?: any;\r\n            facetPartitioning?: any;\r\n            ratio?: number;\r\n            bInfo?: any;\r\n            bbSize?: Vector3;\r\n            subDiv?: any;\r\n            useRightHandedSystem?: boolean;\r\n            depthSort?: boolean;\r\n            distanceTo?: Vector3;\r\n            depthSortedFacets?: any;\r\n        }\r\n    ): void {\r\n        // temporary scalar variables\r\n        let index = 0; // facet index\r\n        let p1p2x = 0.0; // p1p2 vector x coordinate\r\n        let p1p2y = 0.0; // p1p2 vector y coordinate\r\n        let p1p2z = 0.0; // p1p2 vector z coordinate\r\n        let p3p2x = 0.0; // p3p2 vector x coordinate\r\n        let p3p2y = 0.0; // p3p2 vector y coordinate\r\n        let p3p2z = 0.0; // p3p2 vector z coordinate\r\n        let faceNormalx = 0.0; // facet normal x coordinate\r\n        let faceNormaly = 0.0; // facet normal y coordinate\r\n        let faceNormalz = 0.0; // facet normal z coordinate\r\n        let length = 0.0; // facet normal length before normalization\r\n        let v1x = 0; // vector1 x index in the positions array\r\n        let v1y = 0; // vector1 y index in the positions array\r\n        let v1z = 0; // vector1 z index in the positions array\r\n        let v2x = 0; // vector2 x index in the positions array\r\n        let v2y = 0; // vector2 y index in the positions array\r\n        let v2z = 0; // vector2 z index in the positions array\r\n        let v3x = 0; // vector3 x index in the positions array\r\n        let v3y = 0; // vector3 y index in the positions array\r\n        let v3z = 0; // vector3 z index in the positions array\r\n        let computeFacetNormals = false;\r\n        let computeFacetPositions = false;\r\n        let computeFacetPartitioning = false;\r\n        let computeDepthSort = false;\r\n        let faceNormalSign = 1;\r\n        let ratio = 0;\r\n        let distanceTo: Nullable<Vector3> = null;\r\n        if (options) {\r\n            computeFacetNormals = options.facetNormals ? true : false;\r\n            computeFacetPositions = options.facetPositions ? true : false;\r\n            computeFacetPartitioning = options.facetPartitioning ? true : false;\r\n            faceNormalSign = options.useRightHandedSystem === true ? -1 : 1;\r\n            ratio = options.ratio || 0;\r\n            computeDepthSort = options.depthSort ? true : false;\r\n            distanceTo = <Vector3>options.distanceTo;\r\n            if (computeDepthSort) {\r\n                if (distanceTo === undefined) {\r\n                    distanceTo = Vector3.Zero();\r\n                }\r\n            }\r\n        }\r\n\r\n        // facetPartitioning reinit if needed\r\n        let xSubRatio = 0;\r\n        let ySubRatio = 0;\r\n        let zSubRatio = 0;\r\n        let subSq = 0;\r\n        if (computeFacetPartitioning && options && options.bbSize) {\r\n            //let bbSizeMax = options.bbSize.x > options.bbSize.y ? options.bbSize.x : options.bbSize.y;\r\n            //bbSizeMax = bbSizeMax > options.bbSize.z ? bbSizeMax : options.bbSize.z;\r\n            xSubRatio = (options.subDiv.X * ratio) / options.bbSize.x;\r\n            ySubRatio = (options.subDiv.Y * ratio) / options.bbSize.y;\r\n            zSubRatio = (options.subDiv.Z * ratio) / options.bbSize.z;\r\n            subSq = options.subDiv.max * options.subDiv.max;\r\n            options.facetPartitioning.length = 0;\r\n        }\r\n\r\n        // reset the normals\r\n        for (index = 0; index < positions.length; index++) {\r\n            normals[index] = 0.0;\r\n        }\r\n\r\n        // Loop : 1 indice triplet = 1 facet\r\n        const nbFaces = (indices.length / 3) | 0;\r\n        for (index = 0; index < nbFaces; index++) {\r\n            // get the indexes of the coordinates of each vertex of the facet\r\n            v1x = indices[index * 3] * 3;\r\n            v1y = v1x + 1;\r\n            v1z = v1x + 2;\r\n            v2x = indices[index * 3 + 1] * 3;\r\n            v2y = v2x + 1;\r\n            v2z = v2x + 2;\r\n            v3x = indices[index * 3 + 2] * 3;\r\n            v3y = v3x + 1;\r\n            v3z = v3x + 2;\r\n\r\n            p1p2x = positions[v1x] - positions[v2x]; // compute two vectors per facet : p1p2 and p3p2\r\n            p1p2y = positions[v1y] - positions[v2y];\r\n            p1p2z = positions[v1z] - positions[v2z];\r\n\r\n            p3p2x = positions[v3x] - positions[v2x];\r\n            p3p2y = positions[v3y] - positions[v2y];\r\n            p3p2z = positions[v3z] - positions[v2z];\r\n\r\n            // compute the face normal with the cross product\r\n            faceNormalx = faceNormalSign * (p1p2y * p3p2z - p1p2z * p3p2y);\r\n            faceNormaly = faceNormalSign * (p1p2z * p3p2x - p1p2x * p3p2z);\r\n            faceNormalz = faceNormalSign * (p1p2x * p3p2y - p1p2y * p3p2x);\r\n            // normalize this normal and store it in the array facetData\r\n            length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);\r\n            length = length === 0 ? 1.0 : length;\r\n            faceNormalx /= length;\r\n            faceNormaly /= length;\r\n            faceNormalz /= length;\r\n\r\n            if (computeFacetNormals && options) {\r\n                options.facetNormals[index].x = faceNormalx;\r\n                options.facetNormals[index].y = faceNormaly;\r\n                options.facetNormals[index].z = faceNormalz;\r\n            }\r\n\r\n            if (computeFacetPositions && options) {\r\n                // compute and the facet barycenter coordinates in the array facetPositions\r\n                options.facetPositions[index].x = (positions[v1x] + positions[v2x] + positions[v3x]) / 3.0;\r\n                options.facetPositions[index].y = (positions[v1y] + positions[v2y] + positions[v3y]) / 3.0;\r\n                options.facetPositions[index].z = (positions[v1z] + positions[v2z] + positions[v3z]) / 3.0;\r\n            }\r\n\r\n            if (computeFacetPartitioning && options) {\r\n                // store the facet indexes in arrays in the main facetPartitioning array :\r\n                // compute each facet vertex (+ facet barycenter) index in the partiniong array\r\n                const ox = Math.floor((options.facetPositions[index].x - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const oy = Math.floor((options.facetPositions[index].y - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const oz = Math.floor((options.facetPositions[index].z - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n                const b1x = Math.floor((positions[v1x] - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const b1y = Math.floor((positions[v1y] - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const b1z = Math.floor((positions[v1z] - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n                const b2x = Math.floor((positions[v2x] - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const b2y = Math.floor((positions[v2y] - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const b2z = Math.floor((positions[v2z] - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n                const b3x = Math.floor((positions[v3x] - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const b3y = Math.floor((positions[v3y] - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const b3z = Math.floor((positions[v3z] - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n\r\n                const block_idx_v1 = b1x + options.subDiv.max * b1y + subSq * b1z;\r\n                const block_idx_v2 = b2x + options.subDiv.max * b2y + subSq * b2z;\r\n                const block_idx_v3 = b3x + options.subDiv.max * b3y + subSq * b3z;\r\n                const block_idx_o = ox + options.subDiv.max * oy + subSq * oz;\r\n\r\n                options.facetPartitioning[block_idx_o] = options.facetPartitioning[block_idx_o] ? options.facetPartitioning[block_idx_o] : new Array();\r\n                options.facetPartitioning[block_idx_v1] = options.facetPartitioning[block_idx_v1] ? options.facetPartitioning[block_idx_v1] : new Array();\r\n                options.facetPartitioning[block_idx_v2] = options.facetPartitioning[block_idx_v2] ? options.facetPartitioning[block_idx_v2] : new Array();\r\n                options.facetPartitioning[block_idx_v3] = options.facetPartitioning[block_idx_v3] ? options.facetPartitioning[block_idx_v3] : new Array();\r\n\r\n                // push each facet index in each block containing the vertex\r\n                options.facetPartitioning[block_idx_v1].push(index);\r\n                if (block_idx_v2 != block_idx_v1) {\r\n                    options.facetPartitioning[block_idx_v2].push(index);\r\n                }\r\n                if (!(block_idx_v3 == block_idx_v2 || block_idx_v3 == block_idx_v1)) {\r\n                    options.facetPartitioning[block_idx_v3].push(index);\r\n                }\r\n                if (!(block_idx_o == block_idx_v1 || block_idx_o == block_idx_v2 || block_idx_o == block_idx_v3)) {\r\n                    options.facetPartitioning[block_idx_o].push(index);\r\n                }\r\n            }\r\n\r\n            if (computeDepthSort && options && options.facetPositions) {\r\n                const dsf = options.depthSortedFacets[index];\r\n                dsf.ind = index * 3;\r\n                dsf.sqDistance = Vector3.DistanceSquared(options.facetPositions[index], distanceTo!);\r\n            }\r\n\r\n            // compute the normals anyway\r\n            normals[v1x] += faceNormalx; // accumulate all the normals per face\r\n            normals[v1y] += faceNormaly;\r\n            normals[v1z] += faceNormalz;\r\n            normals[v2x] += faceNormalx;\r\n            normals[v2y] += faceNormaly;\r\n            normals[v2z] += faceNormalz;\r\n            normals[v3x] += faceNormalx;\r\n            normals[v3y] += faceNormaly;\r\n            normals[v3z] += faceNormalz;\r\n        }\r\n        // last normalization of each normal\r\n        for (index = 0; index < normals.length / 3; index++) {\r\n            faceNormalx = normals[index * 3];\r\n            faceNormaly = normals[index * 3 + 1];\r\n            faceNormalz = normals[index * 3 + 2];\r\n\r\n            length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);\r\n            length = length === 0 ? 1.0 : length;\r\n            faceNormalx /= length;\r\n            faceNormaly /= length;\r\n            faceNormalz /= length;\r\n\r\n            normals[index * 3] = faceNormalx;\r\n            normals[index * 3 + 1] = faceNormaly;\r\n            normals[index * 3 + 2] = faceNormalz;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _ComputeSides(\r\n        sideOrientation: number,\r\n        positions: FloatArray,\r\n        indices: FloatArray | IndicesArray,\r\n        normals: FloatArray,\r\n        uvs: FloatArray,\r\n        frontUVs?: Vector4,\r\n        backUVs?: Vector4\r\n    ) {\r\n        const li: number = indices.length;\r\n        const ln: number = normals.length;\r\n        let i: number;\r\n        let n: number;\r\n        sideOrientation = sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n        switch (sideOrientation) {\r\n            case VertexData.FRONTSIDE:\r\n                // nothing changed\r\n                break;\r\n\r\n            case VertexData.BACKSIDE:\r\n                // indices\r\n                for (i = 0; i < li; i += 3) {\r\n                    const tmp = indices[i];\r\n                    indices[i] = indices[i + 2];\r\n                    indices[i + 2] = tmp;\r\n                }\r\n                // normals\r\n                for (n = 0; n < ln; n++) {\r\n                    normals[n] = -normals[n];\r\n                }\r\n                break;\r\n\r\n            case VertexData.DOUBLESIDE: {\r\n                // positions\r\n                const lp: number = positions.length;\r\n                const l: number = lp / 3;\r\n                for (let p = 0; p < lp; p++) {\r\n                    positions[lp + p] = positions[p];\r\n                }\r\n                // indices\r\n                for (i = 0; i < li; i += 3) {\r\n                    indices[i + li] = indices[i + 2] + l;\r\n                    indices[i + 1 + li] = indices[i + 1] + l;\r\n                    indices[i + 2 + li] = indices[i] + l;\r\n                }\r\n                // normals\r\n                for (n = 0; n < ln; n++) {\r\n                    normals[ln + n] = -normals[n];\r\n                }\r\n\r\n                // uvs\r\n                const lu: number = uvs.length;\r\n                let u: number = 0;\r\n                for (u = 0; u < lu; u++) {\r\n                    uvs[u + lu] = uvs[u];\r\n                }\r\n                frontUVs = frontUVs ? frontUVs : new Vector4(0.0, 0.0, 1.0, 1.0);\r\n                backUVs = backUVs ? backUVs : new Vector4(0.0, 0.0, 1.0, 1.0);\r\n                u = 0;\r\n                for (i = 0; i < lu / 2; i++) {\r\n                    uvs[u] = frontUVs.x + (frontUVs.z - frontUVs.x) * uvs[u];\r\n                    uvs[u + 1] = frontUVs.y + (frontUVs.w - frontUVs.y) * uvs[u + 1];\r\n                    uvs[u + lu] = backUVs.x + (backUVs.z - backUVs.x) * uvs[u + lu];\r\n                    uvs[u + lu + 1] = backUVs.y + (backUVs.w - backUVs.y) * uvs[u + lu + 1];\r\n                    u += 2;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a VertexData from serialized data\r\n     * @param parsedVertexData the parsed data from an imported file\r\n     * @returns a VertexData\r\n     */\r\n    public static Parse(parsedVertexData: any) {\r\n        const vertexData = new VertexData();\r\n\r\n        // positions\r\n        const positions = parsedVertexData.positions;\r\n        if (positions) {\r\n            vertexData.set(positions, VertexBuffer.PositionKind);\r\n        }\r\n\r\n        // normals\r\n        const normals = parsedVertexData.normals;\r\n        if (normals) {\r\n            vertexData.set(normals, VertexBuffer.NormalKind);\r\n        }\r\n\r\n        // tangents\r\n        const tangents = parsedVertexData.tangents;\r\n        if (tangents) {\r\n            vertexData.set(tangents, VertexBuffer.TangentKind);\r\n        }\r\n\r\n        // uvs\r\n        const uvs = parsedVertexData.uvs;\r\n        if (uvs) {\r\n            vertexData.set(uvs, VertexBuffer.UVKind);\r\n        }\r\n\r\n        // uv2s\r\n        const uvs2 = parsedVertexData.uvs2;\r\n        if (uvs2) {\r\n            vertexData.set(uvs2, VertexBuffer.UV2Kind);\r\n        }\r\n\r\n        // uv3s\r\n        const uvs3 = parsedVertexData.uvs3;\r\n        if (uvs3) {\r\n            vertexData.set(uvs3, VertexBuffer.UV3Kind);\r\n        }\r\n\r\n        // uv4s\r\n        const uvs4 = parsedVertexData.uvs4;\r\n        if (uvs4) {\r\n            vertexData.set(uvs4, VertexBuffer.UV4Kind);\r\n        }\r\n\r\n        // uv5s\r\n        const uvs5 = parsedVertexData.uvs5;\r\n        if (uvs5) {\r\n            vertexData.set(uvs5, VertexBuffer.UV5Kind);\r\n        }\r\n\r\n        // uv6s\r\n        const uvs6 = parsedVertexData.uvs6;\r\n        if (uvs6) {\r\n            vertexData.set(uvs6, VertexBuffer.UV6Kind);\r\n        }\r\n\r\n        // colors\r\n        const colors = parsedVertexData.colors;\r\n        if (colors) {\r\n            vertexData.set(Color4.CheckColors4(colors, positions.length / 3), VertexBuffer.ColorKind);\r\n            if (parsedVertexData.hasVertexAlpha !== undefined) {\r\n                vertexData.hasVertexAlpha = parsedVertexData.hasVertexAlpha;\r\n            }\r\n        }\r\n\r\n        // matricesIndices\r\n        const matricesIndices = parsedVertexData.matricesIndices;\r\n        if (matricesIndices) {\r\n            vertexData.set(matricesIndices, VertexBuffer.MatricesIndicesKind);\r\n        }\r\n\r\n        // matricesWeights\r\n        const matricesWeights = parsedVertexData.matricesWeights;\r\n        if (matricesWeights) {\r\n            vertexData.set(matricesWeights, VertexBuffer.MatricesWeightsKind);\r\n        }\r\n\r\n        // indices\r\n        const indices = parsedVertexData.indices;\r\n        if (indices) {\r\n            vertexData.indices = indices;\r\n        }\r\n\r\n        // MaterialInfos\r\n        const materialInfos = parsedVertexData.materialInfos;\r\n        if (materialInfos) {\r\n            vertexData.materialInfos = [];\r\n            for (const materialInfoFromJSON of materialInfos) {\r\n                const materialInfo = new VertexDataMaterialInfo();\r\n                materialInfo.indexCount = materialInfoFromJSON.indexCount;\r\n                materialInfo.indexStart = materialInfoFromJSON.indexStart;\r\n                materialInfo.verticesCount = materialInfoFromJSON.verticesCount;\r\n                materialInfo.verticesStart = materialInfoFromJSON.verticesStart;\r\n                materialInfo.materialIndex = materialInfoFromJSON.materialIndex;\r\n                vertexData.materialInfos.push(materialInfo);\r\n            }\r\n        }\r\n\r\n        return vertexData;\r\n    }\r\n\r\n    /**\r\n     * Applies VertexData created from the imported parameters to the geometry\r\n     * @param parsedVertexData the parsed data from an imported file\r\n     * @param geometry the geometry to apply the VertexData to\r\n     */\r\n    public static ImportVertexData(parsedVertexData: any, geometry: Geometry) {\r\n        const vertexData = VertexData.Parse(parsedVertexData);\r\n\r\n        geometry.setAllVerticesData(vertexData, parsedVertexData.updatable);\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Scene } from \"./scene\";\r\nimport type { Nullable } from \"./types\";\r\nimport { Matrix, Vector3 } from \"./Maths/math.vector\";\r\nimport type { Engine } from \"./Engines/engine\";\r\nimport type { IBehaviorAware, Behavior } from \"./Behaviors/behavior\";\r\nimport { serialize } from \"./Misc/decorators\";\r\nimport type { Observer } from \"./Misc/observable\";\r\nimport { Observable } from \"./Misc/observable\";\r\nimport { EngineStore } from \"./Engines/engineStore\";\r\nimport { _WarnImport } from \"./Misc/devTools\";\r\nimport type { AbstractActionManager } from \"./Actions/abstractActionManager\";\r\nimport type { IInspectable } from \"./Misc/iInspectable\";\r\nimport type { AbstractScene } from \"./abstractScene\";\r\nimport type { IAccessibilityTag } from \"./IAccessibilityTag\";\r\nimport type { AnimationRange } from \"./Animations/animationRange\";\r\nimport type { AnimationPropertiesOverride } from \"./Animations/animationPropertiesOverride\";\r\nimport type { AbstractMesh } from \"./Meshes/abstractMesh\";\r\nimport type { Animation } from \"./Animations/animation\";\r\nimport type { Animatable } from \"./Animations/animatable\";\r\nimport { SerializationHelper } from \"./Misc/decorators.serialization\";\r\n\r\n/**\r\n * Defines how a node can be built from a string name.\r\n */\r\nexport type NodeConstructor = (name: string, scene: Scene, options?: any) => () => Node;\r\n\r\n/** @internal */\r\nclass _InternalNodeDataInfo {\r\n    public _doNotSerialize = false;\r\n    public _isDisposed = false;\r\n    public _sceneRootNodesIndex = -1;\r\n    public _isEnabled = true;\r\n    public _isParentEnabled = true;\r\n    public _isReady = true;\r\n    public _onEnabledStateChangedObservable = new Observable<boolean>();\r\n    public _onClonedObservable = new Observable<Node>();\r\n}\r\n\r\n/**\r\n * Node is the basic class for all scene objects (Mesh, Light, Camera.)\r\n */\r\nexport class Node implements IBehaviorAware<Node> {\r\n    protected _isDirty = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _AnimationRangeFactory = (_name: string, _from: number, _to: number): AnimationRange => {\r\n        throw _WarnImport(\"AnimationRange\");\r\n    };\r\n\r\n    private static _NodeConstructors: { [key: string]: any } = {};\r\n\r\n    /**\r\n     * Add a new node constructor\r\n     * @param type defines the type name of the node to construct\r\n     * @param constructorFunc defines the constructor function\r\n     */\r\n    public static AddNodeConstructor(type: string, constructorFunc: NodeConstructor) {\r\n        this._NodeConstructors[type] = constructorFunc;\r\n    }\r\n\r\n    /**\r\n     * Returns a node constructor based on type name\r\n     * @param type defines the type name\r\n     * @param name defines the new node name\r\n     * @param scene defines the hosting scene\r\n     * @param options defines optional options to transmit to constructors\r\n     * @returns the new constructor or null\r\n     */\r\n    public static Construct(type: string, name: string, scene: Scene, options?: any): Nullable<() => Node> {\r\n        const constructorFunc = this._NodeConstructors[type];\r\n\r\n        if (!constructorFunc) {\r\n            return null;\r\n        }\r\n\r\n        return constructorFunc(name, scene, options);\r\n    }\r\n\r\n    private _nodeDataStorage = new _InternalNodeDataInfo();\r\n\r\n    /**\r\n     * Gets or sets the name of the node\r\n     */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Gets or sets the id of the node\r\n     */\r\n    @serialize()\r\n    public id: string;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node\r\n     */\r\n    @serialize()\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets a string used to store user defined state for the node\r\n     */\r\n    @serialize()\r\n    public state = \"\";\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /** @internal */\r\n    public _internalMetadata: any;\r\n\r\n    /**\r\n     * For internal use only. Please do not use.\r\n     */\r\n    public reservedDataStore: any = null;\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector#extensibility\r\n     */\r\n    public inspectableCustomProperties: IInspectable[];\r\n\r\n    /**\r\n     * Gets or sets the accessibility tag to describe the node for accessibility purpose.\r\n     */\r\n    public set accessibilityTag(value: Nullable<IAccessibilityTag>) {\r\n        this._accessibilityTag = value;\r\n        this.onAccessibilityTagChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    public get accessibilityTag() {\r\n        return this._accessibilityTag;\r\n    }\r\n\r\n    protected _accessibilityTag: Nullable<IAccessibilityTag> = null;\r\n\r\n    /**\r\n     * Observable fired when an accessibility tag is changed\r\n     */\r\n    public onAccessibilityTagChangedObservable = new Observable<Nullable<IAccessibilityTag>>();\r\n\r\n    /**\r\n     * Gets or sets a boolean used to define if the node must be serialized\r\n     */\r\n    public get doNotSerialize() {\r\n        if (this._nodeDataStorage._doNotSerialize) {\r\n            return true;\r\n        }\r\n\r\n        if (this._parentNode) {\r\n            return this._parentNode.doNotSerialize;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public set doNotSerialize(value: boolean) {\r\n        this._nodeDataStorage._doNotSerialize = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    /**\r\n     * Gets a list of Animations associated with the node\r\n     */\r\n    public animations: Animation[] = [];\r\n    protected _ranges: { [name: string]: Nullable<AnimationRange> } = {};\r\n\r\n    /**\r\n     * Callback raised when the node is ready to be used\r\n     */\r\n    public onReady: Nullable<(node: Node) => void> = null;\r\n\r\n    /** @internal */\r\n    public _currentRenderId = -1;\r\n    private _parentUpdateId = -1;\r\n    /** @internal */\r\n    public _childUpdateId = -1;\r\n\r\n    /** @internal */\r\n    public _waitingParentId: Nullable<string> = null;\r\n    /** @internal */\r\n    public _waitingParentInstanceIndex: Nullable<string> = null;\r\n    /** @internal */\r\n    public _waitingParsedUniqueId: Nullable<number> = null;\r\n    /** @internal */\r\n    public _scene: Scene;\r\n    /** @internal */\r\n    public _cache: any = {};\r\n\r\n    protected _parentNode: Nullable<Node> = null;\r\n\r\n    /** @internal */\r\n    protected _children: Nullable<Node[]> = null;\r\n\r\n    /** @internal */\r\n    public _worldMatrix = Matrix.Identity();\r\n    /** @internal */\r\n    public _worldMatrixDeterminant = 0;\r\n    /** @internal */\r\n    public _worldMatrixDeterminantIsDirty = true;\r\n\r\n    /**\r\n     * Gets a boolean indicating if the node has been disposed\r\n     * @returns true if the node was disposed\r\n     */\r\n    public isDisposed(): boolean {\r\n        return this._nodeDataStorage._isDisposed;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the parent of the node (without keeping the current position in the scene)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/parent\r\n     */\r\n    public set parent(parent: Nullable<Node>) {\r\n        if (this._parentNode === parent) {\r\n            return;\r\n        }\r\n\r\n        const previousParentNode = this._parentNode;\r\n\r\n        // Remove self from list of children of parent\r\n        if (this._parentNode && this._parentNode._children !== undefined && this._parentNode._children !== null) {\r\n            const index = this._parentNode._children.indexOf(this);\r\n            if (index !== -1) {\r\n                this._parentNode._children.splice(index, 1);\r\n            }\r\n\r\n            if (!parent && !this._nodeDataStorage._isDisposed) {\r\n                this._addToSceneRootNodes();\r\n            }\r\n        }\r\n\r\n        // Store new parent\r\n        this._parentNode = parent;\r\n\r\n        // Add as child to new parent\r\n        if (this._parentNode) {\r\n            if (this._parentNode._children === undefined || this._parentNode._children === null) {\r\n                this._parentNode._children = new Array<Node>();\r\n            }\r\n            this._parentNode._children.push(this);\r\n\r\n            if (!previousParentNode) {\r\n                this._removeFromSceneRootNodes();\r\n            }\r\n        }\r\n\r\n        // Enabled state\r\n        this._syncParentEnabledState();\r\n    }\r\n\r\n    public get parent(): Nullable<Node> {\r\n        return this._parentNode;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _serializeAsParent(serializationObject: any): void {\r\n        serializationObject.parentId = this.uniqueId;\r\n    }\r\n\r\n    /** @internal */\r\n    public _addToSceneRootNodes() {\r\n        if (this._nodeDataStorage._sceneRootNodesIndex === -1) {\r\n            this._nodeDataStorage._sceneRootNodesIndex = this._scene.rootNodes.length;\r\n            this._scene.rootNodes.push(this);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _removeFromSceneRootNodes() {\r\n        if (this._nodeDataStorage._sceneRootNodesIndex !== -1) {\r\n            const rootNodes = this._scene.rootNodes;\r\n            const lastIdx = rootNodes.length - 1;\r\n            rootNodes[this._nodeDataStorage._sceneRootNodesIndex] = rootNodes[lastIdx];\r\n            rootNodes[this._nodeDataStorage._sceneRootNodesIndex]._nodeDataStorage._sceneRootNodesIndex = this._nodeDataStorage._sceneRootNodesIndex;\r\n            this._scene.rootNodes.pop();\r\n            this._nodeDataStorage._sceneRootNodesIndex = -1;\r\n        }\r\n    }\r\n\r\n    private _animationPropertiesOverride: Nullable<AnimationPropertiesOverride> = null;\r\n\r\n    /**\r\n     * Gets or sets the animation properties override\r\n     */\r\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\r\n        if (!this._animationPropertiesOverride) {\r\n            return this._scene.animationPropertiesOverride;\r\n        }\r\n        return this._animationPropertiesOverride;\r\n    }\r\n\r\n    public set animationPropertiesOverride(value: Nullable<AnimationPropertiesOverride>) {\r\n        this._animationPropertiesOverride = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"Node\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"Node\";\r\n    }\r\n\r\n    /** @internal */\r\n    public readonly _isNode = true;\r\n\r\n    /**\r\n     * An event triggered when the mesh is disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Node>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<Node>> = null;\r\n    /**\r\n     * Sets a callback that will be raised when the node will be disposed\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the enabled state of the node changes\r\n     */\r\n    public get onEnabledStateChangedObservable(): Observable<boolean> {\r\n        return this._nodeDataStorage._onEnabledStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the node is cloned\r\n     */\r\n    public get onClonedObservable(): Observable<Node> {\r\n        return this._nodeDataStorage._onClonedObservable;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Node\r\n     * @param name the name and id to be given to this node\r\n     * @param scene the scene this node will be added to\r\n     */\r\n    constructor(name: string, scene: Nullable<Scene> = null) {\r\n        this.name = name;\r\n        this.id = name;\r\n        this._scene = <Scene>(scene || EngineStore.LastCreatedScene);\r\n        this.uniqueId = this._scene.getUniqueId();\r\n        this._initCache();\r\n    }\r\n\r\n    /**\r\n     * Gets the scene of the node\r\n     * @returns a scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets the engine of the node\r\n     * @returns a Engine\r\n     */\r\n    public getEngine(): Engine {\r\n        return this._scene.getEngine();\r\n    }\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Node>>();\r\n\r\n    /**\r\n     * Attach a behavior to the node\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @param attachImmediately defines that the behavior must be attached even if the scene is still loading\r\n     * @returns the current Node\r\n     */\r\n    public addBehavior(behavior: Behavior<Node>, attachImmediately = false): Node {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        if (this._scene.isLoading && !attachImmediately) {\r\n            // We defer the attach when the scene will be loaded\r\n            this._scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current Node\r\n     */\r\n    public removeBehavior(behavior: Behavior<Node>): Node {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     */\r\n    public get behaviors(): Behavior<Node>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Node>> {\r\n        for (const behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the latest update of the World matrix\r\n     * @returns a Matrix\r\n     */\r\n    public getWorldMatrix(): Matrix {\r\n        if (this._currentRenderId !== this._scene.getRenderId()) {\r\n            this.computeWorldMatrix();\r\n        }\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getWorldMatrixDeterminant(): number {\r\n        if (this._worldMatrixDeterminantIsDirty) {\r\n            this._worldMatrixDeterminantIsDirty = false;\r\n            this._worldMatrixDeterminant = this._worldMatrix.determinant();\r\n        }\r\n        return this._worldMatrixDeterminant;\r\n    }\r\n\r\n    /**\r\n     * Returns directly the latest state of the mesh World matrix.\r\n     * A Matrix is returned.\r\n     */\r\n    public get worldMatrixFromCache(): Matrix {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    // override it in derived class if you add new variables to the cache\r\n    // and call the parent class method\r\n    /** @internal */\r\n    public _initCache() {\r\n        this._cache = {};\r\n        this._cache.parent = undefined;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public updateCache(force?: boolean): void {\r\n        if (!force && this.isSynchronized()) {\r\n            return;\r\n        }\r\n\r\n        this._cache.parent = this.parent;\r\n\r\n        this._updateCache();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getActionManagerForTrigger(trigger?: number, _initialCall = true): Nullable<AbstractActionManager> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        return this.parent._getActionManagerForTrigger(trigger, false);\r\n    }\r\n\r\n    // override it in derived class if you add new variables to the cache\r\n    // and call the parent class method if !ignoreParentClass\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateCache(_ignoreParentClass?: boolean): void {}\r\n\r\n    // override it in derived class if you add new variables to the cache\r\n    /** @internal */\r\n    public _isSynchronized(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markSyncedWithParent() {\r\n        if (this._parentNode) {\r\n            this._parentUpdateId = this._parentNode._childUpdateId;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public isSynchronizedWithParent(): boolean {\r\n        if (!this._parentNode) {\r\n            return true;\r\n        }\r\n\r\n        if (this._parentNode._isDirty || this._parentUpdateId !== this._parentNode._childUpdateId) {\r\n            return false;\r\n        }\r\n\r\n        return this._parentNode.isSynchronized();\r\n    }\r\n\r\n    /** @internal */\r\n    public isSynchronized(): boolean {\r\n        if (this._cache.parent !== this._parentNode) {\r\n            this._cache.parent = this._parentNode;\r\n            return false;\r\n        }\r\n\r\n        if (this._parentNode && !this.isSynchronizedWithParent()) {\r\n            return false;\r\n        }\r\n\r\n        return this._isSynchronized();\r\n    }\r\n\r\n    /**\r\n     * Is this node ready to be used/rendered\r\n     * @param _completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\r\n     * @returns true if the node is ready\r\n     */\r\n    public isReady(_completeCheck = false): boolean {\r\n        return this._nodeDataStorage._isReady;\r\n    }\r\n\r\n    /**\r\n     * Flag the  node as dirty (Forcing it to update everything)\r\n     * @param _property helps children apply precise \"dirtyfication\"\r\n     * @returns this node\r\n     */\r\n    public markAsDirty(_property?: string): Node {\r\n        this._currentRenderId = Number.MAX_VALUE;\r\n        this._isDirty = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Is this node enabled?\r\n     * If the node has a parent, all ancestors will be checked and false will be returned if any are false (not enabled), otherwise will return true\r\n     * @param checkAncestors indicates if this method should check the ancestors. The default is to check the ancestors. If set to false, the method will return the value of this node without checking ancestors\r\n     * @returns whether this node (and its parent) is enabled\r\n     */\r\n    public isEnabled(checkAncestors: boolean = true): boolean {\r\n        if (checkAncestors === false) {\r\n            return this._nodeDataStorage._isEnabled;\r\n        }\r\n\r\n        if (!this._nodeDataStorage._isEnabled) {\r\n            return false;\r\n        }\r\n\r\n        return this._nodeDataStorage._isParentEnabled;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _syncParentEnabledState() {\r\n        this._nodeDataStorage._isParentEnabled = this._parentNode ? this._parentNode.isEnabled() : true;\r\n\r\n        if (this._children) {\r\n            this._children.forEach((c) => {\r\n                c._syncParentEnabledState(); // Force children to update accordingly\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the enabled state of this node\r\n     * @param value defines the new enabled state\r\n     */\r\n    public setEnabled(value: boolean): void {\r\n        if (this._nodeDataStorage._isEnabled === value) {\r\n            return;\r\n        }\r\n        this._nodeDataStorage._isEnabled = value;\r\n        this._syncParentEnabledState();\r\n        this._nodeDataStorage._onEnabledStateChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Is this node a descendant of the given node?\r\n     * The function will iterate up the hierarchy until the ancestor was found or no more parents defined\r\n     * @param ancestor defines the parent node to inspect\r\n     * @returns a boolean indicating if this node is a descendant of the given node\r\n     */\r\n    public isDescendantOf(ancestor: Node): boolean {\r\n        if (this.parent) {\r\n            if (this.parent === ancestor) {\r\n                return true;\r\n            }\r\n\r\n            return this.parent.isDescendantOf(ancestor);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getDescendants(results: Node[], directDescendantsOnly: boolean = false, predicate?: (node: Node) => boolean): void {\r\n        if (!this._children) {\r\n            return;\r\n        }\r\n\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            const item = this._children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item._getDescendants(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will return all nodes that have this node as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all children nodes of all types\r\n     */\r\n    public getDescendants<T extends Node>(directDescendantsOnly?: boolean, predicate?: (node: Node) => node is T): T[];\r\n\r\n    /**\r\n     * Will return all nodes that have this node as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all children nodes of all types\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): Node[];\r\n\r\n    /**\r\n     * Will return all nodes that have this node as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all children nodes of all types\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): Node[] {\r\n        const results: Node[] = [];\r\n\r\n        this._getDescendants(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Get all child-meshes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: false)\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getChildMeshes<T extends AbstractMesh>(directDescendantsOnly?: boolean, predicate?: (node: Node) => node is T): T[];\r\n\r\n    /**\r\n     * Get all child-meshes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: false)\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getChildMeshes(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): AbstractMesh[];\r\n\r\n    /**\r\n     * Get all child-meshes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: false)\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getChildMeshes(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): AbstractMesh[] {\r\n        const results: Array<AbstractMesh> = [];\r\n        this._getDescendants(results, directDescendantsOnly, (node: Node) => {\r\n            return (!predicate || predicate(node)) && (<AbstractMesh>node).cullingStrategy !== undefined;\r\n        });\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Get all direct children of this node\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: true)\r\n     * @returns an array of Node\r\n     */\r\n    public getChildren<T extends Node>(predicate?: (node: Node) => node is T, directDescendantsOnly?: boolean): T[];\r\n\r\n    /**\r\n     * Get all direct children of this node\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: true)\r\n     * @returns an array of Node\r\n     */\r\n    public getChildren(predicate?: (node: Node) => boolean, directDescendantsOnly?: boolean): Node[];\r\n\r\n    /**\r\n     * Get all direct children of this node\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: true)\r\n     * @returns an array of Node\r\n     */\r\n    public getChildren(predicate?: (node: Node) => boolean, directDescendantsOnly = true): Node[] {\r\n        return this.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setReady(state: boolean): void {\r\n        if (state === this._nodeDataStorage._isReady) {\r\n            return;\r\n        }\r\n\r\n        if (!state) {\r\n            this._nodeDataStorage._isReady = false;\r\n            return;\r\n        }\r\n\r\n        if (this.onReady) {\r\n            this.onReady(this);\r\n        }\r\n        this._nodeDataStorage._isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Get an animation by name\r\n     * @param name defines the name of the animation to look for\r\n     * @returns null if not found else the requested animation\r\n     */\r\n    public getAnimationByName(name: string): Nullable<Animation> {\r\n        for (let i = 0; i < this.animations.length; i++) {\r\n            const animation = this.animations[i];\r\n\r\n            if (animation.name === name) {\r\n                return animation;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Creates an animation range for this node\r\n     * @param name defines the name of the range\r\n     * @param from defines the starting key\r\n     * @param to defines the end key\r\n     */\r\n    public createAnimationRange(name: string, from: number, to: number): void {\r\n        // check name not already in use\r\n        if (!this._ranges[name]) {\r\n            this._ranges[name] = Node._AnimationRangeFactory(name, from, to);\r\n            for (let i = 0, nAnimations = this.animations.length; i < nAnimations; i++) {\r\n                if (this.animations[i]) {\r\n                    this.animations[i].createRange(name, from, to);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a specific animation range\r\n     * @param name defines the name of the range to delete\r\n     * @param deleteFrames defines if animation frames from the range must be deleted as well\r\n     */\r\n    public deleteAnimationRange(name: string, deleteFrames = true): void {\r\n        for (let i = 0, nAnimations = this.animations.length; i < nAnimations; i++) {\r\n            if (this.animations[i]) {\r\n                this.animations[i].deleteRange(name, deleteFrames);\r\n            }\r\n        }\r\n        this._ranges[name] = null; // said much faster than 'delete this._range[name]'\r\n    }\r\n\r\n    /**\r\n     * Get an animation range by name\r\n     * @param name defines the name of the animation range to look for\r\n     * @returns null if not found else the requested animation range\r\n     */\r\n    public getAnimationRange(name: string): Nullable<AnimationRange> {\r\n        return this._ranges[name] || null;\r\n    }\r\n\r\n    /**\r\n     * Clone the current node\r\n     * @param name Name of the new clone\r\n     * @param newParent New parent for the clone\r\n     * @param doNotCloneChildren Do not clone children hierarchy\r\n     * @returns the new transform node\r\n     */\r\n    public clone(name: string, newParent: Nullable<Node>, doNotCloneChildren?: boolean): Nullable<Node> {\r\n        const result = SerializationHelper.Clone(() => new Node(name, this.getScene()), this);\r\n\r\n        if (newParent) {\r\n            result.parent = newParent;\r\n        }\r\n\r\n        if (!doNotCloneChildren) {\r\n            // Children\r\n            const directDescendants = this.getDescendants(true);\r\n            for (let index = 0; index < directDescendants.length; index++) {\r\n                const child = directDescendants[index];\r\n\r\n                child.clone(name + \".\" + child.name, result);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of all animation ranges defined on this node\r\n     * @returns an array\r\n     */\r\n    public getAnimationRanges(): Nullable<AnimationRange>[] {\r\n        const animationRanges: Nullable<AnimationRange>[] = [];\r\n        let name: string;\r\n        for (name in this._ranges) {\r\n            animationRanges.push(this._ranges[name]);\r\n        }\r\n        return animationRanges;\r\n    }\r\n\r\n    /**\r\n     * Will start the animation sequence\r\n     * @param name defines the range frames for animation sequence\r\n     * @param loop defines if the animation should loop (false by default)\r\n     * @param speedRatio defines the speed factor in which to run the animation (1 by default)\r\n     * @param onAnimationEnd defines a function to be executed when the animation ended (undefined by default)\r\n     * @returns the object created for this animation. If range does not exist, it will return null\r\n     */\r\n    public beginAnimation(name: string, loop?: boolean, speedRatio?: number, onAnimationEnd?: () => void): Nullable<Animatable> {\r\n        const range = this.getAnimationRange(name);\r\n\r\n        if (!range) {\r\n            return null;\r\n        }\r\n\r\n        return this._scene.beginAnimation(this, range.from, range.to, loop, speedRatio, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Serialize animation ranges into a JSON compatible object\r\n     * @returns serialization object\r\n     */\r\n    public serializeAnimationRanges(): any {\r\n        const serializationRanges = [];\r\n        for (const name in this._ranges) {\r\n            const localRange = this._ranges[name];\r\n            if (!localRange) {\r\n                continue;\r\n            }\r\n            const range: any = {};\r\n            range.name = name;\r\n            range.from = localRange.from;\r\n            range.to = localRange.to;\r\n            serializationRanges.push(range);\r\n        }\r\n        return serializationRanges;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @param _force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\r\n     * @returns the world matrix\r\n     */\r\n    public computeWorldMatrix(_force?: boolean): Matrix {\r\n        if (!this._worldMatrix) {\r\n            this._worldMatrix = Matrix.Identity();\r\n        }\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        this._nodeDataStorage._isDisposed = true;\r\n\r\n        if (!doNotRecurse) {\r\n            const nodes = this.getDescendants(true);\r\n            for (const node of nodes) {\r\n                node.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n            }\r\n        }\r\n\r\n        if (!this.parent) {\r\n            this._removeFromSceneRootNodes();\r\n        } else {\r\n            this.parent = null;\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n\r\n        this.onEnabledStateChangedObservable.clear();\r\n        this.onClonedObservable.clear();\r\n\r\n        // Behaviors\r\n        for (const behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n\r\n        this._behaviors.length = 0;\r\n\r\n        this.metadata = null;\r\n    }\r\n\r\n    /**\r\n     * Parse animation range data from a serialization object and store them into a given node\r\n     * @param node defines where to store the animation ranges\r\n     * @param parsedNode defines the serialization object to read data from\r\n     * @param _scene defines the hosting scene\r\n     */\r\n    public static ParseAnimationRanges(node: Node, parsedNode: any, _scene: Scene): void {\r\n        if (parsedNode.ranges) {\r\n            for (let index = 0; index < parsedNode.ranges.length; index++) {\r\n                const data = parsedNode.ranges[index];\r\n                node.createAnimationRange(data.name, data.from, data.to);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Return the minimum and maximum world vectors of the entire hierarchy under current node\r\n     * @param includeDescendants Include bounding info from descendants as well (true by default)\r\n     * @param predicate defines a callback function that can be customize to filter what meshes should be included in the list used to compute the bounding vectors\r\n     * @returns the new bounding vectors\r\n     */\r\n    public getHierarchyBoundingVectors(includeDescendants = true, predicate: Nullable<(abstractMesh: AbstractMesh) => boolean> = null): { min: Vector3; max: Vector3 } {\r\n        // Ensures that all world matrix will be recomputed.\r\n        this.getScene().incrementRenderId();\r\n\r\n        this.computeWorldMatrix(true);\r\n\r\n        let min: Vector3;\r\n        let max: Vector3;\r\n\r\n        const thisAbstractMesh = this as Node as AbstractMesh;\r\n        if (thisAbstractMesh.getBoundingInfo && thisAbstractMesh.subMeshes) {\r\n            // If this is an abstract mesh get its bounding info\r\n            const boundingInfo = thisAbstractMesh.getBoundingInfo();\r\n            min = boundingInfo.boundingBox.minimumWorld.clone();\r\n            max = boundingInfo.boundingBox.maximumWorld.clone();\r\n        } else {\r\n            min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n            max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            const descendants = this.getDescendants(false);\r\n\r\n            for (const descendant of descendants) {\r\n                const childMesh = <AbstractMesh>descendant;\r\n                childMesh.computeWorldMatrix(true);\r\n\r\n                // Filters meshes based on custom predicate function.\r\n                if (predicate && !predicate(childMesh)) {\r\n                    continue;\r\n                }\r\n\r\n                //make sure we have the needed params to get mix and max\r\n                if (!childMesh.getBoundingInfo || childMesh.getTotalVertices() === 0) {\r\n                    continue;\r\n                }\r\n\r\n                const childBoundingInfo = childMesh.getBoundingInfo();\r\n                const boundingBox = childBoundingInfo.boundingBox;\r\n\r\n                const minBox = boundingBox.minimumWorld;\r\n                const maxBox = boundingBox.maximumWorld;\r\n\r\n                Vector3.CheckExtends(minBox, min, max);\r\n                Vector3.CheckExtends(maxBox, min, max);\r\n            }\r\n        }\r\n\r\n        return {\r\n            min: min,\r\n            max: max,\r\n        };\r\n    }\r\n}\r\n", "import { Vector3 } from \"./math.vector\";\r\n\r\n/** Defines supported spaces */\r\nexport enum Space {\r\n    /** Local (object) space */\r\n    LOCAL = 0,\r\n    /** World space */\r\n    WORLD = 1,\r\n    /** Bone space */\r\n    BONE = 2,\r\n}\r\n\r\n/** Defines the 3 main axes */\r\nexport class Axis {\r\n    /** X axis */\r\n    public static X: Vector3 = new Vector3(1.0, 0.0, 0.0);\r\n    /** Y axis */\r\n    public static Y: Vector3 = new Vector3(0.0, 1.0, 0.0);\r\n    /** Z axis */\r\n    public static Z: Vector3 = new Vector3(0.0, 0.0, 1.0);\r\n}\r\n\r\n/**\r\n * Defines cartesian components.\r\n */\r\nexport enum Coordinate {\r\n    /** X axis */\r\n    X,\r\n    /** Y axis */\r\n    Y,\r\n    /** Z axis */\r\n    Z,\r\n}\r\n", "import type { DeepImmutable, Nullable } from \"../types\";\r\nimport { serialize, serializeAsVector3, serializeAsQuaternion } from \"../Misc/decorators\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { Observable } from \"../Misc/observable\";\r\n\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { Bone } from \"../Bones/bone\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Space } from \"../Maths/math.axis\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\n\r\nconst convertRHSToLHS = Matrix.Compose(Vector3.One(), Quaternion.FromEulerAngles(0, Math.PI, 0), Vector3.Zero());\r\n\r\n/**\r\n * A TransformNode is an object that is not rendered but can be used as a center of transformation. This can decrease memory usage and increase rendering speed compared to using an empty mesh as a parent and is less complicated than using a pivot matrix.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/transform_node\r\n */\r\nexport class TransformNode extends Node {\r\n    // Statics\r\n    /**\r\n     * Object will not rotate to face the camera\r\n     */\r\n    public static BILLBOARDMODE_NONE = 0;\r\n    /**\r\n     * Object will rotate to face the camera but only on the x axis\r\n     */\r\n    public static BILLBOARDMODE_X = 1;\r\n    /**\r\n     * Object will rotate to face the camera but only on the y axis\r\n     */\r\n    public static BILLBOARDMODE_Y = 2;\r\n    /**\r\n     * Object will rotate to face the camera but only on the z axis\r\n     */\r\n    public static BILLBOARDMODE_Z = 4;\r\n    /**\r\n     * Object will rotate to face the camera\r\n     */\r\n    public static BILLBOARDMODE_ALL = 7;\r\n    /**\r\n     * Object will rotate to face the camera's position instead of orientation\r\n     */\r\n    public static BILLBOARDMODE_USE_POSITION = 128;\r\n    /**\r\n     * Child transform with Billboard flags should or should not apply parent rotation (default if off)\r\n     */\r\n    public static BillboardUseParentOrientation: boolean = false;\r\n\r\n    private static _TmpRotation = Quaternion.Zero();\r\n    private static _TmpScaling = Vector3.Zero();\r\n    private static _TmpTranslation = Vector3.Zero();\r\n\r\n    private _forward = new Vector3(0, 0, 1);\r\n    private _up = new Vector3(0, 1, 0);\r\n    private _right = new Vector3(1, 0, 0);\r\n\r\n    // Properties\r\n    @serializeAsVector3(\"position\")\r\n    private _position = Vector3.Zero();\r\n\r\n    @serializeAsVector3(\"rotation\")\r\n    private _rotation = Vector3.Zero();\r\n\r\n    @serializeAsQuaternion(\"rotationQuaternion\")\r\n    private _rotationQuaternion: Nullable<Quaternion> = null;\r\n\r\n    @serializeAsVector3(\"scaling\")\r\n    protected _scaling = Vector3.One();\r\n    private _transformToBoneReferal: Nullable<TransformNode> = null;\r\n    private _currentParentWhenAttachingToBone: Nullable<Node>;\r\n    private _isAbsoluteSynced = false;\r\n\r\n    @serialize(\"billboardMode\")\r\n    private _billboardMode = TransformNode.BILLBOARDMODE_NONE;\r\n\r\n    /**\r\n     * Gets or sets the billboard mode. Default is 0.\r\n     *\r\n     * | Value | Type | Description |\r\n     * | --- | --- | --- |\r\n     * | 0 | BILLBOARDMODE_NONE |  |\r\n     * | 1 | BILLBOARDMODE_X |  |\r\n     * | 2 | BILLBOARDMODE_Y |  |\r\n     * | 4 | BILLBOARDMODE_Z |  |\r\n     * | 7 | BILLBOARDMODE_ALL |  |\r\n     *\r\n     */\r\n    public get billboardMode() {\r\n        return this._billboardMode;\r\n    }\r\n\r\n    public set billboardMode(value: number) {\r\n        if (this._billboardMode === value) {\r\n            return;\r\n        }\r\n        this._billboardMode = value;\r\n        this._cache.useBillboardPosition = (this._billboardMode & TransformNode.BILLBOARDMODE_USE_POSITION) !== 0;\r\n        this._computeUseBillboardPath();\r\n    }\r\n\r\n    private _preserveParentRotationForBillboard = false;\r\n    /**\r\n     * Gets or sets a boolean indicating that parent rotation should be preserved when using billboards.\r\n     * This could be useful for glTF objects where parent rotation helps converting from right handed to left handed\r\n     */\r\n    public get preserveParentRotationForBillboard() {\r\n        return this._preserveParentRotationForBillboard;\r\n    }\r\n\r\n    public set preserveParentRotationForBillboard(value: boolean) {\r\n        if (value === this._preserveParentRotationForBillboard) {\r\n            return;\r\n        }\r\n        this._preserveParentRotationForBillboard = value;\r\n        this._computeUseBillboardPath();\r\n    }\r\n\r\n    private _computeUseBillboardPath(): void {\r\n        this._cache.useBillboardPath = this._billboardMode !== TransformNode.BILLBOARDMODE_NONE && !this.preserveParentRotationForBillboard;\r\n    }\r\n\r\n    /**\r\n     * Multiplication factor on scale x/y/z when computing the world matrix. Eg. for a 1x1x1 cube setting this to 2 will make it a 2x2x2 cube\r\n     */\r\n    @serialize()\r\n    public scalingDeterminant = 1;\r\n\r\n    @serialize(\"infiniteDistance\")\r\n    private _infiniteDistance = false;\r\n\r\n    /**\r\n     * Gets or sets the distance of the object to max, often used by skybox\r\n     */\r\n    public get infiniteDistance() {\r\n        return this._infiniteDistance;\r\n    }\r\n\r\n    public set infiniteDistance(value: boolean) {\r\n        if (this._infiniteDistance === value) {\r\n            return;\r\n        }\r\n\r\n        this._infiniteDistance = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that non uniform scaling (when at least one component is different from others) should be ignored.\r\n     * By default the system will update normals to compensate\r\n     */\r\n    @serialize()\r\n    public ignoreNonUniformScaling = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that even if rotationQuaternion is defined, you can keep updating rotation property and Babylon.js will just mix both\r\n     */\r\n    @serialize()\r\n    public reIntegrateRotationIntoRotationQuaternion = false;\r\n\r\n    // Cache\r\n    /** @internal */\r\n    public _poseMatrix: Nullable<Matrix> = null;\r\n    /** @internal */\r\n    public _localMatrix = Matrix.Zero();\r\n\r\n    private _usePivotMatrix = false;\r\n    private _absolutePosition = Vector3.Zero();\r\n    private _absoluteScaling = Vector3.Zero();\r\n    private _absoluteRotationQuaternion = Quaternion.Identity();\r\n    private _pivotMatrix = Matrix.Identity();\r\n    private _pivotMatrixInverse: Matrix;\r\n    /** @internal */\r\n    public _postMultiplyPivotMatrix = false;\r\n\r\n    protected _isWorldMatrixFrozen = false;\r\n\r\n    /** @internal */\r\n    public _indexInSceneTransformNodesArray = -1;\r\n\r\n    /**\r\n     * An event triggered after the world matrix is updated\r\n     */\r\n    public onAfterWorldMatrixUpdateObservable = new Observable<TransformNode>();\r\n\r\n    constructor(name: string, scene: Nullable<Scene> = null, isPure = true) {\r\n        super(name, scene);\r\n\r\n        if (isPure) {\r\n            this.getScene().addTransformNode(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"TransformNode\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"TransformNode\";\r\n    }\r\n\r\n    /**\r\n     * Gets or set the node position (default is (0.0, 0.0, 0.0))\r\n     */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(newPosition: Vector3) {\r\n        this._position = newPosition;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * return true if a pivot has been set\r\n     * @returns true if a pivot matrix is used\r\n     */\r\n    public isUsingPivotMatrix(): boolean {\r\n        return this._usePivotMatrix;\r\n    }\r\n\r\n    /**\r\n     * @returns true if pivot matrix must be cancelled in the world matrix. When this parameter is set to true (default), the inverse of the pivot matrix is also applied at the end to cancel the transformation effect.\r\n     */\r\n    public isUsingPostMultiplyPivotMatrix(): boolean {\r\n        return this._postMultiplyPivotMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the rotation property : a Vector3 defining the rotation value in radians around each local axis X, Y, Z  (default is (0.0, 0.0, 0.0)).\r\n     * If rotation quaternion is set, this Vector3 will be ignored and copy from the quaternion\r\n     */\r\n    public get rotation(): Vector3 {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(newRotation: Vector3) {\r\n        this._rotation = newRotation;\r\n        this._rotationQuaternion = null;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the scaling property : a Vector3 defining the node scaling along each local axis X, Y, Z (default is (1.0, 1.0, 1.0)).\r\n     */\r\n    public get scaling(): Vector3 {\r\n        return this._scaling;\r\n    }\r\n\r\n    public set scaling(newScaling: Vector3) {\r\n        this._scaling = newScaling;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the rotation Quaternion property : this a Quaternion object defining the node rotation by using a unit quaternion (undefined by default, but can be null).\r\n     * If set, only the rotationQuaternion is then used to compute the node rotation (ie. node.rotation will be ignored)\r\n     */\r\n    public get rotationQuaternion(): Nullable<Quaternion> {\r\n        return this._rotationQuaternion;\r\n    }\r\n\r\n    public set rotationQuaternion(quaternion: Nullable<Quaternion>) {\r\n        this._rotationQuaternion = quaternion;\r\n        //reset the rotation vector.\r\n        if (quaternion) {\r\n            this._rotation.setAll(0.0);\r\n        }\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * The forward direction of that transform in world space.\r\n     */\r\n    public get forward(): Vector3 {\r\n        Vector3.TransformNormalFromFloatsToRef(0, 0, this.getScene().useRightHandedSystem ? -1.0 : 1.0, this.getWorldMatrix(), this._forward);\r\n        return this._forward.normalize();\r\n    }\r\n\r\n    /**\r\n     * The up direction of that transform in world space.\r\n     */\r\n    public get up(): Vector3 {\r\n        Vector3.TransformNormalFromFloatsToRef(0, 1, 0, this.getWorldMatrix(), this._up);\r\n        return this._up.normalize();\r\n    }\r\n\r\n    /**\r\n     * The right direction of that transform in world space.\r\n     */\r\n    public get right(): Vector3 {\r\n        Vector3.TransformNormalFromFloatsToRef(this.getScene().useRightHandedSystem ? -1.0 : 1.0, 0, 0, this.getWorldMatrix(), this._right);\r\n        return this._right.normalize();\r\n    }\r\n\r\n    /**\r\n     * Copies the parameter passed Matrix into the mesh Pose matrix.\r\n     * @param matrix the matrix to copy the pose from\r\n     * @returns this TransformNode.\r\n     */\r\n    public updatePoseMatrix(matrix: Matrix): TransformNode {\r\n        if (!this._poseMatrix) {\r\n            this._poseMatrix = matrix.clone();\r\n            return this;\r\n        }\r\n        this._poseMatrix.copyFrom(matrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh Pose matrix.\r\n     * @returns the pose matrix\r\n     */\r\n    public getPoseMatrix(): Matrix {\r\n        if (!this._poseMatrix) {\r\n            this._poseMatrix = Matrix.Identity();\r\n        }\r\n        return this._poseMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronized(): boolean {\r\n        const cache = this._cache;\r\n\r\n        if (this._billboardMode !== cache.billboardMode || this._billboardMode !== TransformNode.BILLBOARDMODE_NONE) {\r\n            return false;\r\n        }\r\n\r\n        if (cache.pivotMatrixUpdated) {\r\n            return false;\r\n        }\r\n\r\n        if (this._infiniteDistance) {\r\n            return false;\r\n        }\r\n\r\n        if (this._position._isDirty) {\r\n            return false;\r\n        }\r\n\r\n        if (this._scaling._isDirty) {\r\n            return false;\r\n        }\r\n\r\n        if ((this._rotationQuaternion && this._rotationQuaternion._isDirty) || this._rotation._isDirty) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _initCache() {\r\n        super._initCache();\r\n\r\n        const cache = this._cache;\r\n        cache.localMatrixUpdated = false;\r\n        cache.billboardMode = -1;\r\n        cache.infiniteDistance = false;\r\n        cache.useBillboardPosition = false;\r\n        cache.useBillboardPath = false;\r\n    }\r\n\r\n    /**\r\n     * Returns the current mesh absolute position.\r\n     * Returns a Vector3.\r\n     */\r\n    public get absolutePosition(): Vector3 {\r\n        return this.getAbsolutePosition();\r\n    }\r\n\r\n    /**\r\n     * Returns the current mesh absolute scaling.\r\n     * Returns a Vector3.\r\n     */\r\n    public get absoluteScaling(): Vector3 {\r\n        this._syncAbsoluteScalingAndRotation();\r\n        return this._absoluteScaling;\r\n    }\r\n\r\n    /**\r\n     * Returns the current mesh absolute rotation.\r\n     * Returns a Quaternion.\r\n     */\r\n    public get absoluteRotationQuaternion(): Quaternion {\r\n        this._syncAbsoluteScalingAndRotation();\r\n        return this._absoluteRotationQuaternion;\r\n    }\r\n\r\n    /**\r\n     * Sets a new matrix to apply before all other transformation\r\n     * @param matrix defines the transform matrix\r\n     * @returns the current TransformNode\r\n     */\r\n    public setPreTransformMatrix(matrix: Matrix): TransformNode {\r\n        return this.setPivotMatrix(matrix, false);\r\n    }\r\n\r\n    /**\r\n     * Sets a new pivot matrix to the current node\r\n     * @param matrix defines the new pivot matrix to use\r\n     * @param postMultiplyPivotMatrix defines if the pivot matrix must be cancelled in the world matrix. When this parameter is set to true (default), the inverse of the pivot matrix is also applied at the end to cancel the transformation effect\r\n     * @returns the current TransformNode\r\n     */\r\n    public setPivotMatrix(matrix: DeepImmutable<Matrix>, postMultiplyPivotMatrix = true): TransformNode {\r\n        this._pivotMatrix.copyFrom(matrix);\r\n        this._usePivotMatrix = !this._pivotMatrix.isIdentity();\r\n\r\n        this._cache.pivotMatrixUpdated = true;\r\n        this._postMultiplyPivotMatrix = postMultiplyPivotMatrix;\r\n\r\n        if (this._postMultiplyPivotMatrix) {\r\n            if (!this._pivotMatrixInverse) {\r\n                this._pivotMatrixInverse = Matrix.Invert(this._pivotMatrix);\r\n            } else {\r\n                this._pivotMatrix.invertToRef(this._pivotMatrixInverse);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh pivot matrix.\r\n     * Default : Identity.\r\n     * @returns the matrix\r\n     */\r\n    public getPivotMatrix(): Matrix {\r\n        return this._pivotMatrix;\r\n    }\r\n\r\n    /**\r\n     * Instantiate (when possible) or clone that node with its hierarchy\r\n     * @param newParent defines the new parent to use for the instance (or clone)\r\n     * @param options defines options to configure how copy is done\r\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\r\n     * @param onNewNodeCreated defines an option callback to call when a clone or an instance is created\r\n     * @returns an instance (or a clone) of the current node with its hierarchy\r\n     */\r\n    public instantiateHierarchy(\r\n        newParent: Nullable<TransformNode> = null,\r\n        options?: { doNotInstantiate: boolean | ((node: TransformNode) => boolean) },\r\n        onNewNodeCreated?: (source: TransformNode, clone: TransformNode) => void\r\n    ): Nullable<TransformNode> {\r\n        const clone = this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true);\r\n\r\n        if (clone) {\r\n            if (onNewNodeCreated) {\r\n                onNewNodeCreated(this, clone);\r\n            }\r\n        }\r\n\r\n        for (const child of this.getChildTransformNodes(true)) {\r\n            child.instantiateHierarchy(clone, options, onNewNodeCreated);\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Prevents the World matrix to be computed any longer\r\n     * @param newWorldMatrix defines an optional matrix to use as world matrix\r\n     * @param decompose defines whether to decompose the given newWorldMatrix or directly assign\r\n     * @returns the TransformNode.\r\n     */\r\n    public freezeWorldMatrix(newWorldMatrix: Nullable<Matrix> = null, decompose = false): TransformNode {\r\n        if (newWorldMatrix) {\r\n            if (decompose) {\r\n                this._rotation.setAll(0);\r\n                this._rotationQuaternion = this._rotationQuaternion || Quaternion.Identity();\r\n                newWorldMatrix.decompose(this._scaling, this._rotationQuaternion, this._position);\r\n                this.computeWorldMatrix(true);\r\n            } else {\r\n                this._worldMatrix = newWorldMatrix;\r\n                this._absolutePosition.copyFromFloats(this._worldMatrix.m[12], this._worldMatrix.m[13], this._worldMatrix.m[14]);\r\n                this._afterComputeWorldMatrix();\r\n            }\r\n        } else {\r\n            this._isWorldMatrixFrozen = false; // no guarantee world is not already frozen, switch off temporarily\r\n            this.computeWorldMatrix(true);\r\n        }\r\n        this._isDirty = false;\r\n        this._isWorldMatrixFrozen = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Allows back the World matrix computation.\r\n     * @returns the TransformNode.\r\n     */\r\n    public unfreezeWorldMatrix() {\r\n        this._isWorldMatrixFrozen = false;\r\n        this.computeWorldMatrix(true);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * True if the World matrix has been frozen.\r\n     */\r\n    public get isWorldMatrixFrozen(): boolean {\r\n        return this._isWorldMatrixFrozen;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh absolute position in the World.\r\n     * @returns a Vector3.\r\n     */\r\n    public getAbsolutePosition(): Vector3 {\r\n        this.computeWorldMatrix();\r\n        return this._absolutePosition;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh absolute position in the World from a Vector3 or an Array(3).\r\n     * @param absolutePosition the absolute position to set\r\n     * @returns the TransformNode.\r\n     */\r\n    public setAbsolutePosition(absolutePosition: Vector3): TransformNode {\r\n        if (!absolutePosition) {\r\n            return this;\r\n        }\r\n        let absolutePositionX;\r\n        let absolutePositionY;\r\n        let absolutePositionZ;\r\n        if (absolutePosition.x === undefined) {\r\n            if (arguments.length < 3) {\r\n                return this;\r\n            }\r\n            absolutePositionX = arguments[0];\r\n            absolutePositionY = arguments[1];\r\n            absolutePositionZ = arguments[2];\r\n        } else {\r\n            absolutePositionX = absolutePosition.x;\r\n            absolutePositionY = absolutePosition.y;\r\n            absolutePositionZ = absolutePosition.z;\r\n        }\r\n        if (this.parent) {\r\n            const invertParentWorldMatrix = TmpVectors.Matrix[0];\r\n            this.parent.getWorldMatrix().invertToRef(invertParentWorldMatrix);\r\n            Vector3.TransformCoordinatesFromFloatsToRef(absolutePositionX, absolutePositionY, absolutePositionZ, invertParentWorldMatrix, this.position);\r\n        } else {\r\n            this.position.x = absolutePositionX;\r\n            this.position.y = absolutePositionY;\r\n            this.position.z = absolutePositionZ;\r\n        }\r\n\r\n        this._absolutePosition.copyFrom(absolutePosition);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh position in its local space.\r\n     * @param vector3 the position to set in localspace\r\n     * @returns the TransformNode.\r\n     */\r\n    public setPositionWithLocalVector(vector3: Vector3): TransformNode {\r\n        this.computeWorldMatrix();\r\n        this.position = Vector3.TransformNormal(vector3, this._localMatrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh position in the local space from the current World matrix values.\r\n     * @returns a new Vector3.\r\n     */\r\n    public getPositionExpressedInLocalSpace(): Vector3 {\r\n        this.computeWorldMatrix();\r\n        const invLocalWorldMatrix = TmpVectors.Matrix[0];\r\n        this._localMatrix.invertToRef(invLocalWorldMatrix);\r\n        return Vector3.TransformNormal(this.position, invLocalWorldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Translates the mesh along the passed Vector3 in its local space.\r\n     * @param vector3 the distance to translate in localspace\r\n     * @returns the TransformNode.\r\n     */\r\n    public locallyTranslate(vector3: Vector3): TransformNode {\r\n        this.computeWorldMatrix(true);\r\n        this.position = Vector3.TransformCoordinates(vector3, this._localMatrix);\r\n        return this;\r\n    }\r\n\r\n    private static _LookAtVectorCache = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Orients a mesh towards a target point. Mesh must be drawn facing user.\r\n     * @param targetPoint the position (must be in same space as current mesh) to look at\r\n     * @param yawCor optional yaw (y-axis) correction in radians\r\n     * @param pitchCor optional pitch (x-axis) correction in radians\r\n     * @param rollCor optional roll (z-axis) correction in radians\r\n     * @param space the chosen space of the target\r\n     * @returns the TransformNode.\r\n     */\r\n    public lookAt(targetPoint: Vector3, yawCor: number = 0, pitchCor: number = 0, rollCor: number = 0, space: Space = Space.LOCAL): TransformNode {\r\n        const dv = TransformNode._LookAtVectorCache;\r\n        const pos = space === Space.LOCAL ? this.position : this.getAbsolutePosition();\r\n        targetPoint.subtractToRef(pos, dv);\r\n        this.setDirection(dv, yawCor, pitchCor, rollCor);\r\n\r\n        // Correct for parent's rotation offset\r\n        if (space === Space.WORLD && this.parent) {\r\n            if (this.rotationQuaternion) {\r\n                // Get local rotation matrix of the looking object\r\n                const rotationMatrix = TmpVectors.Matrix[0];\r\n                this.rotationQuaternion.toRotationMatrix(rotationMatrix);\r\n\r\n                // Offset rotation by parent's inverted rotation matrix to correct in world space\r\n                const parentRotationMatrix = TmpVectors.Matrix[1];\r\n                this.parent.getWorldMatrix().getRotationMatrixToRef(parentRotationMatrix);\r\n                parentRotationMatrix.invert();\r\n                rotationMatrix.multiplyToRef(parentRotationMatrix, rotationMatrix);\r\n                this.rotationQuaternion.fromRotationMatrix(rotationMatrix);\r\n            } else {\r\n                // Get local rotation matrix of the looking object\r\n                const quaternionRotation = TmpVectors.Quaternion[0];\r\n                Quaternion.FromEulerVectorToRef(this.rotation, quaternionRotation);\r\n                const rotationMatrix = TmpVectors.Matrix[0];\r\n                quaternionRotation.toRotationMatrix(rotationMatrix);\r\n\r\n                // Offset rotation by parent's inverted rotation matrix to correct in world space\r\n                const parentRotationMatrix = TmpVectors.Matrix[1];\r\n                this.parent.getWorldMatrix().getRotationMatrixToRef(parentRotationMatrix);\r\n                parentRotationMatrix.invert();\r\n                rotationMatrix.multiplyToRef(parentRotationMatrix, rotationMatrix);\r\n                quaternionRotation.fromRotationMatrix(rotationMatrix);\r\n                quaternionRotation.toEulerAnglesToRef(this.rotation);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 that is the localAxis, expressed in the mesh local space, rotated like the mesh.\r\n     * This Vector3 is expressed in the World space.\r\n     * @param localAxis axis to rotate\r\n     * @returns a new Vector3 that is the localAxis, expressed in the mesh local space, rotated like the mesh.\r\n     */\r\n    public getDirection(localAxis: Vector3): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getDirectionToRef(localAxis, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the Vector3 \"result\" as the rotated Vector3 \"localAxis\" in the same rotation than the mesh.\r\n     * localAxis is expressed in the mesh local space.\r\n     * result is computed in the World space from the mesh World matrix.\r\n     * @param localAxis axis to rotate\r\n     * @param result the resulting transformnode\r\n     * @returns this TransformNode.\r\n     */\r\n    public getDirectionToRef(localAxis: Vector3, result: Vector3): TransformNode {\r\n        Vector3.TransformNormalToRef(localAxis, this.getWorldMatrix(), result);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets this transform node rotation to the given local axis.\r\n     * @param localAxis the axis in local space\r\n     * @param yawCor optional yaw (y-axis) correction in radians\r\n     * @param pitchCor optional pitch (x-axis) correction in radians\r\n     * @param rollCor optional roll (z-axis) correction in radians\r\n     * @returns this TransformNode\r\n     */\r\n    public setDirection(localAxis: Vector3, yawCor: number = 0, pitchCor: number = 0, rollCor: number = 0): TransformNode {\r\n        const yaw = -Math.atan2(localAxis.z, localAxis.x) + Math.PI / 2;\r\n        const len = Math.sqrt(localAxis.x * localAxis.x + localAxis.z * localAxis.z);\r\n        const pitch = -Math.atan2(localAxis.y, len);\r\n        if (this.rotationQuaternion) {\r\n            Quaternion.RotationYawPitchRollToRef(yaw + yawCor, pitch + pitchCor, rollCor, this.rotationQuaternion);\r\n        } else {\r\n            this.rotation.x = pitch + pitchCor;\r\n            this.rotation.y = yaw + yawCor;\r\n            this.rotation.z = rollCor;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a new pivot point to the current node\r\n     * @param point defines the new pivot point to use\r\n     * @param space defines if the point is in world or local space (local by default)\r\n     * @returns the current TransformNode\r\n     */\r\n    public setPivotPoint(point: Vector3, space: Space = Space.LOCAL): TransformNode {\r\n        if (this.getScene().getRenderId() == 0) {\r\n            this.computeWorldMatrix(true);\r\n        }\r\n\r\n        const wm = this.getWorldMatrix();\r\n\r\n        if (space == Space.WORLD) {\r\n            const tmat = TmpVectors.Matrix[0];\r\n            wm.invertToRef(tmat);\r\n            point = Vector3.TransformCoordinates(point, tmat);\r\n        }\r\n\r\n        return this.setPivotMatrix(Matrix.Translation(-point.x, -point.y, -point.z), true);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the mesh pivot point coordinates in the local space.\r\n     * @returns the pivot point\r\n     */\r\n    public getPivotPoint(): Vector3 {\r\n        const point = Vector3.Zero();\r\n        this.getPivotPointToRef(point);\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Vector3 \"result\" with the coordinates of the mesh pivot point in the local space.\r\n     * @param result the vector3 to store the result\r\n     * @returns this TransformNode.\r\n     */\r\n    public getPivotPointToRef(result: Vector3): TransformNode {\r\n        result.x = -this._pivotMatrix.m[12];\r\n        result.y = -this._pivotMatrix.m[13];\r\n        result.z = -this._pivotMatrix.m[14];\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the mesh pivot point World coordinates.\r\n     * @returns a new Vector3 set with the mesh pivot point World coordinates.\r\n     */\r\n    public getAbsolutePivotPoint(): Vector3 {\r\n        const point = Vector3.Zero();\r\n        this.getAbsolutePivotPointToRef(point);\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Sets the Vector3 \"result\" coordinates with the mesh pivot point World coordinates.\r\n     * @param result vector3 to store the result\r\n     * @returns this TransformNode.\r\n     */\r\n    public getAbsolutePivotPointToRef(result: Vector3): TransformNode {\r\n        this.getPivotPointToRef(result);\r\n        Vector3.TransformCoordinatesToRef(result, this.getWorldMatrix(), result);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Flag the transform node as dirty (Forcing it to update everything)\r\n     * @param property if set to \"rotation\" the objects rotationQuaternion will be set to null\r\n     * @returns this  node\r\n     */\r\n    public markAsDirty(property?: string): Node {\r\n        if (this._isDirty) {\r\n            return this;\r\n        }\r\n\r\n        // We need to explicitly update the children\r\n        // as the scene.evaluateActiveMeshes will not poll the transform nodes\r\n        if (this._children) {\r\n            for (const child of this._children) {\r\n                child.markAsDirty(property);\r\n            }\r\n        }\r\n        return super.markAsDirty(property);\r\n    }\r\n\r\n    /**\r\n     * Defines the passed node as the parent of the current node.\r\n     * The node will remain exactly where it is and its position / rotation will be updated accordingly.\r\n     * Note that if the mesh has a pivot matrix / point defined it will be applied after the parent was updated.\r\n     * In that case the node will not remain in the same space as it is, as the pivot will be applied.\r\n     * To avoid this, you can set updatePivot to true and the pivot will be updated to identity\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/parent\r\n     * @param node the node ot set as the parent\r\n     * @param preserveScalingSign if true, keep scaling sign of child. Otherwise, scaling sign might change.\r\n     * @param updatePivot if true, update the pivot matrix to keep the node in the same space as before\r\n     * @returns this TransformNode.\r\n     */\r\n    public setParent(node: Nullable<Node>, preserveScalingSign: boolean = false, updatePivot = false): TransformNode {\r\n        if (!node && !this.parent) {\r\n            return this;\r\n        }\r\n\r\n        const quatRotation = TmpVectors.Quaternion[0];\r\n        const position = TmpVectors.Vector3[0];\r\n        const scale = TmpVectors.Vector3[1];\r\n        const invParentMatrix = TmpVectors.Matrix[1];\r\n        Matrix.IdentityToRef(invParentMatrix);\r\n        const composedMatrix = TmpVectors.Matrix[0];\r\n        this.computeWorldMatrix(true);\r\n\r\n        let currentRotation = this.rotationQuaternion;\r\n        if (!currentRotation) {\r\n            currentRotation = TransformNode._TmpRotation;\r\n            Quaternion.RotationYawPitchRollToRef(this._rotation.y, this._rotation.x, this._rotation.z, currentRotation);\r\n        }\r\n\r\n        // current global transformation without pivot\r\n        Matrix.ComposeToRef(this.scaling, currentRotation, this.position, composedMatrix);\r\n        if (this.parent) {\r\n            composedMatrix.multiplyToRef(this.parent.computeWorldMatrix(true), composedMatrix);\r\n        }\r\n\r\n        // is a node was set, calculate the difference between this and the node\r\n        if (node) {\r\n            node.computeWorldMatrix(true).invertToRef(invParentMatrix);\r\n            composedMatrix.multiplyToRef(invParentMatrix, composedMatrix);\r\n        }\r\n        composedMatrix.decompose(scale, quatRotation, position, preserveScalingSign ? this : undefined);\r\n\r\n        if (this.rotationQuaternion) {\r\n            this.rotationQuaternion.copyFrom(quatRotation);\r\n        } else {\r\n            quatRotation.toEulerAnglesToRef(this.rotation);\r\n        }\r\n\r\n        this.scaling.copyFrom(scale);\r\n        this.position.copyFrom(position);\r\n\r\n        this.parent = node;\r\n\r\n        if (updatePivot) {\r\n            this.setPivotMatrix(Matrix.Identity());\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _nonUniformScaling = false;\r\n    /**\r\n     * True if the scaling property of this object is non uniform eg. (1,2,1)\r\n     */\r\n    public get nonUniformScaling(): boolean {\r\n        return this._nonUniformScaling;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateNonUniformScalingState(value: boolean): boolean {\r\n        if (this._nonUniformScaling === value) {\r\n            return false;\r\n        }\r\n\r\n        this._nonUniformScaling = value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Attach the current TransformNode to another TransformNode associated with a bone\r\n     * @param bone Bone affecting the TransformNode\r\n     * @param affectedTransformNode TransformNode associated with the bone\r\n     * @returns this object\r\n     */\r\n    public attachToBone(bone: Bone, affectedTransformNode: TransformNode): TransformNode {\r\n        this._currentParentWhenAttachingToBone = this.parent;\r\n        this._transformToBoneReferal = affectedTransformNode;\r\n        this.parent = bone;\r\n\r\n        bone.getSkeleton().prepare(true); // make sure bone.getFinalMatrix() is up to date\r\n\r\n        if (bone.getFinalMatrix().determinant() < 0) {\r\n            this.scalingDeterminant *= -1;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Detach the transform node if its associated with a bone\r\n     * @param resetToPreviousParent Indicates if the parent that was in effect when attachToBone was called should be set back or if we should set parent to null instead (defaults to the latter)\r\n     * @returns this object\r\n     */\r\n    public detachFromBone(resetToPreviousParent = false): TransformNode {\r\n        if (!this.parent) {\r\n            if (resetToPreviousParent) {\r\n                this.parent = this._currentParentWhenAttachingToBone;\r\n            }\r\n            return this;\r\n        }\r\n\r\n        if (this.parent.getWorldMatrix().determinant() < 0) {\r\n            this.scalingDeterminant *= -1;\r\n        }\r\n        this._transformToBoneReferal = null;\r\n        if (resetToPreviousParent) {\r\n            this.parent = this._currentParentWhenAttachingToBone;\r\n        } else {\r\n            this.parent = null;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private static _RotationAxisCache = new Quaternion();\r\n    /**\r\n     * Rotates the mesh around the axis vector for the passed angle (amount) expressed in radians, in the given space.\r\n     * space (default LOCAL) can be either Space.LOCAL, either Space.WORLD.\r\n     * Note that the property `rotationQuaternion` is then automatically updated and the property `rotation` is set to (0,0,0) and no longer used.\r\n     * The passed axis is also normalized.\r\n     * @param axis the axis to rotate around\r\n     * @param amount the amount to rotate in radians\r\n     * @param space Space to rotate in (Default: local)\r\n     * @returns the TransformNode.\r\n     */\r\n    public rotate(axis: Vector3, amount: number, space?: Space): TransformNode {\r\n        axis.normalize();\r\n        if (!this.rotationQuaternion) {\r\n            this.rotationQuaternion = this.rotation.toQuaternion();\r\n            this.rotation.setAll(0);\r\n        }\r\n        let rotationQuaternion: Quaternion;\r\n        if (!space || (space as any) === Space.LOCAL) {\r\n            rotationQuaternion = Quaternion.RotationAxisToRef(axis, amount, TransformNode._RotationAxisCache);\r\n            this.rotationQuaternion.multiplyToRef(rotationQuaternion, this.rotationQuaternion);\r\n        } else {\r\n            if (this.parent) {\r\n                const parentWorldMatrix = this.parent.getWorldMatrix();\r\n                const invertParentWorldMatrix = TmpVectors.Matrix[0];\r\n                parentWorldMatrix.invertToRef(invertParentWorldMatrix);\r\n                axis = Vector3.TransformNormal(axis, invertParentWorldMatrix);\r\n\r\n                if (parentWorldMatrix.determinant() < 0) {\r\n                    amount *= -1;\r\n                }\r\n            }\r\n            rotationQuaternion = Quaternion.RotationAxisToRef(axis, amount, TransformNode._RotationAxisCache);\r\n            rotationQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates the mesh around the axis vector for the passed angle (amount) expressed in radians, in world space.\r\n     * Note that the property `rotationQuaternion` is then automatically updated and the property `rotation` is set to (0,0,0) and no longer used.\r\n     * The passed axis is also normalized. .\r\n     * Method is based on http://www.euclideanspace.com/maths/geometry/affine/aroundPoint/index.htm\r\n     * @param point the point to rotate around\r\n     * @param axis the axis to rotate around\r\n     * @param amount the amount to rotate in radians\r\n     * @returns the TransformNode\r\n     */\r\n    public rotateAround(point: Vector3, axis: Vector3, amount: number): TransformNode {\r\n        axis.normalize();\r\n        if (!this.rotationQuaternion) {\r\n            this.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.rotation.y, this.rotation.x, this.rotation.z);\r\n            this.rotation.setAll(0);\r\n        }\r\n\r\n        const tmpVector = TmpVectors.Vector3[0];\r\n        const finalScale = TmpVectors.Vector3[1];\r\n        const finalTranslation = TmpVectors.Vector3[2];\r\n\r\n        const finalRotation = TmpVectors.Quaternion[0];\r\n\r\n        const translationMatrix = TmpVectors.Matrix[0]; // T\r\n        const translationMatrixInv = TmpVectors.Matrix[1]; // T'\r\n        const rotationMatrix = TmpVectors.Matrix[2]; // R\r\n        const finalMatrix = TmpVectors.Matrix[3]; // T' x R x T\r\n\r\n        point.subtractToRef(this.position, tmpVector);\r\n        Matrix.TranslationToRef(tmpVector.x, tmpVector.y, tmpVector.z, translationMatrix); // T\r\n        Matrix.TranslationToRef(-tmpVector.x, -tmpVector.y, -tmpVector.z, translationMatrixInv); // T'\r\n        Matrix.RotationAxisToRef(axis, amount, rotationMatrix); // R\r\n\r\n        translationMatrixInv.multiplyToRef(rotationMatrix, finalMatrix); // T' x R\r\n        finalMatrix.multiplyToRef(translationMatrix, finalMatrix); // T' x R x T\r\n\r\n        finalMatrix.decompose(finalScale, finalRotation, finalTranslation);\r\n\r\n        this.position.addInPlace(finalTranslation);\r\n        finalRotation.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Translates the mesh along the axis vector for the passed distance in the given space.\r\n     * space (default LOCAL) can be either Space.LOCAL, either Space.WORLD.\r\n     * @param axis the axis to translate in\r\n     * @param distance the distance to translate\r\n     * @param space Space to rotate in (Default: local)\r\n     * @returns the TransformNode.\r\n     */\r\n    public translate(axis: Vector3, distance: number, space?: Space): TransformNode {\r\n        const displacementVector = axis.scale(distance);\r\n        if (!space || (space as any) === Space.LOCAL) {\r\n            const tempV3 = this.getPositionExpressedInLocalSpace().add(displacementVector);\r\n            this.setPositionWithLocalVector(tempV3);\r\n        } else {\r\n            this.setAbsolutePosition(this.getAbsolutePosition().add(displacementVector));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a rotation step to the mesh current rotation.\r\n     * x, y, z are Euler angles expressed in radians.\r\n     * This methods updates the current mesh rotation, either mesh.rotation, either mesh.rotationQuaternion if it's set.\r\n     * This means this rotation is made in the mesh local space only.\r\n     * It's useful to set a custom rotation order different from the BJS standard one YXZ.\r\n     * Example : this rotates the mesh first around its local X axis, then around its local Z axis, finally around its local Y axis.\r\n     * ```javascript\r\n     * mesh.addRotation(x1, 0, 0).addRotation(0, 0, z2).addRotation(0, 0, y3);\r\n     * ```\r\n     * Note that `addRotation()` accumulates the passed rotation values to the current ones and computes the .rotation or .rotationQuaternion updated values.\r\n     * Under the hood, only quaternions are used. So it's a little faster is you use .rotationQuaternion because it doesn't need to translate them back to Euler angles.\r\n     * @param x Rotation to add\r\n     * @param y Rotation to add\r\n     * @param z Rotation to add\r\n     * @returns the TransformNode.\r\n     */\r\n    public addRotation(x: number, y: number, z: number): TransformNode {\r\n        let rotationQuaternion;\r\n        if (this.rotationQuaternion) {\r\n            rotationQuaternion = this.rotationQuaternion;\r\n        } else {\r\n            rotationQuaternion = TmpVectors.Quaternion[1];\r\n            Quaternion.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, rotationQuaternion);\r\n        }\r\n        const accumulation = TmpVectors.Quaternion[0];\r\n        Quaternion.RotationYawPitchRollToRef(y, x, z, accumulation);\r\n        rotationQuaternion.multiplyInPlace(accumulation);\r\n        if (!this.rotationQuaternion) {\r\n            rotationQuaternion.toEulerAnglesToRef(this.rotation);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _getEffectiveParent(): Nullable<Node> {\r\n        return this.parent;\r\n    }\r\n\r\n    /**\r\n     * Returns whether the transform node world matrix computation needs the camera information to be computed.\r\n     * This is the case when the node is a billboard or has an infinite distance for instance.\r\n     * @returns true if the world matrix computation needs the camera information to be computed\r\n     */\r\n    public isWorldMatrixCameraDependent(): boolean {\r\n        return (this._infiniteDistance && !this.parent) || (this._billboardMode !== TransformNode.BILLBOARDMODE_NONE && !this.preserveParentRotationForBillboard);\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @param force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\r\n     * @param camera defines the camera used if different from the scene active camera (This is used with modes like Billboard or infinite distance)\r\n     * @returns the world matrix\r\n     */\r\n    public computeWorldMatrix(force: boolean = false, camera: Nullable<Camera> = null): Matrix {\r\n        if (this._isWorldMatrixFrozen && !this._isDirty) {\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        const currentRenderId = this.getScene().getRenderId();\r\n        if (!this._isDirty && !force && (this._currentRenderId === currentRenderId || this.isSynchronized())) {\r\n            this._currentRenderId = currentRenderId;\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        camera = camera || this.getScene().activeCamera;\r\n\r\n        this._updateCache();\r\n        const cache = this._cache;\r\n        cache.pivotMatrixUpdated = false;\r\n        cache.billboardMode = this.billboardMode;\r\n        cache.infiniteDistance = this.infiniteDistance;\r\n        cache.parent = this._parentNode;\r\n\r\n        this._currentRenderId = currentRenderId;\r\n        this._childUpdateId += 1;\r\n        this._isDirty = false;\r\n        this._position._isDirty = false;\r\n        this._rotation._isDirty = false;\r\n        this._scaling._isDirty = false;\r\n        const parent = this._getEffectiveParent();\r\n\r\n        // Scaling\r\n        const scaling: Vector3 = TransformNode._TmpScaling;\r\n        let translation: Vector3 = this._position;\r\n\r\n        // Translation\r\n        if (this._infiniteDistance) {\r\n            if (!this.parent && camera) {\r\n                const cameraWorldMatrix = camera.getWorldMatrix();\r\n                const cameraGlobalPosition = new Vector3(cameraWorldMatrix.m[12], cameraWorldMatrix.m[13], cameraWorldMatrix.m[14]);\r\n\r\n                translation = TransformNode._TmpTranslation;\r\n                translation.copyFromFloats(this._position.x + cameraGlobalPosition.x, this._position.y + cameraGlobalPosition.y, this._position.z + cameraGlobalPosition.z);\r\n            }\r\n        }\r\n\r\n        // Scaling\r\n        scaling.copyFromFloats(this._scaling.x * this.scalingDeterminant, this._scaling.y * this.scalingDeterminant, this._scaling.z * this.scalingDeterminant);\r\n\r\n        // Rotation\r\n        let rotation: Quaternion;\r\n        if (this._rotationQuaternion) {\r\n            this._rotationQuaternion._isDirty = false;\r\n            rotation = this._rotationQuaternion;\r\n            if (this.reIntegrateRotationIntoRotationQuaternion) {\r\n                const len = this.rotation.lengthSquared();\r\n                if (len) {\r\n                    this._rotationQuaternion.multiplyInPlace(Quaternion.RotationYawPitchRoll(this._rotation.y, this._rotation.x, this._rotation.z));\r\n                    this._rotation.copyFromFloats(0, 0, 0);\r\n                }\r\n            }\r\n        } else {\r\n            rotation = TransformNode._TmpRotation;\r\n            Quaternion.RotationYawPitchRollToRef(this._rotation.y, this._rotation.x, this._rotation.z, rotation);\r\n        }\r\n\r\n        // Compose\r\n        if (this._usePivotMatrix) {\r\n            const scaleMatrix = TmpVectors.Matrix[1];\r\n            Matrix.ScalingToRef(scaling.x, scaling.y, scaling.z, scaleMatrix);\r\n\r\n            // Rotation\r\n            const rotationMatrix = TmpVectors.Matrix[0];\r\n            rotation.toRotationMatrix(rotationMatrix);\r\n\r\n            // Composing transformations\r\n            this._pivotMatrix.multiplyToRef(scaleMatrix, TmpVectors.Matrix[4]);\r\n            TmpVectors.Matrix[4].multiplyToRef(rotationMatrix, this._localMatrix);\r\n\r\n            // Post multiply inverse of pivotMatrix\r\n            if (this._postMultiplyPivotMatrix) {\r\n                this._localMatrix.multiplyToRef(this._pivotMatrixInverse, this._localMatrix);\r\n            }\r\n\r\n            this._localMatrix.addTranslationFromFloats(translation.x, translation.y, translation.z);\r\n        } else {\r\n            Matrix.ComposeToRef(scaling, rotation, translation, this._localMatrix);\r\n        }\r\n\r\n        // Parent\r\n        if (parent && parent.getWorldMatrix) {\r\n            if (force) {\r\n                parent.computeWorldMatrix(force);\r\n            }\r\n            if (cache.useBillboardPath) {\r\n                if (this._transformToBoneReferal) {\r\n                    const bone = this.parent as Bone;\r\n                    bone.getSkeleton().prepare();\r\n                    bone.getFinalMatrix().multiplyToRef(this._transformToBoneReferal.getWorldMatrix(), TmpVectors.Matrix[7]);\r\n                } else {\r\n                    TmpVectors.Matrix[7].copyFrom(parent.getWorldMatrix());\r\n                }\r\n\r\n                // Extract scaling and translation from parent\r\n                const translation = TmpVectors.Vector3[5];\r\n                const scale = TmpVectors.Vector3[6];\r\n                const orientation = TmpVectors.Quaternion[0];\r\n                TmpVectors.Matrix[7].decompose(scale, orientation, translation);\r\n                Matrix.ScalingToRef(scale.x, scale.y, scale.z, TmpVectors.Matrix[7]);\r\n                TmpVectors.Matrix[7].setTranslation(translation);\r\n\r\n                if (TransformNode.BillboardUseParentOrientation) {\r\n                    // set localMatrix translation to be transformed against parent's orientation.\r\n                    this._position.applyRotationQuaternionToRef(orientation, translation);\r\n                    this._localMatrix.setTranslation(translation);\r\n                }\r\n\r\n                this._localMatrix.multiplyToRef(TmpVectors.Matrix[7], this._worldMatrix);\r\n            } else {\r\n                if (this._transformToBoneReferal) {\r\n                    const bone = this.parent as Bone;\r\n                    bone.getSkeleton().prepare();\r\n                    this._localMatrix.multiplyToRef(bone.getFinalMatrix(), TmpVectors.Matrix[6]);\r\n                    TmpVectors.Matrix[6].multiplyToRef(this._transformToBoneReferal.getWorldMatrix(), this._worldMatrix);\r\n                } else {\r\n                    this._localMatrix.multiplyToRef(parent.getWorldMatrix(), this._worldMatrix);\r\n                }\r\n            }\r\n            this._markSyncedWithParent();\r\n        } else {\r\n            this._worldMatrix.copyFrom(this._localMatrix);\r\n        }\r\n\r\n        // Billboarding based on camera orientation (testing PG:http://www.babylonjs-playground.com/#UJEIL#13)\r\n        if (cache.useBillboardPath && camera && this.billboardMode && !cache.useBillboardPosition) {\r\n            const storedTranslation = TmpVectors.Vector3[0];\r\n            this._worldMatrix.getTranslationToRef(storedTranslation); // Save translation\r\n\r\n            // Cancel camera rotation\r\n            TmpVectors.Matrix[1].copyFrom(camera.getViewMatrix());\r\n\r\n            if (this._scene.useRightHandedSystem) {\r\n                TmpVectors.Matrix[1].multiplyToRef(convertRHSToLHS, TmpVectors.Matrix[1]);\r\n            }\r\n\r\n            TmpVectors.Matrix[1].setTranslationFromFloats(0, 0, 0);\r\n            TmpVectors.Matrix[1].invertToRef(TmpVectors.Matrix[0]);\r\n\r\n            if ((this.billboardMode & TransformNode.BILLBOARDMODE_ALL) !== TransformNode.BILLBOARDMODE_ALL) {\r\n                TmpVectors.Matrix[0].decompose(undefined, TmpVectors.Quaternion[0], undefined);\r\n                const eulerAngles = TmpVectors.Vector3[1];\r\n                TmpVectors.Quaternion[0].toEulerAnglesToRef(eulerAngles);\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_X) !== TransformNode.BILLBOARDMODE_X) {\r\n                    eulerAngles.x = 0;\r\n                }\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Y) !== TransformNode.BILLBOARDMODE_Y) {\r\n                    eulerAngles.y = 0;\r\n                }\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Z) !== TransformNode.BILLBOARDMODE_Z) {\r\n                    eulerAngles.z = 0;\r\n                }\r\n\r\n                Matrix.RotationYawPitchRollToRef(eulerAngles.y, eulerAngles.x, eulerAngles.z, TmpVectors.Matrix[0]);\r\n            }\r\n            this._worldMatrix.setTranslationFromFloats(0, 0, 0);\r\n            this._worldMatrix.multiplyToRef(TmpVectors.Matrix[0], this._worldMatrix);\r\n\r\n            // Restore translation\r\n            this._worldMatrix.setTranslation(TmpVectors.Vector3[0]);\r\n        }\r\n        // Billboarding based on camera position\r\n        else if (cache.useBillboardPath && camera && cache.useBillboardPosition) {\r\n            const storedTranslation = TmpVectors.Vector3[0];\r\n            // Save translation\r\n            this._worldMatrix.getTranslationToRef(storedTranslation);\r\n\r\n            // Compute camera position in local space\r\n            const cameraPosition = camera.globalPosition;\r\n            this._worldMatrix.invertToRef(TmpVectors.Matrix[1]);\r\n            const camInObjSpace = TmpVectors.Vector3[1];\r\n            Vector3.TransformCoordinatesToRef(cameraPosition, TmpVectors.Matrix[1], camInObjSpace);\r\n            camInObjSpace.normalize();\r\n\r\n            // Find the lookAt info in local space\r\n            const yaw = -Math.atan2(camInObjSpace.z, camInObjSpace.x) + Math.PI / 2;\r\n            const len = Math.sqrt(camInObjSpace.x * camInObjSpace.x + camInObjSpace.z * camInObjSpace.z);\r\n            const pitch = -Math.atan2(camInObjSpace.y, len);\r\n            Quaternion.RotationYawPitchRollToRef(yaw, pitch, 0, TmpVectors.Quaternion[0]);\r\n\r\n            if ((this.billboardMode & TransformNode.BILLBOARDMODE_ALL) !== TransformNode.BILLBOARDMODE_ALL) {\r\n                const eulerAngles = TmpVectors.Vector3[1];\r\n                TmpVectors.Quaternion[0].toEulerAnglesToRef(eulerAngles);\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_X) !== TransformNode.BILLBOARDMODE_X) {\r\n                    eulerAngles.x = 0;\r\n                }\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Y) !== TransformNode.BILLBOARDMODE_Y) {\r\n                    eulerAngles.y = 0;\r\n                }\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Z) !== TransformNode.BILLBOARDMODE_Z) {\r\n                    eulerAngles.z = 0;\r\n                }\r\n\r\n                Matrix.RotationYawPitchRollToRef(eulerAngles.y, eulerAngles.x, eulerAngles.z, TmpVectors.Matrix[0]);\r\n            } else {\r\n                Matrix.FromQuaternionToRef(TmpVectors.Quaternion[0], TmpVectors.Matrix[0]);\r\n            }\r\n\r\n            // Cancel translation\r\n            this._worldMatrix.setTranslationFromFloats(0, 0, 0);\r\n\r\n            // Rotate according to lookat (diff from local to lookat)\r\n            this._worldMatrix.multiplyToRef(TmpVectors.Matrix[0], this._worldMatrix);\r\n\r\n            // Restore translation\r\n            this._worldMatrix.setTranslation(TmpVectors.Vector3[0]);\r\n        }\r\n\r\n        // Normal matrix\r\n        if (!this.ignoreNonUniformScaling) {\r\n            if (this._scaling.isNonUniformWithinEpsilon(0.000001)) {\r\n                this._updateNonUniformScalingState(true);\r\n            } else if (parent && (<TransformNode>parent)._nonUniformScaling) {\r\n                this._updateNonUniformScalingState((<TransformNode>parent)._nonUniformScaling);\r\n            } else {\r\n                this._updateNonUniformScalingState(false);\r\n            }\r\n        } else {\r\n            this._updateNonUniformScalingState(false);\r\n        }\r\n\r\n        this._afterComputeWorldMatrix();\r\n\r\n        // Absolute position\r\n        this._absolutePosition.copyFromFloats(this._worldMatrix.m[12], this._worldMatrix.m[13], this._worldMatrix.m[14]);\r\n        this._isAbsoluteSynced = false;\r\n\r\n        // Callbacks\r\n        this.onAfterWorldMatrixUpdateObservable.notifyObservers(this);\r\n\r\n        if (!this._poseMatrix) {\r\n            this._poseMatrix = Matrix.Invert(this._worldMatrix);\r\n        }\r\n\r\n        // Cache the determinant\r\n        this._worldMatrixDeterminantIsDirty = true;\r\n\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Resets this nodeTransform's local matrix to Matrix.Identity().\r\n     * @param independentOfChildren indicates if all child nodeTransform's world-space transform should be preserved.\r\n     */\r\n    public resetLocalMatrix(independentOfChildren: boolean = true): void {\r\n        this.computeWorldMatrix();\r\n        if (independentOfChildren) {\r\n            const children = this.getChildren();\r\n            for (let i = 0; i < children.length; ++i) {\r\n                const child = children[i] as TransformNode;\r\n                if (child) {\r\n                    child.computeWorldMatrix();\r\n                    const bakedMatrix = TmpVectors.Matrix[0];\r\n                    child._localMatrix.multiplyToRef(this._localMatrix, bakedMatrix);\r\n                    const tmpRotationQuaternion = TmpVectors.Quaternion[0];\r\n                    bakedMatrix.decompose(child.scaling, tmpRotationQuaternion, child.position);\r\n                    if (child.rotationQuaternion) {\r\n                        child.rotationQuaternion.copyFrom(tmpRotationQuaternion);\r\n                    } else {\r\n                        tmpRotationQuaternion.toEulerAnglesToRef(child.rotation);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.scaling.copyFromFloats(1, 1, 1);\r\n        this.position.copyFromFloats(0, 0, 0);\r\n        this.rotation.copyFromFloats(0, 0, 0);\r\n\r\n        //only if quaternion is already set\r\n        if (this.rotationQuaternion) {\r\n            this.rotationQuaternion = Quaternion.Identity();\r\n        }\r\n        this._worldMatrix = Matrix.Identity();\r\n    }\r\n\r\n    protected _afterComputeWorldMatrix(): void {}\r\n\r\n    /**\r\n     * If you'd like to be called back after the mesh position, rotation or scaling has been updated.\r\n     * @param func callback function to add\r\n     *\r\n     * @returns the TransformNode.\r\n     */\r\n    public registerAfterWorldMatrixUpdate(func: (mesh: TransformNode) => void): TransformNode {\r\n        this.onAfterWorldMatrixUpdateObservable.add(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a registered callback function.\r\n     * @param func callback function to remove\r\n     * @returns the TransformNode.\r\n     */\r\n    public unregisterAfterWorldMatrixUpdate(func: (mesh: TransformNode) => void): TransformNode {\r\n        this.onAfterWorldMatrixUpdateObservable.removeCallback(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the position of the current mesh in camera space\r\n     * @param camera defines the camera to use\r\n     * @returns a position\r\n     */\r\n    public getPositionInCameraSpace(camera: Nullable<Camera> = null): Vector3 {\r\n        if (!camera) {\r\n            camera = <Camera>this.getScene().activeCamera;\r\n        }\r\n\r\n        return Vector3.TransformCoordinates(this.getAbsolutePosition(), camera.getViewMatrix());\r\n    }\r\n\r\n    /**\r\n     * Returns the distance from the mesh to the active camera\r\n     * @param camera defines the camera to use\r\n     * @returns the distance\r\n     */\r\n    public getDistanceToCamera(camera: Nullable<Camera> = null): number {\r\n        if (!camera) {\r\n            camera = <Camera>this.getScene().activeCamera;\r\n        }\r\n        return this.getAbsolutePosition().subtract(camera.globalPosition).length();\r\n    }\r\n\r\n    /**\r\n     * Clone the current transform node\r\n     * @param name Name of the new clone\r\n     * @param newParent New parent for the clone\r\n     * @param doNotCloneChildren Do not clone children hierarchy\r\n     * @returns the new transform node\r\n     */\r\n    public clone(name: string, newParent: Nullable<Node>, doNotCloneChildren?: boolean): Nullable<TransformNode> {\r\n        const result = SerializationHelper.Clone(() => new TransformNode(name, this.getScene()), this);\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        if (newParent) {\r\n            result.parent = newParent;\r\n        }\r\n\r\n        if (!doNotCloneChildren) {\r\n            // Children\r\n            const directDescendants = this.getDescendants(true);\r\n            for (let index = 0; index < directDescendants.length; index++) {\r\n                const child = directDescendants[index];\r\n\r\n                if ((<any>child).clone) {\r\n                    (<any>child).clone(name + \".\" + child.name, result);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Serializes the objects information.\r\n     * @param currentSerializationObject defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(currentSerializationObject?: any): any {\r\n        const serializationObject = SerializationHelper.Serialize(this, currentSerializationObject);\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        serializationObject.localMatrix = this.getPivotMatrix().asArray();\r\n\r\n        serializationObject.isEnabled = this.isEnabled();\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Returns a new TransformNode object parsed from the source provided.\r\n     * @param parsedTransformNode is the source.\r\n     * @param scene the scene the object belongs to\r\n     * @param rootUrl is a string, it's the root URL to prefix the `delayLoadingFile` property with\r\n     * @returns a new TransformNode object parsed from the source provided.\r\n     */\r\n    public static Parse(parsedTransformNode: any, scene: Scene, rootUrl: string): TransformNode {\r\n        const transformNode = SerializationHelper.Parse(() => new TransformNode(parsedTransformNode.name, scene), parsedTransformNode, scene, rootUrl);\r\n\r\n        if (parsedTransformNode.localMatrix) {\r\n            transformNode.setPreTransformMatrix(Matrix.FromArray(parsedTransformNode.localMatrix));\r\n        } else if (parsedTransformNode.pivotMatrix) {\r\n            transformNode.setPivotMatrix(Matrix.FromArray(parsedTransformNode.pivotMatrix));\r\n        }\r\n\r\n        transformNode.setEnabled(parsedTransformNode.isEnabled);\r\n\r\n        transformNode._waitingParsedUniqueId = parsedTransformNode.uniqueId;\r\n\r\n        // Parent\r\n        if (parsedTransformNode.parentId !== undefined) {\r\n            transformNode._waitingParentId = parsedTransformNode.parentId;\r\n        }\r\n\r\n        if (parsedTransformNode.parentInstanceIndex !== undefined) {\r\n            transformNode._waitingParentInstanceIndex = parsedTransformNode.parentInstanceIndex;\r\n        }\r\n\r\n        // Animations\r\n        if (parsedTransformNode.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedTransformNode.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedTransformNode.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    transformNode.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(transformNode, parsedTransformNode, scene);\r\n        }\r\n\r\n        if (parsedTransformNode.autoAnimate) {\r\n            scene.beginAnimation(\r\n                transformNode,\r\n                parsedTransformNode.autoAnimateFrom,\r\n                parsedTransformNode.autoAnimateTo,\r\n                parsedTransformNode.autoAnimateLoop,\r\n                parsedTransformNode.autoAnimateSpeed || 1.0\r\n            );\r\n        }\r\n\r\n        return transformNode;\r\n    }\r\n\r\n    /**\r\n     * Get all child-transformNodes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of TransformNode\r\n     */\r\n    public getChildTransformNodes(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): TransformNode[] {\r\n        const results: Array<TransformNode> = [];\r\n        this._getDescendants(results, directDescendantsOnly, (node: Node) => {\r\n            return (!predicate || predicate(node)) && node instanceof TransformNode;\r\n        });\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this transform node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        // Animations\r\n        this.getScene().stopAnimation(this);\r\n\r\n        // Remove from scene\r\n        this.getScene().removeTransformNode(this);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.transformNodes.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.transformNodes.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        this.onAfterWorldMatrixUpdateObservable.clear();\r\n\r\n        if (doNotRecurse) {\r\n            const transformNodes = this.getChildTransformNodes(true);\r\n            for (const transformNode of transformNodes) {\r\n                transformNode.parent = null;\r\n                transformNode.computeWorldMatrix(true);\r\n            }\r\n        }\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /**\r\n     * Uniformly scales the mesh to fit inside of a unit cube (1 X 1 X 1 units)\r\n     * @param includeDescendants Use the hierarchy's bounding box instead of the mesh's bounding box. Default is false\r\n     * @param ignoreRotation ignore rotation when computing the scale (ie. object will be axis aligned). Default is false\r\n     * @param predicate predicate that is passed in to getHierarchyBoundingVectors when selecting which object should be included when scaling\r\n     * @returns the current mesh\r\n     */\r\n    public normalizeToUnitCube(includeDescendants = true, ignoreRotation = false, predicate?: Nullable<(node: AbstractMesh) => boolean>): TransformNode {\r\n        let storedRotation: Nullable<Vector3> = null;\r\n        let storedRotationQuaternion: Nullable<Quaternion> = null;\r\n\r\n        if (ignoreRotation) {\r\n            if (this.rotationQuaternion) {\r\n                storedRotationQuaternion = this.rotationQuaternion.clone();\r\n                this.rotationQuaternion.copyFromFloats(0, 0, 0, 1);\r\n            } else if (this.rotation) {\r\n                storedRotation = this.rotation.clone();\r\n                this.rotation.copyFromFloats(0, 0, 0);\r\n            }\r\n        }\r\n\r\n        const boundingVectors = this.getHierarchyBoundingVectors(includeDescendants, predicate);\r\n        const sizeVec = boundingVectors.max.subtract(boundingVectors.min);\r\n        const maxDimension = Math.max(sizeVec.x, sizeVec.y, sizeVec.z);\r\n\r\n        if (maxDimension === 0) {\r\n            return this;\r\n        }\r\n\r\n        const scale = 1 / maxDimension;\r\n\r\n        this.scaling.scaleInPlace(scale);\r\n\r\n        if (ignoreRotation) {\r\n            if (this.rotationQuaternion && storedRotationQuaternion) {\r\n                this.rotationQuaternion.copyFrom(storedRotationQuaternion);\r\n            } else if (this.rotation && storedRotation) {\r\n                this.rotation.copyFrom(storedRotation);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _syncAbsoluteScalingAndRotation(): void {\r\n        if (!this._isAbsoluteSynced) {\r\n            this._worldMatrix.decompose(this._absoluteScaling, this._absoluteRotationQuaternion);\r\n            this._isAbsoluteSynced = true;\r\n        }\r\n    }\r\n}\r\n", "import type { Collider } from \"./collider\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Observer } from \"../Misc/observable\";\r\n\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _MeshCollisionData {\r\n    public _checkCollisions = false;\r\n    public _collisionMask = -1;\r\n    public _collisionGroup = -1;\r\n    public _surroundingMeshes: Nullable<AbstractMesh[]> = null;\r\n    public _collider: Nullable<Collider> = null;\r\n    public _oldPositionForCollisions = new Vector3(0, 0, 0);\r\n    public _diffPositionForCollisions = new Vector3(0, 0, 0);\r\n    public _onCollideObserver: Nullable<Observer<AbstractMesh>>;\r\n    public _onCollisionPositionChangeObserver: Nullable<Observer<Vector3>>;\r\n    public _collisionResponse = true;\r\n}\r\n", "import { Observable } from \"../Misc/observable\";\r\nimport type { Nullable, FloatArray, IndicesArray, DeepImmutable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene, IDisposable } from \"../scene\";\r\nimport { ScenePerformancePriority } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport type { Node } from \"../node\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { IGetSetVerticesData } from \"../Meshes/mesh.vertexData\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { PickingInfo } from \"../Collisions/pickingInfo\";\r\nimport type { IntersectionInfo } from \"../Collisions/intersectionInfo\";\r\nimport type { ICullable } from \"../Culling/boundingInfo\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport type { MorphTargetManager } from \"../Morph/morphTargetManager\";\r\nimport type { IBakedVertexAnimationManager } from \"../BakedVertexAnimation/bakedVertexAnimationManager\";\r\nimport type { IEdgesRenderer } from \"../Rendering/edgesRenderer\";\r\nimport type { SolidParticle } from \"../Particles/solidParticle\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { AbstractActionManager } from \"../Actions/abstractActionManager\";\r\nimport { UniformBuffer } from \"../Materials/uniformBuffer\";\r\nimport { _MeshCollisionData } from \"../Collisions/meshCollisionData\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { RawTexture } from \"../Materials/Textures/rawTexture\";\r\nimport { extractMinAndMax } from \"../Maths/math.functions\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport { Axis } from \"../Maths/math.axis\";\r\nimport type { IParticleSystem } from \"../Particles/IParticleSystem\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nimport type { Ray } from \"../Culling/ray\";\r\nimport type { Collider } from \"../Collisions/collider\";\r\nimport type { TrianglePickingPredicate } from \"../Culling/ray\";\r\nimport type { RenderingGroup } from \"../Rendering/renderingGroup\";\r\nimport type { IEdgesRendererOptions } from \"../Rendering/edgesRenderer\";\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass _FacetDataStorage {\r\n    // facetData private properties\r\n    public facetPositions: Vector3[]; // facet local positions\r\n    public facetNormals: Vector3[]; // facet local normals\r\n    public facetPartitioning: number[][]; // partitioning array of facet index arrays\r\n    public facetNb: number = 0; // facet number\r\n    public partitioningSubdivisions: number = 10; // number of subdivisions per axis in the partitioning space\r\n    public partitioningBBoxRatio: number = 1.01; // the partitioning array space is by default 1% bigger than the bounding box\r\n    public facetDataEnabled: boolean = false; // is the facet data feature enabled on this mesh ?\r\n    public facetParameters: any = {}; // keep a reference to the object parameters to avoid memory re-allocation\r\n    public bbSize: Vector3 = Vector3.Zero(); // bbox size approximated for facet data\r\n    public subDiv = {\r\n        // actual number of subdivisions per axis for ComputeNormals()\r\n        max: 1,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        X: 1,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        Y: 1,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        Z: 1,\r\n    };\r\n\r\n    public facetDepthSort: boolean = false; // is the facet depth sort to be computed\r\n    public facetDepthSortEnabled: boolean = false; // is the facet depth sort initialized\r\n    public depthSortedIndices: IndicesArray; // copy of the indices array to store them once sorted\r\n    public depthSortedFacets: { ind: number; sqDistance: number }[]; // array of depth sorted facets\r\n    public facetDepthSortFunction: (f1: { ind: number; sqDistance: number }, f2: { ind: number; sqDistance: number }) => number; // facet depth sort function\r\n    public facetDepthSortFrom: Vector3; // location where to depth sort from\r\n    public facetDepthSortOrigin: Vector3; // same as facetDepthSortFrom but expressed in the mesh local space\r\n\r\n    public invertedMatrix: Matrix; // Inverted world matrix.\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass _InternalAbstractMeshDataInfo {\r\n    public _hasVertexAlpha = false;\r\n    public _useVertexColors = true;\r\n    public _numBoneInfluencers = 4;\r\n    public _applyFog = true;\r\n    public _receiveShadows = false;\r\n    public _facetData = new _FacetDataStorage();\r\n    public _visibility = 1.0;\r\n    public _skeleton: Nullable<Skeleton> = null;\r\n    public _layerMask: number = 0x0fffffff;\r\n    public _computeBonesUsingShaders = true;\r\n    public _isActive = false;\r\n    public _onlyForInstances = false;\r\n    public _isActiveIntermediate = false;\r\n    public _onlyForInstancesIntermediate = false;\r\n    public _actAsRegularMesh = false;\r\n    public _currentLOD: Nullable<AbstractMesh> = null;\r\n    public _currentLODIsUpToDate: boolean = false;\r\n    public _collisionRetryCount: number = 3;\r\n    public _morphTargetManager: Nullable<MorphTargetManager> = null;\r\n    public _renderingGroupId = 0;\r\n    public _bakedVertexAnimationManager: Nullable<IBakedVertexAnimationManager> = null;\r\n    public _material: Nullable<Material> = null;\r\n    public _materialForRenderPass: Array<Material | undefined>; // map a render pass id (index in the array) to a Material\r\n    public _positions: Nullable<Vector3[]> = null;\r\n    public _pointerOverDisableMeshTesting: boolean = false;\r\n    // Collisions\r\n    public _meshCollisionData = new _MeshCollisionData();\r\n    public _enableDistantPicking = false;\r\n    /** @internal\r\n     * Bounding info that is unnafected by the addition of thin instances\r\n     */\r\n    public _rawBoundingInfo: Nullable<BoundingInfo> = null;\r\n}\r\n\r\n/**\r\n * Class used to store all common mesh properties\r\n */\r\nexport class AbstractMesh extends TransformNode implements IDisposable, ICullable, IGetSetVerticesData {\r\n    /** No occlusion */\r\n    public static OCCLUSION_TYPE_NONE = 0;\r\n    /** Occlusion set to optimistic */\r\n    public static OCCLUSION_TYPE_OPTIMISTIC = 1;\r\n    /** Occlusion set to strict */\r\n    public static OCCLUSION_TYPE_STRICT = 2;\r\n    /** Use an accurate occlusion algorithm */\r\n    public static OCCLUSION_ALGORITHM_TYPE_ACCURATE = 0;\r\n    /** Use a conservative occlusion algorithm */\r\n    public static OCCLUSION_ALGORITHM_TYPE_CONSERVATIVE = 1;\r\n\r\n    /** Default culling strategy : this is an exclusion test and it's the more accurate.\r\n     *  Test order :\r\n     *  Is the bounding sphere outside the frustum ?\r\n     *  If not, are the bounding box vertices outside the frustum ?\r\n     *  It not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_STANDARD = Constants.MESHES_CULLINGSTRATEGY_STANDARD;\r\n    /** Culling strategy : Bounding Sphere Only.\r\n     *  This is an exclusion test. It's faster than the standard strategy because the bounding box is not tested.\r\n     *  It's also less accurate than the standard because some not visible objects can still be selected.\r\n     *  Test : is the bounding sphere outside the frustum ?\r\n     *  If not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY = Constants.MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\r\n    /** Culling strategy : Optimistic Inclusion.\r\n     *  This in an inclusion test first, then the standard exclusion test.\r\n     *  This can be faster when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the standard test when the tested object center is not the frustum but one of its bounding box vertex is still inside.\r\n     *  Anyway, it's as accurate as the standard strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the default culling strategy.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_OPTIMISTIC_INCLUSION = Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION;\r\n    /** Culling strategy : Optimistic Inclusion then Bounding Sphere Only.\r\n     *  This in an inclusion test first, then the bounding sphere only exclusion test.\r\n     *  This can be the fastest test when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the BoundingSphereOnly strategy when the tested object center is not in the frustum but its bounding sphere still intersects it.\r\n     *  It's less accurate than the standard strategy and as accurate as the BoundingSphereOnly strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the Bounding Sphere Only strategy. No Bounding Box is tested here.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY = Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY;\r\n\r\n    /**\r\n     * No billboard\r\n     */\r\n    public static get BILLBOARDMODE_NONE(): number {\r\n        return TransformNode.BILLBOARDMODE_NONE;\r\n    }\r\n\r\n    /** Billboard on X axis */\r\n    public static get BILLBOARDMODE_X(): number {\r\n        return TransformNode.BILLBOARDMODE_X;\r\n    }\r\n\r\n    /** Billboard on Y axis */\r\n    public static get BILLBOARDMODE_Y(): number {\r\n        return TransformNode.BILLBOARDMODE_Y;\r\n    }\r\n\r\n    /** Billboard on Z axis */\r\n    public static get BILLBOARDMODE_Z(): number {\r\n        return TransformNode.BILLBOARDMODE_Z;\r\n    }\r\n\r\n    /** Billboard on all axes */\r\n    public static get BILLBOARDMODE_ALL(): number {\r\n        return TransformNode.BILLBOARDMODE_ALL;\r\n    }\r\n\r\n    /** Billboard on using position instead of orientation */\r\n    public static get BILLBOARDMODE_USE_POSITION(): number {\r\n        return TransformNode.BILLBOARDMODE_USE_POSITION;\r\n    }\r\n\r\n    // Internal data\r\n    /** @internal */\r\n    public _internalAbstractMeshDataInfo = new _InternalAbstractMeshDataInfo();\r\n\r\n    /** @internal */\r\n    public _waitingMaterialId: Nullable<string> = null;\r\n\r\n    /**\r\n     * The culling strategy to use to check whether the mesh must be rendered or not.\r\n     * This value can be changed at any time and will be used on the next render mesh selection.\r\n     * The possible values are :\r\n     * - AbstractMesh.CULLINGSTRATEGY_STANDARD\r\n     * - AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY\r\n     * Please read each static variable documentation to get details about the culling process.\r\n     * */\r\n    public cullingStrategy = AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\r\n\r\n    /**\r\n     * Gets the number of facets in the mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#what-is-a-mesh-facet\r\n     */\r\n    public get facetNb(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetNb;\r\n    }\r\n    /**\r\n     * Gets or set the number (integer) of subdivisions per axis in the partitioning space\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#tweaking-the-partitioning\r\n     */\r\n    public get partitioningSubdivisions(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.partitioningSubdivisions;\r\n    }\r\n    public set partitioningSubdivisions(nb: number) {\r\n        this._internalAbstractMeshDataInfo._facetData.partitioningSubdivisions = nb;\r\n    }\r\n    /**\r\n     * The ratio (float) to apply to the bounding box size to set to the partitioning space.\r\n     * Ex : 1.01 (default) the partitioning space is 1% bigger than the bounding box\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#tweaking-the-partitioning\r\n     */\r\n    public get partitioningBBoxRatio(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.partitioningBBoxRatio;\r\n    }\r\n    public set partitioningBBoxRatio(ratio: number) {\r\n        this._internalAbstractMeshDataInfo._facetData.partitioningBBoxRatio = ratio;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the facets must be depth sorted on next call to `updateFacetData()`.\r\n     * Works only for updatable meshes.\r\n     * Doesn't work with multi-materials\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#facet-depth-sort\r\n     */\r\n    public get mustDepthSortFacets(): boolean {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDepthSort;\r\n    }\r\n    public set mustDepthSortFacets(sort: boolean) {\r\n        this._internalAbstractMeshDataInfo._facetData.facetDepthSort = sort;\r\n    }\r\n\r\n    /**\r\n     * The location (Vector3) where the facet depth sort must be computed from.\r\n     * By default, the active camera position.\r\n     * Used only when facet depth sort is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#facet-depth-sort\r\n     */\r\n    public get facetDepthSortFrom(): Vector3 {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDepthSortFrom;\r\n    }\r\n    public set facetDepthSortFrom(location: Vector3) {\r\n        this._internalAbstractMeshDataInfo._facetData.facetDepthSortFrom = location;\r\n    }\r\n\r\n    /** number of collision detection tries. Change this value if not all collisions are detected and handled properly */\r\n    public get collisionRetryCount(): number {\r\n        return this._internalAbstractMeshDataInfo._collisionRetryCount;\r\n    }\r\n    public set collisionRetryCount(retryCount: number) {\r\n        this._internalAbstractMeshDataInfo._collisionRetryCount = retryCount;\r\n    }\r\n    /**\r\n     * gets a boolean indicating if facetData is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#what-is-a-mesh-facet\r\n     */\r\n    public get isFacetDataEnabled(): boolean {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the morph target manager\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/morphTargets\r\n     */\r\n    public get morphTargetManager(): Nullable<MorphTargetManager> {\r\n        return this._internalAbstractMeshDataInfo._morphTargetManager;\r\n    }\r\n\r\n    public set morphTargetManager(value: Nullable<MorphTargetManager>) {\r\n        if (this._internalAbstractMeshDataInfo._morphTargetManager === value) {\r\n            return;\r\n        }\r\n        this._internalAbstractMeshDataInfo._morphTargetManager = value;\r\n        this._syncGeometryWithMorphTargetManager();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the baked vertex animation manager\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/baked_texture_animations\r\n     */\r\n    public get bakedVertexAnimationManager(): Nullable<IBakedVertexAnimationManager> {\r\n        return this._internalAbstractMeshDataInfo._bakedVertexAnimationManager;\r\n    }\r\n\r\n    public set bakedVertexAnimationManager(value: Nullable<IBakedVertexAnimationManager>) {\r\n        if (this._internalAbstractMeshDataInfo._bakedVertexAnimationManager === value) {\r\n            return;\r\n        }\r\n        this._internalAbstractMeshDataInfo._bakedVertexAnimationManager = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _syncGeometryWithMorphTargetManager(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateNonUniformScalingState(value: boolean): boolean {\r\n        if (!super._updateNonUniformScalingState(value)) {\r\n            return false;\r\n        }\r\n        this._markSubMeshesAsMiscDirty();\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public get rawBoundingInfo(): Nullable<BoundingInfo> {\r\n        return this._internalAbstractMeshDataInfo._rawBoundingInfo;\r\n    }\r\n    public set rawBoundingInfo(boundingInfo: Nullable<BoundingInfo>) {\r\n        this._internalAbstractMeshDataInfo._rawBoundingInfo = boundingInfo;\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * An event triggered when this mesh collides with another one\r\n     */\r\n    public onCollideObservable = new Observable<AbstractMesh>();\r\n\r\n    /** Set a function to call when this mesh collides with another one */\r\n    public set onCollide(callback: (collidedMesh?: AbstractMesh) => void) {\r\n        if (this._internalAbstractMeshDataInfo._meshCollisionData._onCollideObserver) {\r\n            this.onCollideObservable.remove(this._internalAbstractMeshDataInfo._meshCollisionData._onCollideObserver);\r\n        }\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._onCollideObserver = this.onCollideObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the collision's position changes\r\n     */\r\n    public onCollisionPositionChangeObservable = new Observable<Vector3>();\r\n\r\n    /** Set a function to call when the collision's position changes */\r\n    public set onCollisionPositionChange(callback: () => void) {\r\n        if (this._internalAbstractMeshDataInfo._meshCollisionData._onCollisionPositionChangeObserver) {\r\n            this.onCollisionPositionChangeObservable.remove(this._internalAbstractMeshDataInfo._meshCollisionData._onCollisionPositionChangeObserver);\r\n        }\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._onCollisionPositionChangeObserver = this.onCollisionPositionChangeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when material is changed\r\n     */\r\n    public onMaterialChangedObservable = new Observable<AbstractMesh>();\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets or sets the orientation for POV movement & rotation\r\n     */\r\n    public definedFacingForward = true;\r\n\r\n    /** @internal */\r\n    public _occlusionQuery: Nullable<WebGLQuery | number> = null;\r\n\r\n    /** @internal */\r\n    public _renderingGroup: Nullable<RenderingGroup> = null;\r\n\r\n    /**\r\n     * Gets or sets mesh visibility between 0 and 1 (default is 1)\r\n     */\r\n    public get visibility(): number {\r\n        return this._internalAbstractMeshDataInfo._visibility;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets mesh visibility between 0 and 1 (default is 1)\r\n     */\r\n    public set visibility(value: number) {\r\n        if (this._internalAbstractMeshDataInfo._visibility === value) {\r\n            return;\r\n        }\r\n\r\n        const oldValue = this._internalAbstractMeshDataInfo._visibility;\r\n\r\n        this._internalAbstractMeshDataInfo._visibility = value;\r\n\r\n        if ((oldValue === 1 && value !== 1) || (oldValue !== 1 && value === 1)) {\r\n            this._markSubMeshesAsDirty((defines) => {\r\n                defines.markAsMiscDirty();\r\n                defines.markAsPrePassDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the alpha index used to sort transparent meshes\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/transparent_rendering#alpha-index\r\n     */\r\n    public alphaIndex = Number.MAX_VALUE;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh is visible (renderable). Default is true\r\n     */\r\n    public isVisible = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh can be picked (by scene.pick for instance or through actions). Default is true\r\n     */\r\n    public isPickable = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh can be near picked (touched by the XR controller or hands). Default is false\r\n     */\r\n    public isNearPickable = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh can be grabbed. Default is false.\r\n     * Setting this to true, while using the XR near interaction feature, will trigger a pointer event when the mesh is grabbed.\r\n     * Grabbing means that the controller is using the squeeze or main trigger button to grab the mesh.\r\n     * This is different from nearPickable which only triggers the event when the mesh is touched by the controller\r\n     */\r\n    public isNearGrabbable = false;\r\n\r\n    /** Gets or sets a boolean indicating that bounding boxes of subMeshes must be rendered as well (false by default) */\r\n    public showSubMeshesBoundingBox = false;\r\n\r\n    /** Gets or sets a boolean indicating if the mesh must be considered as a ray blocker for lens flares (false by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/lenseFlare\r\n     */\r\n    public isBlocker = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that pointer move events must be supported on this mesh (false by default)\r\n     */\r\n    public enablePointerMoveEvents = false;\r\n\r\n    /**\r\n     * Gets or sets the property which disables the test that is checking that the mesh under the pointer is the same than the previous time we tested for it (default: false).\r\n     * Set this property to true if you want thin instances picking to be reported accurately when moving over the mesh.\r\n     * Note that setting this property to true will incur some performance penalties when dealing with pointer events for this mesh so use it sparingly.\r\n     */\r\n    public get pointerOverDisableMeshTesting() {\r\n        return this._internalAbstractMeshDataInfo._pointerOverDisableMeshTesting;\r\n    }\r\n\r\n    public set pointerOverDisableMeshTesting(disable: boolean) {\r\n        this._internalAbstractMeshDataInfo._pointerOverDisableMeshTesting = disable;\r\n    }\r\n\r\n    /**\r\n     * Specifies the rendering group id for this mesh (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/transparent_rendering#rendering-groups\r\n     */\r\n    public get renderingGroupId() {\r\n        return this._internalAbstractMeshDataInfo._renderingGroupId;\r\n    }\r\n\r\n    public set renderingGroupId(value: number) {\r\n        this._internalAbstractMeshDataInfo._renderingGroupId = value;\r\n    }\r\n\r\n    /** Gets or sets current material */\r\n    public get material(): Nullable<Material> {\r\n        return this._internalAbstractMeshDataInfo._material;\r\n    }\r\n    public set material(value: Nullable<Material>) {\r\n        if (this._internalAbstractMeshDataInfo._material === value) {\r\n            return;\r\n        }\r\n\r\n        // remove from material mesh map id needed\r\n        if (this._internalAbstractMeshDataInfo._material && this._internalAbstractMeshDataInfo._material.meshMap) {\r\n            this._internalAbstractMeshDataInfo._material.meshMap[this.uniqueId] = undefined;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._material = value;\r\n\r\n        if (value && value.meshMap) {\r\n            value.meshMap[this.uniqueId] = this;\r\n        }\r\n\r\n        if (this.onMaterialChangedObservable.hasObservers()) {\r\n            this.onMaterialChangedObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        this.resetDrawCache();\r\n        this._unBindEffect();\r\n    }\r\n\r\n    /**\r\n     * Gets the material used to render the mesh in a specific render pass\r\n     * @param renderPassId render pass id\r\n     * @returns material used for the render pass. If no specific material is used for this render pass, undefined is returned (meaning mesh.material is used for this pass)\r\n     */\r\n    public getMaterialForRenderPass(renderPassId: number): Material | undefined {\r\n        return this._internalAbstractMeshDataInfo._materialForRenderPass?.[renderPassId];\r\n    }\r\n\r\n    /**\r\n     * Sets the material to be used to render the mesh in a specific render pass\r\n     * @param renderPassId render pass id\r\n     * @param material material to use for this render pass. If undefined is passed, no specific material will be used for this render pass but the regular material will be used instead (mesh.material)\r\n     */\r\n    public setMaterialForRenderPass(renderPassId: number, material?: Material): void {\r\n        this.resetDrawCache(renderPassId);\r\n        if (!this._internalAbstractMeshDataInfo._materialForRenderPass) {\r\n            this._internalAbstractMeshDataInfo._materialForRenderPass = [];\r\n        }\r\n        this._internalAbstractMeshDataInfo._materialForRenderPass[renderPassId] = material;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh can receive realtime shadows\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/lights/shadows\r\n     */\r\n    public get receiveShadows(): boolean {\r\n        return this._internalAbstractMeshDataInfo._receiveShadows;\r\n    }\r\n    public set receiveShadows(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._receiveShadows === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._receiveShadows = value;\r\n        this._markSubMeshesAsLightDirty();\r\n    }\r\n\r\n    /** Defines color to use when rendering outline */\r\n    public outlineColor = Color3.Red();\r\n    /** Define width to use when rendering outline */\r\n    public outlineWidth = 0.02;\r\n\r\n    /** Defines color to use when rendering overlay */\r\n    public overlayColor = Color3.Red();\r\n    /** Defines alpha to use when rendering overlay */\r\n    public overlayAlpha = 0.5;\r\n\r\n    /** Gets or sets a boolean indicating that this mesh contains vertex color data with alpha values */\r\n    public get hasVertexAlpha(): boolean {\r\n        return this._internalAbstractMeshDataInfo._hasVertexAlpha;\r\n    }\r\n    public set hasVertexAlpha(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._hasVertexAlpha === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._hasVertexAlpha = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n        this._markSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that this mesh needs to use vertex color data to render (if this kind of vertex data is available in the geometry) */\r\n    public get useVertexColors(): boolean {\r\n        return this._internalAbstractMeshDataInfo._useVertexColors;\r\n    }\r\n    public set useVertexColors(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._useVertexColors === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._useVertexColors = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that bone animations must be computed by the GPU (true by default)\r\n     */\r\n    public get computeBonesUsingShaders(): boolean {\r\n        return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\r\n    }\r\n    public set computeBonesUsingShaders(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** Gets or sets the number of allowed bone influences per vertex (4 by default) */\r\n    public get numBoneInfluencers(): number {\r\n        return this._internalAbstractMeshDataInfo._numBoneInfluencers;\r\n    }\r\n    public set numBoneInfluencers(value: number) {\r\n        if (this._internalAbstractMeshDataInfo._numBoneInfluencers === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._numBoneInfluencers = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that this mesh will allow fog to be rendered on it (true by default) */\r\n    public get applyFog(): boolean {\r\n        return this._internalAbstractMeshDataInfo._applyFog;\r\n    }\r\n    public set applyFog(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._applyFog === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._applyFog = value;\r\n        this._markSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /** When enabled, decompose picking matrices for better precision with large values for mesh position and scling */\r\n    public get enableDistantPicking(): boolean {\r\n        return this._internalAbstractMeshDataInfo._enableDistantPicking;\r\n    }\r\n    public set enableDistantPicking(value: boolean) {\r\n        this._internalAbstractMeshDataInfo._enableDistantPicking = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes selection (true by default) */\r\n    public useOctreeForRenderingSelection = true;\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes picking (true by default) */\r\n    public useOctreeForPicking = true;\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes collision (true by default) */\r\n    public useOctreeForCollisions = true;\r\n    /**\r\n     * Gets or sets the current layer mask (default is 0x0FFFFFFF)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/layerMasksAndMultiCam\r\n     */\r\n    public get layerMask(): number {\r\n        return this._internalAbstractMeshDataInfo._layerMask;\r\n    }\r\n\r\n    public set layerMask(value: number) {\r\n        if (value === this._internalAbstractMeshDataInfo._layerMask) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._layerMask = value;\r\n        this._resyncLightSources();\r\n    }\r\n\r\n    /**\r\n     * True if the mesh must be rendered in any case (this will shortcut the frustum clipping phase)\r\n     */\r\n    public alwaysSelectAsActiveMesh = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the bounding info does not need to be kept in sync (for performance reason)\r\n     */\r\n    public doNotSyncBoundingInfo = false;\r\n\r\n    /**\r\n     * Gets or sets the current action manager\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n     */\r\n    public actionManager: Nullable<AbstractActionManager> = null;\r\n\r\n    /**\r\n     * Gets or sets the ellipsoid used to impersonate this mesh when using collision engine (default is (0.5, 1, 0.5))\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public ellipsoid = new Vector3(0.5, 1, 0.5);\r\n    /**\r\n     * Gets or sets the ellipsoid offset used to impersonate this mesh when using collision engine (default is (0, 0, 0))\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public ellipsoidOffset = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets a collision mask used to mask collisions (default is -1).\r\n     * A collision between A and B will happen if A.collisionGroup & b.collisionMask !== 0\r\n     */\r\n    public get collisionMask(): number {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collisionMask;\r\n    }\r\n\r\n    public set collisionMask(mask: number) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collisionMask = !isNaN(mask) ? mask : -1;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a collision response flag (default is true).\r\n     * when collisionResponse is false, events are still triggered but colliding entity has no response\r\n     * This helps creating trigger volume when user wants collision feedback events but not position/velocity\r\n     * to respond to the collision.\r\n     */\r\n    public get collisionResponse(): boolean {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collisionResponse;\r\n    }\r\n\r\n    public set collisionResponse(response: boolean) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collisionResponse = response;\r\n    }\r\n    /**\r\n     * Gets or sets the current collision group mask (-1 by default).\r\n     * A collision between A and B will happen if A.collisionGroup & b.collisionMask !== 0\r\n     */\r\n    public get collisionGroup(): number {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collisionGroup;\r\n    }\r\n\r\n    public set collisionGroup(mask: number) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collisionGroup = !isNaN(mask) ? mask : -1;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets current surrounding meshes (null by default).\r\n     *\r\n     * By default collision detection is tested against every mesh in the scene.\r\n     * It is possible to set surroundingMeshes to a defined list of meshes and then only these specified\r\n     * meshes will be tested for the collision.\r\n     *\r\n     * Note: if set to an empty array no collision will happen when this mesh is moved.\r\n     */\r\n    public get surroundingMeshes(): Nullable<AbstractMesh[]> {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._surroundingMeshes;\r\n    }\r\n\r\n    public set surroundingMeshes(meshes: Nullable<AbstractMesh[]>) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._surroundingMeshes = meshes;\r\n    }\r\n\r\n    // Edges\r\n    /**\r\n     * Defines edge width used when edgesRenderer is enabled\r\n     * @see https://www.babylonjs-playground.com/#10OJSG#13\r\n     */\r\n    public edgesWidth = 1;\r\n    /**\r\n     * Defines edge color used when edgesRenderer is enabled\r\n     * @see https://www.babylonjs-playground.com/#10OJSG#13\r\n     */\r\n    public edgesColor = new Color4(1, 0, 0, 1);\r\n    /** @internal */\r\n    public _edgesRenderer: Nullable<IEdgesRenderer> = null;\r\n\r\n    /** @internal */\r\n    public _masterMesh: Nullable<AbstractMesh> = null;\r\n    protected _boundingInfo: Nullable<BoundingInfo> = null;\r\n    protected _boundingInfoIsDirty = true;\r\n    /** @internal */\r\n    public _renderId = 0;\r\n\r\n    /**\r\n     * Gets or sets the list of subMeshes\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\r\n     */\r\n    public subMeshes: SubMesh[];\r\n\r\n    /** @internal */\r\n    public _intersectionsInProgress = new Array<AbstractMesh>();\r\n\r\n    /** @internal */\r\n    public _unIndexed = false;\r\n\r\n    /** @internal */\r\n    public _lightSources = new Array<Light>();\r\n\r\n    /** Gets the list of lights affecting that mesh */\r\n    public get lightSources(): Light[] {\r\n        return this._lightSources;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _positions(): Nullable<Vector3[]> {\r\n        return null;\r\n    }\r\n\r\n    // Loading properties\r\n    /** @internal */\r\n    public _waitingData: {\r\n        lods: Nullable<any>;\r\n        actions: Nullable<any>;\r\n        freezeWorldMatrix: Nullable<boolean>;\r\n    } = {\r\n        lods: null,\r\n        actions: null,\r\n        freezeWorldMatrix: null,\r\n    };\r\n\r\n    /** @internal */\r\n    public _bonesTransformMatrices: Nullable<Float32Array> = null;\r\n\r\n    /** @internal */\r\n    public _transformMatrixTexture: Nullable<RawTexture> = null;\r\n\r\n    /**\r\n     * Gets or sets a skeleton to apply skinning transformations\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/bonesSkeletons\r\n     */\r\n    public set skeleton(value: Nullable<Skeleton>) {\r\n        const skeleton = this._internalAbstractMeshDataInfo._skeleton;\r\n        if (skeleton && skeleton.needInitialSkinMatrix) {\r\n            skeleton._unregisterMeshWithPoseMatrix(this);\r\n        }\r\n\r\n        if (value && value.needInitialSkinMatrix) {\r\n            value._registerMeshWithPoseMatrix(this);\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._skeleton = value;\r\n\r\n        if (!this._internalAbstractMeshDataInfo._skeleton) {\r\n            this._bonesTransformMatrices = null;\r\n        }\r\n\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    public get skeleton(): Nullable<Skeleton> {\r\n        return this._internalAbstractMeshDataInfo._skeleton;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the mesh is rebuilt.\r\n     */\r\n    public onRebuildObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * The current mesh uniform buffer.\r\n     * @internal Internal use only.\r\n     */\r\n    public _uniformBuffer: UniformBuffer;\r\n\r\n    // Constructor\r\n\r\n    /**\r\n     * Creates a new AbstractMesh\r\n     * @param name defines the name of the mesh\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Nullable<Scene> = null) {\r\n        super(name, scene, false);\r\n\r\n        scene = this.getScene();\r\n\r\n        scene.addMesh(this);\r\n\r\n        this._resyncLightSources();\r\n\r\n        // Mesh Uniform Buffer.\r\n        this._uniformBuffer = new UniformBuffer(this.getScene().getEngine(), undefined, undefined, name, !this.getScene().getEngine().isWebGPU);\r\n        this._buildUniformLayout();\r\n\r\n        switch (scene.performancePriority) {\r\n            case ScenePerformancePriority.Aggressive:\r\n                this.doNotSyncBoundingInfo = true;\r\n            // eslint-disable-next-line no-fallthrough\r\n            case ScenePerformancePriority.Intermediate:\r\n                this.alwaysSelectAsActiveMesh = true;\r\n                this.isPickable = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"world\", 16);\r\n        this._uniformBuffer.addUniform(\"visibility\", 1);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Transfer the mesh values to its UBO.\r\n     * @param world The world matrix associated with the mesh\r\n     */\r\n    public transferToEffect(world: Matrix): void {\r\n        const ubo = this._uniformBuffer;\r\n\r\n        ubo.updateMatrix(\"world\", world);\r\n        ubo.updateFloat(\"visibility\", this._internalAbstractMeshDataInfo._visibility);\r\n\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh uniform buffer.\r\n     * @returns the uniform buffer of the mesh.\r\n     */\r\n    public getMeshUniformBuffer(): UniformBuffer {\r\n        return this._uniformBuffer;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"AbstractMesh\"\r\n     * @returns \"AbstractMesh\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AbstractMesh\";\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the current mesh\r\n     * @param fullDetails defines a boolean indicating if full details must be included\r\n     * @returns a string representation of the current mesh\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name + \", isInstance: \" + (this.getClassName() !== \"InstancedMesh\" ? \"YES\" : \"NO\");\r\n        ret += \", # of submeshes: \" + (this.subMeshes ? this.subMeshes.length : 0);\r\n\r\n        const skeleton = this._internalAbstractMeshDataInfo._skeleton;\r\n        if (skeleton) {\r\n            ret += \", skeleton: \" + skeleton.name;\r\n        }\r\n        if (fullDetails) {\r\n            ret += \", billboard mode: \" + [\"NONE\", \"X\", \"Y\", null, \"Z\", null, null, \"ALL\"][this.billboardMode];\r\n            ret += \", freeze wrld mat: \" + (this._isWorldMatrixFrozen || this._waitingData.freezeWorldMatrix ? \"YES\" : \"NO\");\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _getEffectiveParent(): Nullable<Node> {\r\n        if (this._masterMesh && this.billboardMode !== TransformNode.BILLBOARDMODE_NONE) {\r\n            return this._masterMesh;\r\n        }\r\n\r\n        return super._getEffectiveParent();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getActionManagerForTrigger(trigger?: number, initialCall = true): Nullable<AbstractActionManager> {\r\n        if (this.actionManager && (initialCall || this.actionManager.isRecursive)) {\r\n            if (trigger) {\r\n                if (this.actionManager.hasSpecificTrigger(trigger)) {\r\n                    return this.actionManager;\r\n                }\r\n            } else {\r\n                return this.actionManager;\r\n            }\r\n        }\r\n\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        return this.parent._getActionManagerForTrigger(trigger, false);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _rebuild(dispose = false): void {\r\n        this.onRebuildObservable.notifyObservers(this);\r\n\r\n        if (this._occlusionQuery !== null) {\r\n            this._occlusionQuery = null;\r\n        }\r\n\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (const subMesh of this.subMeshes) {\r\n            subMesh._rebuild();\r\n        }\r\n\r\n        this.resetDrawCache();\r\n    }\r\n\r\n    /** @internal */\r\n    public _resyncLightSources(): void {\r\n        this._lightSources.length = 0;\r\n\r\n        for (const light of this.getScene().lights) {\r\n            if (!light.isEnabled()) {\r\n                continue;\r\n            }\r\n\r\n            if (light.canAffectMesh(this)) {\r\n                this._lightSources.push(light);\r\n            }\r\n        }\r\n\r\n        this._markSubMeshesAsLightDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _resyncLightSource(light: Light): void {\r\n        const isIn = light.isEnabled() && light.canAffectMesh(this);\r\n\r\n        const index = this._lightSources.indexOf(light);\r\n        let removed = false;\r\n        if (index === -1) {\r\n            if (!isIn) {\r\n                return;\r\n            }\r\n            this._lightSources.push(light);\r\n        } else {\r\n            if (isIn) {\r\n                return;\r\n            }\r\n            removed = true;\r\n            this._lightSources.splice(index, 1);\r\n        }\r\n\r\n        this._markSubMeshesAsLightDirty(removed);\r\n    }\r\n\r\n    /** @internal */\r\n    public _unBindEffect() {\r\n        for (const subMesh of this.subMeshes) {\r\n            subMesh.setEffect(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _removeLightSource(light: Light, dispose: boolean): void {\r\n        const index = this._lightSources.indexOf(light);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        this._lightSources.splice(index, 1);\r\n\r\n        this._markSubMeshesAsLightDirty(dispose);\r\n    }\r\n\r\n    private _markSubMeshesAsDirty(func: (defines: MaterialDefines) => void) {\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (const subMesh of this.subMeshes) {\r\n            for (let i = 0; i < subMesh._drawWrappers.length; ++i) {\r\n                const drawWrapper = subMesh._drawWrappers[i];\r\n                if (!drawWrapper || !drawWrapper.defines || !(drawWrapper.defines as MaterialDefines).markAllAsDirty) {\r\n                    continue;\r\n                }\r\n                func(drawWrapper.defines as MaterialDefines);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _markSubMeshesAsLightDirty(dispose: boolean = false) {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsLightDirty(dispose));\r\n    }\r\n\r\n    /** @internal */\r\n    public _markSubMeshesAsAttributesDirty() {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsAttributesDirty());\r\n    }\r\n\r\n    /** @internal */\r\n    public _markSubMeshesAsMiscDirty() {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsMiscDirty());\r\n    }\r\n\r\n    /**\r\n     * Flag the AbstractMesh as dirty (Forcing it to update everything)\r\n     * @param property if set to \"rotation\" the objects rotationQuaternion will be set to null\r\n     * @returns this AbstractMesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public markAsDirty(property?: string): AbstractMesh {\r\n        this._currentRenderId = Number.MAX_VALUE;\r\n        this._isDirty = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache for all submeshes of this abstract mesh\r\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\r\n     */\r\n    public resetDrawCache(passId?: number): void {\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (const subMesh of this.subMeshes) {\r\n            subMesh.resetDrawCache(passId);\r\n        }\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Returns true if the mesh is blocked. Implemented by child classes\r\n     */\r\n    public get isBlocked(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh itself by default. Implemented by child classes\r\n     * @param camera defines the camera to use to pick the right LOD level\r\n     * @returns the currentAbstractMesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getLOD(camera: Camera): Nullable<AbstractMesh> {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns 0 by default. Implemented by child classes\r\n     * @returns an integer\r\n     */\r\n    public getTotalVertices(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns a positive integer : the total number of indices in this mesh geometry.\r\n     * @returns the number of indices or zero if the mesh has no geometry.\r\n     */\r\n    public getTotalIndices(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns null by default. Implemented by child classes\r\n     * @returns null\r\n     */\r\n    public getIndices(): Nullable<IndicesArray> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the array of the requested vertex data kind. Implemented by child classes\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns null\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getVerticesData(kind: string): Nullable<FloatArray> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, a new Geometry object is set to the mesh and then passed this vertex data.\r\n     * Note that a new underlying VertexBuffer object is created each call.\r\n     * If the `kind` is the `PositionKind`, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\r\n     * @param kind defines vertex data kind:\r\n     * * VertexBuffer.PositionKind\r\n     * * VertexBuffer.UVKind\r\n     * * VertexBuffer.UV2Kind\r\n     * * VertexBuffer.UV3Kind\r\n     * * VertexBuffer.UV4Kind\r\n     * * VertexBuffer.UV5Kind\r\n     * * VertexBuffer.UV6Kind\r\n     * * VertexBuffer.ColorKind\r\n     * * VertexBuffer.MatricesIndicesKind\r\n     * * VertexBuffer.MatricesIndicesExtraKind\r\n     * * VertexBuffer.MatricesWeightsKind\r\n     * * VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updatable defines if the data must be flagged as updatable (or static)\r\n     * @param stride defines the vertex stride (size of an entire vertex). Can be null and in this case will be deduced from vertex data kind\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public setVerticesData(kind: string, data: FloatArray, updatable?: boolean, stride?: number): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the existing vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, it is simply returned as it is.\r\n     * @param kind defines vertex data kind:\r\n     * * VertexBuffer.PositionKind\r\n     * * VertexBuffer.UVKind\r\n     * * VertexBuffer.UV2Kind\r\n     * * VertexBuffer.UV3Kind\r\n     * * VertexBuffer.UV4Kind\r\n     * * VertexBuffer.UV5Kind\r\n     * * VertexBuffer.UV6Kind\r\n     * * VertexBuffer.ColorKind\r\n     * * VertexBuffer.MatricesIndicesKind\r\n     * * VertexBuffer.MatricesIndicesExtraKind\r\n     * * VertexBuffer.MatricesWeightsKind\r\n     * * VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updateExtends If `kind` is `PositionKind` and if `updateExtends` is true, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed\r\n     * @param makeItUnique If true, a new global geometry is created from this data and is set to the mesh\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh indices,\r\n     * If the mesh has no geometry, a new Geometry object is created and set to the mesh.\r\n     * @param indices Expects an array populated with integers or a typed array (Int32Array, Uint32Array, Uint16Array)\r\n     * @param totalVertices Defines the total number of vertices\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number>): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if specific vertex data is present\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns true is data kind is present\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isVerticesDataPresent(kind: string): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh BoundingInfo object or creates a new one and returns if it was undefined.\r\n     * Note that it returns a shallow bounding of the mesh (i.e. it does not include children).\r\n     * However, if the mesh contains thin instances, it will be expanded to include them. If you want the \"raw\" bounding data instead, then use `getRawBoundingInfo()`.\r\n     * To get the full bounding of all children, call `getHierarchyBoundingVectors` instead.\r\n     * @returns a BoundingInfo\r\n     */\r\n    public getBoundingInfo(): BoundingInfo {\r\n        if (this._masterMesh) {\r\n            return this._masterMesh.getBoundingInfo();\r\n        }\r\n\r\n        if (this._boundingInfoIsDirty) {\r\n            this._boundingInfoIsDirty = false;\r\n            // this._boundingInfo is being created if undefined\r\n            this._updateBoundingInfo();\r\n        }\r\n        // cannot be null.\r\n        return this._boundingInfo!;\r\n    }\r\n\r\n    /**\r\n     * Returns the bounding info unnafected by instance data.\r\n     * @returns the bounding info of the mesh unaffected by instance data.\r\n     */\r\n    public getRawBoundingInfo() {\r\n        return this.rawBoundingInfo ?? this.getBoundingInfo();\r\n    }\r\n\r\n    /**\r\n     * Overwrite the current bounding info\r\n     * @param boundingInfo defines the new bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public setBoundingInfo(boundingInfo: BoundingInfo): AbstractMesh {\r\n        this._boundingInfo = boundingInfo;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns true if there is already a bounding info\r\n     */\r\n    public get hasBoundingInfo(): boolean {\r\n        return this._boundingInfo !== null;\r\n    }\r\n\r\n    /**\r\n     * Creates a new bounding info for the mesh\r\n     * @param minimum min vector of the bounding box/sphere\r\n     * @param maximum max vector of the bounding box/sphere\r\n     * @param worldMatrix defines the new world matrix\r\n     * @returns the new bounding info\r\n     */\r\n    public buildBoundingInfo(minimum: DeepImmutable<Vector3>, maximum: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this._boundingInfo = new BoundingInfo(minimum, maximum, worldMatrix);\r\n        return this._boundingInfo;\r\n    }\r\n\r\n    /**\r\n     * Uniformly scales the mesh to fit inside of a unit cube (1 X 1 X 1 units)\r\n     * @param includeDescendants Use the hierarchy's bounding box instead of the mesh's bounding box. Default is false\r\n     * @param ignoreRotation ignore rotation when computing the scale (ie. object will be axis aligned). Default is false\r\n     * @param predicate predicate that is passed in to getHierarchyBoundingVectors when selecting which object should be included when scaling\r\n     * @returns the current mesh\r\n     */\r\n    public normalizeToUnitCube(includeDescendants = true, ignoreRotation = false, predicate?: Nullable<(node: AbstractMesh) => boolean>): AbstractMesh {\r\n        return <AbstractMesh>super.normalizeToUnitCube(includeDescendants, ignoreRotation, predicate);\r\n    }\r\n\r\n    /** Gets a boolean indicating if this mesh has skinning data and an attached skeleton */\r\n    public get useBones(): boolean {\r\n        return <boolean>(\r\n            (this.skeleton &&\r\n                this.getScene().skeletonsEnabled &&\r\n                this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind) &&\r\n                this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind))\r\n        );\r\n    }\r\n\r\n    /** @internal */\r\n    public _preActivate(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _preActivateForIntermediateRendering(renderId: number): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _activate(renderId: number, intermediateRendering: boolean): boolean {\r\n        this._renderId = renderId;\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _postActivate(): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _freeze() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _unFreeze() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Gets the current world matrix\r\n     * @returns a Matrix\r\n     */\r\n    public getWorldMatrix(): Matrix {\r\n        if (this._masterMesh && this.billboardMode === TransformNode.BILLBOARDMODE_NONE) {\r\n            return this._masterMesh.getWorldMatrix();\r\n        }\r\n\r\n        return super.getWorldMatrix();\r\n    }\r\n\r\n    /** @internal */\r\n    public _getWorldMatrixDeterminant(): number {\r\n        if (this._masterMesh) {\r\n            return this._masterMesh._getWorldMatrixDeterminant();\r\n        }\r\n\r\n        return super._getWorldMatrixDeterminant();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh is an instance or a regular mesh\r\n     */\r\n    public get isAnInstance(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has instances\r\n     */\r\n    public get hasInstances(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has thin instances\r\n     */\r\n    public get hasThinInstances(): boolean {\r\n        return false;\r\n    }\r\n\r\n    // ================================== Point of View Movement =================================\r\n\r\n    /**\r\n     * Perform relative position change from the point of view of behind the front of the mesh.\r\n     * This is performed taking into account the meshes current rotation, so you do not have to care.\r\n     * Supports definition of mesh facing forward or backward {@link definedFacingForwardSearch | See definedFacingForwardSearch }.\r\n     * @param amountRight defines the distance on the right axis\r\n     * @param amountUp defines the distance on the up axis\r\n     * @param amountForward defines the distance on the forward axis\r\n     * @returns the current mesh\r\n     */\r\n    public movePOV(amountRight: number, amountUp: number, amountForward: number): AbstractMesh {\r\n        this.position.addInPlace(this.calcMovePOV(amountRight, amountUp, amountForward));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculate relative position change from the point of view of behind the front of the mesh.\r\n     * This is performed taking into account the meshes current rotation, so you do not have to care.\r\n     * Supports definition of mesh facing forward or backward {@link definedFacingForwardSearch | See definedFacingForwardSearch }.\r\n     * @param amountRight defines the distance on the right axis\r\n     * @param amountUp defines the distance on the up axis\r\n     * @param amountForward defines the distance on the forward axis\r\n     * @returns the new displacement vector\r\n     */\r\n    public calcMovePOV(amountRight: number, amountUp: number, amountForward: number): Vector3 {\r\n        const rotMatrix = new Matrix();\r\n        const rotQuaternion = this.rotationQuaternion ? this.rotationQuaternion : Quaternion.RotationYawPitchRoll(this.rotation.y, this.rotation.x, this.rotation.z);\r\n        rotQuaternion.toRotationMatrix(rotMatrix);\r\n\r\n        const translationDelta = Vector3.Zero();\r\n        const defForwardMult = this.definedFacingForward ? -1 : 1;\r\n        Vector3.TransformCoordinatesFromFloatsToRef(amountRight * defForwardMult, amountUp, amountForward * defForwardMult, rotMatrix, translationDelta);\r\n        return translationDelta;\r\n    }\r\n    // ================================== Point of View Rotation =================================\r\n    /**\r\n     * Perform relative rotation change from the point of view of behind the front of the mesh.\r\n     * Supports definition of mesh facing forward or backward {@link definedFacingForwardSearch | See definedFacingForwardSearch }.\r\n     * @param flipBack defines the flip\r\n     * @param twirlClockwise defines the twirl\r\n     * @param tiltRight defines the tilt\r\n     * @returns the current mesh\r\n     */\r\n    public rotatePOV(flipBack: number, twirlClockwise: number, tiltRight: number): AbstractMesh {\r\n        this.rotation.addInPlace(this.calcRotatePOV(flipBack, twirlClockwise, tiltRight));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculate relative rotation change from the point of view of behind the front of the mesh.\r\n     * Supports definition of mesh facing forward or backward {@link definedFacingForwardSearch | See definedFacingForwardSearch }.\r\n     * @param flipBack defines the flip\r\n     * @param twirlClockwise defines the twirl\r\n     * @param tiltRight defines the tilt\r\n     * @returns the new rotation vector\r\n     */\r\n    public calcRotatePOV(flipBack: number, twirlClockwise: number, tiltRight: number): Vector3 {\r\n        const defForwardMult = this.definedFacingForward ? 1 : -1;\r\n        return new Vector3(flipBack * defForwardMult, twirlClockwise, tiltRight * defForwardMult);\r\n    }\r\n\r\n    /**\r\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\r\n     * This means the mesh underlying bounding box and sphere are recomputed.\r\n     * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\r\n     * @param applyMorph  defines whether to apply the morph target before computing the bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public refreshBoundingInfo(applySkeleton: boolean = false, applyMorph: boolean = false): AbstractMesh {\r\n        if (this._boundingInfo && this._boundingInfo.isLocked) {\r\n            return this;\r\n        }\r\n\r\n        this._refreshBoundingInfo(this._getPositionData(applySkeleton, applyMorph), null);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _refreshBoundingInfo(data: Nullable<FloatArray>, bias: Nullable<Vector2>): void {\r\n        if (data) {\r\n            const extend = extractMinAndMax(data, 0, this.getTotalVertices(), bias);\r\n            if (this._boundingInfo) {\r\n                this._boundingInfo.reConstruct(extend.minimum, extend.maximum);\r\n            } else {\r\n                this._boundingInfo = new BoundingInfo(extend.minimum, extend.maximum);\r\n            }\r\n        }\r\n\r\n        if (this.subMeshes) {\r\n            for (let index = 0; index < this.subMeshes.length; index++) {\r\n                this.subMeshes[index].refreshBoundingInfo(data);\r\n            }\r\n        }\r\n\r\n        this._updateBoundingInfo();\r\n    }\r\n\r\n    /**\r\n     * Internal function to get buffer data and possibly apply morphs and normals\r\n     * @param applySkeleton\r\n     * @param applyMorph\r\n     * @param data\r\n     * @param kind the kind of data you want. Can be Normal or Position\r\n     * @returns a FloatArray of the vertex data\r\n     */\r\n    private _getData(applySkeleton: boolean = false, applyMorph: boolean = false, data?: Nullable<FloatArray>, kind: string = VertexBuffer.PositionKind): Nullable<FloatArray> {\r\n        data = data ?? this.getVerticesData(kind)!.slice();\r\n\r\n        if (data && applyMorph && this.morphTargetManager) {\r\n            let faceIndexCount = 0;\r\n            let positionIndex = 0;\r\n            for (let vertexCount = 0; vertexCount < data.length; vertexCount++) {\r\n                let value = data[vertexCount];\r\n                for (let targetCount = 0; targetCount < this.morphTargetManager.numTargets; targetCount++) {\r\n                    const targetMorph = this.morphTargetManager.getTarget(targetCount);\r\n                    const influence = targetMorph.influence;\r\n                    if (influence !== 0.0) {\r\n                        let morphTargetData: Nullable<FloatArray> = null;\r\n                        switch (kind) {\r\n                            case VertexBuffer.PositionKind:\r\n                                morphTargetData = targetMorph.getPositions();\r\n                                break;\r\n                            case VertexBuffer.NormalKind:\r\n                                morphTargetData = targetMorph.getNormals();\r\n                                break;\r\n                            case VertexBuffer.TangentKind:\r\n                                morphTargetData = targetMorph.getTangents();\r\n                                break;\r\n                            case VertexBuffer.UVKind:\r\n                                morphTargetData = targetMorph.getUVs();\r\n                                break;\r\n                        }\r\n                        if (morphTargetData) {\r\n                            value += (morphTargetData[vertexCount] - data[vertexCount]) * influence;\r\n                        }\r\n                    }\r\n                }\r\n                data[vertexCount] = value;\r\n\r\n                faceIndexCount++;\r\n                if (kind === VertexBuffer.PositionKind) {\r\n                    if (this._positions && faceIndexCount === 3) {\r\n                        // We want to merge into positions every 3 indices starting (but not 0)\r\n                        faceIndexCount = 0;\r\n                        const index = positionIndex * 3;\r\n                        this._positions[positionIndex++].copyFromFloats(data[index], data[index + 1], data[index + 2]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (data && applySkeleton && this.skeleton) {\r\n            const matricesIndicesData = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n            const matricesWeightsData = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n            if (matricesWeightsData && matricesIndicesData) {\r\n                const needExtras = this.numBoneInfluencers > 4;\r\n                const matricesIndicesExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\r\n                const matricesWeightsExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\r\n\r\n                const skeletonMatrices = this.skeleton.getTransformMatrices(this);\r\n\r\n                const tempVector = TmpVectors.Vector3[0];\r\n                const finalMatrix = TmpVectors.Matrix[0];\r\n                const tempMatrix = TmpVectors.Matrix[1];\r\n\r\n                let matWeightIdx = 0;\r\n                for (let index = 0; index < data.length; index += 3, matWeightIdx += 4) {\r\n                    finalMatrix.reset();\r\n\r\n                    let inf: number;\r\n                    let weight: number;\r\n                    for (inf = 0; inf < 4; inf++) {\r\n                        weight = matricesWeightsData[matWeightIdx + inf];\r\n                        if (weight > 0) {\r\n                            Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                            finalMatrix.addToSelf(tempMatrix);\r\n                        }\r\n                    }\r\n                    if (needExtras) {\r\n                        for (inf = 0; inf < 4; inf++) {\r\n                            weight = matricesWeightsExtraData![matWeightIdx + inf];\r\n                            if (weight > 0) {\r\n                                Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData![matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                                finalMatrix.addToSelf(tempMatrix);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (kind === VertexBuffer.NormalKind) {\r\n                        Vector3.TransformNormalFromFloatsToRef(data[index], data[index + 1], data[index + 2], finalMatrix, tempVector);\r\n                    } else {\r\n                        Vector3.TransformCoordinatesFromFloatsToRef(data[index], data[index + 1], data[index + 2], finalMatrix, tempVector);\r\n                    }\r\n                    tempVector.toArray(data, index);\r\n\r\n                    if (kind === VertexBuffer.PositionKind && this._positions) {\r\n                        this._positions[index / 3].copyFrom(tempVector);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Get the normals vertex data and optionally apply skeleton and morphing.\r\n     * @param applySkeleton defines whether to apply the skeleton\r\n     * @param applyMorph  defines whether to apply the morph target\r\n     * @returns the normals data\r\n     */\r\n    public getNormalsData(applySkeleton = false, applyMorph = false): Nullable<FloatArray> {\r\n        return this._getData(applySkeleton, applyMorph, null, VertexBuffer.NormalKind);\r\n    }\r\n\r\n    /**\r\n     * Get the position vertex data and optionally apply skeleton and morphing.\r\n     * @param applySkeleton defines whether to apply the skeleton\r\n     * @param applyMorph  defines whether to apply the morph target\r\n     * @param data defines the position data to apply the skeleton and morph to\r\n     * @returns the position data\r\n     */\r\n    public getPositionData(applySkeleton: boolean = false, applyMorph: boolean = false, data?: Nullable<FloatArray>): Nullable<FloatArray> {\r\n        return this._getData(applySkeleton, applyMorph, data, VertexBuffer.PositionKind);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getPositionData(applySkeleton: boolean, applyMorph: boolean): Nullable<FloatArray> {\r\n        let data = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (this._internalAbstractMeshDataInfo._positions) {\r\n            this._internalAbstractMeshDataInfo._positions = null;\r\n        }\r\n\r\n        if (data && ((applySkeleton && this.skeleton) || (applyMorph && this.morphTargetManager))) {\r\n            data = data.slice();\r\n            this._generatePointsArray();\r\n            if (this._positions) {\r\n                const pos = this._positions;\r\n                this._internalAbstractMeshDataInfo._positions = new Array<Vector3>(pos.length);\r\n                for (let i = 0; i < pos.length; i++) {\r\n                    this._internalAbstractMeshDataInfo._positions[i] = pos[i]?.clone() || new Vector3();\r\n                }\r\n            }\r\n            return this.getPositionData(applySkeleton, applyMorph, data);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /** @internal */\r\n    public _updateBoundingInfo(): AbstractMesh {\r\n        if (this._boundingInfo) {\r\n            this._boundingInfo.update(this.worldMatrixFromCache);\r\n        } else {\r\n            this._boundingInfo = new BoundingInfo(Vector3.Zero(), Vector3.Zero(), this.worldMatrixFromCache);\r\n        }\r\n        this._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateSubMeshesBoundingInfo(matrix: DeepImmutable<Matrix>): AbstractMesh {\r\n        if (!this.subMeshes) {\r\n            return this;\r\n        }\r\n        const count = this.subMeshes.length;\r\n        for (let subIndex = 0; subIndex < count; subIndex++) {\r\n            const subMesh = this.subMeshes[subIndex];\r\n            if (count > 1 || !subMesh.IsGlobal) {\r\n                subMesh.updateBoundingInfo(matrix);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _afterComputeWorldMatrix(): void {\r\n        if (this.doNotSyncBoundingInfo) {\r\n            return;\r\n        }\r\n        // Bounding info\r\n        this._boundingInfoIsDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\r\n     * A mesh is in the frustum if its bounding box intersects the frustum\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is in the frustum planes\r\n     */\r\n    public isInFrustum(frustumPlanes: Plane[]): boolean {\r\n        return this.getBoundingInfo().isInFrustum(frustumPlanes, this.cullingStrategy);\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is completely in the frustum defined be the passed array of planes.\r\n     * A mesh is completely in the frustum if its bounding box it completely inside the frustum.\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is completely in the frustum planes\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Plane[]): boolean {\r\n        return this.getBoundingInfo().isCompletelyInFrustum(frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * True if the mesh intersects another mesh or a SolidParticle object\r\n     * @param mesh defines a target mesh or SolidParticle to test\r\n     * @param precise Unless the parameter `precise` is set to `true` the intersection is computed according to Axis Aligned Bounding Boxes (AABB), else according to OBB (Oriented BBoxes)\r\n     * @param includeDescendants Can be set to true to test if the mesh defined in parameters intersects with the current mesh or any child meshes\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsMesh(mesh: AbstractMesh | SolidParticle, precise: boolean = false, includeDescendants?: boolean): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n        const otherBoundingInfo = mesh.getBoundingInfo();\r\n\r\n        if (boundingInfo.intersects(otherBoundingInfo, precise)) {\r\n            return true;\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            for (const child of this.getChildMeshes()) {\r\n                if (child.intersectsMesh(mesh, precise, true)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the passed point (Vector3) is inside the mesh bounding box\r\n     * @param point defines the point to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsPoint(point: Vector3): boolean {\r\n        return this.getBoundingInfo().intersectsPoint(point);\r\n    }\r\n\r\n    // Collisions\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh can be used in the collision engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public get checkCollisions(): boolean {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._checkCollisions;\r\n    }\r\n\r\n    public set checkCollisions(collisionEnabled: boolean) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._checkCollisions = collisionEnabled;\r\n    }\r\n\r\n    /**\r\n     * Gets Collider object used to compute collisions (not physics)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public get collider(): Nullable<Collider> {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collider;\r\n    }\r\n\r\n    /**\r\n     * Move the mesh using collision engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     * @param displacement defines the requested displacement vector\r\n     * @returns the current mesh\r\n     */\r\n    public moveWithCollisions(displacement: Vector3): AbstractMesh {\r\n        const globalPosition = this.getAbsolutePosition();\r\n\r\n        globalPosition.addToRef(this.ellipsoidOffset, this._internalAbstractMeshDataInfo._meshCollisionData._oldPositionForCollisions);\r\n        const coordinator = this.getScene().collisionCoordinator;\r\n\r\n        if (!this._internalAbstractMeshDataInfo._meshCollisionData._collider) {\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._collider = coordinator.createCollider();\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collider._radius = this.ellipsoid;\r\n\r\n        coordinator.getNewPosition(\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._oldPositionForCollisions,\r\n            displacement,\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._collider,\r\n            this.collisionRetryCount,\r\n            this,\r\n            this._onCollisionPositionChange,\r\n            this.uniqueId\r\n        );\r\n        return this;\r\n    }\r\n\r\n    private _onCollisionPositionChange = (collisionId: number, newPosition: Vector3, collidedMesh: Nullable<AbstractMesh> = null) => {\r\n        newPosition.subtractToRef(\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._oldPositionForCollisions,\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._diffPositionForCollisions\r\n        );\r\n\r\n        if (this._internalAbstractMeshDataInfo._meshCollisionData._diffPositionForCollisions.length() > Engine.CollisionsEpsilon) {\r\n            this.position.addInPlace(this._internalAbstractMeshDataInfo._meshCollisionData._diffPositionForCollisions);\r\n        }\r\n\r\n        if (collidedMesh) {\r\n            this.onCollideObservable.notifyObservers(collidedMesh);\r\n        }\r\n\r\n        this.onCollisionPositionChangeObservable.notifyObservers(this.position);\r\n    };\r\n\r\n    // Collisions\r\n    /**\r\n     * @internal\r\n     */\r\n    public _collideForSubMesh(subMesh: SubMesh, transformMatrix: Matrix, collider: Collider): AbstractMesh {\r\n        this._generatePointsArray();\r\n\r\n        if (!this._positions) {\r\n            return this;\r\n        }\r\n\r\n        // Transformation\r\n        if (!subMesh._lastColliderWorldVertices || !subMesh._lastColliderTransformMatrix!.equals(transformMatrix)) {\r\n            subMesh._lastColliderTransformMatrix = transformMatrix.clone();\r\n            subMesh._lastColliderWorldVertices = [];\r\n            subMesh._trianglePlanes = [];\r\n            const start = subMesh.verticesStart;\r\n            const end = subMesh.verticesStart + subMesh.verticesCount;\r\n            for (let i = start; i < end; i++) {\r\n                subMesh._lastColliderWorldVertices.push(Vector3.TransformCoordinates(this._positions[i], transformMatrix));\r\n            }\r\n        }\r\n\r\n        // Collide\r\n        collider._collide(\r\n            subMesh._trianglePlanes,\r\n            subMesh._lastColliderWorldVertices,\r\n            <IndicesArray>this.getIndices(),\r\n            subMesh.indexStart,\r\n            subMesh.indexStart + subMesh.indexCount,\r\n            subMesh.verticesStart,\r\n            !!subMesh.getMaterial(),\r\n            this,\r\n            this._shouldConvertRHS(),\r\n            subMesh.getMaterial()?.fillMode === Constants.MATERIAL_TriangleStripDrawMode\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processCollisionsForSubMeshes(collider: Collider, transformMatrix: Matrix): AbstractMesh {\r\n        const subMeshes = this._scene.getCollidingSubMeshCandidates(this, collider);\r\n        const len = subMeshes.length;\r\n\r\n        for (let index = 0; index < len; index++) {\r\n            const subMesh = subMeshes.data[index];\r\n\r\n            // Bounding test\r\n            if (len > 1 && !subMesh._checkCollision(collider)) {\r\n                continue;\r\n            }\r\n\r\n            this._collideForSubMesh(subMesh, transformMatrix, collider);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _shouldConvertRHS() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _checkCollision(collider: Collider): AbstractMesh {\r\n        // Bounding box test\r\n        if (!this.getBoundingInfo()._checkCollision(collider)) {\r\n            return this;\r\n        }\r\n\r\n        // Transformation matrix\r\n        const collisionsScalingMatrix = TmpVectors.Matrix[0];\r\n        const collisionsTransformMatrix = TmpVectors.Matrix[1];\r\n        Matrix.ScalingToRef(1.0 / collider._radius.x, 1.0 / collider._radius.y, 1.0 / collider._radius.z, collisionsScalingMatrix);\r\n        this.worldMatrixFromCache.multiplyToRef(collisionsScalingMatrix, collisionsTransformMatrix);\r\n        this._processCollisionsForSubMeshes(collider, collisionsTransformMatrix);\r\n        return this;\r\n    }\r\n\r\n    // Picking\r\n    /** @internal */\r\n    public _generatePointsArray(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the passed Ray intersects with the mesh. A mesh triangle can be picked both from its front and back sides,\r\n     * irrespective of orientation.\r\n     * @param ray defines the ray to use. It should be in the mesh's LOCAL coordinate space.\r\n     * @param fastCheck defines if fast mode (but less precise) must be used (false by default)\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @param onlyBoundingInfo defines a boolean indicating if picking should only happen using bounding info (false by default)\r\n     * @param worldToUse defines the world matrix to use to get the world coordinate of the intersection point\r\n     * @param skipBoundingInfo a boolean indicating if we should skip the bounding info check\r\n     * @returns the picking info\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/mesh_intersect\r\n     */\r\n    public intersects(\r\n        ray: Ray,\r\n        fastCheck?: boolean,\r\n        trianglePredicate?: TrianglePickingPredicate,\r\n        onlyBoundingInfo = false,\r\n        worldToUse?: Matrix,\r\n        skipBoundingInfo = false\r\n    ): PickingInfo {\r\n        const pickingInfo = new PickingInfo();\r\n        const className = this.getClassName();\r\n        const intersectionThreshold = className === \"InstancedLinesMesh\" || className === \"LinesMesh\" || className === \"GreasedLineMesh\" ? (this as any).intersectionThreshold : 0;\r\n        const boundingInfo = this.getBoundingInfo();\r\n        if (!this.subMeshes) {\r\n            return pickingInfo;\r\n        }\r\n        if (\r\n            !skipBoundingInfo &&\r\n            (!ray.intersectsSphere(boundingInfo.boundingSphere, intersectionThreshold) || !ray.intersectsBox(boundingInfo.boundingBox, intersectionThreshold))\r\n        ) {\r\n            return pickingInfo;\r\n        }\r\n\r\n        if (onlyBoundingInfo) {\r\n            pickingInfo.hit = skipBoundingInfo ? false : true;\r\n            pickingInfo.pickedMesh = skipBoundingInfo ? null : this;\r\n            pickingInfo.distance = skipBoundingInfo ? 0 : Vector3.Distance(ray.origin, boundingInfo.boundingSphere.center);\r\n            pickingInfo.subMeshId = 0;\r\n            return pickingInfo;\r\n        }\r\n\r\n        if (!this._generatePointsArray()) {\r\n            return pickingInfo;\r\n        }\r\n\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        const subMeshes = this._scene.getIntersectingSubMeshCandidates(this, ray);\r\n        const len: number = subMeshes.length;\r\n\r\n        // Check if all submeshes are using a material that don't allow picking (point/lines rendering)\r\n        // if no submesh can be picked that way, then fallback to BBox picking\r\n        let anySubmeshSupportIntersect = false;\r\n        for (let index = 0; index < len; index++) {\r\n            const subMesh = subMeshes.data[index];\r\n            const material = subMesh.getMaterial();\r\n            if (!material) {\r\n                continue;\r\n            }\r\n            if (\r\n                material.fillMode == Constants.MATERIAL_TriangleStripDrawMode ||\r\n                material.fillMode == Constants.MATERIAL_TriangleFillMode ||\r\n                material.fillMode == Constants.MATERIAL_WireFrameFillMode ||\r\n                material.fillMode == Constants.MATERIAL_PointFillMode ||\r\n                material.fillMode == Constants.MATERIAL_LineListDrawMode\r\n            ) {\r\n                anySubmeshSupportIntersect = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // no sub mesh support intersection, fallback to BBox that has already be done\r\n        if (!anySubmeshSupportIntersect) {\r\n            pickingInfo.hit = true;\r\n            pickingInfo.pickedMesh = this;\r\n            pickingInfo.distance = Vector3.Distance(ray.origin, boundingInfo.boundingSphere.center);\r\n            pickingInfo.subMeshId = -1;\r\n            return pickingInfo;\r\n        }\r\n\r\n        // at least 1 submesh supports intersection, keep going\r\n        for (let index = 0; index < len; index++) {\r\n            const subMesh = subMeshes.data[index];\r\n\r\n            // Bounding test\r\n            if (len > 1 && !skipBoundingInfo && !subMesh.canIntersects(ray)) {\r\n                continue;\r\n            }\r\n\r\n            const currentIntersectInfo = subMesh.intersects(ray, <Vector3[]>this._positions, <IndicesArray>this.getIndices(), fastCheck, trianglePredicate);\r\n\r\n            if (currentIntersectInfo) {\r\n                if (fastCheck || !intersectInfo || currentIntersectInfo.distance < intersectInfo.distance) {\r\n                    intersectInfo = currentIntersectInfo;\r\n                    intersectInfo.subMeshId = index;\r\n\r\n                    if (fastCheck) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (intersectInfo) {\r\n            // Get picked point\r\n            const world = worldToUse ?? this.getWorldMatrix();\r\n            const worldOrigin = TmpVectors.Vector3[0];\r\n            const direction = TmpVectors.Vector3[1];\r\n            Vector3.TransformCoordinatesToRef(ray.origin, world, worldOrigin);\r\n            ray.direction.scaleToRef(intersectInfo.distance, direction);\r\n            const worldDirection = Vector3.TransformNormal(direction, world);\r\n            const pickedPoint = worldDirection.addInPlace(worldOrigin);\r\n\r\n            // Return result\r\n            pickingInfo.hit = true;\r\n            pickingInfo.distance = Vector3.Distance(worldOrigin, pickedPoint);\r\n            pickingInfo.pickedPoint = pickedPoint;\r\n            pickingInfo.pickedMesh = this;\r\n            pickingInfo.bu = intersectInfo.bu || 0;\r\n            pickingInfo.bv = intersectInfo.bv || 0;\r\n            pickingInfo.subMeshFaceId = intersectInfo.faceId;\r\n            pickingInfo.faceId = intersectInfo.faceId + subMeshes.data[intersectInfo.subMeshId].indexStart / (this.getClassName().indexOf(\"LinesMesh\") !== -1 ? 2 : 3);\r\n            pickingInfo.subMeshId = intersectInfo.subMeshId;\r\n            return pickingInfo;\r\n        }\r\n\r\n        return pickingInfo;\r\n    }\r\n\r\n    /**\r\n     * Clones the current mesh\r\n     * @param name defines the mesh name\r\n     * @param newParent defines the new mesh parent\r\n     * @param doNotCloneChildren defines a boolean indicating that children must not be cloned (false by default)\r\n     * @returns the new mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public clone(name: string, newParent: Nullable<Node>, doNotCloneChildren?: boolean): Nullable<AbstractMesh> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Disposes all the submeshes of the current meshnp\r\n     * @returns the current mesh\r\n     */\r\n    public releaseSubMeshes(): AbstractMesh {\r\n        if (this.subMeshes) {\r\n            while (this.subMeshes.length) {\r\n                this.subMeshes[0].dispose();\r\n            }\r\n        } else {\r\n            this.subMeshes = [] as SubMesh[];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this abstract mesh.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        let index: number;\r\n\r\n        const scene = this.getScene();\r\n\r\n        // mesh map release.\r\n        if (this._scene.useMaterialMeshMap) {\r\n            // remove from material mesh map id needed\r\n            if (this._internalAbstractMeshDataInfo._material && this._internalAbstractMeshDataInfo._material.meshMap) {\r\n                this._internalAbstractMeshDataInfo._material.meshMap[this.uniqueId] = undefined;\r\n            }\r\n        }\r\n\r\n        // Smart Array Retainers.\r\n        scene.freeActiveMeshes();\r\n        scene.freeRenderingGroups();\r\n        if (scene.renderingManager.maintainStateBetweenFrames) {\r\n            scene.renderingManager.restoreDispachedFlags();\r\n        }\r\n\r\n        // Action manager\r\n        if (this.actionManager !== undefined && this.actionManager !== null) {\r\n            // If it's the only mesh using the action manager, dispose of it.\r\n            if (!this._scene.meshes.some((m) => m !== this && m.actionManager === this.actionManager)) {\r\n                this.actionManager.dispose();\r\n            }\r\n            this.actionManager = null;\r\n        }\r\n\r\n        // Skeleton\r\n        this._internalAbstractMeshDataInfo._skeleton = null;\r\n\r\n        if (this._transformMatrixTexture) {\r\n            this._transformMatrixTexture.dispose();\r\n            this._transformMatrixTexture = null;\r\n        }\r\n\r\n        // Intersections in progress\r\n        for (index = 0; index < this._intersectionsInProgress.length; index++) {\r\n            const other = this._intersectionsInProgress[index];\r\n\r\n            const pos = other._intersectionsInProgress.indexOf(this);\r\n            other._intersectionsInProgress.splice(pos, 1);\r\n        }\r\n\r\n        this._intersectionsInProgress.length = 0;\r\n\r\n        // Lights\r\n        const lights = scene.lights;\r\n\r\n        lights.forEach((light: Light) => {\r\n            let meshIndex = light.includedOnlyMeshes.indexOf(this);\r\n\r\n            if (meshIndex !== -1) {\r\n                light.includedOnlyMeshes.splice(meshIndex, 1);\r\n            }\r\n\r\n            meshIndex = light.excludedMeshes.indexOf(this);\r\n\r\n            if (meshIndex !== -1) {\r\n                light.excludedMeshes.splice(meshIndex, 1);\r\n            }\r\n\r\n            // Shadow generators\r\n            const generators = light.getShadowGenerators();\r\n            if (generators) {\r\n                const iterator = generators.values();\r\n                for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                    const generator = key.value;\r\n                    const shadowMap = generator.getShadowMap();\r\n\r\n                    if (shadowMap && shadowMap.renderList) {\r\n                        meshIndex = shadowMap.renderList.indexOf(this);\r\n\r\n                        if (meshIndex !== -1) {\r\n                            shadowMap.renderList.splice(meshIndex, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // SubMeshes\r\n        if (this.getClassName() !== \"InstancedMesh\" || this.getClassName() !== \"InstancedLinesMesh\") {\r\n            this.releaseSubMeshes();\r\n        }\r\n\r\n        // Query\r\n        const engine = scene.getEngine();\r\n        if (this._occlusionQuery !== null) {\r\n            this.isOcclusionQueryInProgress = false;\r\n            engine.deleteQuery(this._occlusionQuery);\r\n            this._occlusionQuery = null;\r\n        }\r\n\r\n        // Engine\r\n        engine.wipeCaches();\r\n\r\n        // Remove from scene\r\n        scene.removeMesh(this);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.meshes.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.meshes.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        if (disposeMaterialAndTextures) {\r\n            if (this.material) {\r\n                if (this.material.getClassName() === \"MultiMaterial\") {\r\n                    this.material.dispose(false, true, true);\r\n                } else {\r\n                    this.material.dispose(false, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!doNotRecurse) {\r\n            // Particles\r\n            for (index = 0; index < scene.particleSystems.length; index++) {\r\n                if (scene.particleSystems[index].emitter === this) {\r\n                    scene.particleSystems[index].dispose();\r\n                    index--;\r\n                }\r\n            }\r\n        }\r\n\r\n        // facet data\r\n        if (this._internalAbstractMeshDataInfo._facetData.facetDataEnabled) {\r\n            this.disableFacetData();\r\n        }\r\n\r\n        this._uniformBuffer.dispose();\r\n\r\n        this.onAfterWorldMatrixUpdateObservable.clear();\r\n        this.onCollideObservable.clear();\r\n        this.onCollisionPositionChangeObservable.clear();\r\n        this.onRebuildObservable.clear();\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /**\r\n     * Adds the passed mesh as a child to the current mesh\r\n     * @param mesh defines the child mesh\r\n     * @param preserveScalingSign if true, keep scaling sign of child. Otherwise, scaling sign might change.\r\n     * @returns the current mesh\r\n     */\r\n    public addChild(mesh: AbstractMesh, preserveScalingSign: boolean = false): AbstractMesh {\r\n        mesh.setParent(this, preserveScalingSign);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the passed mesh from the current mesh children list\r\n     * @param mesh defines the child mesh\r\n     * @param preserveScalingSign if true, keep scaling sign of child. Otherwise, scaling sign might change.\r\n     * @returns the current mesh\r\n     */\r\n    public removeChild(mesh: AbstractMesh, preserveScalingSign: boolean = false): AbstractMesh {\r\n        mesh.setParent(null, preserveScalingSign);\r\n        return this;\r\n    }\r\n\r\n    // Facet data\r\n    /** @internal */\r\n    private _initFacetData(): AbstractMesh {\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!data.facetNormals) {\r\n            data.facetNormals = [] as Vector3[];\r\n        }\r\n        if (!data.facetPositions) {\r\n            data.facetPositions = [] as Vector3[];\r\n        }\r\n        if (!data.facetPartitioning) {\r\n            data.facetPartitioning = new Array<number[]>();\r\n        }\r\n        data.facetNb = ((<IndicesArray>this.getIndices()).length / 3) | 0;\r\n        data.partitioningSubdivisions = data.partitioningSubdivisions ? data.partitioningSubdivisions : 10; // default nb of partitioning subdivisions = 10\r\n        data.partitioningBBoxRatio = data.partitioningBBoxRatio ? data.partitioningBBoxRatio : 1.01; // default ratio 1.01 = the partitioning is 1% bigger than the bounding box\r\n        for (let f = 0; f < data.facetNb; f++) {\r\n            data.facetNormals[f] = Vector3.Zero();\r\n            data.facetPositions[f] = Vector3.Zero();\r\n        }\r\n        data.facetDataEnabled = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the mesh facetData arrays and the internal partitioning when the mesh is morphed or updated.\r\n     * This method can be called within the render loop.\r\n     * You don't need to call this method by yourself in the render loop when you update/morph a mesh with the methods CreateXXX() as they automatically manage this computation\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public updateFacetData(): AbstractMesh {\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!data.facetDataEnabled) {\r\n            this._initFacetData();\r\n        }\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        const indices = this.getIndices();\r\n        const normals = this.getVerticesData(VertexBuffer.NormalKind);\r\n        const bInfo = this.getBoundingInfo();\r\n\r\n        if (data.facetDepthSort && !data.facetDepthSortEnabled) {\r\n            // init arrays, matrix and sort function on first call\r\n            data.facetDepthSortEnabled = true;\r\n            if (indices instanceof Uint16Array) {\r\n                data.depthSortedIndices = new Uint16Array(indices!);\r\n            } else if (indices instanceof Uint32Array) {\r\n                data.depthSortedIndices = new Uint32Array(indices!);\r\n            } else {\r\n                let needs32bits = false;\r\n                for (let i = 0; i < indices!.length; i++) {\r\n                    if (indices![i] > 65535) {\r\n                        needs32bits = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (needs32bits) {\r\n                    data.depthSortedIndices = new Uint32Array(indices!);\r\n                } else {\r\n                    data.depthSortedIndices = new Uint16Array(indices!);\r\n                }\r\n            }\r\n            data.facetDepthSortFunction = function (f1, f2) {\r\n                return f2.sqDistance - f1.sqDistance;\r\n            };\r\n            if (!data.facetDepthSortFrom) {\r\n                const camera = this.getScene().activeCamera;\r\n                data.facetDepthSortFrom = camera ? camera.position : Vector3.Zero();\r\n            }\r\n            data.depthSortedFacets = [];\r\n            for (let f = 0; f < data.facetNb; f++) {\r\n                const depthSortedFacet = { ind: f * 3, sqDistance: 0.0 };\r\n                data.depthSortedFacets.push(depthSortedFacet);\r\n            }\r\n            data.invertedMatrix = Matrix.Identity();\r\n            data.facetDepthSortOrigin = Vector3.Zero();\r\n        }\r\n\r\n        data.bbSize.x = bInfo.maximum.x - bInfo.minimum.x > Epsilon ? bInfo.maximum.x - bInfo.minimum.x : Epsilon;\r\n        data.bbSize.y = bInfo.maximum.y - bInfo.minimum.y > Epsilon ? bInfo.maximum.y - bInfo.minimum.y : Epsilon;\r\n        data.bbSize.z = bInfo.maximum.z - bInfo.minimum.z > Epsilon ? bInfo.maximum.z - bInfo.minimum.z : Epsilon;\r\n        let bbSizeMax = data.bbSize.x > data.bbSize.y ? data.bbSize.x : data.bbSize.y;\r\n        bbSizeMax = bbSizeMax > data.bbSize.z ? bbSizeMax : data.bbSize.z;\r\n        data.subDiv.max = data.partitioningSubdivisions;\r\n        data.subDiv.X = Math.floor((data.subDiv.max * data.bbSize.x) / bbSizeMax); // adjust the number of subdivisions per axis\r\n        data.subDiv.Y = Math.floor((data.subDiv.max * data.bbSize.y) / bbSizeMax); // according to each bbox size per axis\r\n        data.subDiv.Z = Math.floor((data.subDiv.max * data.bbSize.z) / bbSizeMax);\r\n        data.subDiv.X = data.subDiv.X < 1 ? 1 : data.subDiv.X; // at least one subdivision\r\n        data.subDiv.Y = data.subDiv.Y < 1 ? 1 : data.subDiv.Y;\r\n        data.subDiv.Z = data.subDiv.Z < 1 ? 1 : data.subDiv.Z;\r\n        // set the parameters for ComputeNormals()\r\n        data.facetParameters.facetNormals = this.getFacetLocalNormals();\r\n        data.facetParameters.facetPositions = this.getFacetLocalPositions();\r\n        data.facetParameters.facetPartitioning = this.getFacetLocalPartitioning();\r\n        data.facetParameters.bInfo = bInfo;\r\n        data.facetParameters.bbSize = data.bbSize;\r\n        data.facetParameters.subDiv = data.subDiv;\r\n        data.facetParameters.ratio = this.partitioningBBoxRatio;\r\n        data.facetParameters.depthSort = data.facetDepthSort;\r\n        if (data.facetDepthSort && data.facetDepthSortEnabled) {\r\n            this.computeWorldMatrix(true);\r\n            this._worldMatrix.invertToRef(data.invertedMatrix);\r\n            Vector3.TransformCoordinatesToRef(data.facetDepthSortFrom, data.invertedMatrix, data.facetDepthSortOrigin);\r\n            data.facetParameters.distanceTo = data.facetDepthSortOrigin;\r\n        }\r\n        data.facetParameters.depthSortedFacets = data.depthSortedFacets;\r\n        if (normals) {\r\n            VertexData.ComputeNormals(positions, indices, normals, data.facetParameters);\r\n        }\r\n\r\n        if (data.facetDepthSort && data.facetDepthSortEnabled) {\r\n            data.depthSortedFacets.sort(data.facetDepthSortFunction);\r\n            const l = (data.depthSortedIndices.length / 3) | 0;\r\n            for (let f = 0; f < l; f++) {\r\n                const sind = data.depthSortedFacets[f].ind;\r\n                data.depthSortedIndices[f * 3] = indices![sind];\r\n                data.depthSortedIndices[f * 3 + 1] = indices![sind + 1];\r\n                data.depthSortedIndices[f * 3 + 2] = indices![sind + 2];\r\n            }\r\n            this.updateIndices(data.depthSortedIndices, undefined, true);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalNormals array.\r\n     * The normals are expressed in the mesh local spac\r\n     * @returns an array of Vector3\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetLocalNormals(): Vector3[] {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!facetData.facetNormals) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetNormals;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalPositions array.\r\n     * The facet positions are expressed in the mesh local space\r\n     * @returns an array of Vector3\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetLocalPositions(): Vector3[] {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!facetData.facetPositions) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetPositions;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalPartitioning array\r\n     * @returns an array of array of numbers\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetLocalPartitioning(): number[][] {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n\r\n        if (!facetData.facetPartitioning) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetPartitioning;\r\n    }\r\n\r\n    /**\r\n     * Returns the i-th facet position in the world system.\r\n     * This method allocates a new Vector3 per call\r\n     * @param i defines the facet index\r\n     * @returns a new Vector3\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetPosition(i: number): Vector3 {\r\n        const pos = Vector3.Zero();\r\n        this.getFacetPositionToRef(i, pos);\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * Sets the reference Vector3 with the i-th facet position in the world system\r\n     * @param i defines the facet index\r\n     * @param ref defines the target vector\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetPositionToRef(i: number, ref: Vector3): AbstractMesh {\r\n        const localPos = this.getFacetLocalPositions()[i];\r\n        const world = this.getWorldMatrix();\r\n        Vector3.TransformCoordinatesToRef(localPos, world, ref);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the i-th facet normal in the world system.\r\n     * This method allocates a new Vector3 per call\r\n     * @param i defines the facet index\r\n     * @returns a new Vector3\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetNormal(i: number): Vector3 {\r\n        const norm = Vector3.Zero();\r\n        this.getFacetNormalToRef(i, norm);\r\n        return norm;\r\n    }\r\n\r\n    /**\r\n     * Sets the reference Vector3 with the i-th facet normal in the world system\r\n     * @param i defines the facet index\r\n     * @param ref defines the target vector\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetNormalToRef(i: number, ref: Vector3) {\r\n        const localNorm = this.getFacetLocalNormals()[i];\r\n        Vector3.TransformNormalToRef(localNorm, this.getWorldMatrix(), ref);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the facets (in an array) in the same partitioning block than the one the passed coordinates are located (expressed in the mesh local system)\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @returns the array of facet indexes\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetsAtLocalCoordinates(x: number, y: number, z: number): Nullable<number[]> {\r\n        const bInfo = this.getBoundingInfo();\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n\r\n        const ox = Math.floor(((x - bInfo.minimum.x * data.partitioningBBoxRatio) * data.subDiv.X * data.partitioningBBoxRatio) / data.bbSize.x);\r\n        const oy = Math.floor(((y - bInfo.minimum.y * data.partitioningBBoxRatio) * data.subDiv.Y * data.partitioningBBoxRatio) / data.bbSize.y);\r\n        const oz = Math.floor(((z - bInfo.minimum.z * data.partitioningBBoxRatio) * data.subDiv.Z * data.partitioningBBoxRatio) / data.bbSize.z);\r\n        if (ox < 0 || ox > data.subDiv.max || oy < 0 || oy > data.subDiv.max || oz < 0 || oz > data.subDiv.max) {\r\n            return null;\r\n        }\r\n        return data.facetPartitioning[ox + data.subDiv.max * oy + data.subDiv.max * data.subDiv.max * oz];\r\n    }\r\n\r\n    /**\r\n     * Returns the closest mesh facet index at (x,y,z) World coordinates, null if not found\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @param projected sets as the (x,y,z) world projection on the facet\r\n     * @param checkFace if true (default false), only the facet \"facing\" to (x,y,z) or only the ones \"turning their backs\", according to the parameter \"facing\" are returned\r\n     * @param facing if facing and checkFace are true, only the facet \"facing\" to (x, y, z) are returned : positive dot (x, y, z) * facet position. If facing si false and checkFace is true, only the facet \"turning their backs\" to (x, y, z) are returned : negative dot (x, y, z) * facet position\r\n     * @returns the face index if found (or null instead)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getClosestFacetAtCoordinates(x: number, y: number, z: number, projected?: Vector3, checkFace: boolean = false, facing: boolean = true): Nullable<number> {\r\n        const world = this.getWorldMatrix();\r\n        const invMat = TmpVectors.Matrix[5];\r\n        world.invertToRef(invMat);\r\n        const invVect = TmpVectors.Vector3[8];\r\n        Vector3.TransformCoordinatesFromFloatsToRef(x, y, z, invMat, invVect); // transform (x,y,z) to coordinates in the mesh local space\r\n        const closest = this.getClosestFacetAtLocalCoordinates(invVect.x, invVect.y, invVect.z, projected, checkFace, facing);\r\n        if (projected) {\r\n            // transform the local computed projected vector to world coordinates\r\n            Vector3.TransformCoordinatesFromFloatsToRef(projected.x, projected.y, projected.z, world, projected);\r\n        }\r\n        return closest;\r\n    }\r\n\r\n    /**\r\n     * Returns the closest mesh facet index at (x,y,z) local coordinates, null if not found\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @param projected sets as the (x,y,z) local projection on the facet\r\n     * @param checkFace if true (default false), only the facet \"facing\" to (x,y,z) or only the ones \"turning their backs\", according to the parameter \"facing\" are returned\r\n     * @param facing if facing and checkFace are true, only the facet \"facing\" to (x, y, z) are returned : positive dot (x, y, z) * facet position. If facing si false and checkFace is true, only the facet \"turning their backs\" to (x, y, z) are returned : negative dot (x, y, z) * facet position\r\n     * @returns the face index if found (or null instead)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getClosestFacetAtLocalCoordinates(x: number, y: number, z: number, projected?: Vector3, checkFace: boolean = false, facing: boolean = true): Nullable<number> {\r\n        let closest = null;\r\n        let tmpx = 0.0;\r\n        let tmpy = 0.0;\r\n        let tmpz = 0.0;\r\n        let d = 0.0; // tmp dot facet normal * facet position\r\n        let t0 = 0.0;\r\n        let projx = 0.0;\r\n        let projy = 0.0;\r\n        let projz = 0.0;\r\n        // Get all the facets in the same partitioning block than (x, y, z)\r\n        const facetPositions = this.getFacetLocalPositions();\r\n        const facetNormals = this.getFacetLocalNormals();\r\n        const facetsInBlock = this.getFacetsAtLocalCoordinates(x, y, z);\r\n        if (!facetsInBlock) {\r\n            return null;\r\n        }\r\n        // Get the closest facet to (x, y, z)\r\n        let shortest = Number.MAX_VALUE; // init distance vars\r\n        let tmpDistance = shortest;\r\n        let fib; // current facet in the block\r\n        let norm; // current facet normal\r\n        let p0; // current facet barycenter position\r\n        // loop on all the facets in the current partitioning block\r\n        for (let idx = 0; idx < facetsInBlock.length; idx++) {\r\n            fib = facetsInBlock[idx];\r\n            norm = facetNormals[fib];\r\n            p0 = facetPositions[fib];\r\n\r\n            d = (x - p0.x) * norm.x + (y - p0.y) * norm.y + (z - p0.z) * norm.z;\r\n            if (!checkFace || (checkFace && facing && d >= 0.0) || (checkFace && !facing && d <= 0.0)) {\r\n                // compute (x,y,z) projection on the facet = (projx, projy, projz)\r\n                d = norm.x * p0.x + norm.y * p0.y + norm.z * p0.z;\r\n                t0 = -(norm.x * x + norm.y * y + norm.z * z - d) / (norm.x * norm.x + norm.y * norm.y + norm.z * norm.z);\r\n                projx = x + norm.x * t0;\r\n                projy = y + norm.y * t0;\r\n                projz = z + norm.z * t0;\r\n\r\n                tmpx = projx - x;\r\n                tmpy = projy - y;\r\n                tmpz = projz - z;\r\n                tmpDistance = tmpx * tmpx + tmpy * tmpy + tmpz * tmpz; // compute length between (x, y, z) and its projection on the facet\r\n                if (tmpDistance < shortest) {\r\n                    // just keep the closest facet to (x, y, z)\r\n                    shortest = tmpDistance;\r\n                    closest = fib;\r\n                    if (projected) {\r\n                        projected.x = projx;\r\n                        projected.y = projy;\r\n                        projected.z = projz;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return closest;\r\n    }\r\n\r\n    /**\r\n     * Returns the object \"parameter\" set with all the expected parameters for facetData computation by ComputeNormals()\r\n     * @returns the parameters\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetDataParameters(): any {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetParameters;\r\n    }\r\n\r\n    /**\r\n     * Disables the feature FacetData and frees the related memory\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public disableFacetData(): AbstractMesh {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (facetData.facetDataEnabled) {\r\n            facetData.facetDataEnabled = false;\r\n            facetData.facetPositions = [] as Vector3[];\r\n            facetData.facetNormals = [] as Vector3[];\r\n            facetData.facetPartitioning = new Array<number[]>();\r\n            facetData.facetParameters = null;\r\n            facetData.depthSortedIndices = new Uint32Array(0);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the AbstractMesh indices array\r\n     * @param indices defines the data source\r\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\r\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates new normals data for the mesh\r\n     * @param updatable defines if the normal vertex buffer must be flagged as updatable\r\n     * @returns the current mesh\r\n     */\r\n    public createNormals(updatable: boolean): AbstractMesh {\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        const indices = this.getIndices();\r\n        let normals: FloatArray;\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            normals = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\r\n        } else {\r\n            normals = [];\r\n        }\r\n\r\n        VertexData.ComputeNormals(positions, indices, normals, { useRightHandedSystem: this.getScene().useRightHandedSystem });\r\n        this.setVerticesData(VertexBuffer.NormalKind, normals, updatable);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Align the mesh with a normal\r\n     * @param normal defines the normal to use\r\n     * @param upDirection can be used to redefined the up vector to use (will use the (0, 1, 0) by default)\r\n     * @returns the current mesh\r\n     */\r\n    public alignWithNormal(normal: Vector3, upDirection?: Vector3): AbstractMesh {\r\n        if (!upDirection) {\r\n            upDirection = Axis.Y;\r\n        }\r\n\r\n        const axisX = TmpVectors.Vector3[0];\r\n        const axisZ = TmpVectors.Vector3[1];\r\n        Vector3.CrossToRef(upDirection, normal, axisZ);\r\n        Vector3.CrossToRef(normal, axisZ, axisX);\r\n\r\n        if (this.rotationQuaternion) {\r\n            Quaternion.RotationQuaternionFromAxisToRef(axisX, normal, axisZ, this.rotationQuaternion);\r\n        } else {\r\n            Vector3.RotationFromAxisToRef(axisX, normal, axisZ, this.rotation);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkOcclusionQuery(): boolean {\r\n        // Will be replaced by correct code if Occlusion queries are referenced\r\n        return false;\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Disables the mesh edge rendering mode\r\n     * @returns the currentAbstractMesh\r\n     */\r\n    disableEdgesRendering(): AbstractMesh {\r\n        throw _WarnImport(\"EdgesRenderer\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Enables the edge rendering mode on the mesh.\r\n     * This mode makes the mesh edges visible\r\n     * @param epsilon defines the maximal distance between two angles to detect a face\r\n     * @param checkVerticesInsteadOfIndices indicates that we should check vertex list directly instead of faces\r\n     * @param options options to the edge renderer\r\n     * @returns the currentAbstractMesh\r\n     * @see https://www.babylonjs-playground.com/#19O9TU#0\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    enableEdgesRendering(epsilon?: number, checkVerticesInsteadOfIndices?: boolean, options?: IEdgesRendererOptions): AbstractMesh {\r\n        throw _WarnImport(\"EdgesRenderer\");\r\n    }\r\n\r\n    /**\r\n     * This function returns all of the particle systems in the scene that use the mesh as an emitter.\r\n     * @returns an array of particle systems in the scene that use the mesh as an emitter\r\n     */\r\n    public getConnectedParticleSystems(): IParticleSystem[] {\r\n        return this._scene.particleSystems.filter((particleSystem) => particleSystem.emitter === this);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.AbstractMesh\", AbstractMesh);\r\n", "import type { IViewportLike } from \"./math.like\";\r\n\r\n/**\r\n * Class used to represent a viewport on screen\r\n */\r\nexport class Viewport implements IViewportLike {\r\n    /**\r\n     * Creates a Viewport object located at (x, y) and sized (width, height)\r\n     * @param x defines viewport left coordinate\r\n     * @param y defines viewport top coordinate\r\n     * @param width defines the viewport width\r\n     * @param height defines the viewport height\r\n     */\r\n    constructor(\r\n        /** viewport left coordinate */\r\n        public x: number,\r\n        /** viewport top coordinate */\r\n        public y: number,\r\n        /**viewport width */\r\n        public width: number,\r\n        /** viewport height */\r\n        public height: number\r\n    ) {}\r\n\r\n    /**\r\n     * Creates a new viewport using absolute sizing (from 0-> width, 0-> height instead of 0->1)\r\n     * @param renderWidth defines the rendering width\r\n     * @param renderHeight defines the rendering height\r\n     * @returns a new Viewport\r\n     */\r\n    public toGlobal(renderWidth: number, renderHeight: number): Viewport {\r\n        return new Viewport(this.x * renderWidth, this.y * renderHeight, this.width * renderWidth, this.height * renderHeight);\r\n    }\r\n\r\n    /**\r\n     * Stores absolute viewport value into a target viewport (from 0-> width, 0-> height instead of 0->1)\r\n     * @param renderWidth defines the rendering width\r\n     * @param renderHeight defines the rendering height\r\n     * @param ref defines the target viewport\r\n     * @returns the current viewport\r\n     */\r\n    public toGlobalToRef(renderWidth: number, renderHeight: number, ref: Viewport): Viewport {\r\n        ref.x = this.x * renderWidth;\r\n        ref.y = this.y * renderHeight;\r\n        ref.width = this.width * renderWidth;\r\n        ref.height = this.height * renderHeight;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Viewport copied from the current one\r\n     * @returns a new Viewport\r\n     */\r\n    public clone(): Viewport {\r\n        return new Viewport(this.x, this.y, this.width, this.height);\r\n    }\r\n}\r\n", "import { serialize, serializeAsVector3 } from \"../Misc/decorators\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { DeepImmutable, Nullable } from \"../types\";\r\nimport type { CameraInputsManager } from \"./cameraInputsManager\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3, Quaternion } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { ICullable } from \"../Culling/boundingInfo\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { Viewport } from \"../Maths/math.viewport\";\r\nimport { Frustum } from \"../Maths/math.frustum\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport type { PostProcess } from \"../PostProcesses/postProcess\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { FreeCamera } from \"./freeCamera\";\r\nimport type { TargetCamera } from \"./targetCamera\";\r\nimport type { Ray } from \"../Culling/ray\";\r\nimport type { ArcRotateCamera } from \"./arcRotateCamera\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\n\r\n/**\r\n * Oblique projection values\r\n */\r\nexport interface IObliqueParams {\r\n    /** The angle of the plane */\r\n    angle: number;\r\n    /** The length of the plane */\r\n    length: number;\r\n    /** The offset of the plane */\r\n    offset: number;\r\n}\r\n\r\n/**\r\n * This is the base class of all the camera used in the application.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n */\r\nexport class Camera extends Node {\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _CreateDefaultParsedCamera = (name: string, scene: Scene): Camera => {\r\n        throw _WarnImport(\"UniversalCamera\");\r\n    };\r\n\r\n    /**\r\n     * This is the default projection mode used by the cameras.\r\n     * It helps recreating a feeling of perspective and better appreciate depth.\r\n     * This is the best way to simulate real life cameras.\r\n     */\r\n    public static readonly PERSPECTIVE_CAMERA = Constants.PERSPECTIVE_CAMERA;\r\n    /**\r\n     * This helps creating camera with an orthographic mode.\r\n     * Orthographic is commonly used in engineering as a means to produce object specifications that communicate dimensions unambiguously, each line of 1 unit length (cm, meter..whatever) will appear to have the same length everywhere on the drawing. This allows the drafter to dimension only a subset of lines and let the reader know that other lines of that length on the drawing are also that length in reality. Every parallel line in the drawing is also parallel in the object.\r\n     */\r\n    public static readonly ORTHOGRAPHIC_CAMERA = Constants.ORTHOGRAPHIC_CAMERA;\r\n\r\n    /**\r\n     * This is the default FOV mode for perspective cameras.\r\n     * This setting aligns the upper and lower bounds of the viewport to the upper and lower bounds of the camera frustum.\r\n     */\r\n    public static readonly FOVMODE_VERTICAL_FIXED = Constants.FOVMODE_VERTICAL_FIXED;\r\n    /**\r\n     * This setting aligns the left and right bounds of the viewport to the left and right bounds of the camera frustum.\r\n     */\r\n    public static readonly FOVMODE_HORIZONTAL_FIXED = Constants.FOVMODE_HORIZONTAL_FIXED;\r\n\r\n    /**\r\n     * This specifies there is no need for a camera rig.\r\n     * Basically only one eye is rendered corresponding to the camera.\r\n     */\r\n    public static readonly RIG_MODE_NONE = Constants.RIG_MODE_NONE;\r\n    /**\r\n     * Simulates a camera Rig with one blue eye and one red eye.\r\n     * This can be use with 3d blue and red glasses.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_ANAGLYPH = Constants.RIG_MODE_STEREOSCOPIC_ANAGLYPH;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered side by side with a parallel target.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL = Constants.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered side by side with a none parallel target.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED = Constants.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered over under each other.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_OVERUNDER = Constants.RIG_MODE_STEREOSCOPIC_OVERUNDER;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered on successive lines interlaced for passive 3d monitors.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_INTERLACED = Constants.RIG_MODE_STEREOSCOPIC_INTERLACED;\r\n    /**\r\n     * Defines that both eyes of the camera should be renderered in a VR mode (carbox).\r\n     */\r\n    public static readonly RIG_MODE_VR = Constants.RIG_MODE_VR;\r\n    /**\r\n     * Custom rig mode allowing rig cameras to be populated manually with any number of cameras\r\n     */\r\n    public static readonly RIG_MODE_CUSTOM = Constants.RIG_MODE_CUSTOM;\r\n\r\n    /**\r\n     * Defines if by default attaching controls should prevent the default javascript event to continue.\r\n     */\r\n    public static ForceAttachControlToAlwaysPreventDefault = false;\r\n\r\n    /**\r\n     * Define the input manager associated with the camera.\r\n     */\r\n    public inputs: CameraInputsManager<Camera>;\r\n\r\n    /** @internal */\r\n    @serializeAsVector3(\"position\")\r\n    public _position = Vector3.Zero();\r\n\r\n    /**\r\n     * Define the current local position of the camera in the scene\r\n     */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(newPosition: Vector3) {\r\n        this._position = newPosition;\r\n    }\r\n\r\n    @serializeAsVector3(\"upVector\")\r\n    protected _upVector = Vector3.Up();\r\n\r\n    /**\r\n     * The vector the camera should consider as up.\r\n     * (default is Vector3(0, 1, 0) aka Vector3.Up())\r\n     */\r\n    public set upVector(vec: Vector3) {\r\n        this._upVector = vec;\r\n    }\r\n\r\n    public get upVector() {\r\n        return this._upVector;\r\n    }\r\n\r\n    /**\r\n     * Object containing oblique projection values (only used with ORTHOGRAPHIC_CAMERA)\r\n     */\r\n    public oblique: Nullable<IObliqueParams> = null;\r\n\r\n    /**\r\n     * The screen area in scene units squared\r\n     */\r\n    public get screenArea(): number {\r\n        let x = 0;\r\n        let y = 0;\r\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\r\n            if (this.fovMode === Camera.FOVMODE_VERTICAL_FIXED) {\r\n                y = this.minZ * 2 * Math.tan(this.fov / 2);\r\n                x = this.getEngine().getAspectRatio(this) * y;\r\n            } else {\r\n                x = this.minZ * 2 * Math.tan(this.fov / 2);\r\n                y = x / this.getEngine().getAspectRatio(this);\r\n            }\r\n        } else {\r\n            const halfWidth = this.getEngine().getRenderWidth() / 2.0;\r\n            const halfHeight = this.getEngine().getRenderHeight() / 2.0;\r\n\r\n            x = (this.orthoRight ?? halfWidth) - (this.orthoLeft ?? -halfWidth);\r\n            y = (this.orthoTop ?? halfHeight) - (this.orthoBottom ?? -halfHeight);\r\n        }\r\n\r\n        return x * y;\r\n    }\r\n\r\n    private _orthoLeft: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define the current limit on the left side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    public set orthoLeft(value: Nullable<number>) {\r\n        this._orthoLeft = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoLeft = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoLeft(): Nullable<number> {\r\n        return this._orthoLeft;\r\n    }\r\n\r\n    private _orthoRight: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define the current limit on the right side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    public set orthoRight(value: Nullable<number>) {\r\n        this._orthoRight = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoRight = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoRight(): Nullable<number> {\r\n        return this._orthoRight;\r\n    }\r\n\r\n    private _orthoBottom: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define the current limit on the bottom side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    public set orthoBottom(value: Nullable<number>) {\r\n        this._orthoBottom = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoBottom = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoBottom(): Nullable<number> {\r\n        return this._orthoBottom;\r\n    }\r\n\r\n    private _orthoTop: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define the current limit on the top side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    public set orthoTop(value: Nullable<number>) {\r\n        this._orthoTop = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoTop = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoTop(): Nullable<number> {\r\n        return this._orthoTop;\r\n    }\r\n\r\n    /**\r\n     * Field Of View is set in Radians. (default is 0.8)\r\n     */\r\n    @serialize()\r\n    public fov = 0.8;\r\n\r\n    /**\r\n     * Projection plane tilt around the X axis (horizontal), set in Radians. (default is 0)\r\n     * Can be used to make vertical lines in world space actually vertical on the screen.\r\n     * See https://forum.babylonjs.com/t/add-vertical-shift-to-3ds-max-exporter-babylon-cameras/17480\r\n     */\r\n    @serialize()\r\n    public projectionPlaneTilt = 0;\r\n\r\n    /**\r\n     * Define the minimum distance the camera can see from.\r\n     * This is important to note that the depth buffer are not infinite and the closer it starts\r\n     * the more your scene might encounter depth fighting issue.\r\n     */\r\n    @serialize()\r\n    public minZ = 1;\r\n\r\n    /**\r\n     * Define the maximum distance the camera can see to.\r\n     * This is important to note that the depth buffer are not infinite and the further it end\r\n     * the more your scene might encounter depth fighting issue.\r\n     */\r\n    @serialize()\r\n    public maxZ = 10000.0;\r\n\r\n    /**\r\n     * Define the default inertia of the camera.\r\n     * This helps giving a smooth feeling to the camera movement.\r\n     */\r\n    @serialize()\r\n    public inertia = 0.9;\r\n\r\n    private _mode = Camera.PERSPECTIVE_CAMERA;\r\n\r\n    /**\r\n     * Define the mode of the camera (Camera.PERSPECTIVE_CAMERA or Camera.ORTHOGRAPHIC_CAMERA)\r\n     */\r\n    set mode(mode: number) {\r\n        this._mode = mode;\r\n\r\n        // Pass the mode down to the rig cameras\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.mode = mode;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    get mode(): number {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Define whether the camera is intermediate.\r\n     * This is useful to not present the output directly to the screen in case of rig without post process for instance\r\n     */\r\n    public isIntermediate = false;\r\n\r\n    /**\r\n     * Define the viewport of the camera.\r\n     * This correspond to the portion of the screen the camera will render to in normalized 0 to 1 unit.\r\n     */\r\n    public viewport = new Viewport(0, 0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Restricts the camera to viewing objects with the same layerMask.\r\n     * A camera with a layerMask of 1 will render mesh.layerMask & camera.layerMask!== 0\r\n     */\r\n    @serialize()\r\n    public layerMask: number = 0x0fffffff;\r\n\r\n    /**\r\n     * fovMode sets the camera frustum bounds to the viewport bounds. (default is FOVMODE_VERTICAL_FIXED)\r\n     */\r\n    @serialize()\r\n    public fovMode: number = Camera.FOVMODE_VERTICAL_FIXED;\r\n\r\n    /**\r\n     * Rig mode of the camera.\r\n     * This is useful to create the camera with two \"eyes\" instead of one to create VR or stereoscopic scenes.\r\n     * This is normally controlled byt the camera themselves as internal use.\r\n     */\r\n    @serialize()\r\n    public cameraRigMode = Camera.RIG_MODE_NONE;\r\n\r\n    /**\r\n     * Defines the distance between both \"eyes\" in case of a RIG\r\n     */\r\n    @serialize()\r\n    public interaxialDistance: number;\r\n\r\n    /**\r\n     * Defines if stereoscopic rendering is done side by side or over under.\r\n     */\r\n    @serialize()\r\n    public isStereoscopicSideBySide: boolean;\r\n\r\n    /**\r\n     * Defines the list of custom render target which are rendered to and then used as the input to this camera's render. Eg. display another camera view on a TV in the main scene\r\n     * This is pretty helpful if you wish to make a camera render to a texture you could reuse somewhere\r\n     * else in the scene. (Eg. security camera)\r\n     *\r\n     * To change the final output target of the camera, camera.outputRenderTarget should be used instead (eg. webXR renders to a render target corresponding to an HMD)\r\n     */\r\n    public customRenderTargets: RenderTargetTexture[] = [];\r\n    /**\r\n     * When set, the camera will render to this render target instead of the default canvas\r\n     *\r\n     * If the desire is to use the output of a camera as a texture in the scene consider using camera.customRenderTargets instead\r\n     */\r\n    public outputRenderTarget: Nullable<RenderTargetTexture> = null;\r\n\r\n    /**\r\n     * Observable triggered when the camera view matrix has changed.\r\n     */\r\n    public onViewMatrixChangedObservable = new Observable<Camera>();\r\n    /**\r\n     * Observable triggered when the camera Projection matrix has changed.\r\n     */\r\n    public onProjectionMatrixChangedObservable = new Observable<Camera>();\r\n    /**\r\n     * Observable triggered when the inputs have been processed.\r\n     */\r\n    public onAfterCheckInputsObservable = new Observable<Camera>();\r\n    /**\r\n     * Observable triggered when reset has been called and applied to the camera.\r\n     */\r\n    public onRestoreStateObservable = new Observable<Camera>();\r\n\r\n    /**\r\n     * Is this camera a part of a rig system?\r\n     */\r\n    public isRigCamera: boolean = false;\r\n\r\n    /**\r\n     * If isRigCamera set to true this will be set with the parent camera.\r\n     * The parent camera is not (!) necessarily the .parent of this camera (like in the case of XR)\r\n     */\r\n    public rigParent?: Camera;\r\n\r\n    /**\r\n     * Render pass id used by the camera to render into the main framebuffer\r\n     */\r\n    public renderPassId: number;\r\n\r\n    private _hasMoved = false;\r\n\r\n    /**\r\n     * Gets a flag indicating that the camera has moved in some way since the last call to Camera.update()\r\n     */\r\n    public get hasMoved() {\r\n        return this._hasMoved;\r\n    }\r\n\r\n    /** @internal */\r\n    public _cameraRigParams: any;\r\n    /** @internal */\r\n    public _rigCameras = new Array<Camera>();\r\n    /** @internal */\r\n    public _rigPostProcess: Nullable<PostProcess>;\r\n\r\n    /** @internal */\r\n    public _skipRendering = false;\r\n\r\n    /** @internal */\r\n    public _projectionMatrix = new Matrix();\r\n\r\n    /** @internal */\r\n    public _postProcesses = new Array<Nullable<PostProcess>>();\r\n\r\n    /** @internal */\r\n    public _activeMeshes = new SmartArray<AbstractMesh>(256);\r\n\r\n    protected _globalPosition = Vector3.Zero();\r\n\r\n    /** @internal */\r\n    public _computedViewMatrix = Matrix.Identity();\r\n    private _doNotComputeProjectionMatrix = false;\r\n    private _transformMatrix = Matrix.Zero();\r\n    private _frustumPlanes: Plane[];\r\n    private _refreshFrustumPlanes = true;\r\n    private _storedFov: number;\r\n    private _stateStored: boolean;\r\n    private _absoluteRotation: Quaternion = Quaternion.Identity();\r\n\r\n    /**\r\n     * Instantiates a new camera object.\r\n     * This should not be used directly but through the inherited cameras: ArcRotate, Free...\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n     * @param name Defines the name of the camera in the scene\r\n     * @param position Defines the position of the camera\r\n     * @param scene Defines the scene the camera belongs too\r\n     * @param setActiveOnSceneIfNoneActive Defines if the camera should be set as active after creation if no other camera have been defined in the scene\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene, setActiveOnSceneIfNoneActive = true) {\r\n        super(name, scene);\r\n\r\n        this.getScene().addCamera(this);\r\n\r\n        if (setActiveOnSceneIfNoneActive && !this.getScene().activeCamera) {\r\n            this.getScene().activeCamera = this;\r\n        }\r\n\r\n        this.position = position;\r\n        this.renderPassId = this.getScene().getEngine().createRenderPassId(`Camera ${name}`);\r\n    }\r\n\r\n    /**\r\n     * Store current camera state (fov, position, etc..)\r\n     * @returns the camera\r\n     */\r\n    public storeState(): Camera {\r\n        this._stateStored = true;\r\n        this._storedFov = this.fov;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Restores the camera state values if it has been stored. You must call storeState() first\r\n     * @returns true if restored and false otherwise\r\n     */\r\n    protected _restoreStateValues(): boolean {\r\n        if (!this._stateStored) {\r\n            return false;\r\n        }\r\n\r\n        this.fov = this._storedFov;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Restored camera state. You must call storeState() first.\r\n     * @returns true if restored and false otherwise\r\n     */\r\n    public restoreState(): boolean {\r\n        if (this._restoreStateValues()) {\r\n            this.onRestoreStateObservable.notifyObservers(this);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the camera.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"Camera\";\r\n    }\r\n\r\n    /** @internal */\r\n    public readonly _isCamera = true;\r\n\r\n    /**\r\n     * Gets a string representation of the camera useful for debug purpose.\r\n     * @param fullDetails Defines that a more verbose level of logging is required\r\n     * @returns the string representation\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name;\r\n        ret += \", type: \" + this.getClassName();\r\n        if (this.animations) {\r\n            for (let i = 0; i < this.animations.length; i++) {\r\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Automatically tilts the projection plane, using `projectionPlaneTilt`, to correct the perspective effect on vertical lines.\r\n     */\r\n    public applyVerticalCorrection() {\r\n        const rot = this.absoluteRotation.toEulerAngles();\r\n\r\n        this.projectionPlaneTilt = this._scene.useRightHandedSystem ? -rot.x : rot.x;\r\n    }\r\n\r\n    /**\r\n     * Gets the current world space position of the camera.\r\n     */\r\n    public get globalPosition(): Vector3 {\r\n        return this._globalPosition;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of active meshes this frame (meshes no culled or excluded by lod s in the frame)\r\n     * @returns the active meshe list\r\n     */\r\n    public getActiveMeshes(): SmartArray<AbstractMesh> {\r\n        return this._activeMeshes;\r\n    }\r\n\r\n    /**\r\n     * Check whether a mesh is part of the current active mesh list of the camera\r\n     * @param mesh Defines the mesh to check\r\n     * @returns true if active, false otherwise\r\n     */\r\n    public isActiveMesh(mesh: Mesh): boolean {\r\n        return this._activeMeshes.indexOf(mesh) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Is this camera ready to be used/rendered\r\n     * @param completeCheck defines if a complete check (including post processes) has to be done (false by default)\r\n     * @returns true if the camera is ready\r\n     */\r\n    public isReady(completeCheck = false): boolean {\r\n        if (completeCheck) {\r\n            for (const pp of this._postProcesses) {\r\n                if (pp && !pp.isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return super.isReady(completeCheck);\r\n    }\r\n\r\n    /** @internal */\r\n    public _initCache() {\r\n        super._initCache();\r\n\r\n        this._cache.position = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._cache.upVector = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\r\n        this._cache.mode = undefined;\r\n        this._cache.minZ = undefined;\r\n        this._cache.maxZ = undefined;\r\n\r\n        this._cache.fov = undefined;\r\n        this._cache.fovMode = undefined;\r\n        this._cache.aspectRatio = undefined;\r\n\r\n        this._cache.orthoLeft = undefined;\r\n        this._cache.orthoRight = undefined;\r\n        this._cache.orthoBottom = undefined;\r\n        this._cache.orthoTop = undefined;\r\n        this._cache.obliqueAngle = undefined;\r\n        this._cache.obliqueLength = undefined;\r\n        this._cache.obliqueOffset = undefined;\r\n        this._cache.renderWidth = undefined;\r\n        this._cache.renderHeight = undefined;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateCache(ignoreParentClass?: boolean): void {\r\n        if (!ignoreParentClass) {\r\n            super._updateCache();\r\n        }\r\n\r\n        this._cache.position.copyFrom(this.position);\r\n        this._cache.upVector.copyFrom(this.upVector);\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronized(): boolean {\r\n        return this._isSynchronizedViewMatrix() && this._isSynchronizedProjectionMatrix();\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronizedViewMatrix(): boolean {\r\n        if (!super._isSynchronized()) {\r\n            return false;\r\n        }\r\n\r\n        return this._cache.position.equals(this.position) && this._cache.upVector.equals(this.upVector) && this.isSynchronizedWithParent();\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronizedProjectionMatrix(): boolean {\r\n        let isSynchronized = this._cache.mode === this.mode && this._cache.minZ === this.minZ && this._cache.maxZ === this.maxZ;\r\n\r\n        if (!isSynchronized) {\r\n            return false;\r\n        }\r\n\r\n        const engine = this.getEngine();\r\n\r\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\r\n            isSynchronized =\r\n                this._cache.fov === this.fov &&\r\n                this._cache.fovMode === this.fovMode &&\r\n                this._cache.aspectRatio === engine.getAspectRatio(this) &&\r\n                this._cache.projectionPlaneTilt === this.projectionPlaneTilt;\r\n        } else {\r\n            isSynchronized =\r\n                this._cache.orthoLeft === this.orthoLeft &&\r\n                this._cache.orthoRight === this.orthoRight &&\r\n                this._cache.orthoBottom === this.orthoBottom &&\r\n                this._cache.orthoTop === this.orthoTop &&\r\n                this._cache.renderWidth === engine.getRenderWidth() &&\r\n                this._cache.renderHeight === engine.getRenderHeight();\r\n\r\n            if (this.oblique) {\r\n                isSynchronized =\r\n                    isSynchronized &&\r\n                    this._cache.obliqueAngle === this.oblique.angle &&\r\n                    this._cache.obliqueLength === this.oblique.length &&\r\n                    this._cache.obliqueOffset === this.oblique.offset;\r\n            }\r\n        }\r\n\r\n        return isSynchronized;\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     * BACK COMPAT SIGNATURE ONLY.\r\n     */\r\n    public attachControl(ignored: any, noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * This function is here because typescript removes the typing of the last function.\r\n     * @param _ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param _noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(_ignored?: any, _noPreventDefault?: boolean): void {}\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     */\r\n    public detachControl(ignored?: any): void;\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * This function is here because typescript removes the typing of the last function.\r\n     * @param _ignored defines an ignored parameter kept for backward compatibility.\r\n     */\r\n    public detachControl(_ignored?: any): void {}\r\n\r\n    /**\r\n     * Update the camera state according to the different inputs gathered during the frame.\r\n     */\r\n    public update(): void {\r\n        this._hasMoved = false;\r\n        this._checkInputs();\r\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            this._updateRigCameras();\r\n        }\r\n\r\n        // Attempt to update the camera's view and projection matrices.\r\n        // This call is being made because these matrices are no longer being updated\r\n        // as a part of the picking ray process (in addition to scene.render).\r\n        this.getViewMatrix();\r\n        this.getProjectionMatrix();\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkInputs(): void {\r\n        this.onAfterCheckInputsObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @internal */\r\n    public get rigCameras(): Camera[] {\r\n        return this._rigCameras;\r\n    }\r\n\r\n    /**\r\n     * Gets the post process used by the rig cameras\r\n     */\r\n    public get rigPostProcess(): Nullable<PostProcess> {\r\n        return this._rigPostProcess;\r\n    }\r\n\r\n    /**\r\n     * Internal, gets the first post process.\r\n     * @returns the first post process to be run on this camera.\r\n     */\r\n    public _getFirstPostProcess(): Nullable<PostProcess> {\r\n        for (let ppIndex = 0; ppIndex < this._postProcesses.length; ppIndex++) {\r\n            if (this._postProcesses[ppIndex] !== null) {\r\n                return this._postProcesses[ppIndex];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _cascadePostProcessesToRigCams(): void {\r\n        // invalidate framebuffer\r\n        const firstPostProcess = this._getFirstPostProcess();\r\n        if (firstPostProcess) {\r\n            firstPostProcess.markTextureDirty();\r\n        }\r\n\r\n        // glue the rigPostProcess to the end of the user postprocesses & assign to each sub-camera\r\n        for (let i = 0, len = this._rigCameras.length; i < len; i++) {\r\n            const cam = this._rigCameras[i];\r\n            const rigPostProcess = cam._rigPostProcess;\r\n\r\n            // for VR rig, there does not have to be a post process\r\n            if (rigPostProcess) {\r\n                const isPass = rigPostProcess.getEffectName() === \"pass\";\r\n                if (isPass) {\r\n                    // any rig which has a PassPostProcess for rig[0], cannot be isIntermediate when there are also user postProcesses\r\n                    cam.isIntermediate = this._postProcesses.length === 0;\r\n                }\r\n                cam._postProcesses = this._postProcesses.slice(0).concat(rigPostProcess);\r\n                rigPostProcess.markTextureDirty();\r\n            } else {\r\n                cam._postProcesses = this._postProcesses.slice(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach a post process to the camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#attach-postprocess\r\n     * @param postProcess The post process to attach to the camera\r\n     * @param insertAt The position of the post process in case several of them are in use in the scene\r\n     * @returns the position the post process has been inserted at\r\n     */\r\n    public attachPostProcess(postProcess: PostProcess, insertAt: Nullable<number> = null): number {\r\n        if (!postProcess.isReusable() && this._postProcesses.indexOf(postProcess) > -1) {\r\n            Logger.Error(\"You're trying to reuse a post process not defined as reusable.\");\r\n            return 0;\r\n        }\r\n\r\n        if (insertAt == null || insertAt < 0) {\r\n            this._postProcesses.push(postProcess);\r\n        } else if (this._postProcesses[insertAt] === null) {\r\n            this._postProcesses[insertAt] = postProcess;\r\n        } else {\r\n            this._postProcesses.splice(insertAt, 0, postProcess);\r\n        }\r\n        this._cascadePostProcessesToRigCams(); // also ensures framebuffer invalidated\r\n\r\n        // Update prePass\r\n        if (this._scene.prePassRenderer) {\r\n            this._scene.prePassRenderer.markAsDirty();\r\n        }\r\n\r\n        return this._postProcesses.indexOf(postProcess);\r\n    }\r\n\r\n    /**\r\n     * Detach a post process to the camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#attach-postprocess\r\n     * @param postProcess The post process to detach from the camera\r\n     */\r\n    public detachPostProcess(postProcess: PostProcess): void {\r\n        const idx = this._postProcesses.indexOf(postProcess);\r\n        if (idx !== -1) {\r\n            this._postProcesses[idx] = null;\r\n        }\r\n\r\n        // Update prePass\r\n        if (this._scene.prePassRenderer) {\r\n            this._scene.prePassRenderer.markAsDirty();\r\n        }\r\n\r\n        this._cascadePostProcessesToRigCams(); // also ensures framebuffer invalidated\r\n    }\r\n\r\n    /**\r\n     * Gets the current world matrix of the camera\r\n     * @returns the world matrix\r\n     */\r\n    public getWorldMatrix(): Matrix {\r\n        if (this._isSynchronizedViewMatrix()) {\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        // Getting the view matrix will also compute the world matrix.\r\n        this.getViewMatrix();\r\n\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getViewMatrix(): Matrix {\r\n        return Matrix.Identity();\r\n    }\r\n\r\n    /**\r\n     * Gets the current view matrix of the camera.\r\n     * @param force forces the camera to recompute the matrix without looking at the cached state\r\n     * @returns the view matrix\r\n     */\r\n    public getViewMatrix(force?: boolean): Matrix {\r\n        if (!force && this._isSynchronizedViewMatrix()) {\r\n            return this._computedViewMatrix;\r\n        }\r\n\r\n        this._hasMoved = true;\r\n\r\n        this.updateCache();\r\n        this._computedViewMatrix = this._getViewMatrix();\r\n\r\n        this._currentRenderId = this.getScene().getRenderId();\r\n        this._childUpdateId++;\r\n\r\n        this._refreshFrustumPlanes = true;\r\n\r\n        if (this._cameraRigParams && this._cameraRigParams.vrPreViewMatrix) {\r\n            this._computedViewMatrix.multiplyToRef(this._cameraRigParams.vrPreViewMatrix, this._computedViewMatrix);\r\n        }\r\n\r\n        // Notify parent camera if rig camera is changed\r\n        if (this.parent && (this.parent as Camera).onViewMatrixChangedObservable) {\r\n            (this.parent as Camera).onViewMatrixChangedObservable.notifyObservers(this.parent as Camera);\r\n        }\r\n\r\n        this.onViewMatrixChangedObservable.notifyObservers(this);\r\n\r\n        this._computedViewMatrix.invertToRef(this._worldMatrix);\r\n\r\n        return this._computedViewMatrix;\r\n    }\r\n\r\n    /**\r\n     * Freeze the projection matrix.\r\n     * It will prevent the cache check of the camera projection compute and can speed up perf\r\n     * if no parameter of the camera are meant to change\r\n     * @param projection Defines manually a projection if necessary\r\n     */\r\n    public freezeProjectionMatrix(projection?: Matrix): void {\r\n        this._doNotComputeProjectionMatrix = true;\r\n        if (projection !== undefined) {\r\n            this._projectionMatrix = projection;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unfreeze the projection matrix if it has previously been freezed by freezeProjectionMatrix.\r\n     */\r\n    public unfreezeProjectionMatrix(): void {\r\n        this._doNotComputeProjectionMatrix = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the current projection matrix of the camera.\r\n     * @param force forces the camera to recompute the matrix without looking at the cached state\r\n     * @returns the projection matrix\r\n     */\r\n    public getProjectionMatrix(force?: boolean): Matrix {\r\n        if (this._doNotComputeProjectionMatrix || (!force && this._isSynchronizedProjectionMatrix())) {\r\n            return this._projectionMatrix;\r\n        }\r\n\r\n        // Cache\r\n        this._cache.mode = this.mode;\r\n        this._cache.minZ = this.minZ;\r\n        this._cache.maxZ = this.maxZ;\r\n\r\n        // Matrix\r\n        this._refreshFrustumPlanes = true;\r\n\r\n        const engine = this.getEngine();\r\n        const scene = this.getScene();\r\n        const reverseDepth = engine.useReverseDepthBuffer;\r\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\r\n            this._cache.fov = this.fov;\r\n            this._cache.fovMode = this.fovMode;\r\n            this._cache.aspectRatio = engine.getAspectRatio(this);\r\n            this._cache.projectionPlaneTilt = this.projectionPlaneTilt;\r\n\r\n            if (this.minZ <= 0) {\r\n                this.minZ = 0.1;\r\n            }\r\n\r\n            let getProjectionMatrix: (\r\n                fov: number,\r\n                aspect: number,\r\n                znear: number,\r\n                zfar: number,\r\n                result: Matrix,\r\n                isVerticalFovFixed: boolean,\r\n                halfZRange: boolean,\r\n                projectionPlaneTilt: number,\r\n                reverseDepthBufferMode: boolean\r\n            ) => void;\r\n            if (scene.useRightHandedSystem) {\r\n                getProjectionMatrix = Matrix.PerspectiveFovRHToRef;\r\n            } else {\r\n                getProjectionMatrix = Matrix.PerspectiveFovLHToRef;\r\n            }\r\n\r\n            getProjectionMatrix(\r\n                this.fov,\r\n                engine.getAspectRatio(this),\r\n                reverseDepth ? this.maxZ : this.minZ,\r\n                reverseDepth ? this.minZ : this.maxZ,\r\n                this._projectionMatrix,\r\n                this.fovMode === Camera.FOVMODE_VERTICAL_FIXED,\r\n                engine.isNDCHalfZRange,\r\n                this.projectionPlaneTilt,\r\n                reverseDepth\r\n            );\r\n        } else {\r\n            const halfWidth = engine.getRenderWidth() / 2.0;\r\n            const halfHeight = engine.getRenderHeight() / 2.0;\r\n            if (scene.useRightHandedSystem) {\r\n                if (this.oblique) {\r\n                    Matrix.ObliqueOffCenterRHToRef(\r\n                        this.orthoLeft ?? -halfWidth,\r\n                        this.orthoRight ?? halfWidth,\r\n                        this.orthoBottom ?? -halfHeight,\r\n                        this.orthoTop ?? halfHeight,\r\n                        reverseDepth ? this.maxZ : this.minZ,\r\n                        reverseDepth ? this.minZ : this.maxZ,\r\n                        this.oblique.length,\r\n                        this.oblique.angle,\r\n                        this._computeObliqueDistance(this.oblique.offset),\r\n                        this._projectionMatrix,\r\n                        engine.isNDCHalfZRange\r\n                    );\r\n                } else {\r\n                    Matrix.OrthoOffCenterRHToRef(\r\n                        this.orthoLeft ?? -halfWidth,\r\n                        this.orthoRight ?? halfWidth,\r\n                        this.orthoBottom ?? -halfHeight,\r\n                        this.orthoTop ?? halfHeight,\r\n                        reverseDepth ? this.maxZ : this.minZ,\r\n                        reverseDepth ? this.minZ : this.maxZ,\r\n                        this._projectionMatrix,\r\n                        engine.isNDCHalfZRange\r\n                    );\r\n                }\r\n            } else {\r\n                if (this.oblique) {\r\n                    Matrix.ObliqueOffCenterLHToRef(\r\n                        this.orthoLeft ?? -halfWidth,\r\n                        this.orthoRight ?? halfWidth,\r\n                        this.orthoBottom ?? -halfHeight,\r\n                        this.orthoTop ?? halfHeight,\r\n                        reverseDepth ? this.maxZ : this.minZ,\r\n                        reverseDepth ? this.minZ : this.maxZ,\r\n                        this.oblique.length,\r\n                        this.oblique.angle,\r\n                        this._computeObliqueDistance(this.oblique.offset),\r\n                        this._projectionMatrix,\r\n                        engine.isNDCHalfZRange\r\n                    );\r\n                } else {\r\n                    Matrix.OrthoOffCenterLHToRef(\r\n                        this.orthoLeft ?? -halfWidth,\r\n                        this.orthoRight ?? halfWidth,\r\n                        this.orthoBottom ?? -halfHeight,\r\n                        this.orthoTop ?? halfHeight,\r\n                        reverseDepth ? this.maxZ : this.minZ,\r\n                        reverseDepth ? this.minZ : this.maxZ,\r\n                        this._projectionMatrix,\r\n                        engine.isNDCHalfZRange\r\n                    );\r\n                }\r\n            }\r\n\r\n            this._cache.orthoLeft = this.orthoLeft;\r\n            this._cache.orthoRight = this.orthoRight;\r\n            this._cache.orthoBottom = this.orthoBottom;\r\n            this._cache.orthoTop = this.orthoTop;\r\n            this._cache.obliqueAngle = this.oblique?.angle;\r\n            this._cache.obliqueLength = this.oblique?.length;\r\n            this._cache.obliqueOffset = this.oblique?.offset;\r\n            this._cache.renderWidth = engine.getRenderWidth();\r\n            this._cache.renderHeight = engine.getRenderHeight();\r\n        }\r\n\r\n        this.onProjectionMatrixChangedObservable.notifyObservers(this);\r\n\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformation matrix (ie. the multiplication of view by projection matrices)\r\n     * @returns a Matrix\r\n     */\r\n    public getTransformationMatrix(): Matrix {\r\n        this._computedViewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\r\n        return this._transformMatrix;\r\n    }\r\n\r\n    private _computeObliqueDistance(offset: number): number {\r\n        const arcRotateCamera = this as Camera as ArcRotateCamera;\r\n        const targetCamera = this as Camera as TargetCamera;\r\n        return (arcRotateCamera.radius || (targetCamera.target ? Vector3.Distance(this.position, targetCamera.target) : this.position.length())) + offset;\r\n    }\r\n\r\n    private _updateFrustumPlanes(): void {\r\n        if (!this._refreshFrustumPlanes) {\r\n            return;\r\n        }\r\n\r\n        this.getTransformationMatrix();\r\n\r\n        if (!this._frustumPlanes) {\r\n            this._frustumPlanes = Frustum.GetPlanes(this._transformMatrix);\r\n        } else {\r\n            Frustum.GetPlanesToRef(this._transformMatrix, this._frustumPlanes);\r\n        }\r\n\r\n        this._refreshFrustumPlanes = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * This checks the bounding box center. See isCompletelyInFrustum for a full bounding check\r\n     * @param target The object to check\r\n     * @param checkRigCameras If the rig cameras should be checked (eg. with VR camera both eyes should be checked) (Default: false)\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    public isInFrustum(target: ICullable, checkRigCameras = false): boolean {\r\n        this._updateFrustumPlanes();\r\n\r\n        if (checkRigCameras && this.rigCameras.length > 0) {\r\n            let result = false;\r\n            this.rigCameras.forEach((cam) => {\r\n                cam._updateFrustumPlanes();\r\n                result = result || target.isInFrustum(cam._frustumPlanes);\r\n            });\r\n            return result;\r\n        } else {\r\n            return target.isInFrustum(this._frustumPlanes);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * Unlike isInFrustum this checks the full bounding box\r\n     * @param target The object to check\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    public isCompletelyInFrustum(target: ICullable): boolean {\r\n        this._updateFrustumPlanes();\r\n\r\n        return target.isCompletelyInFrustum(this._frustumPlanes);\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Gets a ray in the forward direction from the camera.\r\n     * @param length Defines the length of the ray to create\r\n     * @param transform Defines the transform to apply to the ray, by default the world matrix is used to create a workd space ray\r\n     * @param origin Defines the start point of the ray which defaults to the camera position\r\n     * @returns the forward ray\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getForwardRay(length = 100, transform?: Matrix, origin?: Vector3): Ray {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Gets a ray in the forward direction from the camera.\r\n     * @param refRay the ray to (re)use when setting the values\r\n     * @param length Defines the length of the ray to create\r\n     * @param transform Defines the transform to apply to the ray, by default the world matrx is used to create a workd space ray\r\n     * @param origin Defines the start point of the ray which defaults to the camera position\r\n     * @returns the forward ray\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getForwardRayToRef(refRay: Ray, length = 100, transform?: Matrix, origin?: Vector3): Ray {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        // Observables\r\n        this.onViewMatrixChangedObservable.clear();\r\n        this.onProjectionMatrixChangedObservable.clear();\r\n        this.onAfterCheckInputsObservable.clear();\r\n        this.onRestoreStateObservable.clear();\r\n\r\n        // Inputs\r\n        if (this.inputs) {\r\n            this.inputs.clear();\r\n        }\r\n\r\n        // Animations\r\n        this.getScene().stopAnimation(this);\r\n\r\n        // Remove from scene\r\n        this.getScene().removeCamera(this);\r\n        while (this._rigCameras.length > 0) {\r\n            const camera = this._rigCameras.pop();\r\n            if (camera) {\r\n                camera.dispose();\r\n            }\r\n        }\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.cameras.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.cameras.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        // Postprocesses\r\n        if (this._rigPostProcess) {\r\n            this._rigPostProcess.dispose(this);\r\n            this._rigPostProcess = null;\r\n            this._postProcesses.length = 0;\r\n        } else if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            this._rigPostProcess = null;\r\n            this._postProcesses.length = 0;\r\n        } else {\r\n            let i = this._postProcesses.length;\r\n            while (--i >= 0) {\r\n                const postProcess = this._postProcesses[i];\r\n                if (postProcess) {\r\n                    postProcess.dispose(this);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Render targets\r\n        let i = this.customRenderTargets.length;\r\n        while (--i >= 0) {\r\n            this.customRenderTargets[i].dispose();\r\n        }\r\n        this.customRenderTargets.length = 0;\r\n\r\n        // Active Meshes\r\n        this._activeMeshes.dispose();\r\n\r\n        this.getScene().getEngine().releaseRenderPassId(this.renderPassId);\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /** @internal */\r\n    public _isLeftCamera = false;\r\n    /**\r\n     * Gets the left camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get isLeftCamera(): boolean {\r\n        return this._isLeftCamera;\r\n    }\r\n\r\n    /** @internal */\r\n    public _isRightCamera = false;\r\n    /**\r\n     * Gets the right camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get isRightCamera(): boolean {\r\n        return this._isRightCamera;\r\n    }\r\n\r\n    /**\r\n     * Gets the left camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get leftCamera(): Nullable<FreeCamera> {\r\n        if (this._rigCameras.length < 1) {\r\n            return null;\r\n        }\r\n        return <FreeCamera>this._rigCameras[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the right camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get rightCamera(): Nullable<FreeCamera> {\r\n        if (this._rigCameras.length < 2) {\r\n            return null;\r\n        }\r\n        return <FreeCamera>this._rigCameras[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the left camera target of a rig setup in case of Rigged Camera\r\n     * @returns the target position\r\n     */\r\n    public getLeftTarget(): Nullable<Vector3> {\r\n        if (this._rigCameras.length < 1) {\r\n            return null;\r\n        }\r\n        return (<TargetCamera>this._rigCameras[0]).getTarget();\r\n    }\r\n\r\n    /**\r\n     * Gets the right camera target of a rig setup in case of Rigged Camera\r\n     * @returns the target position\r\n     */\r\n    public getRightTarget(): Nullable<Vector3> {\r\n        if (this._rigCameras.length < 2) {\r\n            return null;\r\n        }\r\n        return (<TargetCamera>this._rigCameras[1]).getTarget();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public setCameraRigMode(mode: number, rigParams: any): void {\r\n        if (this.cameraRigMode === mode) {\r\n            return;\r\n        }\r\n\r\n        while (this._rigCameras.length > 0) {\r\n            const camera = this._rigCameras.pop();\r\n\r\n            if (camera) {\r\n                camera.dispose();\r\n            }\r\n        }\r\n        this.cameraRigMode = mode;\r\n        this._cameraRigParams = {};\r\n        //we have to implement stereo camera calcultating left and right viewpoints from interaxialDistance and target,\r\n        //not from a given angle as it is now, but until that complete code rewriting provisional stereoHalfAngle value is introduced\r\n        this._cameraRigParams.interaxialDistance = rigParams.interaxialDistance || 0.0637;\r\n        this._cameraRigParams.stereoHalfAngle = Tools.ToRadians(this._cameraRigParams.interaxialDistance / 0.0637);\r\n\r\n        // create the rig cameras, unless none\r\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            const leftCamera = this.createRigCamera(this.name + \"_L\", 0);\r\n            if (leftCamera) {\r\n                leftCamera._isLeftCamera = true;\r\n            }\r\n            const rightCamera = this.createRigCamera(this.name + \"_R\", 1);\r\n            if (rightCamera) {\r\n                rightCamera._isRightCamera = true;\r\n            }\r\n            if (leftCamera && rightCamera) {\r\n                this._rigCameras.push(leftCamera);\r\n                this._rigCameras.push(rightCamera);\r\n            }\r\n        }\r\n\r\n        this._setRigMode(rigParams);\r\n\r\n        this._cascadePostProcessesToRigCams();\r\n        this.update();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _setRigMode(rigParams: any) {\r\n        // no-op\r\n    }\r\n\r\n    /** @internal */\r\n    public _getVRProjectionMatrix(): Matrix {\r\n        Matrix.PerspectiveFovLHToRef(\r\n            this._cameraRigParams.vrMetrics.aspectRatioFov,\r\n            this._cameraRigParams.vrMetrics.aspectRatio,\r\n            this.minZ,\r\n            this.maxZ,\r\n            this._cameraRigParams.vrWorkMatrix,\r\n            true,\r\n            this.getEngine().isNDCHalfZRange\r\n        );\r\n        this._cameraRigParams.vrWorkMatrix.multiplyToRef(this._cameraRigParams.vrHMatrix, this._projectionMatrix);\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public setCameraRigParameter(name: string, value: any) {\r\n        if (!this._cameraRigParams) {\r\n            this._cameraRigParams = {};\r\n        }\r\n        this._cameraRigParams[name] = value;\r\n        //provisionnally:\r\n        if (name === \"interaxialDistance\") {\r\n            this._cameraRigParams.stereoHalfAngle = Tools.ToRadians(value / 0.0637);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * needs to be overridden by children so sub has required properties to be copied\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public createRigCamera(name: string, cameraIndex: number): Nullable<Camera> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * May need to be overridden by children\r\n     * @internal\r\n     */\r\n    public _updateRigCameras() {\r\n        for (let i = 0; i < this._rigCameras.length; i++) {\r\n            this._rigCameras[i].minZ = this.minZ;\r\n            this._rigCameras[i].maxZ = this.maxZ;\r\n            this._rigCameras[i].fov = this.fov;\r\n            this._rigCameras[i].upVector.copyFrom(this.upVector);\r\n        }\r\n\r\n        // only update viewport when ANAGLYPH\r\n        if (this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH) {\r\n            this._rigCameras[0].viewport = this._rigCameras[1].viewport = this.viewport;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _setupInputs() {}\r\n\r\n    /**\r\n     * Serialiaze the camera setup to a json representation\r\n     * @returns the JSON representation\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        // Type\r\n        serializationObject.type = this.getClassName();\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        if (this.inputs) {\r\n            this.inputs.serialize(serializationObject);\r\n        }\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        serializationObject.isEnabled = this.isEnabled();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Clones the current camera.\r\n     * @param name The cloned camera name\r\n     * @param newParent The cloned camera's new parent (none by default)\r\n     * @returns the cloned camera\r\n     */\r\n    public clone(name: string, newParent: Nullable<Node> = null): Camera {\r\n        const camera = SerializationHelper.Clone(\r\n            Camera.GetConstructorFromName(this.getClassName(), name, this.getScene(), this.interaxialDistance, this.isStereoscopicSideBySide),\r\n            this\r\n        );\r\n        camera.name = name;\r\n        camera.parent = newParent;\r\n\r\n        this.onClonedObservable.notifyObservers(camera);\r\n\r\n        return camera;\r\n    }\r\n\r\n    /**\r\n     * Gets the direction of the camera relative to a given local axis.\r\n     * @param localAxis Defines the reference axis to provide a relative direction.\r\n     * @returns the direction\r\n     */\r\n    public getDirection(localAxis: DeepImmutable<Vector3>): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getDirectionToRef(localAxis, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns the current camera absolute rotation\r\n     */\r\n    public get absoluteRotation(): Quaternion {\r\n        this.getWorldMatrix().decompose(undefined, this._absoluteRotation);\r\n\r\n        return this._absoluteRotation;\r\n    }\r\n\r\n    /**\r\n     * Gets the direction of the camera relative to a given local axis into a passed vector.\r\n     * @param localAxis Defines the reference axis to provide a relative direction.\r\n     * @param result Defines the vector to store the result in\r\n     */\r\n    public getDirectionToRef(localAxis: DeepImmutable<Vector3>, result: Vector3): void {\r\n        Vector3.TransformNormalToRef(localAxis, this.getWorldMatrix(), result);\r\n    }\r\n\r\n    /**\r\n     * Gets a camera constructor for a given camera type\r\n     * @param type The type of the camera to construct (should be equal to one of the camera class name)\r\n     * @param name The name of the camera the result will be able to instantiate\r\n     * @param scene The scene the result will construct the camera in\r\n     * @param interaxial_distance In case of stereoscopic setup, the distance between both eyes\r\n     * @param isStereoscopicSideBySide In case of stereoscopic setup, should the sereo be side b side\r\n     * @returns a factory method to construct the camera\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    static GetConstructorFromName(type: string, name: string, scene: Scene, interaxial_distance: number = 0, isStereoscopicSideBySide: boolean = true): () => Camera {\r\n        const constructorFunc = Node.Construct(type, name, scene, {\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            interaxial_distance: interaxial_distance,\r\n            isStereoscopicSideBySide: isStereoscopicSideBySide,\r\n        });\r\n\r\n        if (constructorFunc) {\r\n            return <() => Camera>constructorFunc;\r\n        }\r\n\r\n        // Default to universal camera\r\n        return () => Camera._CreateDefaultParsedCamera(name, scene);\r\n    }\r\n\r\n    /**\r\n     * Compute the world  matrix of the camera.\r\n     * @returns the camera world matrix\r\n     */\r\n    public computeWorldMatrix(): Matrix {\r\n        return this.getWorldMatrix();\r\n    }\r\n\r\n    /**\r\n     * Parse a JSON and creates the camera from the parsed information\r\n     * @param parsedCamera The JSON to parse\r\n     * @param scene The scene to instantiate the camera in\r\n     * @returns the newly constructed camera\r\n     */\r\n    public static Parse(parsedCamera: any, scene: Scene): Camera {\r\n        const type = parsedCamera.type;\r\n        const construct = Camera.GetConstructorFromName(type, parsedCamera.name, scene, parsedCamera.interaxial_distance, parsedCamera.isStereoscopicSideBySide);\r\n\r\n        const camera = SerializationHelper.Parse(construct, parsedCamera, scene);\r\n\r\n        // Parent\r\n        if (parsedCamera.parentId !== undefined) {\r\n            camera._waitingParentId = parsedCamera.parentId;\r\n        }\r\n\r\n        // Parent instance index\r\n        if (parsedCamera.parentInstanceIndex !== undefined) {\r\n            camera._waitingParentInstanceIndex = parsedCamera.parentInstanceIndex;\r\n        }\r\n\r\n        //If camera has an input manager, let it parse inputs settings\r\n        if (camera.inputs) {\r\n            camera.inputs.parse(parsedCamera);\r\n\r\n            camera._setupInputs();\r\n        }\r\n\r\n        if (parsedCamera.upVector) {\r\n            camera.upVector = Vector3.FromArray(parsedCamera.upVector); // need to force the upVector\r\n        }\r\n\r\n        if ((<any>camera).setPosition) {\r\n            // need to force position\r\n            camera.position.copyFromFloats(0, 0, 0);\r\n            (<any>camera).setPosition(Vector3.FromArray(parsedCamera.position));\r\n        }\r\n\r\n        // Target\r\n        if (parsedCamera.target) {\r\n            if ((<any>camera).setTarget) {\r\n                (<any>camera).setTarget(Vector3.FromArray(parsedCamera.target));\r\n            }\r\n        }\r\n\r\n        // Apply 3d rig, when found\r\n        if (parsedCamera.cameraRigMode) {\r\n            const rigParams = parsedCamera.interaxial_distance ? { interaxialDistance: parsedCamera.interaxial_distance } : {};\r\n            camera.setCameraRigMode(parsedCamera.cameraRigMode, rigParams);\r\n        }\r\n\r\n        // Animations\r\n        if (parsedCamera.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedCamera.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedCamera.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    camera.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(camera, parsedCamera, scene);\r\n        }\r\n\r\n        if (parsedCamera.autoAnimate) {\r\n            scene.beginAnimation(camera, parsedCamera.autoAnimateFrom, parsedCamera.autoAnimateTo, parsedCamera.autoAnimateLoop, parsedCamera.autoAnimateSpeed || 1.0);\r\n        }\r\n\r\n        // Check if isEnabled is defined to be back compatible with prior serialized versions.\r\n        if (parsedCamera.isEnabled !== undefined) {\r\n            camera.setEnabled(parsedCamera.isEnabled);\r\n        }\r\n\r\n        return camera;\r\n    }\r\n\r\n    /** @internal */\r\n    public _calculateHandednessMultiplier(): number {\r\n        let handednessMultiplier = this.getScene().useRightHandedSystem ? -1 : 1;\r\n        if (this.parent && this.parent._getWorldMatrixDeterminant() < 0) {\r\n            handednessMultiplier *= -1;\r\n        }\r\n\r\n        return handednessMultiplier;\r\n    }\r\n}\r\n", "import { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Class used to represent data loading progression\r\n */\r\nexport class SceneLoaderFlags {\r\n    // Flags\r\n    private static _ForceFullSceneLoadingForIncremental = false;\r\n    private static _ShowLoadingScreen = true;\r\n    private static _CleanBoneMatrixWeights = false;\r\n    private static _LoggingLevel = Constants.SCENELOADER_NO_LOGGING;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if entire scene must be loaded even if scene contains incremental data\r\n     */\r\n    public static get ForceFullSceneLoadingForIncremental() {\r\n        return SceneLoaderFlags._ForceFullSceneLoadingForIncremental;\r\n    }\r\n\r\n    public static set ForceFullSceneLoadingForIncremental(value: boolean) {\r\n        SceneLoaderFlags._ForceFullSceneLoadingForIncremental = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if loading screen must be displayed while loading a scene\r\n     */\r\n    public static get ShowLoadingScreen(): boolean {\r\n        return SceneLoaderFlags._ShowLoadingScreen;\r\n    }\r\n\r\n    public static set ShowLoadingScreen(value: boolean) {\r\n        SceneLoaderFlags._ShowLoadingScreen = value;\r\n    }\r\n\r\n    /**\r\n     * Defines the current logging level (while loading the scene)\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static get loggingLevel(): number {\r\n        return SceneLoaderFlags._LoggingLevel;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static set loggingLevel(value: number) {\r\n        SceneLoaderFlags._LoggingLevel = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set a boolean indicating if matrix weights must be cleaned upon loading\r\n     */\r\n    public static get CleanBoneMatrixWeights(): boolean {\r\n        return SceneLoaderFlags._CleanBoneMatrixWeights;\r\n    }\r\n\r\n    public static set CleanBoneMatrixWeights(value: boolean) {\r\n        SceneLoaderFlags._CleanBoneMatrixWeights = value;\r\n    }\r\n}\r\n", "/**\r\n * Options used to control default behaviors regarding compatibility support\r\n */\r\nexport class CompatibilityOptions {\r\n    /**\r\n     * Defines if the system should use OpenGL convention for UVs when creating geometry or loading .babylon files (false by default)\r\n     */\r\n    public static UseOpenGLOrientationForUV = false;\r\n}\r\n", "import type { Nullable, FloatArray, DataArray, IndicesArray } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { IGetSetVerticesData } from \"../Meshes/mesh.vertexData\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { extractMinAndMax } from \"../Maths/math.functions\";\r\nimport type { AbstractScene } from \"../abstractScene\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { CompatibilityOptions } from \"../Compat/compatibilityOptions\";\r\n\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Buffer } from \"../Buffers/buffer\";\r\n\r\n/**\r\n * Class used to store geometry data (vertex buffers + index buffer)\r\n */\r\nexport class Geometry implements IGetSetVerticesData {\r\n    // Members\r\n    /**\r\n     * Gets or sets the ID of the geometry\r\n     */\r\n    public id: string;\r\n    /**\r\n     * Gets or sets the unique ID of the geometry\r\n     */\r\n    public uniqueId: number;\r\n    /**\r\n     * Gets the delay loading state of the geometry (none by default which means not delayed)\r\n     */\r\n    public delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n    /**\r\n     * Gets the file containing the data to load when running in delay load state\r\n     */\r\n    public delayLoadingFile: Nullable<string>;\r\n    /**\r\n     * Callback called when the geometry is updated\r\n     */\r\n    public onGeometryUpdated: (geometry: Geometry, kind?: string) => void;\r\n\r\n    // Private\r\n    private _scene: Scene;\r\n    private _engine: Engine;\r\n    private _meshes: Mesh[];\r\n    private _totalVertices = 0;\r\n    private _totalIndices?: number;\r\n    /** @internal */\r\n    public _loadedUniqueId: string;\r\n    /** @internal */\r\n    public _indices: IndicesArray;\r\n    /** @internal */\r\n    public _vertexBuffers: { [key: string]: VertexBuffer };\r\n    private _isDisposed = false;\r\n    private _extend: { minimum: Vector3; maximum: Vector3 };\r\n    private _boundingBias: Vector2;\r\n    /** @internal */\r\n    public _delayInfo: Array<string>;\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _indexBufferIsUpdatable = false;\r\n    /** @internal */\r\n    public _boundingInfo: Nullable<BoundingInfo>;\r\n    /** @internal */\r\n    public _delayLoadingFunction: Nullable<(any: any, geometry: Geometry) => void>;\r\n    /** @internal */\r\n    public _softwareSkinningFrameId: number;\r\n    private _vertexArrayObjects: { [key: string]: WebGLVertexArrayObject };\r\n    private _updatable: boolean;\r\n\r\n    // Cache\r\n    /** @internal */\r\n    public _positions: Nullable<Vector3[]>;\r\n    private _positionsCache: Vector3[] = [];\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    /**\r\n     *  Gets or sets the Bias Vector to apply on the bounding elements (box/sphere), the max extend is computed as v += v * bias.x + bias.y, the min is computed as v -= v * bias.x + bias.y\r\n     */\r\n    public get boundingBias(): Vector2 {\r\n        return this._boundingBias;\r\n    }\r\n\r\n    /**\r\n     *  Gets or sets the Bias Vector to apply on the bounding elements (box/sphere), the max extend is computed as v += v * bias.x + bias.y, the min is computed as v -= v * bias.x + bias.y\r\n     */\r\n    public set boundingBias(value: Vector2) {\r\n        if (this._boundingBias) {\r\n            this._boundingBias.copyFrom(value);\r\n        } else {\r\n            this._boundingBias = value.clone();\r\n        }\r\n\r\n        this._updateBoundingInfo(true, null);\r\n    }\r\n\r\n    /**\r\n     * Static function used to attach a new empty geometry to a mesh\r\n     * @param mesh defines the mesh to attach the geometry to\r\n     * @returns the new Geometry\r\n     */\r\n    public static CreateGeometryForMesh(mesh: Mesh): Geometry {\r\n        const geometry = new Geometry(Geometry.RandomId(), mesh.getScene());\r\n\r\n        geometry.applyToMesh(mesh);\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /** Get the list of meshes using this geometry */\r\n    public get meshes(): Mesh[] {\r\n        return this._meshes;\r\n    }\r\n\r\n    /**\r\n     * If set to true (false by default), the bounding info applied to the meshes sharing this geometry will be the bounding info defined at the class level\r\n     * and won't be computed based on the vertex positions (which is what we get when useBoundingInfoFromGeometry = false)\r\n     */\r\n    public useBoundingInfoFromGeometry = false;\r\n\r\n    /**\r\n     * Creates a new geometry\r\n     * @param id defines the unique ID\r\n     * @param scene defines the hosting scene\r\n     * @param vertexData defines the VertexData used to get geometry data\r\n     * @param updatable defines if geometry must be updatable (false by default)\r\n     * @param mesh defines the mesh that will be associated with the geometry\r\n     */\r\n    constructor(id: string, scene?: Scene, vertexData?: VertexData, updatable: boolean = false, mesh: Nullable<Mesh> = null) {\r\n        this._scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n        this.id = id;\r\n        this.uniqueId = this._scene.getUniqueId();\r\n        this._engine = this._scene.getEngine();\r\n        this._meshes = [];\r\n        //Init vertex buffer cache\r\n        this._vertexBuffers = {};\r\n        this._indices = [];\r\n        this._updatable = updatable;\r\n\r\n        // vertexData\r\n        if (vertexData) {\r\n            this.setAllVerticesData(vertexData, updatable);\r\n        } else {\r\n            this._totalVertices = 0;\r\n        }\r\n\r\n        if (this._engine.getCaps().vertexArrayObject) {\r\n            this._vertexArrayObjects = {};\r\n        }\r\n\r\n        // applyToMesh\r\n        if (mesh) {\r\n            this.applyToMesh(mesh);\r\n            mesh.computeWorldMatrix(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current extend of the geometry\r\n     */\r\n    public get extend(): { minimum: Vector3; maximum: Vector3 } {\r\n        return this._extend;\r\n    }\r\n\r\n    /**\r\n     * Gets the hosting scene\r\n     * @returns the hosting Scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets the hosting engine\r\n     * @returns the hosting Engine\r\n     */\r\n    public getEngine(): Engine {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * Defines if the geometry is ready to use\r\n     * @returns true if the geometry is ready to be used\r\n     */\r\n    public isReady(): boolean {\r\n        return this.delayLoadState === Constants.DELAYLOADSTATE_LOADED || this.delayLoadState === Constants.DELAYLOADSTATE_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating that the geometry should not be serialized\r\n     */\r\n    public get doNotSerialize(): boolean {\r\n        for (let index = 0; index < this._meshes.length; index++) {\r\n            if (!this._meshes[index].doNotSerialize) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        if (this._vertexArrayObjects) {\r\n            this._vertexArrayObjects = {};\r\n        }\r\n\r\n        // Index buffer\r\n        if (this._meshes.length !== 0 && this._indices) {\r\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, this._updatable, \"Geometry_\" + this.id + \"_IndexBuffer\");\r\n        }\r\n\r\n        // Vertex buffers\r\n        const buffers = new Set<Buffer>();\r\n        for (const key in this._vertexBuffers) {\r\n            buffers.add(this._vertexBuffers[key].getWrapperBuffer());\r\n        }\r\n\r\n        buffers.forEach((buffer) => {\r\n            buffer._rebuild();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Affects all geometry data in one call\r\n     * @param vertexData defines the geometry data\r\n     * @param updatable defines if the geometry must be flagged as updatable (false as default)\r\n     */\r\n    public setAllVerticesData(vertexData: VertexData, updatable?: boolean): void {\r\n        vertexData.applyToGeometry(this, updatable);\r\n        this._notifyUpdate();\r\n    }\r\n\r\n    /**\r\n     * Set specific vertex data\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the vertex data to use\r\n     * @param updatable defines if the vertex must be flagged as updatable (false as default)\r\n     * @param stride defines the stride to use (0 by default). This value is deduced from the kind value if not specified\r\n     */\r\n    public setVerticesData(kind: string, data: FloatArray, updatable: boolean = false, stride?: number): void {\r\n        if (updatable && Array.isArray(data)) {\r\n            // to avoid converting to Float32Array at each draw call in engine.updateDynamicVertexBuffer, we make the conversion a single time here\r\n            data = new Float32Array(data);\r\n        }\r\n        const buffer = new VertexBuffer(this._engine, data, kind, {\r\n            updatable,\r\n            postponeInternalCreation: this._meshes.length === 0,\r\n            stride,\r\n            label: \"Geometry_\" + this.id + \"_\" + kind,\r\n        });\r\n        this.setVerticesBuffer(buffer);\r\n    }\r\n\r\n    /**\r\n     * Removes a specific vertex data\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     */\r\n    public removeVerticesData(kind: string) {\r\n        if (this._vertexBuffers[kind]) {\r\n            this._vertexBuffers[kind].dispose();\r\n            delete this._vertexBuffers[kind];\r\n        }\r\n\r\n        if (this._vertexArrayObjects) {\r\n            this._disposeVertexArrayObjects();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Affect a vertex buffer to the geometry. the vertexBuffer.getKind() function is used to determine where to store the data\r\n     * @param buffer defines the vertex buffer to use\r\n     * @param totalVertices defines the total number of vertices for position kind (could be null)\r\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\r\n     */\r\n    public setVerticesBuffer(buffer: VertexBuffer, totalVertices: Nullable<number> = null, disposeExistingBuffer = true): void {\r\n        const kind = buffer.getKind();\r\n        if (this._vertexBuffers[kind] && disposeExistingBuffer) {\r\n            this._vertexBuffers[kind].dispose();\r\n        }\r\n\r\n        if (buffer._buffer) {\r\n            buffer._buffer._increaseReferences();\r\n        }\r\n\r\n        this._vertexBuffers[kind] = buffer;\r\n        const meshes = this._meshes;\r\n        const numOfMeshes = meshes.length;\r\n\r\n        if (kind === VertexBuffer.PositionKind) {\r\n            this._totalVertices = totalVertices ?? buffer._maxVerticesCount;\r\n\r\n            this._updateExtend(buffer.getFloatData(this._totalVertices));\r\n            this._resetPointsArrayCache();\r\n\r\n            // this._extend can be empty if buffer.getFloatData(this._totalVertices) returned null\r\n            const minimum = (this._extend && this._extend.minimum) || new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n            const maximum = (this._extend && this._extend.maximum) || new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\r\n            for (let index = 0; index < numOfMeshes; index++) {\r\n                const mesh = meshes[index];\r\n                mesh.buildBoundingInfo(minimum, maximum);\r\n                mesh._createGlobalSubMesh(mesh.isUnIndexed);\r\n                mesh.computeWorldMatrix(true);\r\n                mesh.synchronizeInstances();\r\n            }\r\n        }\r\n\r\n        this._notifyUpdate(kind);\r\n    }\r\n\r\n    /**\r\n     * Update a specific vertex buffer\r\n     * This function will directly update the underlying DataBuffer according to the passed numeric array or Float32Array\r\n     * It will do nothing if the buffer is not updatable\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the data to use\r\n     * @param offset defines the offset in the target buffer where to store the data\r\n     * @param useBytes set to true if the offset is in bytes\r\n     */\r\n    public updateVerticesDataDirectly(kind: string, data: DataArray, offset: number, useBytes: boolean = false): void {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n\r\n        if (!vertexBuffer) {\r\n            return;\r\n        }\r\n\r\n        vertexBuffer.updateDirectly(data, offset, useBytes);\r\n        this._notifyUpdate(kind);\r\n    }\r\n\r\n    /**\r\n     * Update a specific vertex buffer\r\n     * This function will create a new buffer if the current one is not updatable\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the data to use\r\n     * @param updateExtends defines if the geometry extends must be recomputed (false by default)\r\n     */\r\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends: boolean = false): void {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n\r\n        if (!vertexBuffer) {\r\n            return;\r\n        }\r\n\r\n        vertexBuffer.update(data);\r\n\r\n        if (kind === VertexBuffer.PositionKind) {\r\n            this._updateBoundingInfo(updateExtends, data);\r\n        }\r\n        this._notifyUpdate(kind);\r\n    }\r\n\r\n    private _updateBoundingInfo(updateExtends: boolean, data: Nullable<FloatArray>) {\r\n        if (updateExtends) {\r\n            this._updateExtend(data);\r\n        }\r\n\r\n        this._resetPointsArrayCache();\r\n\r\n        if (updateExtends) {\r\n            const meshes = this._meshes;\r\n            for (const mesh of meshes) {\r\n                if (mesh.hasBoundingInfo) {\r\n                    mesh.getBoundingInfo().reConstruct(this._extend.minimum, this._extend.maximum);\r\n                } else {\r\n                    mesh.buildBoundingInfo(this._extend.minimum, this._extend.maximum);\r\n                }\r\n\r\n                const subMeshes = mesh.subMeshes;\r\n                for (const subMesh of subMeshes) {\r\n                    subMesh.refreshBoundingInfo();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bind(\r\n        effect: Nullable<Effect>,\r\n        indexToBind?: Nullable<DataBuffer>,\r\n        overrideVertexBuffers?: { [kind: string]: Nullable<VertexBuffer> },\r\n        overrideVertexArrayObjects?: { [key: string]: WebGLVertexArrayObject }\r\n    ): void {\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        if (indexToBind === undefined) {\r\n            indexToBind = this._indexBuffer;\r\n        }\r\n        const vbs = this.getVertexBuffers();\r\n\r\n        if (!vbs) {\r\n            return;\r\n        }\r\n\r\n        if (indexToBind != this._indexBuffer || (!this._vertexArrayObjects && !overrideVertexArrayObjects)) {\r\n            this._engine.bindBuffers(vbs, indexToBind, effect, overrideVertexBuffers);\r\n            return;\r\n        }\r\n\r\n        const vaos = overrideVertexArrayObjects ? overrideVertexArrayObjects : this._vertexArrayObjects;\r\n\r\n        // Using VAO\r\n        if (!vaos[effect.key]) {\r\n            vaos[effect.key] = this._engine.recordVertexArrayObject(vbs, indexToBind, effect, overrideVertexBuffers);\r\n        }\r\n\r\n        this._engine.bindVertexArrayObject(vaos[effect.key], indexToBind);\r\n    }\r\n\r\n    /**\r\n     * Gets total number of vertices\r\n     * @returns the total number of vertices\r\n     */\r\n    public getTotalVertices(): number {\r\n        if (!this.isReady()) {\r\n            return 0;\r\n        }\r\n\r\n        return this._totalVertices;\r\n    }\r\n\r\n    /**\r\n     * Gets a specific vertex data attached to this geometry. Float data is constructed if the vertex buffer data cannot be returned directly.\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns a float array containing vertex data\r\n     */\r\n    public getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean): Nullable<FloatArray> {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n        if (!vertexBuffer) {\r\n            return null;\r\n        }\r\n\r\n        return vertexBuffer.getFloatData(this._totalVertices, forceCopy || (copyWhenShared && this._meshes.length !== 1));\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @returns true if the vertex buffer with the specified kind is updatable\r\n     */\r\n    public isVertexBufferUpdatable(kind: string): boolean {\r\n        const vb = this._vertexBuffers[kind];\r\n\r\n        if (!vb) {\r\n            return false;\r\n        }\r\n\r\n        return vb.isUpdatable();\r\n    }\r\n\r\n    /**\r\n     * Gets a specific vertex buffer\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @returns a VertexBuffer\r\n     */\r\n    public getVertexBuffer(kind: string): Nullable<VertexBuffer> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        return this._vertexBuffers[kind];\r\n    }\r\n\r\n    /**\r\n     * Returns all vertex buffers\r\n     * @returns an object holding all vertex buffers indexed by kind\r\n     */\r\n    public getVertexBuffers(): Nullable<{ [key: string]: VertexBuffer }> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        return this._vertexBuffers;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if specific vertex buffer is present\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @returns true if data is present\r\n     */\r\n    public isVerticesDataPresent(kind: string): boolean {\r\n        if (!this._vertexBuffers) {\r\n            if (this._delayInfo) {\r\n                return this._delayInfo.indexOf(kind) !== -1;\r\n            }\r\n            return false;\r\n        }\r\n        return this._vertexBuffers[kind] !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all attached data kinds (Position, normal, etc...)\r\n     * @returns a list of string containing all kinds\r\n     */\r\n    public getVerticesDataKinds(): string[] {\r\n        const result = [];\r\n        let kind;\r\n        if (!this._vertexBuffers && this._delayInfo) {\r\n            for (kind in this._delayInfo) {\r\n                result.push(kind);\r\n            }\r\n        } else {\r\n            for (kind in this._vertexBuffers) {\r\n                result.push(kind);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Update index buffer\r\n     * @param indices defines the indices to store in the index buffer\r\n     * @param offset defines the offset in the target buffer where to store the data\r\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\r\n     */\r\n    public updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): void {\r\n        if (!this._indexBuffer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._indexBufferIsUpdatable) {\r\n            this.setIndices(indices, null, true);\r\n        } else {\r\n            const needToUpdateSubMeshes = indices.length !== this._indices.length;\r\n\r\n            if (!gpuMemoryOnly) {\r\n                this._indices = indices.slice();\r\n            }\r\n            this._engine.updateDynamicIndexBuffer(this._indexBuffer, indices, offset);\r\n            if (needToUpdateSubMeshes) {\r\n                for (const mesh of this._meshes) {\r\n                    mesh._createGlobalSubMesh(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the index buffer for this geometry.\r\n     * @param indexBuffer Defines the index buffer to use for this geometry\r\n     * @param totalVertices Defines the total number of vertices used by the buffer\r\n     * @param totalIndices Defines the total number of indices in the index buffer\r\n     */\r\n    public setIndexBuffer(indexBuffer: DataBuffer, totalVertices: number, totalIndices: number): void {\r\n        this._indices = [];\r\n        this._indexBufferIsUpdatable = false;\r\n        this._indexBuffer = indexBuffer;\r\n        this._totalVertices = totalVertices;\r\n        this._totalIndices = totalIndices;\r\n\r\n        indexBuffer.is32Bits ||= this._totalIndices > 65535;\r\n\r\n        for (const mesh of this._meshes) {\r\n            mesh._createGlobalSubMesh(true);\r\n            mesh.synchronizeInstances();\r\n        }\r\n\r\n        this._notifyUpdate();\r\n    }\r\n\r\n    /**\r\n     * Creates a new index buffer\r\n     * @param indices defines the indices to store in the index buffer\r\n     * @param totalVertices defines the total number of vertices (could be null)\r\n     * @param updatable defines if the index buffer must be flagged as updatable (false by default)\r\n     */\r\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number> = null, updatable: boolean = false): void {\r\n        if (this._indexBuffer) {\r\n            this._engine._releaseBuffer(this._indexBuffer);\r\n        }\r\n\r\n        this._indices = indices;\r\n        this._indexBufferIsUpdatable = updatable;\r\n        if (this._meshes.length !== 0 && this._indices) {\r\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, updatable, \"Geometry_\" + this.id + \"_IndexBuffer\");\r\n        }\r\n\r\n        if (totalVertices != undefined) {\r\n            // including null and undefined\r\n            this._totalVertices = totalVertices;\r\n        }\r\n\r\n        for (const mesh of this._meshes) {\r\n            mesh._createGlobalSubMesh(true);\r\n            mesh.synchronizeInstances();\r\n        }\r\n\r\n        this._notifyUpdate();\r\n    }\r\n\r\n    /**\r\n     * Return the total number of indices\r\n     * @returns the total number of indices\r\n     */\r\n    public getTotalIndices(): number {\r\n        if (!this.isReady()) {\r\n            return 0;\r\n        }\r\n        return this._totalIndices !== undefined ? this._totalIndices : this._indices.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the index buffer array\r\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns the index buffer array\r\n     */\r\n    public getIndices(copyWhenShared?: boolean, forceCopy?: boolean): Nullable<IndicesArray> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        const orig = this._indices;\r\n        if (!forceCopy && (!copyWhenShared || this._meshes.length === 1)) {\r\n            return orig;\r\n        } else {\r\n            return orig.slice();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the index buffer\r\n     * @returns the index buffer\r\n     */\r\n    public getIndexBuffer(): Nullable<DataBuffer> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        return this._indexBuffer;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _releaseVertexArrayObject(effect: Nullable<Effect> = null) {\r\n        if (!effect || !this._vertexArrayObjects) {\r\n            return;\r\n        }\r\n\r\n        if (this._vertexArrayObjects[effect.key]) {\r\n            this._engine.releaseVertexArrayObject(this._vertexArrayObjects[effect.key]);\r\n            delete this._vertexArrayObjects[effect.key];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release the associated resources for a specific mesh\r\n     * @param mesh defines the source mesh\r\n     * @param shouldDispose defines if the geometry must be disposed if there is no more mesh pointing to it\r\n     */\r\n    public releaseForMesh(mesh: Mesh, shouldDispose?: boolean): void {\r\n        const meshes = this._meshes;\r\n        const index = meshes.indexOf(mesh);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        meshes.splice(index, 1);\r\n\r\n        if (this._vertexArrayObjects) {\r\n            mesh._invalidateInstanceVertexArrayObject();\r\n        }\r\n\r\n        mesh._geometry = null;\r\n\r\n        if (meshes.length === 0 && shouldDispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply current geometry to a given mesh\r\n     * @param mesh defines the mesh to apply geometry to\r\n     */\r\n    public applyToMesh(mesh: Mesh): void {\r\n        if (mesh._geometry === this) {\r\n            return;\r\n        }\r\n\r\n        const previousGeometry = mesh._geometry;\r\n        if (previousGeometry) {\r\n            previousGeometry.releaseForMesh(mesh);\r\n        }\r\n\r\n        if (this._vertexArrayObjects) {\r\n            mesh._invalidateInstanceVertexArrayObject();\r\n        }\r\n\r\n        const meshes = this._meshes;\r\n\r\n        // must be done before setting vertexBuffers because of mesh._createGlobalSubMesh()\r\n        mesh._geometry = this;\r\n        mesh._internalAbstractMeshDataInfo._positions = null;\r\n\r\n        this._scene.pushGeometry(this);\r\n\r\n        meshes.push(mesh);\r\n\r\n        if (this.isReady()) {\r\n            this._applyToMesh(mesh);\r\n        } else if (this._boundingInfo) {\r\n            mesh.setBoundingInfo(this._boundingInfo);\r\n        }\r\n    }\r\n\r\n    private _updateExtend(data: Nullable<FloatArray> = null) {\r\n        if (this.useBoundingInfoFromGeometry && this._boundingInfo) {\r\n            this._extend = {\r\n                minimum: this._boundingInfo.minimum.clone(),\r\n                maximum: this._boundingInfo.maximum.clone(),\r\n            };\r\n        } else {\r\n            if (!data) {\r\n                data = this.getVerticesData(VertexBuffer.PositionKind)!;\r\n                // This can happen if the buffer comes from a Hardware Buffer where\r\n                // The data have not been uploaded by Babylon. (ex: Compute Shaders and Storage Buffers)\r\n                if (!data) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this._extend = extractMinAndMax(data, 0, this._totalVertices, this.boundingBias, 3);\r\n        }\r\n    }\r\n\r\n    private _applyToMesh(mesh: Mesh): void {\r\n        const numOfMeshes = this._meshes.length;\r\n\r\n        // vertexBuffers\r\n        for (const kind in this._vertexBuffers) {\r\n            if (numOfMeshes === 1) {\r\n                this._vertexBuffers[kind].create();\r\n            }\r\n\r\n            if (kind === VertexBuffer.PositionKind) {\r\n                if (!this._extend) {\r\n                    this._updateExtend();\r\n                }\r\n                mesh.buildBoundingInfo(this._extend.minimum, this._extend.maximum);\r\n\r\n                mesh._createGlobalSubMesh(mesh.isUnIndexed);\r\n\r\n                //bounding info was just created again, world matrix should be applied again.\r\n                mesh._updateBoundingInfo();\r\n            }\r\n        }\r\n\r\n        // indexBuffer\r\n        if (numOfMeshes === 1 && this._indices && this._indices.length > 0) {\r\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, this._updatable, \"Geometry_\" + this.id + \"_IndexBuffer\");\r\n        }\r\n\r\n        // morphTargets\r\n        mesh._syncGeometryWithMorphTargetManager();\r\n\r\n        // instances\r\n        mesh.synchronizeInstances();\r\n    }\r\n\r\n    private _notifyUpdate(kind?: string) {\r\n        if (this.onGeometryUpdated) {\r\n            this.onGeometryUpdated(this, kind);\r\n        }\r\n\r\n        if (this._vertexArrayObjects) {\r\n            this._disposeVertexArrayObjects();\r\n        }\r\n\r\n        for (const mesh of this._meshes) {\r\n            mesh._markSubMeshesAsAttributesDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load the geometry if it was flagged as delay loaded\r\n     * @param scene defines the hosting scene\r\n     * @param onLoaded defines a callback called when the geometry is loaded\r\n     */\r\n    public load(scene: Scene, onLoaded?: () => void): void {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n            return;\r\n        }\r\n\r\n        if (this.isReady()) {\r\n            if (onLoaded) {\r\n                onLoaded();\r\n            }\r\n            return;\r\n        }\r\n\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_LOADING;\r\n\r\n        this._queueLoad(scene, onLoaded);\r\n    }\r\n\r\n    private _queueLoad(scene: Scene, onLoaded?: () => void): void {\r\n        if (!this.delayLoadingFile) {\r\n            return;\r\n        }\r\n\r\n        scene.addPendingData(this);\r\n        scene._loadFile(\r\n            this.delayLoadingFile,\r\n            (data) => {\r\n                if (!this._delayLoadingFunction) {\r\n                    return;\r\n                }\r\n\r\n                this._delayLoadingFunction(JSON.parse(data as string), this);\r\n\r\n                this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\r\n                this._delayInfo = [];\r\n\r\n                scene.removePendingData(this);\r\n\r\n                const meshes = this._meshes;\r\n                const numOfMeshes = meshes.length;\r\n                for (let index = 0; index < numOfMeshes; index++) {\r\n                    this._applyToMesh(meshes[index]);\r\n                }\r\n\r\n                if (onLoaded) {\r\n                    onLoaded();\r\n                }\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Invert the geometry to move from a right handed system to a left handed one.\r\n     */\r\n    public toLeftHanded(): void {\r\n        // Flip faces\r\n        const tIndices = this.getIndices(false);\r\n        if (tIndices != null && tIndices.length > 0) {\r\n            for (let i = 0; i < tIndices.length; i += 3) {\r\n                const tTemp = tIndices[i + 0];\r\n                tIndices[i + 0] = tIndices[i + 2];\r\n                tIndices[i + 2] = tTemp;\r\n            }\r\n            this.setIndices(tIndices);\r\n        }\r\n\r\n        // Negate position.z\r\n        const tPositions = this.getVerticesData(VertexBuffer.PositionKind, false);\r\n        if (tPositions != null && tPositions.length > 0) {\r\n            for (let i = 0; i < tPositions.length; i += 3) {\r\n                tPositions[i + 2] = -tPositions[i + 2];\r\n            }\r\n            this.setVerticesData(VertexBuffer.PositionKind, tPositions, false);\r\n        }\r\n\r\n        // Negate normal.z\r\n        const tNormals = this.getVerticesData(VertexBuffer.NormalKind, false);\r\n        if (tNormals != null && tNormals.length > 0) {\r\n            for (let i = 0; i < tNormals.length; i += 3) {\r\n                tNormals[i + 2] = -tNormals[i + 2];\r\n            }\r\n            this.setVerticesData(VertexBuffer.NormalKind, tNormals, false);\r\n        }\r\n    }\r\n\r\n    // Cache\r\n    /** @internal */\r\n    public _resetPointsArrayCache(): void {\r\n        this._positions = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _generatePointsArray(): boolean {\r\n        if (this._positions) {\r\n            return true;\r\n        }\r\n\r\n        const data = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!data || data.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        for (let index = this._positionsCache.length * 3, arrayIdx = this._positionsCache.length; index < data.length; index += 3, ++arrayIdx) {\r\n            this._positionsCache[arrayIdx] = Vector3.FromArray(data, index);\r\n        }\r\n\r\n        for (let index = 0, arrayIdx = 0; index < data.length; index += 3, ++arrayIdx) {\r\n            this._positionsCache[arrayIdx].set(data[0 + index], data[1 + index], data[2 + index]);\r\n        }\r\n\r\n        // just in case the number of positions was reduced, splice the array\r\n        this._positionsCache.length = data.length / 3;\r\n\r\n        this._positions = this._positionsCache;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating if the geometry is disposed\r\n     * @returns true if the geometry was disposed\r\n     */\r\n    public isDisposed(): boolean {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    private _disposeVertexArrayObjects(): void {\r\n        if (this._vertexArrayObjects) {\r\n            for (const kind in this._vertexArrayObjects) {\r\n                this._engine.releaseVertexArrayObject(this._vertexArrayObjects[kind]);\r\n            }\r\n            this._vertexArrayObjects = {}; // Will trigger a rebuild of the VAO if supported\r\n\r\n            const meshes = this._meshes;\r\n            const numOfMeshes = meshes.length;\r\n            for (let index = 0; index < numOfMeshes; index++) {\r\n                meshes[index]._invalidateInstanceVertexArrayObject();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Free all associated resources\r\n     */\r\n    public dispose(): void {\r\n        const meshes = this._meshes;\r\n        const numOfMeshes = meshes.length;\r\n        let index: number;\r\n        for (index = 0; index < numOfMeshes; index++) {\r\n            this.releaseForMesh(meshes[index]);\r\n        }\r\n        this._meshes.length = 0;\r\n\r\n        this._disposeVertexArrayObjects();\r\n\r\n        for (const kind in this._vertexBuffers) {\r\n            this._vertexBuffers[kind].dispose();\r\n        }\r\n        this._vertexBuffers = {};\r\n        this._totalVertices = 0;\r\n\r\n        if (this._indexBuffer) {\r\n            this._engine._releaseBuffer(this._indexBuffer);\r\n        }\r\n        this._indexBuffer = null;\r\n        this._indices = [];\r\n\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n        this.delayLoadingFile = null;\r\n        this._delayLoadingFunction = null;\r\n        this._delayInfo = [];\r\n\r\n        this._boundingInfo = null;\r\n\r\n        this._scene.removeGeometry(this);\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.geometries.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.geometries.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        this._isDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * Clone the current geometry into a new geometry\r\n     * @param id defines the unique ID of the new geometry\r\n     * @returns a new geometry object\r\n     */\r\n    public copy(id: string): Geometry {\r\n        const vertexData = new VertexData();\r\n\r\n        vertexData.indices = [];\r\n\r\n        const indices = this.getIndices();\r\n        if (indices) {\r\n            for (let index = 0; index < indices.length; index++) {\r\n                (<number[]>vertexData.indices).push(indices[index]);\r\n            }\r\n        }\r\n\r\n        let updatable = false;\r\n        let stopChecking = false;\r\n        let kind;\r\n        for (kind in this._vertexBuffers) {\r\n            // using slice() to make a copy of the array and not just reference it\r\n            const data = this.getVerticesData(kind);\r\n\r\n            if (data) {\r\n                if (data instanceof Float32Array) {\r\n                    vertexData.set(new Float32Array(<Float32Array>data), kind);\r\n                } else {\r\n                    vertexData.set((<number[]>data).slice(0), kind);\r\n                }\r\n                if (!stopChecking) {\r\n                    const vb = this.getVertexBuffer(kind);\r\n\r\n                    if (vb) {\r\n                        updatable = vb.isUpdatable();\r\n                        stopChecking = !updatable;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const geometry = new Geometry(id, this._scene, vertexData, updatable);\r\n\r\n        geometry.delayLoadState = this.delayLoadState;\r\n        geometry.delayLoadingFile = this.delayLoadingFile;\r\n        geometry._delayLoadingFunction = this._delayLoadingFunction;\r\n\r\n        for (kind in this._delayInfo) {\r\n            geometry._delayInfo = geometry._delayInfo || [];\r\n            geometry._delayInfo.push(kind);\r\n        }\r\n\r\n        // Bounding info\r\n        geometry._boundingInfo = new BoundingInfo(this._extend.minimum, this._extend.maximum);\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /**\r\n     * Serialize the current geometry info (and not the vertices data) into a JSON object\r\n     * @returns a JSON representation of the current geometry data (without the vertices data)\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.id = this.id;\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject.updatable = this._updatable;\r\n\r\n        if (Tags && Tags.HasTags(this)) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    private _toNumberArray(origin: Nullable<Float32Array | IndicesArray>): number[] {\r\n        if (Array.isArray(origin)) {\r\n            return origin;\r\n        } else {\r\n            return Array.prototype.slice.call(origin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release any memory retained by the cached data on the Geometry.\r\n     *\r\n     * Call this function to reduce memory footprint of the mesh.\r\n     * Vertex buffers will not store CPU data anymore (this will prevent picking, collisions or physics to work correctly)\r\n     */\r\n    public clearCachedData(): void {\r\n        this._indices = [];\r\n        this._resetPointsArrayCache();\r\n\r\n        for (const vbName in this._vertexBuffers) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._vertexBuffers, vbName)) {\r\n                continue;\r\n            }\r\n            this._vertexBuffers[vbName]._buffer._data = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serialize all vertices data into a JSON object\r\n     * @returns a JSON representation of the current geometry data\r\n     */\r\n    public serializeVerticeData(): any {\r\n        const serializationObject = this.serialize();\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            serializationObject.positions = this._toNumberArray(this.getVerticesData(VertexBuffer.PositionKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\r\n                serializationObject.positions._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            serializationObject.normals = this._toNumberArray(this.getVerticesData(VertexBuffer.NormalKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\r\n                serializationObject.normals._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            serializationObject.tangents = this._toNumberArray(this.getVerticesData(VertexBuffer.TangentKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.TangentKind)) {\r\n                serializationObject.tangents._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            serializationObject.uvs = this._toNumberArray(this.getVerticesData(VertexBuffer.UVKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UVKind)) {\r\n                serializationObject.uvs._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n            serializationObject.uvs2 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV2Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV2Kind)) {\r\n                serializationObject.uvs2._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV3Kind)) {\r\n            serializationObject.uvs3 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV3Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV3Kind)) {\r\n                serializationObject.uvs3._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV4Kind)) {\r\n            serializationObject.uvs4 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV4Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV4Kind)) {\r\n                serializationObject.uvs4._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV5Kind)) {\r\n            serializationObject.uvs5 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV5Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV5Kind)) {\r\n                serializationObject.uvs5._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV6Kind)) {\r\n            serializationObject.uvs6 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV6Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV6Kind)) {\r\n                serializationObject.uvs6._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            serializationObject.colors = this._toNumberArray(this.getVerticesData(VertexBuffer.ColorKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.ColorKind)) {\r\n                serializationObject.colors._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\r\n            serializationObject.matricesIndices = this._toNumberArray(this.getVerticesData(VertexBuffer.MatricesIndicesKind));\r\n            serializationObject.matricesIndices._isExpanded = true;\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.MatricesIndicesKind)) {\r\n                serializationObject.matricesIndices._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            serializationObject.matricesWeights = this._toNumberArray(this.getVerticesData(VertexBuffer.MatricesWeightsKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.MatricesWeightsKind)) {\r\n                serializationObject.matricesWeights._updatable = true;\r\n            }\r\n        }\r\n\r\n        serializationObject.indices = this._toNumberArray(this.getIndices());\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Extracts a clone of a mesh geometry\r\n     * @param mesh defines the source mesh\r\n     * @param id defines the unique ID of the new geometry object\r\n     * @returns the new geometry object\r\n     */\r\n    public static ExtractFromMesh(mesh: Mesh, id: string): Nullable<Geometry> {\r\n        const geometry = mesh._geometry;\r\n\r\n        if (!geometry) {\r\n            return null;\r\n        }\r\n\r\n        return geometry.copy(id);\r\n    }\r\n\r\n    /**\r\n     * You should now use Tools.RandomId(), this method is still here for legacy reasons.\r\n     * Implementation from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#answer-2117523\r\n     * Be aware Math.random() could cause collisions, but:\r\n     * \"All but 6 of the 128 bits of the ID are randomly generated, which means that for any two ids, there's a 1 in 2^^122 (or 5.3x10^^36) chance they'll collide\"\r\n     * @returns a string containing a new GUID\r\n     */\r\n    public static RandomId(): string {\r\n        return Tools.RandomId();\r\n    }\r\n\r\n    private static _GetGeometryByLoadedUniqueId(uniqueId: string, scene: Scene) {\r\n        for (let index = 0; index < scene.geometries.length; index++) {\r\n            if (scene.geometries[index]._loadedUniqueId === uniqueId) {\r\n                return scene.geometries[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _ImportGeometry(parsedGeometry: any, mesh: Mesh): void {\r\n        const scene = mesh.getScene();\r\n\r\n        // Geometry\r\n        const geometryUniqueId = parsedGeometry.geometryUniqueId;\r\n        const geometryId = parsedGeometry.geometryId;\r\n        if (geometryUniqueId || geometryId) {\r\n            const geometry = geometryUniqueId ? this._GetGeometryByLoadedUniqueId(geometryUniqueId, scene) : scene.getGeometryById(geometryId);\r\n            if (geometry) {\r\n                geometry.applyToMesh(mesh);\r\n            }\r\n        } else if (parsedGeometry instanceof ArrayBuffer) {\r\n            const binaryInfo = mesh._binaryInfo;\r\n\r\n            if (binaryInfo.positionsAttrDesc && binaryInfo.positionsAttrDesc.count > 0) {\r\n                const positionsData = new Float32Array(parsedGeometry, binaryInfo.positionsAttrDesc.offset, binaryInfo.positionsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.PositionKind, positionsData, false);\r\n            }\r\n\r\n            if (binaryInfo.normalsAttrDesc && binaryInfo.normalsAttrDesc.count > 0) {\r\n                const normalsData = new Float32Array(parsedGeometry, binaryInfo.normalsAttrDesc.offset, binaryInfo.normalsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.NormalKind, normalsData, false);\r\n            }\r\n\r\n            if (binaryInfo.tangetsAttrDesc && binaryInfo.tangetsAttrDesc.count > 0) {\r\n                const tangentsData = new Float32Array(parsedGeometry, binaryInfo.tangetsAttrDesc.offset, binaryInfo.tangetsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.TangentKind, tangentsData, false);\r\n            }\r\n\r\n            if (binaryInfo.uvsAttrDesc && binaryInfo.uvsAttrDesc.count > 0) {\r\n                const uvsData = new Float32Array(parsedGeometry, binaryInfo.uvsAttrDesc.offset, binaryInfo.uvsAttrDesc.count);\r\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvsData.length; index += 2) {\r\n                        uvsData[index] = 1 - uvsData[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UVKind, uvsData, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs2AttrDesc && binaryInfo.uvs2AttrDesc.count > 0) {\r\n                const uvs2Data = new Float32Array(parsedGeometry, binaryInfo.uvs2AttrDesc.offset, binaryInfo.uvs2AttrDesc.count);\r\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs2Data.length; index += 2) {\r\n                        uvs2Data[index] = 1 - uvs2Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV2Kind, uvs2Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs3AttrDesc && binaryInfo.uvs3AttrDesc.count > 0) {\r\n                const uvs3Data = new Float32Array(parsedGeometry, binaryInfo.uvs3AttrDesc.offset, binaryInfo.uvs3AttrDesc.count);\r\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs3Data.length; index += 2) {\r\n                        uvs3Data[index] = 1 - uvs3Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV3Kind, uvs3Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs4AttrDesc && binaryInfo.uvs4AttrDesc.count > 0) {\r\n                const uvs4Data = new Float32Array(parsedGeometry, binaryInfo.uvs4AttrDesc.offset, binaryInfo.uvs4AttrDesc.count);\r\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs4Data.length; index += 2) {\r\n                        uvs4Data[index] = 1 - uvs4Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV4Kind, uvs4Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs5AttrDesc && binaryInfo.uvs5AttrDesc.count > 0) {\r\n                const uvs5Data = new Float32Array(parsedGeometry, binaryInfo.uvs5AttrDesc.offset, binaryInfo.uvs5AttrDesc.count);\r\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs5Data.length; index += 2) {\r\n                        uvs5Data[index] = 1 - uvs5Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV5Kind, uvs5Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs6AttrDesc && binaryInfo.uvs6AttrDesc.count > 0) {\r\n                const uvs6Data = new Float32Array(parsedGeometry, binaryInfo.uvs6AttrDesc.offset, binaryInfo.uvs6AttrDesc.count);\r\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs6Data.length; index += 2) {\r\n                        uvs6Data[index] = 1 - uvs6Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV6Kind, uvs6Data, false);\r\n            }\r\n\r\n            if (binaryInfo.colorsAttrDesc && binaryInfo.colorsAttrDesc.count > 0) {\r\n                const colorsData = new Float32Array(parsedGeometry, binaryInfo.colorsAttrDesc.offset, binaryInfo.colorsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.ColorKind, colorsData, false, binaryInfo.colorsAttrDesc.stride);\r\n            }\r\n\r\n            if (binaryInfo.matricesIndicesAttrDesc && binaryInfo.matricesIndicesAttrDesc.count > 0) {\r\n                const matricesIndicesData = new Int32Array(parsedGeometry, binaryInfo.matricesIndicesAttrDesc.offset, binaryInfo.matricesIndicesAttrDesc.count);\r\n                const floatIndices = [];\r\n                for (let i = 0; i < matricesIndicesData.length; i++) {\r\n                    const index = matricesIndicesData[i];\r\n                    floatIndices.push(index & 0x000000ff);\r\n                    floatIndices.push((index & 0x0000ff00) >> 8);\r\n                    floatIndices.push((index & 0x00ff0000) >> 16);\r\n                    floatIndices.push((index >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, floatIndices, false);\r\n            }\r\n\r\n            if (binaryInfo.matricesIndicesExtraAttrDesc && binaryInfo.matricesIndicesExtraAttrDesc.count > 0) {\r\n                const matricesIndicesData = new Int32Array(parsedGeometry, binaryInfo.matricesIndicesExtraAttrDesc.offset, binaryInfo.matricesIndicesExtraAttrDesc.count);\r\n                const floatIndices = [];\r\n                for (let i = 0; i < matricesIndicesData.length; i++) {\r\n                    const index = matricesIndicesData[i];\r\n                    floatIndices.push(index & 0x000000ff);\r\n                    floatIndices.push((index & 0x0000ff00) >> 8);\r\n                    floatIndices.push((index & 0x00ff0000) >> 16);\r\n                    floatIndices.push((index >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, floatIndices, false);\r\n            }\r\n\r\n            if (binaryInfo.matricesWeightsAttrDesc && binaryInfo.matricesWeightsAttrDesc.count > 0) {\r\n                const matricesWeightsData = new Float32Array(parsedGeometry, binaryInfo.matricesWeightsAttrDesc.offset, binaryInfo.matricesWeightsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsData, false);\r\n            }\r\n\r\n            if (binaryInfo.indicesAttrDesc && binaryInfo.indicesAttrDesc.count > 0) {\r\n                const indicesData = new Int32Array(parsedGeometry, binaryInfo.indicesAttrDesc.offset, binaryInfo.indicesAttrDesc.count);\r\n                mesh.setIndices(indicesData, null);\r\n            }\r\n\r\n            if (binaryInfo.subMeshesAttrDesc && binaryInfo.subMeshesAttrDesc.count > 0) {\r\n                const subMeshesData = new Int32Array(parsedGeometry, binaryInfo.subMeshesAttrDesc.offset, binaryInfo.subMeshesAttrDesc.count * 5);\r\n\r\n                mesh.subMeshes = [];\r\n                for (let i = 0; i < binaryInfo.subMeshesAttrDesc.count; i++) {\r\n                    const materialIndex = subMeshesData[i * 5 + 0];\r\n                    const verticesStart = subMeshesData[i * 5 + 1];\r\n                    const verticesCount = subMeshesData[i * 5 + 2];\r\n                    const indexStart = subMeshesData[i * 5 + 3];\r\n                    const indexCount = subMeshesData[i * 5 + 4];\r\n\r\n                    SubMesh.AddToMesh(materialIndex, verticesStart, verticesCount, indexStart, indexCount, <AbstractMesh>mesh);\r\n                }\r\n            }\r\n        } else if (parsedGeometry.positions && parsedGeometry.normals && parsedGeometry.indices) {\r\n            mesh.setVerticesData(VertexBuffer.PositionKind, parsedGeometry.positions, parsedGeometry.positions._updatable);\r\n\r\n            mesh.setVerticesData(VertexBuffer.NormalKind, parsedGeometry.normals, parsedGeometry.normals._updatable);\r\n\r\n            if (parsedGeometry.tangents) {\r\n                mesh.setVerticesData(VertexBuffer.TangentKind, parsedGeometry.tangents, parsedGeometry.tangents._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs) {\r\n                mesh.setVerticesData(VertexBuffer.UVKind, parsedGeometry.uvs, parsedGeometry.uvs._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs2) {\r\n                mesh.setVerticesData(VertexBuffer.UV2Kind, parsedGeometry.uvs2, parsedGeometry.uvs2._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs3) {\r\n                mesh.setVerticesData(VertexBuffer.UV3Kind, parsedGeometry.uvs3, parsedGeometry.uvs3._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs4) {\r\n                mesh.setVerticesData(VertexBuffer.UV4Kind, parsedGeometry.uvs4, parsedGeometry.uvs4._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs5) {\r\n                mesh.setVerticesData(VertexBuffer.UV5Kind, parsedGeometry.uvs5, parsedGeometry.uvs5._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs6) {\r\n                mesh.setVerticesData(VertexBuffer.UV6Kind, parsedGeometry.uvs6, parsedGeometry.uvs6._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.colors) {\r\n                mesh.setVerticesData(VertexBuffer.ColorKind, Color4.CheckColors4(parsedGeometry.colors, parsedGeometry.positions.length / 3), parsedGeometry.colors._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.matricesIndices) {\r\n                if (!parsedGeometry.matricesIndices._isExpanded) {\r\n                    const floatIndices = [];\r\n\r\n                    for (let i = 0; i < parsedGeometry.matricesIndices.length; i++) {\r\n                        const matricesIndex = parsedGeometry.matricesIndices[i];\r\n\r\n                        floatIndices.push(matricesIndex & 0x000000ff);\r\n                        floatIndices.push((matricesIndex & 0x0000ff00) >> 8);\r\n                        floatIndices.push((matricesIndex & 0x00ff0000) >> 16);\r\n                        floatIndices.push((matricesIndex >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                    }\r\n\r\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, floatIndices, parsedGeometry.matricesIndices._updatable);\r\n                } else {\r\n                    delete parsedGeometry.matricesIndices._isExpanded;\r\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, parsedGeometry.matricesIndices, parsedGeometry.matricesIndices._updatable);\r\n                }\r\n            }\r\n\r\n            if (parsedGeometry.matricesIndicesExtra) {\r\n                if (!parsedGeometry.matricesIndicesExtra._isExpanded) {\r\n                    const floatIndices = [];\r\n\r\n                    for (let i = 0; i < parsedGeometry.matricesIndicesExtra.length; i++) {\r\n                        const matricesIndex = parsedGeometry.matricesIndicesExtra[i];\r\n\r\n                        floatIndices.push(matricesIndex & 0x000000ff);\r\n                        floatIndices.push((matricesIndex & 0x0000ff00) >> 8);\r\n                        floatIndices.push((matricesIndex & 0x00ff0000) >> 16);\r\n                        floatIndices.push((matricesIndex >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                    }\r\n\r\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, floatIndices, parsedGeometry.matricesIndicesExtra._updatable);\r\n                } else {\r\n                    delete parsedGeometry.matricesIndices._isExpanded;\r\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, parsedGeometry.matricesIndicesExtra, parsedGeometry.matricesIndicesExtra._updatable);\r\n                }\r\n            }\r\n\r\n            if (parsedGeometry.matricesWeights) {\r\n                Geometry._CleanMatricesWeights(parsedGeometry, mesh);\r\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsKind, parsedGeometry.matricesWeights, parsedGeometry.matricesWeights._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.matricesWeightsExtra) {\r\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsExtraKind, parsedGeometry.matricesWeightsExtra, parsedGeometry.matricesWeights._updatable);\r\n            }\r\n\r\n            mesh.setIndices(parsedGeometry.indices, null);\r\n        }\r\n\r\n        // SubMeshes\r\n        if (parsedGeometry.subMeshes) {\r\n            mesh.subMeshes = [];\r\n            for (let subIndex = 0; subIndex < parsedGeometry.subMeshes.length; subIndex++) {\r\n                const parsedSubMesh = parsedGeometry.subMeshes[subIndex];\r\n\r\n                SubMesh.AddToMesh(\r\n                    parsedSubMesh.materialIndex,\r\n                    parsedSubMesh.verticesStart,\r\n                    parsedSubMesh.verticesCount,\r\n                    parsedSubMesh.indexStart,\r\n                    parsedSubMesh.indexCount,\r\n                    <AbstractMesh>mesh\r\n                );\r\n            }\r\n        }\r\n\r\n        // Flat shading\r\n        if (mesh._shouldGenerateFlatShading) {\r\n            mesh.convertToFlatShadedMesh();\r\n            mesh._shouldGenerateFlatShading = false;\r\n        }\r\n\r\n        // Update\r\n        mesh.computeWorldMatrix(true);\r\n\r\n        scene.onMeshImportedObservable.notifyObservers(<AbstractMesh>mesh);\r\n    }\r\n\r\n    private static _CleanMatricesWeights(parsedGeometry: any, mesh: Mesh): void {\r\n        const epsilon: number = 1e-3;\r\n        if (!SceneLoaderFlags.CleanBoneMatrixWeights) {\r\n            return;\r\n        }\r\n        let noInfluenceBoneIndex = 0.0;\r\n        if (parsedGeometry.skeletonId > -1) {\r\n            const skeleton = mesh.getScene().getLastSkeletonById(parsedGeometry.skeletonId);\r\n\r\n            if (!skeleton) {\r\n                return;\r\n            }\r\n            noInfluenceBoneIndex = skeleton.bones.length;\r\n        } else {\r\n            return;\r\n        }\r\n        const matricesIndices = <FloatArray>mesh.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n        const matricesIndicesExtra = <FloatArray>mesh.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\r\n        const matricesWeights = parsedGeometry.matricesWeights;\r\n        const matricesWeightsExtra = parsedGeometry.matricesWeightsExtra;\r\n        const influencers = parsedGeometry.numBoneInfluencer;\r\n        const size = matricesWeights.length;\r\n\r\n        for (let i = 0; i < size; i += 4) {\r\n            let weight = 0.0;\r\n            let firstZeroWeight = -1;\r\n            for (let j = 0; j < 4; j++) {\r\n                const w = matricesWeights[i + j];\r\n                weight += w;\r\n                if (w < epsilon && firstZeroWeight < 0) {\r\n                    firstZeroWeight = j;\r\n                }\r\n            }\r\n            if (matricesWeightsExtra) {\r\n                for (let j = 0; j < 4; j++) {\r\n                    const w = matricesWeightsExtra[i + j];\r\n                    weight += w;\r\n                    if (w < epsilon && firstZeroWeight < 0) {\r\n                        firstZeroWeight = j + 4;\r\n                    }\r\n                }\r\n            }\r\n            if (firstZeroWeight < 0 || firstZeroWeight > influencers - 1) {\r\n                firstZeroWeight = influencers - 1;\r\n            }\r\n            if (weight > epsilon) {\r\n                const mweight = 1.0 / weight;\r\n                for (let j = 0; j < 4; j++) {\r\n                    matricesWeights[i + j] *= mweight;\r\n                }\r\n                if (matricesWeightsExtra) {\r\n                    for (let j = 0; j < 4; j++) {\r\n                        matricesWeightsExtra[i + j] *= mweight;\r\n                    }\r\n                }\r\n            } else {\r\n                if (firstZeroWeight >= 4) {\r\n                    matricesWeightsExtra[i + firstZeroWeight - 4] = 1.0 - weight;\r\n                    matricesIndicesExtra[i + firstZeroWeight - 4] = noInfluenceBoneIndex;\r\n                } else {\r\n                    matricesWeights[i + firstZeroWeight] = 1.0 - weight;\r\n                    matricesIndices[i + firstZeroWeight] = noInfluenceBoneIndex;\r\n                }\r\n            }\r\n        }\r\n\r\n        mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, matricesIndices);\r\n        if (parsedGeometry.matricesWeightsExtra) {\r\n            mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, matricesIndicesExtra);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new geometry from persisted data (Using .babylon file format)\r\n     * @param parsedVertexData defines the persisted data\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root url to use to load assets (like delayed data)\r\n     * @returns the new geometry object\r\n     */\r\n    public static Parse(parsedVertexData: any, scene: Scene, rootUrl: string): Nullable<Geometry> {\r\n        const geometry = new Geometry(parsedVertexData.id, scene, undefined, parsedVertexData.updatable);\r\n        geometry._loadedUniqueId = parsedVertexData.uniqueId;\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(geometry, parsedVertexData.tags);\r\n        }\r\n\r\n        if (parsedVertexData.delayLoadingFile) {\r\n            geometry.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n            geometry.delayLoadingFile = rootUrl + parsedVertexData.delayLoadingFile;\r\n            geometry._boundingInfo = new BoundingInfo(Vector3.FromArray(parsedVertexData.boundingBoxMinimum), Vector3.FromArray(parsedVertexData.boundingBoxMaximum));\r\n\r\n            geometry._delayInfo = [];\r\n            if (parsedVertexData.hasUVs) {\r\n                geometry._delayInfo.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs2) {\r\n                geometry._delayInfo.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs3) {\r\n                geometry._delayInfo.push(VertexBuffer.UV3Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs4) {\r\n                geometry._delayInfo.push(VertexBuffer.UV4Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs5) {\r\n                geometry._delayInfo.push(VertexBuffer.UV5Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs6) {\r\n                geometry._delayInfo.push(VertexBuffer.UV6Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasColors) {\r\n                geometry._delayInfo.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (parsedVertexData.hasMatricesIndices) {\r\n                geometry._delayInfo.push(VertexBuffer.MatricesIndicesKind);\r\n            }\r\n\r\n            if (parsedVertexData.hasMatricesWeights) {\r\n                geometry._delayInfo.push(VertexBuffer.MatricesWeightsKind);\r\n            }\r\n\r\n            geometry._delayLoadingFunction = VertexData.ImportVertexData;\r\n        } else {\r\n            VertexData.ImportVertexData(parsedVertexData, geometry);\r\n        }\r\n\r\n        scene.pushGeometry(geometry, true);\r\n\r\n        return geometry;\r\n    }\r\n}\r\n", "import { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { serialize } from \"../Misc/decorators\";\r\nimport type { IStencilState } from \"../States/IStencilState\";\r\n\r\nimport type { Scene } from \"../scene\";\r\n\r\n/**\r\n * Class that holds the different stencil states of a material\r\n * Usage example: https://playground.babylonjs.com/#CW5PRI#10\r\n */\r\nexport class MaterialStencilState implements IStencilState {\r\n    /**\r\n     * Creates a material stencil state instance\r\n     */\r\n    public constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Resets all the stencil states to default values\r\n     */\r\n    public reset() {\r\n        this.enabled = false;\r\n        this.mask = 0xff;\r\n\r\n        this.func = Constants.ALWAYS;\r\n        this.funcRef = 1;\r\n        this.funcMask = 0xff;\r\n\r\n        this.opStencilFail = Constants.KEEP;\r\n        this.opDepthFail = Constants.KEEP;\r\n        this.opStencilDepthPass = Constants.REPLACE;\r\n    }\r\n\r\n    private _func: number;\r\n    /**\r\n     * Gets or sets the stencil function\r\n     */\r\n    @serialize()\r\n    public get func(): number {\r\n        return this._func;\r\n    }\r\n\r\n    public set func(value: number) {\r\n        this._func = value;\r\n    }\r\n\r\n    private _funcRef: number;\r\n    /**\r\n     * Gets or sets the stencil function reference\r\n     */\r\n    @serialize()\r\n    public get funcRef(): number {\r\n        return this._funcRef;\r\n    }\r\n\r\n    public set funcRef(value: number) {\r\n        this._funcRef = value;\r\n    }\r\n\r\n    private _funcMask: number;\r\n    /**\r\n     * Gets or sets the stencil function mask\r\n     */\r\n    @serialize()\r\n    public get funcMask(): number {\r\n        return this._funcMask;\r\n    }\r\n\r\n    public set funcMask(value: number) {\r\n        this._funcMask = value;\r\n    }\r\n\r\n    private _opStencilFail: number;\r\n    /**\r\n     * Gets or sets the operation when the stencil test fails\r\n     */\r\n    @serialize()\r\n    public get opStencilFail(): number {\r\n        return this._opStencilFail;\r\n    }\r\n\r\n    public set opStencilFail(value: number) {\r\n        this._opStencilFail = value;\r\n    }\r\n\r\n    private _opDepthFail: number;\r\n    /**\r\n     * Gets or sets the operation when the depth test fails\r\n     */\r\n    @serialize()\r\n    public get opDepthFail(): number {\r\n        return this._opDepthFail;\r\n    }\r\n\r\n    public set opDepthFail(value: number) {\r\n        this._opDepthFail = value;\r\n    }\r\n\r\n    private _opStencilDepthPass: number;\r\n    /**\r\n     * Gets or sets the operation when the stencil+depth test succeeds\r\n     */\r\n    @serialize()\r\n    public get opStencilDepthPass(): number {\r\n        return this._opStencilDepthPass;\r\n    }\r\n\r\n    public set opStencilDepthPass(value: number) {\r\n        this._opStencilDepthPass = value;\r\n    }\r\n\r\n    private _mask: number;\r\n    /**\r\n     * Gets or sets the stencil mask\r\n     */\r\n    @serialize()\r\n    public get mask(): number {\r\n        return this._mask;\r\n    }\r\n\r\n    public set mask(value: number) {\r\n        this._mask = value;\r\n    }\r\n\r\n    private _enabled: boolean;\r\n    /**\r\n     * Enables or disables the stencil test\r\n     */\r\n    @serialize()\r\n    public get enabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    public set enabled(value: boolean) {\r\n        this._enabled = value;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name, useful for serialization or dynamic coding.\r\n     * @returns \"MaterialStencilState\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"MaterialStencilState\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current configuration into another one.\r\n     * @param stencilState defines stencil state where to copy the info\r\n     */\r\n    public copyTo(stencilState: MaterialStencilState): void {\r\n        SerializationHelper.Clone(() => stencilState, this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this stencil configuration.\r\n     * @returns - An object with the serialized config.\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a stencil state configuration from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene Defines the scene we are parsing for\r\n     * @param rootUrl Defines the rootUrl to load from\r\n     */\r\n    public parse(source: any, scene: Scene, rootUrl: string): void {\r\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\r\n    }\r\n}\r\n", "import type { ShaderCustomProcessingFunction } from \"../Engines/Processors/shaderProcessingOptions\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\n\r\nimport type { BaseTexture } from \"./Textures/baseTexture\";\r\nimport type { EffectFallbacks } from \"./effectFallbacks\";\r\nimport type { MaterialDefines } from \"./materialDefines\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport type { RenderTargetTexture } from \"./Textures/renderTargetTexture\";\r\n\r\n/** @internal */\r\nexport type MaterialPluginCreated = {};\r\n\r\n/** @internal */\r\nexport type MaterialPluginDisposed = {\r\n    forceDisposeTextures?: boolean;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginHasTexture = {\r\n    hasTexture: boolean;\r\n    texture: BaseTexture;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginIsReadyForSubMesh = {\r\n    isReadyForSubMesh: boolean;\r\n    defines: MaterialDefines;\r\n    subMesh: SubMesh;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginGetDefineNames = {\r\n    defineNames?: { [name: string]: { type: string; default: any } };\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginPrepareEffect = {\r\n    defines: MaterialDefines;\r\n    fallbacks: EffectFallbacks;\r\n    fallbackRank: number;\r\n    customCode?: ShaderCustomProcessingFunction;\r\n    attributes: string[];\r\n    uniforms: string[];\r\n    samplers: string[];\r\n    uniformBuffersNames: string[];\r\n    mesh: AbstractMesh;\r\n    indexParameters: any;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginPrepareDefines = {\r\n    defines: MaterialDefines;\r\n    mesh: AbstractMesh;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginPrepareUniformBuffer = {\r\n    ubo: UniformBuffer;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginBindForSubMesh = {\r\n    subMesh: SubMesh;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginGetAnimatables = {\r\n    animatables: IAnimatable[];\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginGetActiveTextures = {\r\n    activeTextures: BaseTexture[];\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginFillRenderTargetTextures = {\r\n    renderTargets: SmartArray<RenderTargetTexture>;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginHasRenderTargetTextures = {\r\n    hasRenderTargetTextures: boolean;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginHardBindForSubMesh = {\r\n    subMesh: SubMesh;\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nexport enum MaterialPluginEvent {\r\n    Created = 0x0001,\r\n    Disposed = 0x0002,\r\n    GetDefineNames = 0x0004,\r\n    PrepareUniformBuffer = 0x0008,\r\n    IsReadyForSubMesh = 0x0010,\r\n    PrepareDefines = 0x0020,\r\n    BindForSubMesh = 0x0040,\r\n    PrepareEffect = 0x0080,\r\n    GetAnimatables = 0x0100,\r\n    GetActiveTextures = 0x0200,\r\n    HasTexture = 0x0400,\r\n    FillRenderTargetTextures = 0x0800,\r\n    HasRenderTargetTextures = 0x1000,\r\n    HardBindForSubMesh = 0x2000,\r\n}\r\n", "import type { Effect } from \"./effect\";\r\nimport type { IClipPlanesHolder } from \"../Misc/interfaces/iClipPlanesHolder\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\n/** @internal */\r\nexport function addClipPlaneUniforms(uniforms: string[]): void {\r\n    if (uniforms.indexOf(\"vClipPlane\") === -1) {\r\n        uniforms.push(\"vClipPlane\");\r\n    }\r\n    if (uniforms.indexOf(\"vClipPlane2\") === -1) {\r\n        uniforms.push(\"vClipPlane2\");\r\n    }\r\n    if (uniforms.indexOf(\"vClipPlane3\") === -1) {\r\n        uniforms.push(\"vClipPlane3\");\r\n    }\r\n    if (uniforms.indexOf(\"vClipPlane4\") === -1) {\r\n        uniforms.push(\"vClipPlane4\");\r\n    }\r\n    if (uniforms.indexOf(\"vClipPlane5\") === -1) {\r\n        uniforms.push(\"vClipPlane5\");\r\n    }\r\n    if (uniforms.indexOf(\"vClipPlane6\") === -1) {\r\n        uniforms.push(\"vClipPlane6\");\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport function prepareStringDefinesForClipPlanes(primaryHolder: IClipPlanesHolder, secondaryHolder: IClipPlanesHolder, defines: string[]): void {\r\n    const clipPlane = !!(primaryHolder.clipPlane ?? secondaryHolder.clipPlane);\r\n    const clipPlane2 = !!(primaryHolder.clipPlane2 ?? secondaryHolder.clipPlane2);\r\n    const clipPlane3 = !!(primaryHolder.clipPlane3 ?? secondaryHolder.clipPlane3);\r\n    const clipPlane4 = !!(primaryHolder.clipPlane4 ?? secondaryHolder.clipPlane4);\r\n    const clipPlane5 = !!(primaryHolder.clipPlane5 ?? secondaryHolder.clipPlane5);\r\n    const clipPlane6 = !!(primaryHolder.clipPlane6 ?? secondaryHolder.clipPlane6);\r\n\r\n    if (clipPlane) defines.push(\"#define CLIPPLANE\");\r\n    if (clipPlane2) defines.push(\"#define CLIPPLANE2\");\r\n    if (clipPlane3) defines.push(\"#define CLIPPLANE3\");\r\n    if (clipPlane4) defines.push(\"#define CLIPPLANE4\");\r\n    if (clipPlane5) defines.push(\"#define CLIPPLANE5\");\r\n    if (clipPlane6) defines.push(\"#define CLIPPLANE6\");\r\n}\r\n\r\n/** @internal */\r\nexport function prepareDefinesForClipPlanes(primaryHolder: IClipPlanesHolder, secondaryHolder: IClipPlanesHolder, defines: Record<string, any>): boolean {\r\n    let changed = false;\r\n\r\n    const clipPlane = !!(primaryHolder.clipPlane ?? secondaryHolder.clipPlane);\r\n    const clipPlane2 = !!(primaryHolder.clipPlane2 ?? secondaryHolder.clipPlane2);\r\n    const clipPlane3 = !!(primaryHolder.clipPlane3 ?? secondaryHolder.clipPlane3);\r\n    const clipPlane4 = !!(primaryHolder.clipPlane4 ?? secondaryHolder.clipPlane4);\r\n    const clipPlane5 = !!(primaryHolder.clipPlane5 ?? secondaryHolder.clipPlane5);\r\n    const clipPlane6 = !!(primaryHolder.clipPlane6 ?? secondaryHolder.clipPlane6);\r\n\r\n    // Do not factorize this code, it breaks browsers optimizations.\r\n    if (defines[\"CLIPPLANE\"] !== clipPlane) {\r\n        defines[\"CLIPPLANE\"] = clipPlane;\r\n        changed = true;\r\n    }\r\n    if (defines[\"CLIPPLANE2\"] !== clipPlane2) {\r\n        defines[\"CLIPPLANE2\"] = clipPlane2;\r\n        changed = true;\r\n    }\r\n    if (defines[\"CLIPPLANE3\"] !== clipPlane3) {\r\n        defines[\"CLIPPLANE3\"] = clipPlane3;\r\n        changed = true;\r\n    }\r\n    if (defines[\"CLIPPLANE4\"] !== clipPlane4) {\r\n        defines[\"CLIPPLANE4\"] = clipPlane4;\r\n        changed = true;\r\n    }\r\n    if (defines[\"CLIPPLANE5\"] !== clipPlane5) {\r\n        defines[\"CLIPPLANE5\"] = clipPlane5;\r\n        changed = true;\r\n    }\r\n    if (defines[\"CLIPPLANE6\"] !== clipPlane6) {\r\n        defines[\"CLIPPLANE6\"] = clipPlane6;\r\n        changed = true;\r\n    }\r\n\r\n    return changed;\r\n}\r\n\r\n/** @internal */\r\nexport function bindClipPlane(effect: Effect, primaryHolder: IClipPlanesHolder, secondaryHolder: IClipPlanesHolder): void {\r\n    let clipPlane = primaryHolder.clipPlane ?? secondaryHolder.clipPlane;\r\n    setClipPlane(effect, \"vClipPlane\", clipPlane);\r\n    clipPlane = primaryHolder.clipPlane2 ?? secondaryHolder.clipPlane2;\r\n    setClipPlane(effect, \"vClipPlane2\", clipPlane);\r\n    clipPlane = primaryHolder.clipPlane3 ?? secondaryHolder.clipPlane3;\r\n    setClipPlane(effect, \"vClipPlane3\", clipPlane);\r\n    clipPlane = primaryHolder.clipPlane4 ?? secondaryHolder.clipPlane4;\r\n    setClipPlane(effect, \"vClipPlane4\", clipPlane);\r\n    clipPlane = primaryHolder.clipPlane5 ?? secondaryHolder.clipPlane5;\r\n    setClipPlane(effect, \"vClipPlane5\", clipPlane);\r\n    clipPlane = primaryHolder.clipPlane6 ?? secondaryHolder.clipPlane6;\r\n    setClipPlane(effect, \"vClipPlane6\", clipPlane);\r\n}\r\n\r\nfunction setClipPlane(effect: Effect, uniformName: string, clipPlane: Nullable<Plane>): void {\r\n    if (clipPlane) {\r\n        effect.setFloat4(uniformName, clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\r\n    }\r\n}\r\n", "import { Logger } from \"../Misc/logger\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Effect, IEffectCreationOptions } from \"./effect\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { BaseTexture } from \"./Textures/baseTexture\";\r\nimport type { PrePassConfiguration } from \"./prePassConfiguration\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport type { MaterialDefines } from \"./materialDefines\";\r\nimport type { EffectFallbacks } from \"./effectFallbacks\";\r\nimport { LightConstants } from \"../Lights/lightConstants\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Material } from \"./material\";\r\nimport type { Nullable } from \"../types\";\r\nimport { prepareDefinesForClipPlanes } from \"./clipPlaneMaterialHelper\";\r\n\r\n// Temps\r\nconst _TempFogColor = Color3.Black();\r\nconst _TmpMorphInfluencers = { NUM_MORPH_INFLUENCERS: 0 };\r\n\r\n/**\r\n * Binds the logarithmic depth information from the scene to the effect for the given defines.\r\n * @param defines The generated defines used in the effect\r\n * @param effect The effect we are binding the data to\r\n * @param scene The scene we are willing to render with logarithmic scale for\r\n */\r\nexport function BindLogDepth(defines: any, effect: Effect, scene: Scene): void {\r\n    if (!defines || defines[\"LOGARITHMICDEPTH\"] || (defines.indexOf && defines.indexOf(\"LOGARITHMICDEPTH\") >= 0)) {\r\n        const camera = scene.activeCamera as Camera;\r\n        if (camera.mode === Constants.ORTHOGRAPHIC_CAMERA) {\r\n            Logger.Error(\"Logarithmic depth is not compatible with orthographic cameras!\", 20);\r\n        }\r\n        effect.setFloat(\"logarithmicDepthConstant\", 2.0 / (Math.log(camera.maxZ + 1.0) / Math.LN2));\r\n    }\r\n}\r\n\r\n/**\r\n * Binds the fog information from the scene to the effect for the given mesh.\r\n * @param scene The scene the lights belongs to\r\n * @param mesh The mesh we are binding the information to render\r\n * @param effect The effect we are binding the data to\r\n * @param linearSpace Defines if the fog effect is applied in linear space\r\n */\r\nexport function BindFogParameters(scene: Scene, mesh?: AbstractMesh, effect?: Effect, linearSpace = false): void {\r\n    if (effect && scene.fogEnabled && (!mesh || mesh.applyFog) && scene.fogMode !== Constants.FOGMODE_NONE) {\r\n        effect.setFloat4(\"vFogInfos\", scene.fogMode, scene.fogStart, scene.fogEnd, scene.fogDensity);\r\n        // Convert fog color to linear space if used in a linear space computed shader.\r\n        if (linearSpace) {\r\n            scene.fogColor.toLinearSpaceToRef(_TempFogColor, scene.getEngine().useExactSrgbConversions);\r\n            effect.setColor3(\"vFogColor\", _TempFogColor);\r\n        } else {\r\n            effect.setColor3(\"vFogColor\", scene.fogColor);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Prepares the list of attributes required for morph targets according to the effect defines.\r\n * @param attribs The current list of supported attribs\r\n * @param mesh The mesh to prepare the morph targets attributes for\r\n * @param influencers The number of influencers\r\n */\r\nexport function PrepareAttributesForMorphTargetsInfluencers(attribs: string[], mesh: AbstractMesh, influencers: number): void {\r\n    _TmpMorphInfluencers.NUM_MORPH_INFLUENCERS = influencers;\r\n    PrepareAttributesForMorphTargets(attribs, mesh, _TmpMorphInfluencers);\r\n}\r\n\r\n/**\r\n * Prepares the list of attributes required for morph targets according to the effect defines.\r\n * @param attribs The current list of supported attribs\r\n * @param mesh The mesh to prepare the morph targets attributes for\r\n * @param defines The current Defines of the effect\r\n */\r\nexport function PrepareAttributesForMorphTargets(attribs: string[], mesh: AbstractMesh, defines: any): void {\r\n    const influencers = defines[\"NUM_MORPH_INFLUENCERS\"];\r\n\r\n    if (influencers > 0 && EngineStore.LastCreatedEngine) {\r\n        const maxAttributesCount = EngineStore.LastCreatedEngine.getCaps().maxVertexAttribs;\r\n        const manager = (mesh as Mesh).morphTargetManager;\r\n        if (manager?.isUsingTextureForTargets) {\r\n            return;\r\n        }\r\n        const normal = manager && manager.supportsNormals && defines[\"NORMAL\"];\r\n        const tangent = manager && manager.supportsTangents && defines[\"TANGENT\"];\r\n        const uv = manager && manager.supportsUVs && defines[\"UV1\"];\r\n        for (let index = 0; index < influencers; index++) {\r\n            attribs.push(Constants.PositionKind + index);\r\n\r\n            if (normal) {\r\n                attribs.push(Constants.NormalKind + index);\r\n            }\r\n\r\n            if (tangent) {\r\n                attribs.push(Constants.TangentKind + index);\r\n            }\r\n\r\n            if (uv) {\r\n                attribs.push(Constants.UVKind + \"_\" + index);\r\n            }\r\n\r\n            if (attribs.length > maxAttributesCount) {\r\n                Logger.Error(\"Cannot add more vertex attributes for mesh \" + mesh.name);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Add the list of attributes required for instances to the attribs array.\r\n * @param attribs The current list of supported attribs\r\n * @param needsPreviousMatrices If the shader needs previous matrices\r\n */\r\nexport function PushAttributesForInstances(attribs: string[], needsPreviousMatrices: boolean = false): void {\r\n    attribs.push(\"world0\");\r\n    attribs.push(\"world1\");\r\n    attribs.push(\"world2\");\r\n    attribs.push(\"world3\");\r\n    if (needsPreviousMatrices) {\r\n        attribs.push(\"previousWorld0\");\r\n        attribs.push(\"previousWorld1\");\r\n        attribs.push(\"previousWorld2\");\r\n        attribs.push(\"previousWorld3\");\r\n    }\r\n}\r\n\r\n/**\r\n * Binds the morph targets information from the mesh to the effect.\r\n * @param abstractMesh The mesh we are binding the information to render\r\n * @param effect The effect we are binding the data to\r\n */\r\nexport function BindMorphTargetParameters(abstractMesh: AbstractMesh, effect: Effect): void {\r\n    const manager = (<Mesh>abstractMesh).morphTargetManager;\r\n    if (!abstractMesh || !manager) {\r\n        return;\r\n    }\r\n\r\n    effect.setFloatArray(\"morphTargetInfluences\", manager.influences);\r\n}\r\n\r\n/**\r\n * Binds the scene's uniform buffer to the effect.\r\n * @param effect defines the effect to bind to the scene uniform buffer\r\n * @param sceneUbo defines the uniform buffer storing scene data\r\n */\r\nexport function BindSceneUniformBuffer(effect: Effect, sceneUbo: UniformBuffer): void {\r\n    sceneUbo.bindToEffect(effect, \"Scene\");\r\n}\r\n\r\n/**\r\n * Helps preparing the defines values about the UVs in used in the effect.\r\n * UVs are shared as much as we can across channels in the shaders.\r\n * @param texture The texture we are preparing the UVs for\r\n * @param defines The defines to update\r\n * @param key The channel key \"diffuse\", \"specular\"... used in the shader\r\n */\r\nexport function PrepareDefinesForMergedUV(texture: BaseTexture, defines: any, key: string): void {\r\n    defines._needUVs = true;\r\n    defines[key] = true;\r\n    if (texture.optimizeUVAllocation && texture.getTextureMatrix().isIdentityAs3x2()) {\r\n        defines[key + \"DIRECTUV\"] = texture.coordinatesIndex + 1;\r\n        defines[\"MAINUV\" + (texture.coordinatesIndex + 1)] = true;\r\n    } else {\r\n        defines[key + \"DIRECTUV\"] = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Binds a texture matrix value to its corresponding uniform\r\n * @param texture The texture to bind the matrix for\r\n * @param uniformBuffer The uniform buffer receiving the data\r\n * @param key The channel key \"diffuse\", \"specular\"... used in the shader\r\n */\r\nexport function BindTextureMatrix(texture: BaseTexture, uniformBuffer: UniformBuffer, key: string): void {\r\n    const matrix = texture.getTextureMatrix();\r\n\r\n    uniformBuffer.updateMatrix(key + \"Matrix\", matrix);\r\n}\r\n\r\n/**\r\n * Prepares the list of attributes required for baked vertex animations according to the effect defines.\r\n * @param attribs The current list of supported attribs\r\n * @param mesh The mesh to prepare for baked vertex animations\r\n * @param defines The current Defines of the effect\r\n */\r\nexport function PrepareAttributesForBakedVertexAnimation(attribs: string[], mesh: AbstractMesh, defines: any): void {\r\n    const enabled = defines[\"BAKED_VERTEX_ANIMATION_TEXTURE\"] && defines[\"INSTANCES\"];\r\n\r\n    if (enabled) {\r\n        attribs.push(\"bakedVertexAnimationSettingsInstanced\");\r\n    }\r\n}\r\n\r\n// Copies the bones transformation matrices into the target array and returns the target's reference\r\nfunction _CopyBonesTransformationMatrices(source: Float32Array, target: Float32Array): Float32Array {\r\n    target.set(source);\r\n\r\n    return target;\r\n}\r\n\r\n/**\r\n * Binds the bones information from the mesh to the effect.\r\n * @param mesh The mesh we are binding the information to render\r\n * @param effect The effect we are binding the data to\r\n * @param prePassConfiguration Configuration for the prepass, in case prepass is activated\r\n */\r\nexport function BindBonesParameters(mesh?: AbstractMesh, effect?: Effect, prePassConfiguration?: PrePassConfiguration): void {\r\n    if (!effect || !mesh) {\r\n        return;\r\n    }\r\n    if (mesh.computeBonesUsingShaders && effect._bonesComputationForcedToCPU) {\r\n        mesh.computeBonesUsingShaders = false;\r\n    }\r\n\r\n    if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n        const skeleton = mesh.skeleton;\r\n\r\n        if (skeleton.isUsingTextureForMatrices && effect.getUniformIndex(\"boneTextureWidth\") > -1) {\r\n            const boneTexture = skeleton.getTransformMatrixTexture(mesh);\r\n            effect.setTexture(\"boneSampler\", boneTexture);\r\n            effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\r\n        } else {\r\n            const matrices = skeleton.getTransformMatrices(mesh);\r\n\r\n            if (matrices) {\r\n                effect.setMatrices(\"mBones\", matrices);\r\n                if (prePassConfiguration && mesh.getScene().prePassRenderer && mesh.getScene().prePassRenderer!.getIndex(Constants.PREPASS_VELOCITY_TEXTURE_TYPE)) {\r\n                    if (!prePassConfiguration.previousBones[mesh.uniqueId]) {\r\n                        prePassConfiguration.previousBones[mesh.uniqueId] = matrices.slice();\r\n                    }\r\n                    effect.setMatrices(\"mPreviousBones\", prePassConfiguration.previousBones[mesh.uniqueId]);\r\n                    _CopyBonesTransformationMatrices(matrices, prePassConfiguration.previousBones[mesh.uniqueId]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Binds the light information to the effect.\r\n * @param light The light containing the generator\r\n * @param effect The effect we are binding the data to\r\n * @param lightIndex The light index in the effect used to render\r\n */\r\nexport function BindLightProperties(light: Light, effect: Effect, lightIndex: number): void {\r\n    light.transferToEffect(effect, lightIndex + \"\");\r\n}\r\n\r\n/**\r\n * Binds the lights information from the scene to the effect for the given mesh.\r\n * @param light Light to bind\r\n * @param lightIndex Light index\r\n * @param scene The scene where the light belongs to\r\n * @param effect The effect we are binding the data to\r\n * @param useSpecular Defines if specular is supported\r\n * @param receiveShadows Defines if the effect (mesh) we bind the light for receives shadows\r\n */\r\nexport function BindLight(light: Light, lightIndex: number, scene: Scene, effect: Effect, useSpecular: boolean, receiveShadows = true): void {\r\n    light._bindLight(lightIndex, scene, effect, useSpecular, receiveShadows);\r\n}\r\n\r\n/**\r\n * Binds the lights information from the scene to the effect for the given mesh.\r\n * @param scene The scene the lights belongs to\r\n * @param mesh The mesh we are binding the information to render\r\n * @param effect The effect we are binding the data to\r\n * @param defines The generated defines for the effect\r\n * @param maxSimultaneousLights The maximum number of light that can be bound to the effect\r\n */\r\nexport function BindLights(scene: Scene, mesh: AbstractMesh, effect: Effect, defines: any, maxSimultaneousLights = 4): void {\r\n    const len = Math.min(mesh.lightSources.length, maxSimultaneousLights);\r\n\r\n    for (let i = 0; i < len; i++) {\r\n        const light = mesh.lightSources[i];\r\n        BindLight(light, i, scene, effect, typeof defines === \"boolean\" ? defines : defines[\"SPECULARTERM\"], mesh.receiveShadows);\r\n    }\r\n}\r\n\r\n/**\r\n * Prepares the list of attributes required for bones according to the effect defines.\r\n * @param attribs The current list of supported attribs\r\n * @param mesh The mesh to prepare the bones attributes for\r\n * @param defines The current Defines of the effect\r\n * @param fallbacks The current effect fallback strategy\r\n */\r\nexport function PrepareAttributesForBones(attribs: string[], mesh: AbstractMesh, defines: any, fallbacks: EffectFallbacks): void {\r\n    if (defines[\"NUM_BONE_INFLUENCERS\"] > 0) {\r\n        fallbacks.addCPUSkinningFallback(0, mesh);\r\n\r\n        attribs.push(Constants.MatricesIndicesKind);\r\n        attribs.push(Constants.MatricesWeightsKind);\r\n        if (defines[\"NUM_BONE_INFLUENCERS\"] > 4) {\r\n            attribs.push(Constants.MatricesIndicesExtraKind);\r\n            attribs.push(Constants.MatricesWeightsExtraKind);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Check and prepare the list of attributes required for instances according to the effect defines.\r\n * @param attribs The current list of supported attribs\r\n * @param defines The current MaterialDefines of the effect\r\n */\r\nexport function PrepareAttributesForInstances(attribs: string[], defines: MaterialDefines): void {\r\n    if (defines[\"INSTANCES\"] || defines[\"THIN_INSTANCES\"]) {\r\n        PushAttributesForInstances(attribs, !!defines[\"PREPASS_VELOCITY\"]);\r\n    }\r\n\r\n    if (defines.INSTANCESCOLOR) {\r\n        attribs.push(Constants.ColorInstanceKind);\r\n    }\r\n}\r\n\r\n/**\r\n * This helps decreasing rank by rank the shadow quality (0 being the highest rank and quality)\r\n * @param defines The defines to update while falling back\r\n * @param fallbacks The authorized effect fallbacks\r\n * @param maxSimultaneousLights The maximum number of lights allowed\r\n * @param rank the current rank of the Effect\r\n * @returns The newly affected rank\r\n */\r\nexport function HandleFallbacksForShadows(defines: any, fallbacks: EffectFallbacks, maxSimultaneousLights = 4, rank = 0): number {\r\n    let lightFallbackRank = 0;\r\n    for (let lightIndex = 0; lightIndex < maxSimultaneousLights; lightIndex++) {\r\n        if (!defines[\"LIGHT\" + lightIndex]) {\r\n            break;\r\n        }\r\n\r\n        if (lightIndex > 0) {\r\n            lightFallbackRank = rank + lightIndex;\r\n            fallbacks.addFallback(lightFallbackRank, \"LIGHT\" + lightIndex);\r\n        }\r\n\r\n        if (!defines[\"SHADOWS\"]) {\r\n            if (defines[\"SHADOW\" + lightIndex]) {\r\n                fallbacks.addFallback(rank, \"SHADOW\" + lightIndex);\r\n            }\r\n\r\n            if (defines[\"SHADOWPCF\" + lightIndex]) {\r\n                fallbacks.addFallback(rank, \"SHADOWPCF\" + lightIndex);\r\n            }\r\n\r\n            if (defines[\"SHADOWPCSS\" + lightIndex]) {\r\n                fallbacks.addFallback(rank, \"SHADOWPCSS\" + lightIndex);\r\n            }\r\n\r\n            if (defines[\"SHADOWPOISSON\" + lightIndex]) {\r\n                fallbacks.addFallback(rank, \"SHADOWPOISSON\" + lightIndex);\r\n            }\r\n\r\n            if (defines[\"SHADOWESM\" + lightIndex]) {\r\n                fallbacks.addFallback(rank, \"SHADOWESM\" + lightIndex);\r\n            }\r\n\r\n            if (defines[\"SHADOWCLOSEESM\" + lightIndex]) {\r\n                fallbacks.addFallback(rank, \"SHADOWCLOSEESM\" + lightIndex);\r\n            }\r\n        }\r\n    }\r\n    return lightFallbackRank++;\r\n}\r\n\r\n/**\r\n * Gets the current status of the fog (should it be enabled?)\r\n * @param mesh defines the mesh to evaluate for fog support\r\n * @param scene defines the hosting scene\r\n * @returns true if fog must be enabled\r\n */\r\nexport function GetFogState(mesh: AbstractMesh, scene: Scene) {\r\n    return scene.fogEnabled && mesh.applyFog && scene.fogMode !== Constants.FOGMODE_NONE;\r\n}\r\n\r\n/**\r\n * Helper used to prepare the list of defines associated with misc. values for shader compilation\r\n * @param mesh defines the current mesh\r\n * @param scene defines the current scene\r\n * @param useLogarithmicDepth defines if logarithmic depth has to be turned on\r\n * @param pointsCloud defines if point cloud rendering has to be turned on\r\n * @param fogEnabled defines if fog has to be turned on\r\n * @param alphaTest defines if alpha testing has to be turned on\r\n * @param defines defines the current list of defines\r\n * @param applyDecalAfterDetail Defines if the decal is applied after or before the detail\r\n */\r\nexport function PrepareDefinesForMisc(\r\n    mesh: AbstractMesh,\r\n    scene: Scene,\r\n    useLogarithmicDepth: boolean,\r\n    pointsCloud: boolean,\r\n    fogEnabled: boolean,\r\n    alphaTest: boolean,\r\n    defines: any,\r\n    applyDecalAfterDetail: boolean = false\r\n): void {\r\n    if (defines._areMiscDirty) {\r\n        defines[\"LOGARITHMICDEPTH\"] = useLogarithmicDepth;\r\n        defines[\"POINTSIZE\"] = pointsCloud;\r\n        defines[\"FOG\"] = fogEnabled && GetFogState(mesh, scene);\r\n        defines[\"NONUNIFORMSCALING\"] = mesh.nonUniformScaling;\r\n        defines[\"ALPHATEST\"] = alphaTest;\r\n        defines[\"DECAL_AFTER_DETAIL\"] = applyDecalAfterDetail;\r\n    }\r\n}\r\n\r\n/**\r\n * Prepares the defines related to the light information passed in parameter\r\n * @param scene The scene we are intending to draw\r\n * @param mesh The mesh the effect is compiling for\r\n * @param defines The defines to update\r\n * @param specularSupported Specifies whether specular is supported or not (override lights data)\r\n * @param maxSimultaneousLights Specifies how manuy lights can be added to the effect at max\r\n * @param disableLighting Specifies whether the lighting is disabled (override scene and light)\r\n * @returns true if normals will be required for the rest of the effect\r\n */\r\nexport function PrepareDefinesForLights(scene: Scene, mesh: AbstractMesh, defines: any, specularSupported: boolean, maxSimultaneousLights = 4, disableLighting = false): boolean {\r\n    if (!defines._areLightsDirty) {\r\n        return defines._needNormals;\r\n    }\r\n\r\n    let lightIndex = 0;\r\n    const state = {\r\n        needNormals: defines._needNormals, // prevents overriding previous reflection or other needs for normals\r\n        needRebuild: false,\r\n        lightmapMode: false,\r\n        shadowEnabled: false,\r\n        specularEnabled: false,\r\n    };\r\n\r\n    if (scene.lightsEnabled && !disableLighting) {\r\n        for (const light of mesh.lightSources) {\r\n            PrepareDefinesForLight(scene, mesh, light, lightIndex, defines, specularSupported, state);\r\n\r\n            lightIndex++;\r\n            if (lightIndex === maxSimultaneousLights) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    defines[\"SPECULARTERM\"] = state.specularEnabled;\r\n    defines[\"SHADOWS\"] = state.shadowEnabled;\r\n\r\n    // Resetting all other lights if any\r\n    for (let index = lightIndex; index < maxSimultaneousLights; index++) {\r\n        if (defines[\"LIGHT\" + index] !== undefined) {\r\n            defines[\"LIGHT\" + index] = false;\r\n            defines[\"HEMILIGHT\" + index] = false;\r\n            defines[\"POINTLIGHT\" + index] = false;\r\n            defines[\"DIRLIGHT\" + index] = false;\r\n            defines[\"SPOTLIGHT\" + index] = false;\r\n            defines[\"SHADOW\" + index] = false;\r\n            defines[\"SHADOWCSM\" + index] = false;\r\n            defines[\"SHADOWCSMDEBUG\" + index] = false;\r\n            defines[\"SHADOWCSMNUM_CASCADES\" + index] = false;\r\n            defines[\"SHADOWCSMUSESHADOWMAXZ\" + index] = false;\r\n            defines[\"SHADOWCSMNOBLEND\" + index] = false;\r\n            defines[\"SHADOWCSM_RIGHTHANDED\" + index] = false;\r\n            defines[\"SHADOWPCF\" + index] = false;\r\n            defines[\"SHADOWPCSS\" + index] = false;\r\n            defines[\"SHADOWPOISSON\" + index] = false;\r\n            defines[\"SHADOWESM\" + index] = false;\r\n            defines[\"SHADOWCLOSEESM\" + index] = false;\r\n            defines[\"SHADOWCUBE\" + index] = false;\r\n            defines[\"SHADOWLOWQUALITY\" + index] = false;\r\n            defines[\"SHADOWMEDIUMQUALITY\" + index] = false;\r\n        }\r\n    }\r\n\r\n    const caps = scene.getEngine().getCaps();\r\n\r\n    if (defines[\"SHADOWFLOAT\"] === undefined) {\r\n        state.needRebuild = true;\r\n    }\r\n\r\n    defines[\"SHADOWFLOAT\"] =\r\n        state.shadowEnabled && ((caps.textureFloatRender && caps.textureFloatLinearFiltering) || (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering));\r\n    defines[\"LIGHTMAPEXCLUDED\"] = state.lightmapMode;\r\n\r\n    if (state.needRebuild) {\r\n        defines.rebuild();\r\n    }\r\n\r\n    return state.needNormals;\r\n}\r\n\r\n/**\r\n * Prepares the defines related to the light information passed in parameter\r\n * @param scene The scene we are intending to draw\r\n * @param mesh The mesh the effect is compiling for\r\n * @param light The light the effect is compiling for\r\n * @param lightIndex The index of the light\r\n * @param defines The defines to update\r\n * @param specularSupported Specifies whether specular is supported or not (override lights data)\r\n * @param state Defines the current state regarding what is needed (normals, etc...)\r\n * @param state.needNormals\r\n * @param state.needRebuild\r\n * @param state.shadowEnabled\r\n * @param state.specularEnabled\r\n * @param state.lightmapMode\r\n */\r\nexport function PrepareDefinesForLight(\r\n    scene: Scene,\r\n    mesh: AbstractMesh,\r\n    light: Light,\r\n    lightIndex: number,\r\n    defines: any,\r\n    specularSupported: boolean,\r\n    state: {\r\n        needNormals: boolean;\r\n        needRebuild: boolean;\r\n        shadowEnabled: boolean;\r\n        specularEnabled: boolean;\r\n        lightmapMode: boolean;\r\n    }\r\n) {\r\n    state.needNormals = true;\r\n\r\n    if (defines[\"LIGHT\" + lightIndex] === undefined) {\r\n        state.needRebuild = true;\r\n    }\r\n\r\n    defines[\"LIGHT\" + lightIndex] = true;\r\n\r\n    defines[\"SPOTLIGHT\" + lightIndex] = false;\r\n    defines[\"HEMILIGHT\" + lightIndex] = false;\r\n    defines[\"POINTLIGHT\" + lightIndex] = false;\r\n    defines[\"DIRLIGHT\" + lightIndex] = false;\r\n\r\n    light.prepareLightSpecificDefines(defines, lightIndex);\r\n\r\n    // FallOff.\r\n    defines[\"LIGHT_FALLOFF_PHYSICAL\" + lightIndex] = false;\r\n    defines[\"LIGHT_FALLOFF_GLTF\" + lightIndex] = false;\r\n    defines[\"LIGHT_FALLOFF_STANDARD\" + lightIndex] = false;\r\n\r\n    switch (light.falloffType) {\r\n        case LightConstants.FALLOFF_GLTF:\r\n            defines[\"LIGHT_FALLOFF_GLTF\" + lightIndex] = true;\r\n            break;\r\n        case LightConstants.FALLOFF_PHYSICAL:\r\n            defines[\"LIGHT_FALLOFF_PHYSICAL\" + lightIndex] = true;\r\n            break;\r\n        case LightConstants.FALLOFF_STANDARD:\r\n            defines[\"LIGHT_FALLOFF_STANDARD\" + lightIndex] = true;\r\n            break;\r\n    }\r\n\r\n    // Specular\r\n    if (specularSupported && !light.specular.equalsFloats(0, 0, 0)) {\r\n        state.specularEnabled = true;\r\n    }\r\n\r\n    // Shadows\r\n    defines[\"SHADOW\" + lightIndex] = false;\r\n    defines[\"SHADOWCSM\" + lightIndex] = false;\r\n    defines[\"SHADOWCSMDEBUG\" + lightIndex] = false;\r\n    defines[\"SHADOWCSMNUM_CASCADES\" + lightIndex] = false;\r\n    defines[\"SHADOWCSMUSESHADOWMAXZ\" + lightIndex] = false;\r\n    defines[\"SHADOWCSMNOBLEND\" + lightIndex] = false;\r\n    defines[\"SHADOWCSM_RIGHTHANDED\" + lightIndex] = false;\r\n    defines[\"SHADOWPCF\" + lightIndex] = false;\r\n    defines[\"SHADOWPCSS\" + lightIndex] = false;\r\n    defines[\"SHADOWPOISSON\" + lightIndex] = false;\r\n    defines[\"SHADOWESM\" + lightIndex] = false;\r\n    defines[\"SHADOWCLOSEESM\" + lightIndex] = false;\r\n    defines[\"SHADOWCUBE\" + lightIndex] = false;\r\n    defines[\"SHADOWLOWQUALITY\" + lightIndex] = false;\r\n    defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = false;\r\n\r\n    if (mesh && mesh.receiveShadows && scene.shadowsEnabled && light.shadowEnabled) {\r\n        const shadowGenerator = light.getShadowGenerator(scene.activeCamera) ?? light.getShadowGenerator();\r\n        if (shadowGenerator) {\r\n            const shadowMap = shadowGenerator.getShadowMap();\r\n            if (shadowMap) {\r\n                if (shadowMap.renderList && shadowMap.renderList.length > 0) {\r\n                    state.shadowEnabled = true;\r\n                    shadowGenerator.prepareDefines(defines, lightIndex);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (light.lightmapMode != LightConstants.LIGHTMAP_DEFAULT) {\r\n        state.lightmapMode = true;\r\n        defines[\"LIGHTMAPEXCLUDED\" + lightIndex] = true;\r\n        defines[\"LIGHTMAPNOSPECULAR\" + lightIndex] = light.lightmapMode == LightConstants.LIGHTMAP_SHADOWSONLY;\r\n    } else {\r\n        defines[\"LIGHTMAPEXCLUDED\" + lightIndex] = false;\r\n        defines[\"LIGHTMAPNOSPECULAR\" + lightIndex] = false;\r\n    }\r\n}\r\n\r\n/**\r\n * Helper used to prepare the list of defines associated with frame values for shader compilation\r\n * @param scene defines the current scene\r\n * @param engine defines the current engine\r\n * @param material defines the material we are compiling the shader for\r\n * @param defines specifies the list of active defines\r\n * @param useInstances defines if instances have to be turned on\r\n * @param useClipPlane defines if clip plane have to be turned on\r\n * @param useThinInstances defines if thin instances have to be turned on\r\n */\r\nexport function PrepareDefinesForFrameBoundValues(\r\n    scene: Scene,\r\n    engine: Engine,\r\n    material: Material,\r\n    defines: any,\r\n    useInstances: boolean,\r\n    useClipPlane: Nullable<boolean> = null,\r\n    useThinInstances: boolean = false\r\n): void {\r\n    let changed = PrepareDefinesForCamera(scene, defines);\r\n\r\n    if (useClipPlane !== false) {\r\n        changed = prepareDefinesForClipPlanes(material, scene, defines);\r\n    }\r\n\r\n    if (defines[\"DEPTHPREPASS\"] !== !engine.getColorWrite()) {\r\n        defines[\"DEPTHPREPASS\"] = !defines[\"DEPTHPREPASS\"];\r\n        changed = true;\r\n    }\r\n\r\n    if (defines[\"INSTANCES\"] !== useInstances) {\r\n        defines[\"INSTANCES\"] = useInstances;\r\n        changed = true;\r\n    }\r\n\r\n    if (defines[\"THIN_INSTANCES\"] !== useThinInstances) {\r\n        defines[\"THIN_INSTANCES\"] = useThinInstances;\r\n        changed = true;\r\n    }\r\n\r\n    if (changed) {\r\n        defines.markAsUnprocessed();\r\n    }\r\n}\r\n\r\n/**\r\n * Prepares the defines for bones\r\n * @param mesh The mesh containing the geometry data we will draw\r\n * @param defines The defines to update\r\n */\r\nexport function PrepareDefinesForBones(mesh: AbstractMesh, defines: any) {\r\n    if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n        defines[\"NUM_BONE_INFLUENCERS\"] = mesh.numBoneInfluencers;\r\n\r\n        const materialSupportsBoneTexture = defines[\"BONETEXTURE\"] !== undefined;\r\n\r\n        if (mesh.skeleton.isUsingTextureForMatrices && materialSupportsBoneTexture) {\r\n            defines[\"BONETEXTURE\"] = true;\r\n        } else {\r\n            defines[\"BonesPerMesh\"] = mesh.skeleton.bones.length + 1;\r\n            defines[\"BONETEXTURE\"] = materialSupportsBoneTexture ? false : undefined;\r\n\r\n            const prePassRenderer = mesh.getScene().prePassRenderer;\r\n            if (prePassRenderer && prePassRenderer.enabled) {\r\n                const nonExcluded = prePassRenderer.excludedSkinnedMesh.indexOf(mesh) === -1;\r\n                defines[\"BONES_VELOCITY_ENABLED\"] = nonExcluded;\r\n            }\r\n        }\r\n    } else {\r\n        defines[\"NUM_BONE_INFLUENCERS\"] = 0;\r\n        defines[\"BonesPerMesh\"] = 0;\r\n        if (defines[\"BONETEXTURE\"] !== undefined) {\r\n            defines[\"BONETEXTURE\"] = false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Prepares the defines for morph targets\r\n * @param mesh The mesh containing the geometry data we will draw\r\n * @param defines The defines to update\r\n */\r\nexport function PrepareDefinesForMorphTargets(mesh: AbstractMesh, defines: any) {\r\n    const manager = (<Mesh>mesh).morphTargetManager;\r\n    if (manager) {\r\n        defines[\"MORPHTARGETS_UV\"] = manager.supportsUVs && defines[\"UV1\"];\r\n        defines[\"MORPHTARGETS_TANGENT\"] = manager.supportsTangents && defines[\"TANGENT\"];\r\n        defines[\"MORPHTARGETS_NORMAL\"] = manager.supportsNormals && defines[\"NORMAL\"];\r\n        defines[\"NUM_MORPH_INFLUENCERS\"] = manager.numMaxInfluencers || manager.numInfluencers;\r\n        defines[\"MORPHTARGETS\"] = defines[\"NUM_MORPH_INFLUENCERS\"] > 0;\r\n\r\n        defines[\"MORPHTARGETS_TEXTURE\"] = manager.isUsingTextureForTargets;\r\n    } else {\r\n        defines[\"MORPHTARGETS_UV\"] = false;\r\n        defines[\"MORPHTARGETS_TANGENT\"] = false;\r\n        defines[\"MORPHTARGETS_NORMAL\"] = false;\r\n        defines[\"MORPHTARGETS\"] = false;\r\n        defines[\"NUM_MORPH_INFLUENCERS\"] = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Prepares the defines for baked vertex animation\r\n * @param mesh The mesh containing the geometry data we will draw\r\n * @param defines The defines to update\r\n */\r\nexport function PrepareDefinesForBakedVertexAnimation(mesh: AbstractMesh, defines: any) {\r\n    const manager = (<Mesh>mesh).bakedVertexAnimationManager;\r\n    defines[\"BAKED_VERTEX_ANIMATION_TEXTURE\"] = manager && manager.isEnabled ? true : false;\r\n}\r\n\r\n/**\r\n * Prepares the defines used in the shader depending on the attributes data available in the mesh\r\n * @param mesh The mesh containing the geometry data we will draw\r\n * @param defines The defines to update\r\n * @param useVertexColor Precise whether vertex colors should be used or not (override mesh info)\r\n * @param useBones Precise whether bones should be used or not (override mesh info)\r\n * @param useMorphTargets Precise whether morph targets should be used or not (override mesh info)\r\n * @param useVertexAlpha Precise whether vertex alpha should be used or not (override mesh info)\r\n * @param useBakedVertexAnimation Precise whether baked vertex animation should be used or not (override mesh info)\r\n * @returns false if defines are considered not dirty and have not been checked\r\n */\r\nexport function PrepareDefinesForAttributes(\r\n    mesh: AbstractMesh,\r\n    defines: any,\r\n    useVertexColor: boolean,\r\n    useBones: boolean,\r\n    useMorphTargets = false,\r\n    useVertexAlpha = true,\r\n    useBakedVertexAnimation = true\r\n): boolean {\r\n    if (!defines._areAttributesDirty && defines._needNormals === defines._normals && defines._needUVs === defines._uvs) {\r\n        return false;\r\n    }\r\n\r\n    defines._normals = defines._needNormals;\r\n    defines._uvs = defines._needUVs;\r\n\r\n    defines[\"NORMAL\"] = defines._needNormals && mesh.isVerticesDataPresent(Constants.NormalKind);\r\n\r\n    if (defines._needNormals && mesh.isVerticesDataPresent(Constants.TangentKind)) {\r\n        defines[\"TANGENT\"] = true;\r\n    }\r\n\r\n    for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n        defines[\"UV\" + i] = defines._needUVs ? mesh.isVerticesDataPresent(`uv${i === 1 ? \"\" : i}`) : false;\r\n    }\r\n\r\n    if (useVertexColor) {\r\n        const hasVertexColors = mesh.useVertexColors && mesh.isVerticesDataPresent(Constants.ColorKind);\r\n        defines[\"VERTEXCOLOR\"] = hasVertexColors;\r\n        defines[\"VERTEXALPHA\"] = mesh.hasVertexAlpha && hasVertexColors && useVertexAlpha;\r\n    }\r\n\r\n    if (mesh.isVerticesDataPresent(Constants.ColorInstanceKind) && (mesh.hasInstances || mesh.hasThinInstances)) {\r\n        defines[\"INSTANCESCOLOR\"] = true;\r\n    }\r\n\r\n    if (useBones) {\r\n        PrepareDefinesForBones(mesh, defines);\r\n    }\r\n\r\n    if (useMorphTargets) {\r\n        PrepareDefinesForMorphTargets(mesh, defines);\r\n    }\r\n\r\n    if (useBakedVertexAnimation) {\r\n        PrepareDefinesForBakedVertexAnimation(mesh, defines);\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Prepares the defines related to multiview\r\n * @param scene The scene we are intending to draw\r\n * @param defines The defines to update\r\n */\r\nexport function PrepareDefinesForMultiview(scene: Scene, defines: any) {\r\n    if (scene.activeCamera) {\r\n        const previousMultiview = defines.MULTIVIEW;\r\n        defines.MULTIVIEW = scene.activeCamera.outputRenderTarget !== null && scene.activeCamera.outputRenderTarget.getViewCount() > 1;\r\n        if (defines.MULTIVIEW != previousMultiview) {\r\n            defines.markAsUnprocessed();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Prepares the defines related to order independant transparency\r\n * @param scene The scene we are intending to draw\r\n * @param defines The defines to update\r\n * @param needAlphaBlending Determines if the material needs alpha blending\r\n */\r\nexport function PrepareDefinesForOIT(scene: Scene, defines: any, needAlphaBlending: boolean) {\r\n    const previousDefine = defines.ORDER_INDEPENDENT_TRANSPARENCY;\r\n    const previousDefine16Bits = defines.ORDER_INDEPENDENT_TRANSPARENCY_16BITS;\r\n\r\n    defines.ORDER_INDEPENDENT_TRANSPARENCY = scene.useOrderIndependentTransparency && needAlphaBlending;\r\n    defines.ORDER_INDEPENDENT_TRANSPARENCY_16BITS = !scene.getEngine().getCaps().textureFloatLinearFiltering;\r\n\r\n    if (previousDefine !== defines.ORDER_INDEPENDENT_TRANSPARENCY || previousDefine16Bits !== defines.ORDER_INDEPENDENT_TRANSPARENCY_16BITS) {\r\n        defines.markAsUnprocessed();\r\n    }\r\n}\r\n\r\n/**\r\n * Prepares the defines related to the prepass\r\n * @param scene The scene we are intending to draw\r\n * @param defines The defines to update\r\n * @param canRenderToMRT Indicates if this material renders to several textures in the prepass\r\n */\r\nexport function PrepareDefinesForPrePass(scene: Scene, defines: any, canRenderToMRT: boolean) {\r\n    const previousPrePass = defines.PREPASS;\r\n\r\n    if (!defines._arePrePassDirty) {\r\n        return;\r\n    }\r\n\r\n    const texturesList = [\r\n        {\r\n            type: Constants.PREPASS_POSITION_TEXTURE_TYPE,\r\n            define: \"PREPASS_POSITION\",\r\n            index: \"PREPASS_POSITION_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_VELOCITY_TEXTURE_TYPE,\r\n            define: \"PREPASS_VELOCITY\",\r\n            index: \"PREPASS_VELOCITY_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE,\r\n            define: \"PREPASS_REFLECTIVITY\",\r\n            index: \"PREPASS_REFLECTIVITY_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE,\r\n            define: \"PREPASS_IRRADIANCE\",\r\n            index: \"PREPASS_IRRADIANCE_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE,\r\n            define: \"PREPASS_ALBEDO_SQRT\",\r\n            index: \"PREPASS_ALBEDO_SQRT_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_DEPTH_TEXTURE_TYPE,\r\n            define: \"PREPASS_DEPTH\",\r\n            index: \"PREPASS_DEPTH_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_NORMAL_TEXTURE_TYPE,\r\n            define: \"PREPASS_NORMAL\",\r\n            index: \"PREPASS_NORMAL_INDEX\",\r\n        },\r\n    ];\r\n\r\n    if (scene.prePassRenderer && scene.prePassRenderer.enabled && canRenderToMRT) {\r\n        defines.PREPASS = true;\r\n        defines.SCENE_MRT_COUNT = scene.prePassRenderer.mrtCount;\r\n        defines.PREPASS_NORMAL_WORLDSPACE = scene.prePassRenderer.generateNormalsInWorldSpace;\r\n\r\n        for (let i = 0; i < texturesList.length; i++) {\r\n            const index = scene.prePassRenderer.getIndex(texturesList[i].type);\r\n            if (index !== -1) {\r\n                defines[texturesList[i].define] = true;\r\n                defines[texturesList[i].index] = index;\r\n            } else {\r\n                defines[texturesList[i].define] = false;\r\n            }\r\n        }\r\n    } else {\r\n        defines.PREPASS = false;\r\n        for (let i = 0; i < texturesList.length; i++) {\r\n            defines[texturesList[i].define] = false;\r\n        }\r\n    }\r\n\r\n    if (defines.PREPASS != previousPrePass) {\r\n        defines.markAsUnprocessed();\r\n        defines.markAsImageProcessingDirty();\r\n    }\r\n}\r\n\r\n/**\r\n * Helper used to prepare the defines relative to the active camera\r\n * @param scene defines the current scene\r\n * @param defines specifies the list of active defines\r\n * @returns true if the defines have been updated, else false\r\n */\r\nexport function PrepareDefinesForCamera(scene: Scene, defines: any): boolean {\r\n    let changed = false;\r\n\r\n    if (scene.activeCamera) {\r\n        const wasOrtho = defines[\"CAMERA_ORTHOGRAPHIC\"] ? 1 : 0;\r\n        const wasPersp = defines[\"CAMERA_PERSPECTIVE\"] ? 1 : 0;\r\n        const isOrtho = scene.activeCamera.mode === Constants.ORTHOGRAPHIC_CAMERA ? 1 : 0;\r\n        const isPersp = scene.activeCamera.mode === Constants.PERSPECTIVE_CAMERA ? 1 : 0;\r\n\r\n        if (wasOrtho ^ isOrtho || wasPersp ^ isPersp) {\r\n            defines[\"CAMERA_ORTHOGRAPHIC\"] = isOrtho === 1;\r\n            defines[\"CAMERA_PERSPECTIVE\"] = isPersp === 1;\r\n            changed = true;\r\n        }\r\n    }\r\n\r\n    return changed;\r\n}\r\n\r\n/**\r\n * Prepares the uniforms and samplers list to be used in the effect (for a specific light)\r\n * @param lightIndex defines the light index\r\n * @param uniformsList The uniform list\r\n * @param samplersList The sampler list\r\n * @param projectedLightTexture defines if projected texture must be used\r\n * @param uniformBuffersList defines an optional list of uniform buffers\r\n * @param updateOnlyBuffersList True to only update the uniformBuffersList array\r\n */\r\nexport function PrepareUniformsAndSamplersForLight(\r\n    lightIndex: number,\r\n    uniformsList: string[],\r\n    samplersList: string[],\r\n    projectedLightTexture?: any,\r\n    uniformBuffersList: Nullable<string[]> = null,\r\n    updateOnlyBuffersList = false\r\n) {\r\n    if (uniformBuffersList) {\r\n        uniformBuffersList.push(\"Light\" + lightIndex);\r\n    }\r\n\r\n    if (updateOnlyBuffersList) {\r\n        return;\r\n    }\r\n\r\n    uniformsList.push(\r\n        \"vLightData\" + lightIndex,\r\n        \"vLightDiffuse\" + lightIndex,\r\n        \"vLightSpecular\" + lightIndex,\r\n        \"vLightDirection\" + lightIndex,\r\n        \"vLightFalloff\" + lightIndex,\r\n        \"vLightGround\" + lightIndex,\r\n        \"lightMatrix\" + lightIndex,\r\n        \"shadowsInfo\" + lightIndex,\r\n        \"depthValues\" + lightIndex\r\n    );\r\n\r\n    samplersList.push(\"shadowSampler\" + lightIndex);\r\n    samplersList.push(\"depthSampler\" + lightIndex);\r\n\r\n    uniformsList.push(\r\n        \"viewFrustumZ\" + lightIndex,\r\n        \"cascadeBlendFactor\" + lightIndex,\r\n        \"lightSizeUVCorrection\" + lightIndex,\r\n        \"depthCorrection\" + lightIndex,\r\n        \"penumbraDarkness\" + lightIndex,\r\n        \"frustumLengths\" + lightIndex\r\n    );\r\n\r\n    if (projectedLightTexture) {\r\n        samplersList.push(\"projectionLightSampler\" + lightIndex);\r\n        uniformsList.push(\"textureProjectionMatrix\" + lightIndex);\r\n    }\r\n}\r\n\r\n/**\r\n * Prepares the uniforms and samplers list to be used in the effect\r\n * @param uniformsListOrOptions The uniform names to prepare or an EffectCreationOptions containing the list and extra information\r\n * @param samplersList The sampler list\r\n * @param defines The defines helping in the list generation\r\n * @param maxSimultaneousLights The maximum number of simultaneous light allowed in the effect\r\n */\r\nexport function PrepareUniformsAndSamplersList(uniformsListOrOptions: string[] | IEffectCreationOptions, samplersList?: string[], defines?: any, maxSimultaneousLights = 4): void {\r\n    let uniformsList: string[];\r\n    let uniformBuffersList: Nullable<string[]> = null;\r\n\r\n    if ((<IEffectCreationOptions>uniformsListOrOptions).uniformsNames) {\r\n        const options = <IEffectCreationOptions>uniformsListOrOptions;\r\n        uniformsList = options.uniformsNames;\r\n        uniformBuffersList = options.uniformBuffersNames;\r\n        samplersList = options.samplers;\r\n        defines = options.defines;\r\n        maxSimultaneousLights = options.maxSimultaneousLights || 0;\r\n    } else {\r\n        uniformsList = <string[]>uniformsListOrOptions;\r\n        if (!samplersList) {\r\n            samplersList = [];\r\n        }\r\n    }\r\n\r\n    for (let lightIndex = 0; lightIndex < maxSimultaneousLights; lightIndex++) {\r\n        if (!defines[\"LIGHT\" + lightIndex]) {\r\n            break;\r\n        }\r\n        PrepareUniformsAndSamplersForLight(lightIndex, uniformsList, samplersList, defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex], uniformBuffersList);\r\n    }\r\n\r\n    if (defines[\"NUM_MORPH_INFLUENCERS\"]) {\r\n        uniformsList.push(\"morphTargetInfluences\");\r\n        uniformsList.push(\"morphTargetCount\");\r\n    }\r\n\r\n    if (defines[\"BAKED_VERTEX_ANIMATION_TEXTURE\"]) {\r\n        uniformsList.push(\"bakedVertexAnimationSettings\");\r\n        uniformsList.push(\"bakedVertexAnimationTextureSizeInverted\");\r\n        uniformsList.push(\"bakedVertexAnimationTime\");\r\n        samplersList.push(\"bakedVertexAnimationTexture\");\r\n    }\r\n}\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { Effect } from \"./effect\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { MaterialDefines } from \"./materialDefines\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { IInspectable } from \"../Misc/iInspectable\";\r\nimport { Plane } from \"../Maths/math.plane\";\r\nimport type { ShadowDepthWrapper } from \"./shadowDepthWrapper\";\r\nimport type { IMaterialContext } from \"../Engines/IMaterialContext\";\r\nimport { DrawWrapper } from \"./drawWrapper\";\r\nimport { MaterialStencilState } from \"./materialStencilState\";\r\nimport { ScenePerformancePriority } from \"../scene\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractScene } from \"../abstractScene\";\r\nimport type {\r\n    MaterialPluginDisposed,\r\n    MaterialPluginIsReadyForSubMesh,\r\n    MaterialPluginGetDefineNames,\r\n    MaterialPluginBindForSubMesh,\r\n    MaterialPluginGetActiveTextures,\r\n    MaterialPluginHasTexture,\r\n    MaterialPluginGetAnimatables,\r\n    MaterialPluginPrepareDefines,\r\n    MaterialPluginPrepareEffect,\r\n    MaterialPluginPrepareUniformBuffer,\r\n    MaterialPluginCreated,\r\n    MaterialPluginFillRenderTargetTextures,\r\n    MaterialPluginHasRenderTargetTextures,\r\n    MaterialPluginHardBindForSubMesh,\r\n} from \"./materialPluginEvent\";\r\nimport { MaterialPluginEvent } from \"./materialPluginEvent\";\r\nimport type { ShaderCustomProcessingFunction } from \"../Engines/Processors/shaderProcessingOptions\";\r\nimport type { IClipPlanesHolder } from \"../Misc/interfaces/iClipPlanesHolder\";\r\n\r\nimport type { PrePassRenderer } from \"../Rendering/prePassRenderer\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Animation } from \"../Animations/animation\";\r\nimport type { InstancedMesh } from \"../Meshes/instancedMesh\";\r\nimport { BindSceneUniformBuffer } from \"./materialHelper.functions\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\n\r\ndeclare let BABYLON: any;\r\n\r\n/**\r\n * Options for compiling materials.\r\n */\r\nexport interface IMaterialCompilationOptions {\r\n    /**\r\n     * Defines whether clip planes are enabled.\r\n     */\r\n    clipPlane: boolean;\r\n\r\n    /**\r\n     * Defines whether instances are enabled.\r\n     */\r\n    useInstances: boolean;\r\n}\r\n\r\n/**\r\n * Options passed when calling customShaderNameResolve\r\n */\r\nexport interface ICustomShaderNameResolveOptions {\r\n    /**\r\n     * If provided, will be called two times with the vertex and fragment code so that this code can be updated before it is compiled by the GPU\r\n     */\r\n    processFinalCode?: Nullable<ShaderCustomProcessingFunction>;\r\n}\r\n\r\n/**\r\n * Base class for the main features of a material in Babylon.js\r\n */\r\nexport class Material implements IAnimatable, IClipPlanesHolder {\r\n    /**\r\n     * Returns the triangle fill mode\r\n     */\r\n    public static readonly TriangleFillMode = Constants.MATERIAL_TriangleFillMode;\r\n    /**\r\n     * Returns the wireframe mode\r\n     */\r\n    public static readonly WireFrameFillMode = Constants.MATERIAL_WireFrameFillMode;\r\n    /**\r\n     * Returns the point fill mode\r\n     */\r\n    public static readonly PointFillMode = Constants.MATERIAL_PointFillMode;\r\n    /**\r\n     * Returns the point list draw mode\r\n     */\r\n    public static readonly PointListDrawMode = Constants.MATERIAL_PointListDrawMode;\r\n    /**\r\n     * Returns the line list draw mode\r\n     */\r\n    public static readonly LineListDrawMode = Constants.MATERIAL_LineListDrawMode;\r\n    /**\r\n     * Returns the line loop draw mode\r\n     */\r\n    public static readonly LineLoopDrawMode = Constants.MATERIAL_LineLoopDrawMode;\r\n    /**\r\n     * Returns the line strip draw mode\r\n     */\r\n    public static readonly LineStripDrawMode = Constants.MATERIAL_LineStripDrawMode;\r\n    /**\r\n     * Returns the triangle strip draw mode\r\n     */\r\n    public static readonly TriangleStripDrawMode = Constants.MATERIAL_TriangleStripDrawMode;\r\n    /**\r\n     * Returns the triangle fan draw mode\r\n     */\r\n    public static readonly TriangleFanDrawMode = Constants.MATERIAL_TriangleFanDrawMode;\r\n\r\n    /**\r\n     * Stores the clock-wise side orientation\r\n     */\r\n    public static readonly ClockWiseSideOrientation = Constants.MATERIAL_ClockWiseSideOrientation;\r\n\r\n    /**\r\n     * Stores the counter clock-wise side orientation\r\n     */\r\n    public static readonly CounterClockWiseSideOrientation = Constants.MATERIAL_CounterClockWiseSideOrientation;\r\n\r\n    /**\r\n     * The dirty texture flag value\r\n     */\r\n    public static readonly TextureDirtyFlag = Constants.MATERIAL_TextureDirtyFlag;\r\n\r\n    /**\r\n     * The dirty light flag value\r\n     */\r\n    public static readonly LightDirtyFlag = Constants.MATERIAL_LightDirtyFlag;\r\n\r\n    /**\r\n     * The dirty fresnel flag value\r\n     */\r\n    public static readonly FresnelDirtyFlag = Constants.MATERIAL_FresnelDirtyFlag;\r\n\r\n    /**\r\n     * The dirty attribute flag value\r\n     */\r\n    public static readonly AttributesDirtyFlag = Constants.MATERIAL_AttributesDirtyFlag;\r\n\r\n    /**\r\n     * The dirty misc flag value\r\n     */\r\n    public static readonly MiscDirtyFlag = Constants.MATERIAL_MiscDirtyFlag;\r\n\r\n    /**\r\n     * The dirty prepass flag value\r\n     */\r\n    public static readonly PrePassDirtyFlag = Constants.MATERIAL_PrePassDirtyFlag;\r\n\r\n    /**\r\n     * The all dirty flag value\r\n     */\r\n    public static readonly AllDirtyFlag = Constants.MATERIAL_AllDirtyFlag;\r\n\r\n    /**\r\n     * MaterialTransparencyMode: No transparency mode, Alpha channel is not use.\r\n     */\r\n    public static readonly MATERIAL_OPAQUE = 0;\r\n\r\n    /**\r\n     * MaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\r\n     */\r\n    public static readonly MATERIAL_ALPHATEST = 1;\r\n\r\n    /**\r\n     * MaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     */\r\n    public static readonly MATERIAL_ALPHABLEND = 2;\r\n\r\n    /**\r\n     * MaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     * They are also discarded below the alpha cutoff threshold to improve performances.\r\n     */\r\n    public static readonly MATERIAL_ALPHATESTANDBLEND = 3;\r\n\r\n    /**\r\n     * The Whiteout method is used to blend normals.\r\n     * Details of the algorithm can be found here: https://blog.selfshadow.com/publications/blending-in-detail/\r\n     */\r\n    public static readonly MATERIAL_NORMALBLENDMETHOD_WHITEOUT = 0;\r\n\r\n    /**\r\n     * The Reoriented Normal Mapping method is used to blend normals.\r\n     * Details of the algorithm can be found here: https://blog.selfshadow.com/publications/blending-in-detail/\r\n     */\r\n    public static readonly MATERIAL_NORMALBLENDMETHOD_RNM = 1;\r\n\r\n    /**\r\n     * Event observable which raises global events common to all materials (like MaterialPluginEvent.Created)\r\n     */\r\n    public static OnEventObservable = new Observable<Material>();\r\n\r\n    /**\r\n     * Custom callback helping to override the default shader used in the material.\r\n     */\r\n    public customShaderNameResolve: (\r\n        shaderName: string,\r\n        uniforms: string[],\r\n        uniformBuffers: string[],\r\n        samplers: string[],\r\n        defines: MaterialDefines | string[],\r\n        attributes?: string[],\r\n        options?: ICustomShaderNameResolveOptions\r\n    ) => string;\r\n\r\n    /**\r\n     * Custom shadow depth material to use for shadow rendering instead of the in-built one\r\n     */\r\n    public shadowDepthWrapper: Nullable<ShadowDepthWrapper> = null;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the material is allowed (if supported) to do shader hot swapping.\r\n     * This means that the material can keep using a previous shader while a new one is being compiled.\r\n     * This is mostly used when shader parallel compilation is supported (true by default)\r\n     */\r\n    public allowShaderHotSwapping = true;\r\n\r\n    /**\r\n     * The ID of the material\r\n     */\r\n    @serialize()\r\n    public id: string;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the material\r\n     */\r\n    @serialize()\r\n    public uniqueId: number;\r\n\r\n    /** @internal */\r\n    public _loadedUniqueId: string;\r\n\r\n    /**\r\n     * The name of the material\r\n     */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Gets or sets user defined metadata\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /** @internal */\r\n    public _internalMetadata: any;\r\n\r\n    /**\r\n     * For internal use only. Please do not use.\r\n     */\r\n    public reservedDataStore: any = null;\r\n\r\n    /**\r\n     * Specifies if the ready state should be checked on each call\r\n     */\r\n    @serialize()\r\n    public checkReadyOnEveryCall = false;\r\n\r\n    /**\r\n     * Specifies if the ready state should be checked once\r\n     */\r\n    @serialize()\r\n    public checkReadyOnlyOnce = false;\r\n\r\n    /**\r\n     * The state of the material\r\n     */\r\n    @serialize()\r\n    public state = \"\";\r\n\r\n    /**\r\n     * If the material can be rendered to several textures with MRT extension\r\n     */\r\n    public get canRenderToMRT(): boolean {\r\n        // By default, shaders are not compatible with MRTs\r\n        // Base classes should override that if their shader supports MRT\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * The alpha value of the material\r\n     */\r\n    @serialize(\"alpha\")\r\n    protected _alpha = 1.0;\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector#extensibility\r\n     */\r\n    public inspectableCustomProperties: IInspectable[];\r\n\r\n    /**\r\n     * Sets the alpha value of the material\r\n     */\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n\r\n        const oldValue = this._alpha;\r\n        this._alpha = value;\r\n\r\n        // Only call dirty when there is a state change (no alpha / alpha)\r\n        if (oldValue === 1 || value === 1) {\r\n            this.markAsDirty(Material.MiscDirtyFlag + Material.PrePassDirtyFlag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the alpha value of the material\r\n     */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    /**\r\n     * Specifies if back face culling is enabled\r\n     */\r\n    @serialize(\"backFaceCulling\")\r\n    protected _backFaceCulling = true;\r\n\r\n    /**\r\n     * Sets the culling state (true to enable culling, false to disable)\r\n     */\r\n    public set backFaceCulling(value: boolean) {\r\n        if (this._backFaceCulling === value) {\r\n            return;\r\n        }\r\n        this._backFaceCulling = value;\r\n        this.markAsDirty(Material.TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the culling state\r\n     */\r\n    public get backFaceCulling(): boolean {\r\n        return this._backFaceCulling;\r\n    }\r\n\r\n    /**\r\n     * Specifies if back or front faces should be culled (when culling is enabled)\r\n     */\r\n    @serialize(\"cullBackFaces\")\r\n    protected _cullBackFaces = true;\r\n\r\n    /**\r\n     * Sets the type of faces that should be culled (true for back faces, false for front faces)\r\n     */\r\n    public set cullBackFaces(value: boolean) {\r\n        if (this._cullBackFaces === value) {\r\n            return;\r\n        }\r\n        this._cullBackFaces = value;\r\n        this.markAsDirty(Material.TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the type of faces that should be culled\r\n     */\r\n    public get cullBackFaces(): boolean {\r\n        return this._cullBackFaces;\r\n    }\r\n\r\n    private _blockDirtyMechanism = false;\r\n\r\n    /**\r\n     * Block the dirty-mechanism for this specific material\r\n     * When set to false after being true the material will be marked as dirty.\r\n     */\r\n    public get blockDirtyMechanism(): boolean {\r\n        return this._blockDirtyMechanism;\r\n    }\r\n\r\n    public set blockDirtyMechanism(value: boolean) {\r\n        if (this._blockDirtyMechanism === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockDirtyMechanism = value;\r\n\r\n        if (!value) {\r\n            this.markDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This allows you to modify the material without marking it as dirty after every change.\r\n     * This function should be used if you need to make more than one dirty-enabling change to the material - adding a texture, setting a new fill mode and so on.\r\n     * The callback will pass the material as an argument, so you can make your changes to it.\r\n     * @param callback the callback to be executed that will update the material\r\n     */\r\n    public atomicMaterialsUpdate(callback: (material: this) => void): void {\r\n        this.blockDirtyMechanism = true;\r\n        try {\r\n            callback(this);\r\n        } finally {\r\n            this.blockDirtyMechanism = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores the value for side orientation\r\n     */\r\n    @serialize()\r\n    public sideOrientation: number;\r\n\r\n    /**\r\n     * Callback triggered when the material is compiled\r\n     */\r\n    public onCompiled: Nullable<(effect: Effect) => void> = null;\r\n\r\n    /**\r\n     * Callback triggered when an error occurs\r\n     */\r\n    public onError: Nullable<(effect: Effect, errors: string) => void> = null;\r\n\r\n    /**\r\n     * Callback triggered to get the render target textures\r\n     */\r\n    public getRenderTargetTextures: Nullable<() => SmartArray<RenderTargetTexture>> = null;\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public get hasRenderTargetTextures(): boolean {\r\n        this._eventInfo.hasRenderTargetTextures = false;\r\n        this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\r\n        return this._eventInfo.hasRenderTargetTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material should be serialized\r\n     */\r\n    public doNotSerialize = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _storeEffectOnSubMeshes = false;\r\n\r\n    /**\r\n     * Stores the animations for the material\r\n     */\r\n    public animations: Nullable<Array<Animation>> = null;\r\n\r\n    /**\r\n     * An event triggered when the material is disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Material>();\r\n\r\n    /**\r\n     * An observer which watches for dispose events\r\n     */\r\n    private _onDisposeObserver: Nullable<Observer<Material>> = null;\r\n    private _onUnBindObservable: Nullable<Observable<Material>> = null;\r\n\r\n    /**\r\n     * Called during a dispose event\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    private _onBindObservable: Nullable<Observable<AbstractMesh>>;\r\n\r\n    /**\r\n     * An event triggered when the material is bound\r\n     */\r\n    public get onBindObservable(): Observable<AbstractMesh> {\r\n        if (!this._onBindObservable) {\r\n            this._onBindObservable = new Observable<AbstractMesh>();\r\n        }\r\n\r\n        return this._onBindObservable;\r\n    }\r\n\r\n    /**\r\n     * An observer which watches for bind events\r\n     */\r\n    private _onBindObserver: Nullable<Observer<AbstractMesh>> = null;\r\n\r\n    /**\r\n     * Called during a bind event\r\n     */\r\n    public set onBind(callback: (Mesh: AbstractMesh) => void) {\r\n        if (this._onBindObserver) {\r\n            this.onBindObservable.remove(this._onBindObserver);\r\n        }\r\n        this._onBindObserver = this.onBindObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the material is unbound\r\n     */\r\n    public get onUnBindObservable(): Observable<Material> {\r\n        if (!this._onUnBindObservable) {\r\n            this._onUnBindObservable = new Observable<Material>();\r\n        }\r\n\r\n        return this._onUnBindObservable;\r\n    }\r\n\r\n    protected _onEffectCreatedObservable: Nullable<Observable<{ effect: Effect; subMesh: Nullable<SubMesh> }>>;\r\n\r\n    /**\r\n     * An event triggered when the effect is (re)created\r\n     */\r\n    public get onEffectCreatedObservable(): Observable<{ effect: Effect; subMesh: Nullable<SubMesh> }> {\r\n        if (!this._onEffectCreatedObservable) {\r\n            this._onEffectCreatedObservable = new Observable<{ effect: Effect; subMesh: Nullable<SubMesh> }>();\r\n        }\r\n\r\n        return this._onEffectCreatedObservable;\r\n    }\r\n\r\n    /**\r\n     * Stores the value of the alpha mode\r\n     */\r\n    @serialize(\"alphaMode\")\r\n    private _alphaMode: number = Constants.ALPHA_COMBINE;\r\n\r\n    /**\r\n     * Sets the value of the alpha mode.\r\n     *\r\n     * | Value | Type | Description |\r\n     * | --- | --- | --- |\r\n     * | 0 | ALPHA_DISABLE |   |\r\n     * | 1 | ALPHA_ADD |   |\r\n     * | 2 | ALPHA_COMBINE |   |\r\n     * | 3 | ALPHA_SUBTRACT |   |\r\n     * | 4 | ALPHA_MULTIPLY |   |\r\n     * | 5 | ALPHA_MAXIMIZED |   |\r\n     * | 6 | ALPHA_ONEONE |   |\r\n     * | 7 | ALPHA_PREMULTIPLIED |   |\r\n     * | 8 | ALPHA_PREMULTIPLIED_PORTERDUFF |   |\r\n     * | 9 | ALPHA_INTERPOLATE |   |\r\n     * | 10 | ALPHA_SCREENMODE |   |\r\n     *\r\n     */\r\n    public set alphaMode(value: number) {\r\n        if (this._alphaMode === value) {\r\n            return;\r\n        }\r\n        this._alphaMode = value;\r\n        this.markAsDirty(Material.TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the alpha mode\r\n     */\r\n    public get alphaMode(): number {\r\n        return this._alphaMode;\r\n    }\r\n\r\n    /**\r\n     * Stores the state of the need depth pre-pass value\r\n     */\r\n    @serialize()\r\n    private _needDepthPrePass = false;\r\n\r\n    /**\r\n     * Sets the need depth pre-pass value\r\n     */\r\n    public set needDepthPrePass(value: boolean) {\r\n        if (this._needDepthPrePass === value) {\r\n            return;\r\n        }\r\n        this._needDepthPrePass = value;\r\n        if (this._needDepthPrePass) {\r\n            this.checkReadyOnEveryCall = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the depth pre-pass value\r\n     */\r\n    public get needDepthPrePass(): boolean {\r\n        return this._needDepthPrePass;\r\n    }\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public get isPrePassCapable(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Specifies if depth writing should be disabled\r\n     */\r\n    @serialize()\r\n    public disableDepthWrite = false;\r\n\r\n    /**\r\n     * Specifies if color writing should be disabled\r\n     */\r\n    @serialize()\r\n    public disableColorWrite = false;\r\n\r\n    /**\r\n     * Specifies if depth writing should be forced\r\n     */\r\n    @serialize()\r\n    public forceDepthWrite = false;\r\n\r\n    /**\r\n     * Specifies the depth function that should be used. 0 means the default engine function\r\n     */\r\n    @serialize()\r\n    public depthFunction = 0;\r\n\r\n    /**\r\n     * Specifies if there should be a separate pass for culling\r\n     */\r\n    @serialize()\r\n    public separateCullingPass = false;\r\n\r\n    /**\r\n     * Stores the state specifying if fog should be enabled\r\n     */\r\n    @serialize(\"fogEnabled\")\r\n    private _fogEnabled = true;\r\n\r\n    /**\r\n     * Sets the state for enabling fog\r\n     */\r\n    public set fogEnabled(value: boolean) {\r\n        if (this._fogEnabled === value) {\r\n            return;\r\n        }\r\n        this._fogEnabled = value;\r\n        this.markAsDirty(Material.MiscDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the fog enabled state\r\n     */\r\n    public get fogEnabled(): boolean {\r\n        return this._fogEnabled;\r\n    }\r\n\r\n    /**\r\n     * Stores the size of points\r\n     */\r\n    @serialize()\r\n    public pointSize = 1.0;\r\n\r\n    /**\r\n     * Stores the z offset Factor value\r\n     */\r\n    @serialize()\r\n    public zOffset = 0;\r\n\r\n    /**\r\n     * Stores the z offset Units value\r\n     */\r\n    @serialize()\r\n    public zOffsetUnits = 0;\r\n\r\n    public get wireframe(): boolean {\r\n        switch (this._fillMode) {\r\n            case Material.WireFrameFillMode:\r\n            case Material.LineListDrawMode:\r\n            case Material.LineLoopDrawMode:\r\n            case Material.LineStripDrawMode:\r\n                return true;\r\n        }\r\n\r\n        return this._scene.forceWireframe;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of wireframe mode\r\n     */\r\n    public set wireframe(value: boolean) {\r\n        this.fillMode = value ? Material.WireFrameFillMode : Material.TriangleFillMode;\r\n    }\r\n\r\n    /**\r\n     * Gets the value specifying if point clouds are enabled\r\n     */\r\n    @serialize()\r\n    public get pointsCloud(): boolean {\r\n        switch (this._fillMode) {\r\n            case Material.PointFillMode:\r\n            case Material.PointListDrawMode:\r\n                return true;\r\n        }\r\n\r\n        return this._scene.forcePointsCloud;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of point cloud mode\r\n     */\r\n    public set pointsCloud(value: boolean) {\r\n        this.fillMode = value ? Material.PointFillMode : Material.TriangleFillMode;\r\n    }\r\n\r\n    /**\r\n     * Gets the material fill mode\r\n     */\r\n    @serialize()\r\n    public get fillMode(): number {\r\n        return this._fillMode;\r\n    }\r\n\r\n    /**\r\n     * Sets the material fill mode\r\n     */\r\n    public set fillMode(value: number) {\r\n        if (this._fillMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._fillMode = value;\r\n        this.markAsDirty(Material.MiscDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 1\r\n     */\r\n    public clipPlane: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 2\r\n     */\r\n    public clipPlane2: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 3\r\n     */\r\n    public clipPlane3: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 4\r\n     */\r\n    public clipPlane4: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 5\r\n     */\r\n    public clipPlane5: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 6\r\n     */\r\n    public clipPlane6: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gives access to the stencil properties of the material\r\n     */\r\n    public readonly stencil = new MaterialStencilState();\r\n\r\n    protected _useLogarithmicDepth: boolean;\r\n\r\n    /**\r\n     * In case the depth buffer does not allow enough depth precision for your scene (might be the case in large scenes)\r\n     * You can try switching to logarithmic depth.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/logarithmicDepthBuffer\r\n     */\r\n    @serialize()\r\n    public get useLogarithmicDepth(): boolean {\r\n        return this._useLogarithmicDepth;\r\n    }\r\n\r\n    public set useLogarithmicDepth(value: boolean) {\r\n        const fragmentDepthSupported = this.getScene().getEngine().getCaps().fragmentDepthSupported;\r\n\r\n        if (value && !fragmentDepthSupported) {\r\n            Logger.Warn(\"Logarithmic depth has been requested for a material on a device that doesn't support it.\");\r\n        }\r\n\r\n        this._useLogarithmicDepth = value && fragmentDepthSupported;\r\n\r\n        this._markAllSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Stores the effects for the material\r\n     */\r\n    public _materialContext: IMaterialContext | undefined;\r\n\r\n    protected _drawWrapper: DrawWrapper;\r\n    /** @internal */\r\n    public _getDrawWrapper(): DrawWrapper {\r\n        return this._drawWrapper;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setDrawWrapper(drawWrapper: DrawWrapper) {\r\n        this._drawWrapper = drawWrapper;\r\n    }\r\n\r\n    /**\r\n     * Specifies if uniform buffers should be used\r\n     */\r\n    private _useUBO: boolean = false;\r\n\r\n    /**\r\n     * Stores a reference to the scene\r\n     */\r\n    private _scene: Scene;\r\n    protected _needToBindSceneUbo: boolean;\r\n\r\n    /**\r\n     * Stores the fill mode state\r\n     */\r\n    private _fillMode = Material.TriangleFillMode;\r\n\r\n    /**\r\n     * Specifies if the depth write state should be cached\r\n     */\r\n    private _cachedDepthWriteState: boolean = false;\r\n\r\n    /**\r\n     * Specifies if the color write state should be cached\r\n     */\r\n    private _cachedColorWriteState: boolean = false;\r\n\r\n    /**\r\n     * Specifies if the depth function state should be cached\r\n     */\r\n    private _cachedDepthFunctionState: number = 0;\r\n\r\n    /**\r\n     * Stores the uniform buffer\r\n     * @internal\r\n     */\r\n    public _uniformBuffer: UniformBuffer;\r\n\r\n    /** @internal */\r\n    public _indexInSceneMaterialArray = -1;\r\n\r\n    /** @internal */\r\n    public meshMap: Nullable<{ [id: string]: AbstractMesh | undefined }> = null;\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    /** @internal */\r\n    public _dirtyCallbacks: { [code: number]: () => void };\r\n\r\n    /** @internal */\r\n    public _uniformBufferLayoutBuilt = false;\r\n\r\n    protected _eventInfo: MaterialPluginCreated &\r\n        MaterialPluginDisposed &\r\n        MaterialPluginHasTexture &\r\n        MaterialPluginIsReadyForSubMesh &\r\n        MaterialPluginGetDefineNames &\r\n        MaterialPluginPrepareEffect &\r\n        MaterialPluginPrepareDefines &\r\n        MaterialPluginPrepareUniformBuffer &\r\n        MaterialPluginBindForSubMesh &\r\n        MaterialPluginGetAnimatables &\r\n        MaterialPluginGetActiveTextures &\r\n        MaterialPluginFillRenderTargetTextures &\r\n        MaterialPluginHasRenderTargetTextures &\r\n        MaterialPluginHardBindForSubMesh = {} as any; // will be initialized before each event notification\r\n\r\n    /** @internal */\r\n    public _callbackPluginEventGeneric: (\r\n        id: number,\r\n        info:\r\n            | MaterialPluginGetActiveTextures\r\n            | MaterialPluginGetAnimatables\r\n            | MaterialPluginHasTexture\r\n            | MaterialPluginDisposed\r\n            | MaterialPluginGetDefineNames\r\n            | MaterialPluginPrepareEffect\r\n            | MaterialPluginPrepareUniformBuffer\r\n    ) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventIsReadyForSubMesh: (eventData: MaterialPluginIsReadyForSubMesh) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventPrepareDefines: (eventData: MaterialPluginPrepareDefines) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventPrepareDefinesBeforeAttributes: (eventData: MaterialPluginPrepareDefines) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventHardBindForSubMesh: (eventData: MaterialPluginHardBindForSubMesh) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventBindForSubMesh: (eventData: MaterialPluginBindForSubMesh) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventHasRenderTargetTextures: (eventData: MaterialPluginHasRenderTargetTextures) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventFillRenderTargetTextures: (eventData: MaterialPluginFillRenderTargetTextures) => void = () => void 0;\r\n\r\n    /**\r\n     * Creates a material instance\r\n     * @param name defines the name of the material\r\n     * @param scene defines the scene to reference\r\n     * @param doNotAdd specifies if the material should be added to the scene\r\n     */\r\n    constructor(name: string, scene?: Nullable<Scene>, doNotAdd?: boolean) {\r\n        this.name = name;\r\n        const setScene = scene || EngineStore.LastCreatedScene;\r\n        if (!setScene) {\r\n            return;\r\n        }\r\n        this._scene = setScene;\r\n        this._dirtyCallbacks = {};\r\n\r\n        this._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag] = this._markAllSubMeshesAsTexturesDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_LightDirtyFlag] = this._markAllSubMeshesAsLightsDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_FresnelDirtyFlag] = this._markAllSubMeshesAsFresnelDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_AttributesDirtyFlag] = this._markAllSubMeshesAsAttributesDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_MiscDirtyFlag] = this._markAllSubMeshesAsMiscDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_PrePassDirtyFlag] = this._markAllSubMeshesAsPrePassDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_AllDirtyFlag] = this._markAllSubMeshesAsAllDirty.bind(this);\r\n\r\n        this.id = name || Tools.RandomId();\r\n        this.uniqueId = this._scene.getUniqueId();\r\n        this._materialContext = this._scene.getEngine().createMaterialContext();\r\n        this._drawWrapper = new DrawWrapper(this._scene.getEngine(), false);\r\n        this._drawWrapper.materialContext = this._materialContext;\r\n\r\n        if (this._scene.useRightHandedSystem) {\r\n            this.sideOrientation = Material.ClockWiseSideOrientation;\r\n        } else {\r\n            this.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n        }\r\n\r\n        this._uniformBuffer = new UniformBuffer(this._scene.getEngine(), undefined, undefined, name);\r\n        this._useUBO = this.getScene().getEngine().supportsUniformBuffers;\r\n\r\n        if (!doNotAdd) {\r\n            this._scene.addMaterial(this);\r\n        }\r\n\r\n        if (this._scene.useMaterialMeshMap) {\r\n            this.meshMap = {};\r\n        }\r\n\r\n        Material.OnEventObservable.notifyObservers(this, MaterialPluginEvent.Created);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the current material\r\n     * @param fullDetails defines a boolean indicating which levels of logging is desired\r\n     * @returns a string with material information\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public toString(fullDetails?: boolean): string {\r\n        const ret = \"Name: \" + this.name;\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the material\r\n     * @returns a string with the class name of the material\r\n     */\r\n    public getClassName(): string {\r\n        return \"Material\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _isMaterial() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Specifies if updates for the material been locked\r\n     */\r\n    public get isFrozen(): boolean {\r\n        return this.checkReadyOnlyOnce;\r\n    }\r\n\r\n    /**\r\n     * Locks updates for the material\r\n     */\r\n    public freeze(): void {\r\n        this.markDirty();\r\n        this.checkReadyOnlyOnce = true;\r\n    }\r\n\r\n    /**\r\n     * Unlocks updates for the material\r\n     */\r\n    public unfreeze(): void {\r\n        this.markDirty();\r\n        this.checkReadyOnlyOnce = false;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material is ready to be used\r\n     * @param mesh defines the mesh to check\r\n     * @param useInstances specifies if instances should be used\r\n     * @returns a boolean indicating if the material is ready to be used\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isReady(mesh?: AbstractMesh, useInstances?: boolean): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        const defines = subMesh.materialDefines;\r\n        if (!defines) {\r\n            return false;\r\n        }\r\n\r\n        this._eventInfo.isReadyForSubMesh = true;\r\n        this._eventInfo.defines = defines;\r\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\r\n\r\n        return this._eventInfo.isReadyForSubMesh;\r\n    }\r\n\r\n    /**\r\n     * Returns the material effect\r\n     * @returns the effect associated with the material\r\n     */\r\n    public getEffect(): Nullable<Effect> {\r\n        return this._drawWrapper.effect;\r\n    }\r\n\r\n    /**\r\n     * Returns the current scene\r\n     * @returns a Scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\r\n     */\r\n    protected _forceAlphaTest = false;\r\n\r\n    /**\r\n     * The transparency mode of the material.\r\n     */\r\n    protected _transparencyMode: Nullable<number> = null;\r\n\r\n    /**\r\n     * Gets the current transparency mode.\r\n     */\r\n    @serialize()\r\n    public get transparencyMode(): Nullable<number> {\r\n        return this._transparencyMode;\r\n    }\r\n\r\n    /**\r\n     * Sets the transparency mode of the material.\r\n     *\r\n     * | Value | Type                                | Description |\r\n     * | ----- | ----------------------------------- | ----------- |\r\n     * | 0     | OPAQUE                              |             |\r\n     * | 1     | ALPHATEST                           |             |\r\n     * | 2     | ALPHABLEND                          |             |\r\n     * | 3     | ALPHATESTANDBLEND                   |             |\r\n     *\r\n     */\r\n    public set transparencyMode(value: Nullable<number>) {\r\n        if (this._transparencyMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._transparencyMode = value;\r\n\r\n        this._forceAlphaTest = value === Material.MATERIAL_ALPHATESTANDBLEND;\r\n\r\n        this._markAllSubMeshesAsTexturesAndMiscDirty();\r\n    }\r\n\r\n    /**\r\n     * Returns true if alpha blending should be disabled.\r\n     */\r\n    protected get _disableAlphaBlending(): boolean {\r\n        return this._transparencyMode === Material.MATERIAL_OPAQUE || this._transparencyMode === Material.MATERIAL_ALPHATEST;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha blend mode.\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return this.alpha < 1.0;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the mesh will require alpha blending\r\n     * @param mesh defines the mesh to check\r\n     * @returns a boolean specifying if alpha blending is needed for the mesh\r\n     */\r\n    public needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\r\n        if (mesh.visibility < 1.0) {\r\n            return true;\r\n        }\r\n\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return mesh.hasVertexAlpha || this.needAlphaBlending();\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha test mode.\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        if (this._forceAlphaTest) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Specifies if material alpha testing should be turned on for the mesh\r\n     * @param mesh defines the mesh to check\r\n     * @returns a boolean specifying if alpha testing should be turned on for the mesh\r\n     */\r\n    protected _shouldTurnAlphaTestOn(mesh: AbstractMesh): boolean {\r\n        return !this.needAlphaBlendingForMesh(mesh) && this.needAlphaTesting();\r\n    }\r\n\r\n    /**\r\n     * Gets the texture used for the alpha test\r\n     * @returns the texture to use for alpha testing\r\n     */\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it needs to be re-calculated\r\n     * @param forceMaterialDirty - Forces the material to be marked as dirty for all components (same as this.markAsDirty(Material.AllDirtyFlag)). You should use this flag if the material is frozen and you want to force a recompilation.\r\n     */\r\n    public markDirty(forceMaterialDirty = false): void {\r\n        const meshes = this.getScene().meshes;\r\n        for (const mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n            for (const subMesh of mesh.subMeshes) {\r\n                if (subMesh.getMaterial() !== this) {\r\n                    continue;\r\n                }\r\n\r\n                for (const drawWrapper of subMesh._drawWrappers) {\r\n                    if (!drawWrapper) {\r\n                        continue;\r\n                    }\r\n                    if (this._materialContext === drawWrapper.materialContext) {\r\n                        drawWrapper._wasPreviouslyReady = false;\r\n                        drawWrapper._wasPreviouslyUsingInstances = null;\r\n                        drawWrapper._forceRebindOnNextCall = forceMaterialDirty;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (forceMaterialDirty) {\r\n            this.markAsDirty(Material.AllDirtyFlag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preBind(effect?: Effect | DrawWrapper, overrideOrientation: Nullable<number> = null): boolean {\r\n        const engine = this._scene.getEngine();\r\n\r\n        const orientation = overrideOrientation == null ? this.sideOrientation : overrideOrientation;\r\n        const reverse = orientation === Material.ClockWiseSideOrientation;\r\n\r\n        engine.enableEffect(effect ? effect : this._getDrawWrapper());\r\n        engine.setState(\r\n            this.backFaceCulling,\r\n            this.zOffset,\r\n            false,\r\n            reverse,\r\n            this._scene._mirroredCameraPosition ? !this.cullBackFaces : this.cullBackFaces,\r\n            this.stencil,\r\n            this.zOffsetUnits\r\n        );\r\n\r\n        return reverse;\r\n    }\r\n\r\n    /**\r\n     * Binds the material to the mesh\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh to bind the material to\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bind(world: Matrix, mesh?: Mesh): void {}\r\n\r\n    /**\r\n     * Initializes the uniform buffer layout for the shader.\r\n     */\r\n    public buildUniformLayout(): void {\r\n        const ubo = this._uniformBuffer;\r\n\r\n        this._eventInfo.ubo = ubo;\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareUniformBuffer, this._eventInfo);\r\n\r\n        ubo.create();\r\n\r\n        this._uniformBufferLayoutBuilt = true;\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to the material\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventBindForSubMesh(this._eventInfo);\r\n        drawWrapper._forceRebindOnNextCall = false;\r\n    }\r\n\r\n    /**\r\n     * Binds the world matrix to the material\r\n     * @param world defines the world transformation matrix\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bindOnlyWorldMatrix(world: Matrix): void {}\r\n\r\n    /**\r\n     * Binds the view matrix to the effect\r\n     * @param effect defines the effect to bind the view matrix to\r\n     */\r\n    public bindView(effect: Effect): void {\r\n        if (!this._useUBO) {\r\n            effect.setMatrix(\"view\", this.getScene().getViewMatrix());\r\n        } else {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the view projection and projection matrices to the effect\r\n     * @param effect defines the effect to bind the view projection and projection matrices to\r\n     */\r\n    public bindViewProjection(effect: Effect): void {\r\n        if (!this._useUBO) {\r\n            effect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n            effect.setMatrix(\"projection\", this.getScene().getProjectionMatrix());\r\n        } else {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the view matrix to the effect\r\n     * @param effect defines the effect to bind the view matrix to\r\n     * @param variableName name of the shader variable that will hold the eye position\r\n     */\r\n    public bindEyePosition(effect: Effect, variableName?: string): void {\r\n        if (!this._useUBO) {\r\n            this._scene.bindEyePosition(effect, variableName);\r\n        } else {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes to execute after binding the material to a mesh\r\n     * @param mesh defines the rendered mesh\r\n     * @param effect defines the effect used to bind the material\r\n     * @param _subMesh defines the subMesh that the material has been bound for\r\n     */\r\n    protected _afterBind(mesh?: Mesh, effect: Nullable<Effect> = null, _subMesh?: SubMesh): void {\r\n        this._scene._cachedMaterial = this;\r\n        if (this._needToBindSceneUbo) {\r\n            if (effect) {\r\n                this._needToBindSceneUbo = false;\r\n                BindSceneUniformBuffer(effect, this.getScene().getSceneUniformBuffer());\r\n                this._scene.finalizeSceneUbo();\r\n            }\r\n        }\r\n        if (mesh) {\r\n            this._scene._cachedVisibility = mesh.visibility;\r\n        } else {\r\n            this._scene._cachedVisibility = 1;\r\n        }\r\n\r\n        if (this._onBindObservable && mesh) {\r\n            this._onBindObservable.notifyObservers(mesh);\r\n        }\r\n\r\n        if (this.disableDepthWrite) {\r\n            const engine = this._scene.getEngine();\r\n            this._cachedDepthWriteState = engine.getDepthWrite();\r\n            engine.setDepthWrite(false);\r\n        }\r\n\r\n        if (this.disableColorWrite) {\r\n            const engine = this._scene.getEngine();\r\n            this._cachedColorWriteState = engine.getColorWrite();\r\n            engine.setColorWrite(false);\r\n        }\r\n\r\n        if (this.depthFunction !== 0) {\r\n            const engine = this._scene.getEngine();\r\n            this._cachedDepthFunctionState = engine.getDepthFunction() || 0;\r\n            engine.setDepthFunction(this.depthFunction);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unbinds the material from the mesh\r\n     */\r\n    public unbind(): void {\r\n        if (this._onUnBindObservable) {\r\n            this._onUnBindObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.depthFunction !== 0) {\r\n            const engine = this._scene.getEngine();\r\n            engine.setDepthFunction(this._cachedDepthFunctionState);\r\n        }\r\n\r\n        if (this.disableDepthWrite) {\r\n            const engine = this._scene.getEngine();\r\n            engine.setDepthWrite(this._cachedDepthWriteState);\r\n        }\r\n\r\n        if (this.disableColorWrite) {\r\n            const engine = this._scene.getEngine();\r\n            engine.setColorWrite(this._cachedColorWriteState);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the animatable textures.\r\n     * @returns - Array of animatable textures.\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        this._eventInfo.animatables = [];\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetAnimatables, this._eventInfo);\r\n        return this._eventInfo.animatables;\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        this._eventInfo.activeTextures = [];\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetActiveTextures, this._eventInfo);\r\n        return this._eventInfo.activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        this._eventInfo.hasTexture = false;\r\n        this._eventInfo.texture = texture;\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.HasTexture, this._eventInfo);\r\n        return this._eventInfo.hasTexture;\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @returns the cloned material\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public clone(name: string): Nullable<Material> {\r\n        return null;\r\n    }\r\n\r\n    protected _clonePlugins(targetMaterial: Material, rootUrl: string) {\r\n        const serializationObject: any = {};\r\n\r\n        // Create plugins in targetMaterial in case they don't exist\r\n        this._serializePlugins(serializationObject);\r\n\r\n        Material._ParsePlugins(serializationObject, targetMaterial, this._scene, rootUrl);\r\n\r\n        // Copy the properties of the current plugins to the cloned material's plugins\r\n        if (this.pluginManager) {\r\n            for (const plugin of this.pluginManager._plugins) {\r\n                const targetPlugin = targetMaterial.pluginManager!.getPlugin(plugin.name);\r\n                if (targetPlugin) {\r\n                    plugin.copyTo(targetPlugin);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the meshes bound to the material\r\n     * @returns an array of meshes bound to the material\r\n     */\r\n    public getBindedMeshes(): AbstractMesh[] {\r\n        if (this.meshMap) {\r\n            const result: AbstractMesh[] = [];\r\n            for (const meshId in this.meshMap) {\r\n                const mesh = this.meshMap[meshId];\r\n                if (mesh) {\r\n                    result.push(mesh);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            const meshes = this._scene.meshes;\r\n            return meshes.filter((mesh) => mesh.material === this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Force shader compilation\r\n     * @param mesh defines the mesh associated with this material\r\n     * @param onCompiled defines a function to execute once the material is compiled\r\n     * @param options defines the options to configure the compilation\r\n     * @param onError defines a function to execute if the material fails compiling\r\n     */\r\n    public forceCompilation(\r\n        mesh: AbstractMesh,\r\n        onCompiled?: (material: Material) => void,\r\n        options?: Partial<IMaterialCompilationOptions>,\r\n        onError?: (reason: string) => void\r\n    ): void {\r\n        const localOptions = {\r\n            clipPlane: false,\r\n            useInstances: false,\r\n            ...options,\r\n        };\r\n\r\n        const scene = this.getScene();\r\n        const currentHotSwapingState = this.allowShaderHotSwapping;\r\n        this.allowShaderHotSwapping = false; // Turned off to let us evaluate the real compilation state\r\n\r\n        const checkReady = () => {\r\n            if (!this._scene || !this._scene.getEngine()) {\r\n                return;\r\n            }\r\n\r\n            const clipPlaneState = scene.clipPlane;\r\n\r\n            if (localOptions.clipPlane) {\r\n                scene.clipPlane = new Plane(0, 0, 0, 1);\r\n            }\r\n\r\n            if (this._storeEffectOnSubMeshes) {\r\n                let allDone = true,\r\n                    lastError = null;\r\n                if (mesh.subMeshes) {\r\n                    const tempSubMesh = new SubMesh(0, 0, 0, 0, 0, mesh, undefined, false, false);\r\n                    if (tempSubMesh.materialDefines) {\r\n                        tempSubMesh.materialDefines._renderId = -1;\r\n                    }\r\n                    if (!this.isReadyForSubMesh(mesh, tempSubMesh, localOptions.useInstances)) {\r\n                        if (tempSubMesh.effect && tempSubMesh.effect.getCompilationError() && tempSubMesh.effect.allFallbacksProcessed()) {\r\n                            lastError = tempSubMesh.effect.getCompilationError();\r\n                        } else {\r\n                            allDone = false;\r\n                            setTimeout(checkReady, 16);\r\n                        }\r\n                    }\r\n                }\r\n                if (allDone) {\r\n                    this.allowShaderHotSwapping = currentHotSwapingState;\r\n                    if (lastError) {\r\n                        if (onError) {\r\n                            onError(lastError);\r\n                        }\r\n                    }\r\n                    if (onCompiled) {\r\n                        onCompiled(this);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isReady()) {\r\n                    this.allowShaderHotSwapping = currentHotSwapingState;\r\n                    if (onCompiled) {\r\n                        onCompiled(this);\r\n                    }\r\n                } else {\r\n                    setTimeout(checkReady, 16);\r\n                }\r\n            }\r\n\r\n            if (localOptions.clipPlane) {\r\n                scene.clipPlane = clipPlaneState;\r\n            }\r\n        };\r\n\r\n        checkReady();\r\n    }\r\n\r\n    /**\r\n     * Force shader compilation\r\n     * @param mesh defines the mesh that will use this material\r\n     * @param options defines additional options for compiling the shaders\r\n     * @returns a promise that resolves when the compilation completes\r\n     */\r\n    public forceCompilationAsync(mesh: AbstractMesh, options?: Partial<IMaterialCompilationOptions>): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.forceCompilation(\r\n                mesh,\r\n                () => {\r\n                    resolve();\r\n                },\r\n                options,\r\n                (reason) => {\r\n                    reject(reason);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    private static readonly _AllDirtyCallBack = (defines: MaterialDefines) => defines.markAllAsDirty();\r\n    private static readonly _ImageProcessingDirtyCallBack = (defines: MaterialDefines) => defines.markAsImageProcessingDirty();\r\n    private static readonly _TextureDirtyCallBack = (defines: MaterialDefines) => defines.markAsTexturesDirty();\r\n    private static readonly _FresnelDirtyCallBack = (defines: MaterialDefines) => defines.markAsFresnelDirty();\r\n    private static readonly _MiscDirtyCallBack = (defines: MaterialDefines) => defines.markAsMiscDirty();\r\n    private static readonly _PrePassDirtyCallBack = (defines: MaterialDefines) => defines.markAsPrePassDirty();\r\n    private static readonly _LightsDirtyCallBack = (defines: MaterialDefines) => defines.markAsLightDirty();\r\n    private static readonly _AttributeDirtyCallBack = (defines: MaterialDefines) => defines.markAsAttributesDirty();\r\n\r\n    private static _FresnelAndMiscDirtyCallBack = (defines: MaterialDefines) => {\r\n        Material._FresnelDirtyCallBack(defines);\r\n        Material._MiscDirtyCallBack(defines);\r\n    };\r\n\r\n    private static _TextureAndMiscDirtyCallBack = (defines: MaterialDefines) => {\r\n        Material._TextureDirtyCallBack(defines);\r\n        Material._MiscDirtyCallBack(defines);\r\n    };\r\n\r\n    private static readonly _DirtyCallbackArray: Array<(defines: MaterialDefines) => void> = [];\r\n    private static readonly _RunDirtyCallBacks = (defines: MaterialDefines) => {\r\n        for (const cb of Material._DirtyCallbackArray) {\r\n            cb(defines);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Marks a define in the material to indicate that it needs to be re-computed\r\n     * @param flag defines a flag used to determine which parts of the material have to be marked as dirty\r\n     */\r\n    public markAsDirty(flag: number): void {\r\n        if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\r\n            return;\r\n        }\r\n\r\n        Material._DirtyCallbackArray.length = 0;\r\n\r\n        if (flag & Material.TextureDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._TextureDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.LightDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._LightsDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.FresnelDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._FresnelDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.AttributesDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._AttributeDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.MiscDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._MiscDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.PrePassDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._PrePassDirtyCallBack);\r\n        }\r\n\r\n        if (Material._DirtyCallbackArray.length) {\r\n            this._markAllSubMeshesAsDirty(Material._RunDirtyCallBacks);\r\n        }\r\n\r\n        this.getScene().resetCachedMaterial();\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache for all submeshes that are using this material\r\n     */\r\n    public resetDrawCache(): void {\r\n        const meshes = this.getScene().meshes;\r\n        for (const mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n            for (const subMesh of mesh.subMeshes) {\r\n                if (subMesh.getMaterial() !== this) {\r\n                    continue;\r\n                }\r\n\r\n                subMesh.resetDrawCache();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks all submeshes of a material to indicate that their material defines need to be re-calculated\r\n     * @param func defines a function which checks material defines against the submeshes\r\n     */\r\n    protected _markAllSubMeshesAsDirty(func: (defines: MaterialDefines) => void) {\r\n        if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\r\n            return;\r\n        }\r\n\r\n        const meshes = this.getScene().meshes;\r\n        for (const mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n            for (const subMesh of mesh.subMeshes) {\r\n                // We want to skip the submeshes which are not using this material or which have not yet rendered at least once\r\n                if (subMesh.getMaterial(false) !== this) {\r\n                    continue;\r\n                }\r\n\r\n                for (const drawWrapper of subMesh._drawWrappers) {\r\n                    if (!drawWrapper || !drawWrapper.defines || !(drawWrapper.defines as MaterialDefines).markAllAsDirty) {\r\n                        continue;\r\n                    }\r\n                    if (this._materialContext === drawWrapper.materialContext) {\r\n                        func(drawWrapper.defines as MaterialDefines);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates that the scene should check if the rendering now needs a prepass\r\n     */\r\n    protected _markScenePrePassDirty() {\r\n        if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\r\n            return;\r\n        }\r\n\r\n        const prePassRenderer = this.getScene().enablePrePassRenderer();\r\n        if (prePassRenderer) {\r\n            prePassRenderer.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates that we need to re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsAllDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._AllDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that image processing needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsImageProcessingDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._ImageProcessingDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that textures need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsTexturesDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._TextureDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that fresnel needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsFresnelDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._FresnelDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that fresnel and misc need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsFresnelAndMiscDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._FresnelAndMiscDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that lights need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsLightsDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._LightsDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that attributes need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsAttributesDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._AttributeDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that misc needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsMiscDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that prepass needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsPrePassDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that textures and misc need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsTexturesAndMiscDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._TextureAndMiscDirtyCallBack);\r\n    }\r\n\r\n    protected _checkScenePerformancePriority() {\r\n        if (this._scene.performancePriority !== ScenePerformancePriority.BackwardCompatible) {\r\n            this.checkReadyOnlyOnce = true;\r\n            // re-set the flag when the perf priority changes\r\n            const observer = this._scene.onScenePerformancePriorityChangedObservable.addOnce(() => {\r\n                this.checkReadyOnlyOnce = false;\r\n            });\r\n            // if this material is disposed before the scene is disposed, cleanup the observer\r\n            this.onDisposeObservable.add(() => {\r\n                this._scene.onScenePerformancePriorityChangedObservable.remove(observer);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the required values to the prepass renderer.\r\n     * @param prePassRenderer defines the prepass renderer to setup.\r\n     * @returns true if the pre pass is needed.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public setPrePassRenderer(prePassRenderer: PrePassRenderer): boolean {\r\n        // Do Nothing by default\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean): void {\r\n        const scene = this.getScene();\r\n        // Animations\r\n        scene.stopAnimation(this);\r\n        scene.freeProcessedMaterials();\r\n\r\n        // Remove from scene\r\n        scene.removeMaterial(this);\r\n\r\n        this._eventInfo.forceDisposeTextures = forceDisposeTextures;\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.Disposed, this._eventInfo);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.materials.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.materials.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        if (notBoundToMesh !== true) {\r\n            // Remove from meshes\r\n            if (this.meshMap) {\r\n                for (const meshId in this.meshMap) {\r\n                    const mesh = this.meshMap[meshId];\r\n                    if (mesh) {\r\n                        mesh.material = null; // will set the entry in the map to undefined\r\n                        this.releaseVertexArrayObject(mesh, forceDisposeEffect);\r\n                    }\r\n                }\r\n            } else {\r\n                const meshes = scene.meshes;\r\n                for (const mesh of meshes) {\r\n                    if (mesh.material === this && !(mesh as InstancedMesh).sourceMesh) {\r\n                        mesh.material = null;\r\n                        this.releaseVertexArrayObject(mesh, forceDisposeEffect);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._uniformBuffer.dispose();\r\n\r\n        // Shader are kept in cache for further use but we can get rid of this by using forceDisposeEffect\r\n        if (forceDisposeEffect && this._drawWrapper.effect) {\r\n            if (!this._storeEffectOnSubMeshes) {\r\n                this._drawWrapper.effect.dispose();\r\n            }\r\n\r\n            this._drawWrapper.effect = null;\r\n        }\r\n\r\n        this.metadata = null;\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n\r\n        this.onDisposeObservable.clear();\r\n        if (this._onBindObservable) {\r\n            this._onBindObservable.clear();\r\n        }\r\n\r\n        if (this._onUnBindObservable) {\r\n            this._onUnBindObservable.clear();\r\n        }\r\n\r\n        if (this._onEffectCreatedObservable) {\r\n            this._onEffectCreatedObservable.clear();\r\n        }\r\n\r\n        if (this._eventInfo) {\r\n            this._eventInfo = {} as any;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private releaseVertexArrayObject(mesh: AbstractMesh, forceDisposeEffect?: boolean) {\r\n        const geometry = (<Mesh>mesh).geometry;\r\n        if (geometry) {\r\n            if (this._storeEffectOnSubMeshes) {\r\n                if (mesh.subMeshes) {\r\n                    for (const subMesh of mesh.subMeshes) {\r\n                        geometry._releaseVertexArrayObject(subMesh.effect);\r\n                        if (forceDisposeEffect && subMesh.effect) {\r\n                            subMesh.effect.dispose();\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                geometry._releaseVertexArrayObject(this._drawWrapper.effect);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes this material\r\n     * @returns the serialized material object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n\r\n        serializationObject.stencil = this.stencil.serialize();\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        this._serializePlugins(serializationObject);\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    protected _serializePlugins(serializationObject: any) {\r\n        serializationObject.plugins = {};\r\n\r\n        if (this.pluginManager) {\r\n            for (const plugin of this.pluginManager._plugins) {\r\n                serializationObject.plugins[plugin.getClassName()] = plugin.serialize();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a material from parsed material data\r\n     * @param parsedMaterial defines parsed material data\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures\r\n     * @returns a new material\r\n     */\r\n    public static Parse(parsedMaterial: any, scene: Scene, rootUrl: string): Nullable<Material> {\r\n        if (!parsedMaterial.customType) {\r\n            parsedMaterial.customType = \"BABYLON.StandardMaterial\";\r\n        } else if (parsedMaterial.customType === \"BABYLON.PBRMaterial\" && parsedMaterial.overloadedAlbedo) {\r\n            parsedMaterial.customType = \"BABYLON.LegacyPBRMaterial\";\r\n            if (!BABYLON.LegacyPBRMaterial) {\r\n                Logger.Error(\"Your scene is trying to load a legacy version of the PBRMaterial, please, include it from the materials library.\");\r\n                return null;\r\n            }\r\n        }\r\n\r\n        const materialType = Tools.Instantiate(parsedMaterial.customType);\r\n        const material = materialType.Parse(parsedMaterial, scene, rootUrl);\r\n        material._loadedUniqueId = parsedMaterial.uniqueId;\r\n\r\n        return material;\r\n    }\r\n\r\n    protected static _ParsePlugins(serializationObject: any, material: Material, scene: Scene, rootUrl: string) {\r\n        if (!serializationObject.plugins) {\r\n            return;\r\n        }\r\n\r\n        for (const pluginClassName in serializationObject.plugins) {\r\n            const pluginData = serializationObject.plugins[pluginClassName];\r\n\r\n            let plugin = material.pluginManager?.getPlugin(pluginData.name);\r\n\r\n            if (!plugin) {\r\n                const pluginClassType = Tools.Instantiate(\"BABYLON.\" + pluginClassName);\r\n                if (pluginClassType) {\r\n                    plugin = new pluginClassType(material);\r\n                }\r\n            }\r\n\r\n            plugin?.parse(pluginData, scene, rootUrl);\r\n        }\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * A multi-material is used to apply different materials to different parts of the same object without the need of\r\n * separate meshes. This can be use to improve performances.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\r\n */\r\nexport class MultiMaterial extends Material {\r\n    private _subMaterials: Nullable<Material>[];\r\n    /** @internal */\r\n    public _waitingSubMaterialsUniqueIds: string[] = [];\r\n\r\n    /**\r\n     * Gets or Sets the list of Materials used within the multi material.\r\n     * They need to be ordered according to the submeshes order in the associated mesh\r\n     */\r\n    public get subMaterials(): Nullable<Material>[] {\r\n        return this._subMaterials;\r\n    }\r\n\r\n    public set subMaterials(value: Nullable<Material>[]) {\r\n        this._subMaterials = value;\r\n        this._hookArray(value);\r\n    }\r\n\r\n    /**\r\n     * Function used to align with Node.getChildren()\r\n     * @returns the list of Materials used within the multi material\r\n     */\r\n    public getChildren(): Nullable<Material>[] {\r\n        return this.subMaterials;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new Multi Material\r\n     * A multi-material is used to apply different materials to different parts of the same object without the need of\r\n     * separate meshes. This can be use to improve performances.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\r\n     * @param name Define the name in the scene\r\n     * @param scene Define the scene the material belongs to\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene, true);\r\n\r\n        this.getScene().addMultiMaterial(this);\r\n\r\n        this.subMaterials = [] as Material[];\r\n\r\n        this._storeEffectOnSubMeshes = true; // multimaterial is considered like a push material\r\n    }\r\n\r\n    private _hookArray(array: Nullable<Material>[]): void {\r\n        const oldPush = array.push;\r\n        array.push = (...items: Nullable<Material>[]) => {\r\n            const result = oldPush.apply(array, items);\r\n\r\n            this._markAllSubMeshesAsTexturesDirty();\r\n\r\n            return result;\r\n        };\r\n\r\n        const oldSplice = array.splice;\r\n        array.splice = (index: number, deleteCount?: number) => {\r\n            const deleted = oldSplice.apply(array, [index, deleteCount]);\r\n\r\n            this._markAllSubMeshesAsTexturesDirty();\r\n\r\n            return deleted;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get one of the submaterial by its index in the submaterials array\r\n     * @param index The index to look the sub material at\r\n     * @returns The Material if the index has been defined\r\n     */\r\n    public getSubMaterial(index: number): Nullable<Material> {\r\n        if (index < 0 || index >= this.subMaterials.length) {\r\n            return this.getScene().defaultMaterial;\r\n        }\r\n\r\n        return this.subMaterials[index];\r\n    }\r\n\r\n    /**\r\n     * Get the list of active textures for the whole sub materials list.\r\n     * @returns All the textures that will be used during the rendering\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        return super.getActiveTextures().concat(\r\n            ...this.subMaterials.map((subMaterial) => {\r\n                if (subMaterial) {\r\n                    return subMaterial.getActiveTextures();\r\n                } else {\r\n                    return [];\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Specifies if any sub-materials of this multi-material use a given texture.\r\n     * @param texture Defines the texture to check against this multi-material's sub-materials.\r\n     * @returns A boolean specifying if any sub-material of this multi-material uses the texture.\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        for (let i = 0; i < this.subMaterials.length; i++) {\r\n            if (this.subMaterials[i]?.hasTexture(texture)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"MultiMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"MultiMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Checks if the material is ready to render the requested sub mesh\r\n     * @param mesh Define the mesh the submesh belongs to\r\n     * @param subMesh Define the sub mesh to look readiness for\r\n     * @param useInstances Define whether or not the material is used with instances\r\n     * @returns true if ready, otherwise false\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        for (let index = 0; index < this.subMaterials.length; index++) {\r\n            const subMaterial = this.subMaterials[index];\r\n            if (subMaterial) {\r\n                if (subMaterial._storeEffectOnSubMeshes) {\r\n                    if (!subMaterial.isReadyForSubMesh(mesh, subMesh, useInstances)) {\r\n                        return false;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (!subMaterial.isReady(mesh)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clones the current material and its related sub materials\r\n     * @param name Define the name of the newly cloned material\r\n     * @param cloneChildren Define if submaterial will be cloned or shared with the parent instance\r\n     * @returns the cloned material\r\n     */\r\n    public clone(name: string, cloneChildren?: boolean): MultiMaterial {\r\n        const newMultiMaterial = new MultiMaterial(name, this.getScene());\r\n\r\n        for (let index = 0; index < this.subMaterials.length; index++) {\r\n            let subMaterial: Nullable<Material> = null;\r\n            const current = this.subMaterials[index];\r\n            if (cloneChildren && current) {\r\n                subMaterial = current.clone(name + \"-\" + current.name);\r\n            } else {\r\n                subMaterial = this.subMaterials[index];\r\n            }\r\n            newMultiMaterial.subMaterials.push(subMaterial);\r\n        }\r\n\r\n        return newMultiMaterial;\r\n    }\r\n\r\n    /**\r\n     * Serializes the materials into a JSON representation.\r\n     * @returns the JSON representation\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.id = this.id;\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        if (Tags) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n        serializationObject.materialsUniqueIds = [];\r\n        serializationObject.materials = [];\r\n\r\n        for (let matIndex = 0; matIndex < this.subMaterials.length; matIndex++) {\r\n            const subMat = this.subMaterials[matIndex];\r\n\r\n            if (subMat) {\r\n                serializationObject.materialsUniqueIds.push(subMat.uniqueId);\r\n                serializationObject.materials.push(subMat.id);\r\n            } else {\r\n                serializationObject.materialsUniqueIds.push(null);\r\n                serializationObject.materials.push(null);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Dispose the material and release its associated resources\r\n     * @param forceDisposeEffect Define if we want to force disposing the associated effect (if false the shader is not released and could be reuse later on)\r\n     * @param forceDisposeTextures Define if we want to force disposing the associated textures (if false, they will not be disposed and can still be use elsewhere in the app)\r\n     * @param forceDisposeChildren Define if we want to force disposing the associated submaterials (if false, they will not be disposed and can still be use elsewhere in the app)\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, forceDisposeChildren?: boolean): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        if (forceDisposeChildren) {\r\n            for (let index = 0; index < this.subMaterials.length; index++) {\r\n                const subMaterial = this.subMaterials[index];\r\n                if (subMaterial) {\r\n                    subMaterial.dispose(forceDisposeEffect, forceDisposeTextures);\r\n                }\r\n            }\r\n        }\r\n\r\n        const index = scene.multiMaterials.indexOf(this);\r\n        if (index >= 0) {\r\n            scene.multiMaterials.splice(index, 1);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n\r\n    /**\r\n     * Creates a MultiMaterial from parsed MultiMaterial data.\r\n     * @param parsedMultiMaterial defines parsed MultiMaterial data.\r\n     * @param scene defines the hosting scene\r\n     * @returns a new MultiMaterial\r\n     */\r\n    public static ParseMultiMaterial(parsedMultiMaterial: any, scene: Scene): MultiMaterial {\r\n        const multiMaterial = new MultiMaterial(parsedMultiMaterial.name, scene);\r\n\r\n        multiMaterial.id = parsedMultiMaterial.id;\r\n        multiMaterial._loadedUniqueId = parsedMultiMaterial.uniqueId;\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(multiMaterial, parsedMultiMaterial.tags);\r\n        }\r\n\r\n        if (parsedMultiMaterial.materialsUniqueIds) {\r\n            multiMaterial._waitingSubMaterialsUniqueIds = parsedMultiMaterial.materialsUniqueIds;\r\n        } else {\r\n            parsedMultiMaterial.materials.forEach((subMatId: string) => multiMaterial.subMaterials.push(scene.getLastMaterialById(subMatId)));\r\n        }\r\n\r\n        return multiMaterial;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.MultiMaterial\", MultiMaterial);\r\n", "import type { Mesh } from \"./mesh\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Class used to represent a specific level of detail of a mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n */\r\nexport class MeshLODLevel {\r\n    /**\r\n     * Creates a new LOD level\r\n     * @param distanceOrScreenCoverage defines either the distance or the screen coverage where this level should start being displayed\r\n     * @param mesh defines the mesh to use to render this level\r\n     */\r\n    constructor(\r\n        /** Either distance from the center of the object to show this level or the screen coverage if `useLODScreenCoverage` is set to `true` on the mesh*/\r\n        public distanceOrScreenCoverage: number,\r\n        /** Defines the mesh to use to render this level */\r\n        public mesh: Nullable<Mesh>\r\n    ) {}\r\n}\r\n", "/* eslint-disable jsdoc/require-returns-check */\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Tools, AsyncLoop } from \"../Misc/tools\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { DeepCopier } from \"../Misc/deepCopier\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport type { Coroutine } from \"../Misc/coroutine\";\r\nimport { runCoroutineSync, runCoroutineAsync, createYieldingScheduler } from \"../Misc/coroutine\";\r\nimport type { Nullable, FloatArray, IndicesArray } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { ScenePerformancePriority } from \"../scene\";\r\nimport type { Vector4 } from \"../Maths/math.vector\";\r\nimport { Quaternion, Matrix, Vector3, Vector2 } from \"../Maths/math.vector\";\r\nimport type { Color4 } from \"../Maths/math.color\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Node } from \"../node\";\r\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer\";\r\nimport type { IGetSetVerticesData } from \"./mesh.vertexData\";\r\nimport { VertexData } from \"./mesh.vertexData\";\r\n\r\nimport { Geometry } from \"./geometry\";\r\nimport { AbstractMesh } from \"./abstractMesh\";\r\nimport { SubMesh } from \"./subMesh\";\r\nimport type { BoundingSphere } from \"../Culling/boundingSphere\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { MultiMaterial } from \"../Materials/multiMaterial\";\r\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { GetClass, RegisterClass } from \"../Misc/typeStore\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { MeshLODLevel } from \"./meshLODLevel\";\r\nimport type { Path3D } from \"../Maths/math.path\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport type { TransformNode } from \"./transformNode\";\r\nimport type { DrawWrapper } from \"../Materials/drawWrapper\";\r\nimport type { PhysicsEngine as PhysicsEngineV1 } from \"../Physics/v1/physicsEngine\";\r\n\r\nimport type { GoldbergMesh } from \"./goldbergMesh\";\r\nimport type { InstancedMesh } from \"./instancedMesh\";\r\nimport type { IPhysicsEnabledObject, PhysicsImpostor } from \"../Physics/v1/physicsImpostor\";\r\nimport type { ICreateCapsuleOptions } from \"./Builders/capsuleBuilder\";\r\nimport type { LinesMesh } from \"./linesMesh\";\r\nimport type { GroundMesh } from \"./groundMesh\";\r\nimport type { DataBuffer } from \"core/Buffers/dataBuffer\";\r\n\r\n/**\r\n * @internal\r\n **/\r\nexport class _CreationDataStorage {\r\n    public closePath?: boolean;\r\n    public closeArray?: boolean;\r\n    public idx: number[];\r\n    public dashSize: number;\r\n    public gapSize: number;\r\n    public path3D: Path3D;\r\n    public pathArray: Vector3[][];\r\n    public arc: number;\r\n    public radius: number;\r\n    public cap: number;\r\n    public tessellation: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nclass _InstanceDataStorage {\r\n    public visibleInstances: any = {};\r\n    public batchCache = new _InstancesBatch();\r\n    public batchCacheReplacementModeInFrozenMode = new _InstancesBatch();\r\n    public instancesBufferSize = 32 * 16 * 4; // let's start with a maximum of 32 instances\r\n    public instancesBuffer: Nullable<Buffer>;\r\n    public instancesPreviousBuffer: Nullable<Buffer>;\r\n    public instancesData: Float32Array;\r\n    public instancesPreviousData: Float32Array;\r\n    public overridenInstanceCount: number;\r\n    public isFrozen: boolean;\r\n    public forceMatrixUpdates: boolean;\r\n    public previousBatch: Nullable<_InstancesBatch>;\r\n    public hardwareInstancedRendering: boolean;\r\n    public sideOrientation: number;\r\n    public manualUpdate: boolean;\r\n    public previousManualUpdate: boolean;\r\n    public previousRenderId: number;\r\n    public masterMeshPreviousWorldMatrix: Nullable<Matrix>;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nexport class _InstancesBatch {\r\n    public mustReturn = false;\r\n    public visibleInstances = new Array<Nullable<Array<InstancedMesh>>>();\r\n    public renderSelf: boolean[] = [];\r\n    public hardwareInstancedRendering: boolean[] = [];\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nclass _ThinInstanceDataStorage {\r\n    public instancesCount: number = 0;\r\n    public matrixBuffer: Nullable<Buffer> = null;\r\n    public previousMatrixBuffer: Nullable<Buffer> = null;\r\n    public matrixBufferSize = 32 * 16; // let's start with a maximum of 32 thin instances\r\n    public matrixData: Nullable<Float32Array> = null;\r\n    public previousMatrixData: Nullable<Float32Array>;\r\n    public boundingVectors: Array<Vector3> = [];\r\n    public worldMatrices: Nullable<Matrix[]> = null;\r\n    public masterMeshPreviousWorldMatrix: Nullable<Matrix>;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nclass _InternalMeshDataInfo {\r\n    // Events\r\n    public _onBeforeRenderObservable: Nullable<Observable<Mesh>>;\r\n    public _onBeforeBindObservable: Nullable<Observable<Mesh>>;\r\n    public _onAfterRenderObservable: Nullable<Observable<Mesh>>;\r\n    public _onBeforeDrawObservable: Nullable<Observable<Mesh>>;\r\n    public _onBetweenPassObservable: Nullable<Observable<SubMesh>>;\r\n\r\n    public _areNormalsFrozen: boolean = false; // Will be used by ribbons mainly\r\n    public _sourcePositions: Nullable<Float32Array>; // Will be used to save original positions when using software skinning\r\n    public _sourceNormals: Nullable<Float32Array>; // Will be used to save original normals when using software skinning\r\n\r\n    // Will be used to save a source mesh reference, If any\r\n    public _source: Nullable<Mesh> = null;\r\n    // Will be used to for fast cloned mesh lookup\r\n    public meshMap: Nullable<{ [id: string]: Mesh | undefined }> = null;\r\n\r\n    public _preActivateId: number = -1;\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public _LODLevels = new Array<MeshLODLevel>();\r\n    /** Alternative definition of LOD level, using screen coverage instead of distance */\r\n    public _useLODScreenCoverage: boolean = false;\r\n    public _checkReadinessObserver: Nullable<Observer<Scene>>;\r\n\r\n    public _onMeshReadyObserverAdded: (observer: Observer<Mesh>) => void;\r\n\r\n    public _effectiveMaterial: Nullable<Material> = null;\r\n\r\n    public _forcedInstanceCount: number = 0;\r\n\r\n    public _overrideRenderingFillMode: Nullable<number> = null;\r\n}\r\n\r\n/**\r\n * Class used to represent renderable models\r\n */\r\nexport class Mesh extends AbstractMesh implements IGetSetVerticesData {\r\n    // Consts\r\n\r\n    /**\r\n     * Mesh side orientation : usually the external or front surface\r\n     */\r\n    public static readonly FRONTSIDE = VertexData.FRONTSIDE;\r\n\r\n    /**\r\n     * Mesh side orientation : usually the internal or back surface\r\n     */\r\n    public static readonly BACKSIDE = VertexData.BACKSIDE;\r\n    /**\r\n     * Mesh side orientation : both internal and external or front and back surfaces\r\n     */\r\n    public static readonly DOUBLESIDE = VertexData.DOUBLESIDE;\r\n    /**\r\n     * Mesh side orientation : by default, `FRONTSIDE`\r\n     */\r\n    public static readonly DEFAULTSIDE = VertexData.DEFAULTSIDE;\r\n    /**\r\n     * Mesh cap setting : no cap\r\n     */\r\n    public static readonly NO_CAP = 0;\r\n    /**\r\n     * Mesh cap setting : one cap at the beginning of the mesh\r\n     */\r\n    public static readonly CAP_START = 1;\r\n    /**\r\n     * Mesh cap setting : one cap at the end of the mesh\r\n     */\r\n    public static readonly CAP_END = 2;\r\n    /**\r\n     * Mesh cap setting : two caps, one at the beginning  and one at the end of the mesh\r\n     */\r\n    public static readonly CAP_ALL = 3;\r\n    /**\r\n     * Mesh pattern setting : no flip or rotate\r\n     */\r\n    public static readonly NO_FLIP = 0;\r\n    /**\r\n     * Mesh pattern setting : flip (reflect in y axis) alternate tiles on each row or column\r\n     */\r\n    public static readonly FLIP_TILE = 1;\r\n    /**\r\n     * Mesh pattern setting : rotate (180degs) alternate tiles on each row or column\r\n     */\r\n    public static readonly ROTATE_TILE = 2;\r\n    /**\r\n     * Mesh pattern setting : flip (reflect in y axis) all tiles on alternate rows\r\n     */\r\n    public static readonly FLIP_ROW = 3;\r\n    /**\r\n     * Mesh pattern setting : rotate (180degs) all tiles on alternate rows\r\n     */\r\n    public static readonly ROTATE_ROW = 4;\r\n    /**\r\n     * Mesh pattern setting : flip and rotate alternate tiles on each row or column\r\n     */\r\n    public static readonly FLIP_N_ROTATE_TILE = 5;\r\n    /**\r\n     * Mesh pattern setting : rotate pattern and rotate\r\n     */\r\n    public static readonly FLIP_N_ROTATE_ROW = 6;\r\n    /**\r\n     * Mesh tile positioning : part tiles same on left/right or top/bottom\r\n     */\r\n    public static readonly CENTER = 0;\r\n    /**\r\n     * Mesh tile positioning : part tiles on left\r\n     */\r\n    public static readonly LEFT = 1;\r\n    /**\r\n     * Mesh tile positioning : part tiles on right\r\n     */\r\n    public static readonly RIGHT = 2;\r\n    /**\r\n     * Mesh tile positioning : part tiles on top\r\n     */\r\n    public static readonly TOP = 3;\r\n    /**\r\n     * Mesh tile positioning : part tiles on bottom\r\n     */\r\n    public static readonly BOTTOM = 4;\r\n\r\n    /**\r\n     * Indicates that the instanced meshes should be sorted from back to front before rendering if their material is transparent\r\n     */\r\n    public static INSTANCEDMESH_SORT_TRANSPARENT = false;\r\n\r\n    /**\r\n     * Gets the default side orientation.\r\n     * @param orientation the orientation to value to attempt to get\r\n     * @returns the default orientation\r\n     * @internal\r\n     */\r\n    public static _GetDefaultSideOrientation(orientation?: number): number {\r\n        return orientation || Mesh.FRONTSIDE; // works as Mesh.FRONTSIDE is 0\r\n    }\r\n\r\n    // Internal data\r\n    private _internalMeshDataInfo = new _InternalMeshDataInfo();\r\n\r\n    /**\r\n     * Determines if the LOD levels are intended to be calculated using screen coverage (surface area ratio) instead of distance.\r\n     */\r\n    public get useLODScreenCoverage() {\r\n        return this._internalMeshDataInfo._useLODScreenCoverage;\r\n    }\r\n\r\n    public set useLODScreenCoverage(value: boolean) {\r\n        this._internalMeshDataInfo._useLODScreenCoverage = value;\r\n        this._sortLODLevels();\r\n    }\r\n\r\n    /**\r\n     * Will notify when the mesh is completely ready, including materials.\r\n     * Observers added to this observable will be removed once triggered\r\n     */\r\n    public onMeshReadyObservable: Observable<Mesh>;\r\n\r\n    public get computeBonesUsingShaders(): boolean {\r\n        return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\r\n    }\r\n    public set computeBonesUsingShaders(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\r\n            return;\r\n        }\r\n\r\n        if (value && this._internalMeshDataInfo._sourcePositions) {\r\n            // switch from software to GPU computation: we need to reset the vertex and normal buffers that have been updated by the software process\r\n            this.setVerticesData(VertexBuffer.PositionKind, this._internalMeshDataInfo._sourcePositions, true);\r\n            if (this._internalMeshDataInfo._sourceNormals) {\r\n                this.setVerticesData(VertexBuffer.NormalKind, this._internalMeshDataInfo._sourceNormals, true);\r\n            }\r\n\r\n            this._internalMeshDataInfo._sourcePositions = null;\r\n            this._internalMeshDataInfo._sourceNormals = null;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /**\r\n     * An event triggered before rendering the mesh\r\n     */\r\n    public get onBeforeRenderObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onBeforeRenderObservable) {\r\n            this._internalMeshDataInfo._onBeforeRenderObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBeforeRenderObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered before binding the mesh\r\n     */\r\n    public get onBeforeBindObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onBeforeBindObservable) {\r\n            this._internalMeshDataInfo._onBeforeBindObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBeforeBindObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering the mesh\r\n     */\r\n    public get onAfterRenderObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onAfterRenderObservable) {\r\n            this._internalMeshDataInfo._onAfterRenderObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onAfterRenderObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggeredbetween rendering pass when using separateCullingPass = true\r\n     */\r\n    public get onBetweenPassObservable(): Observable<SubMesh> {\r\n        if (!this._internalMeshDataInfo._onBetweenPassObservable) {\r\n            this._internalMeshDataInfo._onBetweenPassObservable = new Observable<SubMesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBetweenPassObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered before drawing the mesh\r\n     */\r\n    public get onBeforeDrawObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onBeforeDrawObservable) {\r\n            this._internalMeshDataInfo._onBeforeDrawObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBeforeDrawObservable;\r\n    }\r\n\r\n    private _onBeforeDrawObserver: Nullable<Observer<Mesh>>;\r\n\r\n    /**\r\n     * Sets a callback to call before drawing the mesh. It is recommended to use onBeforeDrawObservable instead\r\n     */\r\n    public set onBeforeDraw(callback: () => void) {\r\n        if (this._onBeforeDrawObserver) {\r\n            this.onBeforeDrawObservable.remove(this._onBeforeDrawObserver);\r\n        }\r\n        this._onBeforeDrawObserver = this.onBeforeDrawObservable.add(callback);\r\n    }\r\n\r\n    public get hasInstances(): boolean {\r\n        return this.instances.length > 0;\r\n    }\r\n\r\n    public get hasThinInstances(): boolean {\r\n        return (this.forcedInstanceCount || this._thinInstanceDataStorage.instancesCount || 0) > 0;\r\n    }\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Gets the delay loading state of the mesh (when delay loading is turned on)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/incrementalLoading\r\n     */\r\n    public delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n\r\n    /**\r\n     * Gets the list of instances created from this mesh\r\n     * it is not supposed to be modified manually.\r\n     * Note also that the order of the InstancedMesh wihin the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n     */\r\n    public instances: InstancedMesh[] = [];\r\n\r\n    /**\r\n     * Gets the file containing delay loading data for this mesh\r\n     */\r\n    public delayLoadingFile: string;\r\n\r\n    /** @internal */\r\n    public _binaryInfo: any;\r\n\r\n    /**\r\n     * User defined function used to change how LOD level selection is done\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     */\r\n    public onLODLevelSelection: (distance: number, mesh: Mesh, selectedLevel: Nullable<Mesh>) => void;\r\n\r\n    // Private\r\n    /** @internal */\r\n    public _creationDataStorage: Nullable<_CreationDataStorage> = null;\r\n\r\n    /** @internal */\r\n    public _geometry: Nullable<Geometry> = null;\r\n    /** @internal */\r\n    public _delayInfo: Array<string>;\r\n    /** @internal */\r\n    public _delayLoadingFunction: (any: any, mesh: Mesh) => void;\r\n\r\n    /**\r\n     * Gets or sets the forced number of instances to display.\r\n     * If 0 (default value), the number of instances is not forced and depends on the draw type\r\n     * (regular / instance / thin instances mesh)\r\n     */\r\n    public get forcedInstanceCount(): number {\r\n        return this._internalMeshDataInfo._forcedInstanceCount;\r\n    }\r\n\r\n    public set forcedInstanceCount(count: number) {\r\n        this._internalMeshDataInfo._forcedInstanceCount = count;\r\n    }\r\n\r\n    /** @internal */\r\n    public _instanceDataStorage = new _InstanceDataStorage();\r\n\r\n    /** @internal */\r\n    public _thinInstanceDataStorage = new _ThinInstanceDataStorage();\r\n\r\n    /** @internal */\r\n    public _shouldGenerateFlatShading: boolean = false;\r\n\r\n    // Use by builder only to know what orientation were the mesh build in.\r\n    /** @internal */\r\n    public _originalBuilderSideOrientation: number = Mesh.DEFAULTSIDE;\r\n\r\n    /**\r\n     * Use this property to change the original side orientation defined at construction time\r\n     */\r\n    public overrideMaterialSideOrientation: Nullable<number> = null;\r\n\r\n    /**\r\n     * Use this property to override the Material's fillMode value\r\n     */\r\n    public get overrideRenderingFillMode(): Nullable<number> {\r\n        return this._internalMeshDataInfo._overrideRenderingFillMode;\r\n    }\r\n\r\n    public set overrideRenderingFillMode(fillMode: Nullable<number>) {\r\n        this._internalMeshDataInfo._overrideRenderingFillMode = fillMode;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating whether to render ignoring the active camera's max z setting. (false by default)\r\n     * You should not mix meshes that have this property set to true with meshes that have it set to false if they all write\r\n     * to the depth buffer, because the z-values are not comparable in the two cases and you will get rendering artifacts if you do.\r\n     * You can set the property to true for meshes that do not write to the depth buffer, or set the same value (either false or true) otherwise.\r\n     * Note this will reduce performance when set to true.\r\n     */\r\n    public ignoreCameraMaxZ = false;\r\n\r\n    /**\r\n     * Gets the source mesh (the one used to clone this one from)\r\n     */\r\n    public get source(): Nullable<Mesh> {\r\n        return this._internalMeshDataInfo._source;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of clones of this mesh\r\n     * The scene must have been constructed with useClonedMeshMap=true for this to work!\r\n     * Note that useClonedMeshMap=true is the default setting\r\n     */\r\n    public get cloneMeshMap(): Nullable<{ [id: string]: Mesh | undefined }> {\r\n        return this._internalMeshDataInfo.meshMap;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh does not use index buffer\r\n     */\r\n    public get isUnIndexed(): boolean {\r\n        return this._unIndexed;\r\n    }\r\n\r\n    public set isUnIndexed(value: boolean) {\r\n        if (this._unIndexed !== value) {\r\n            this._unIndexed = value;\r\n            this._markSubMeshesAsAttributesDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the array buffer used to store the instanced buffer used for instances' world matrices */\r\n    public get worldMatrixInstancedBuffer() {\r\n        return this._instanceDataStorage.instancesData;\r\n    }\r\n\r\n    /** Gets the array buffer used to store the instanced buffer used for instances' previous world matrices */\r\n    public get previousWorldMatrixInstancedBuffer() {\r\n        return this._instanceDataStorage.instancesPreviousData;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\r\n    public get manualUpdateOfWorldMatrixInstancedBuffer() {\r\n        return this._instanceDataStorage.manualUpdate;\r\n    }\r\n\r\n    public set manualUpdateOfWorldMatrixInstancedBuffer(value: boolean) {\r\n        this._instanceDataStorage.manualUpdate = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\r\n    public get manualUpdateOfPreviousWorldMatrixInstancedBuffer() {\r\n        return this._instanceDataStorage.previousManualUpdate;\r\n    }\r\n\r\n    public set manualUpdateOfPreviousWorldMatrixInstancedBuffer(value: boolean) {\r\n        this._instanceDataStorage.previousManualUpdate = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices must be performed in all cases (and notably even in frozen mode) */\r\n    public get forceWorldMatrixInstancedBufferUpdate() {\r\n        return this._instanceDataStorage.forceMatrixUpdates;\r\n    }\r\n\r\n    public set forceWorldMatrixInstancedBufferUpdate(value: boolean) {\r\n        this._instanceDataStorage.forceMatrixUpdates = value;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * @param name The value used by scene.getMeshByName() to do a lookup.\r\n     * @param scene The scene to add this mesh to.\r\n     * @param parent The parent of this mesh, if it has one\r\n     * @param source An optional Mesh from which geometry is shared, cloned.\r\n     * @param doNotCloneChildren When cloning, skip cloning child meshes of source, default False.\r\n     *                  When false, achieved by calling a clone(), also passing False.\r\n     *                  This will make creation of children, recursive.\r\n     * @param clonePhysicsImpostor When cloning, include cloning mesh physics impostor, default True.\r\n     */\r\n    constructor(\r\n        name: string,\r\n        scene: Nullable<Scene> = null,\r\n        parent: Nullable<Node> = null,\r\n        source: Nullable<Mesh> = null,\r\n        doNotCloneChildren?: boolean,\r\n        clonePhysicsImpostor: boolean = true\r\n    ) {\r\n        super(name, scene);\r\n\r\n        scene = this.getScene();\r\n\r\n        this._onBeforeDraw = (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => {\r\n            if (isInstance && effectiveMaterial) {\r\n                if (this._uniformBuffer) {\r\n                    this.transferToEffect(world);\r\n                } else {\r\n                    effectiveMaterial.bindOnlyWorldMatrix(world);\r\n                }\r\n            }\r\n        };\r\n\r\n        if (source) {\r\n            // Geometry\r\n            if (source._geometry) {\r\n                source._geometry.applyToMesh(this);\r\n            }\r\n\r\n            // Deep copy\r\n            DeepCopier.DeepCopy(\r\n                source,\r\n                this,\r\n                [\r\n                    \"name\",\r\n                    \"material\",\r\n                    \"skeleton\",\r\n                    \"instances\",\r\n                    \"parent\",\r\n                    \"uniqueId\",\r\n                    \"source\",\r\n                    \"metadata\",\r\n                    \"morphTargetManager\",\r\n                    \"hasInstances\",\r\n                    \"worldMatrixInstancedBuffer\",\r\n                    \"previousWorldMatrixInstancedBuffer\",\r\n                    \"hasLODLevels\",\r\n                    \"geometry\",\r\n                    \"isBlocked\",\r\n                    \"areNormalsFrozen\",\r\n                    \"facetNb\",\r\n                    \"isFacetDataEnabled\",\r\n                    \"lightSources\",\r\n                    \"useBones\",\r\n                    \"isAnInstance\",\r\n                    \"collider\",\r\n                    \"edgesRenderer\",\r\n                    \"forward\",\r\n                    \"up\",\r\n                    \"right\",\r\n                    \"absolutePosition\",\r\n                    \"absoluteScaling\",\r\n                    \"absoluteRotationQuaternion\",\r\n                    \"isWorldMatrixFrozen\",\r\n                    \"nonUniformScaling\",\r\n                    \"behaviors\",\r\n                    \"worldMatrixFromCache\",\r\n                    \"hasThinInstances\",\r\n                    \"cloneMeshMap\",\r\n                    \"hasBoundingInfo\",\r\n                    \"physicsBody\",\r\n                    \"physicsImpostor\",\r\n                ],\r\n                [\"_poseMatrix\"]\r\n            );\r\n\r\n            // Source mesh\r\n            this._internalMeshDataInfo._source = source;\r\n            if (scene.useClonedMeshMap) {\r\n                if (!source._internalMeshDataInfo.meshMap) {\r\n                    source._internalMeshDataInfo.meshMap = {};\r\n                }\r\n                source._internalMeshDataInfo.meshMap[this.uniqueId] = this;\r\n            }\r\n\r\n            // Construction Params\r\n            // Clone parameters allowing mesh to be updated in case of parametric shapes.\r\n            this._originalBuilderSideOrientation = source._originalBuilderSideOrientation;\r\n            this._creationDataStorage = source._creationDataStorage;\r\n\r\n            // Animation ranges\r\n            if (source._ranges) {\r\n                const ranges = source._ranges;\r\n                for (const name in ranges) {\r\n                    if (!Object.prototype.hasOwnProperty.call(ranges, name)) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (!ranges[name]) {\r\n                        continue;\r\n                    }\r\n\r\n                    this.createAnimationRange(name, ranges[name]!.from, ranges[name]!.to);\r\n                }\r\n            }\r\n\r\n            // Metadata\r\n            if (source.metadata && source.metadata.clone) {\r\n                this.metadata = source.metadata.clone();\r\n            } else {\r\n                this.metadata = source.metadata;\r\n            }\r\n            this._internalMetadata = source._internalMetadata;\r\n\r\n            // Tags\r\n            if (Tags && Tags.HasTags(source)) {\r\n                Tags.AddTagsTo(this, Tags.GetTags(source, true));\r\n            }\r\n\r\n            // Enabled. We shouldn't need to check the source's ancestors, as this mesh\r\n            // will have the same ones.\r\n            this.setEnabled(source.isEnabled(false));\r\n\r\n            // Parent\r\n            this.parent = source.parent;\r\n\r\n            // Pivot\r\n            this.setPivotMatrix(source.getPivotMatrix(), this._postMultiplyPivotMatrix);\r\n\r\n            this.id = name + \".\" + source.id;\r\n\r\n            // Material\r\n            this.material = source.material;\r\n\r\n            if (!doNotCloneChildren) {\r\n                // Children\r\n                const directDescendants = source.getDescendants(true);\r\n                for (let index = 0; index < directDescendants.length; index++) {\r\n                    const child = directDescendants[index];\r\n\r\n                    if ((<any>child).clone) {\r\n                        (<any>child).clone(name + \".\" + child.name, this);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Morphs\r\n            if (source.morphTargetManager) {\r\n                this.morphTargetManager = source.morphTargetManager;\r\n            }\r\n\r\n            // Physics clone\r\n            if (scene.getPhysicsEngine) {\r\n                const physicsEngine = scene.getPhysicsEngine();\r\n                if (clonePhysicsImpostor && physicsEngine) {\r\n                    if (physicsEngine.getPluginVersion() === 1) {\r\n                        const impostor = (physicsEngine as PhysicsEngineV1).getImpostorForPhysicsObject(source);\r\n                        if (impostor) {\r\n                            this.physicsImpostor = impostor.clone(this);\r\n                        }\r\n                    } else if (physicsEngine.getPluginVersion() === 2) {\r\n                        if (source.physicsBody) {\r\n                            source.physicsBody.clone(this);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Particles\r\n            for (let index = 0; index < scene.particleSystems.length; index++) {\r\n                const system = scene.particleSystems[index];\r\n\r\n                if (system.emitter === source) {\r\n                    system.clone(system.name, this);\r\n                }\r\n            }\r\n\r\n            // Skeleton\r\n            this.skeleton = source.skeleton;\r\n\r\n            this.refreshBoundingInfo(true, true);\r\n            this.computeWorldMatrix(true);\r\n        }\r\n\r\n        // Parent\r\n        if (parent !== null) {\r\n            this.parent = parent;\r\n        }\r\n\r\n        this._instanceDataStorage.hardwareInstancedRendering = this.getEngine().getCaps().instancedArrays;\r\n\r\n        this._internalMeshDataInfo._onMeshReadyObserverAdded = (observer: Observer<Mesh>) => {\r\n            // only notify once! then unregister the observer\r\n            observer.unregisterOnNextCall = true;\r\n            if (this.isReady(true)) {\r\n                this.onMeshReadyObservable.notifyObservers(this);\r\n            } else {\r\n                if (!this._internalMeshDataInfo._checkReadinessObserver) {\r\n                    this._internalMeshDataInfo._checkReadinessObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n                        // check for complete readiness\r\n                        if (this.isReady(true)) {\r\n                            this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\r\n                            this._internalMeshDataInfo._checkReadinessObserver = null;\r\n                            this.onMeshReadyObservable.notifyObservers(this);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onMeshReadyObservable = new Observable(this._internalMeshDataInfo._onMeshReadyObserverAdded);\r\n\r\n        if (source) {\r\n            source.onClonedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    public instantiateHierarchy(\r\n        newParent: Nullable<TransformNode> = null,\r\n        options?: { doNotInstantiate: boolean | ((node: TransformNode) => boolean) },\r\n        onNewNodeCreated?: (source: TransformNode, clone: TransformNode) => void\r\n    ): Nullable<TransformNode> {\r\n        const instance =\r\n            this.getTotalVertices() === 0 || (options && options.doNotInstantiate && (options.doNotInstantiate === true || options.doNotInstantiate(this)))\r\n                ? this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true)\r\n                : this.createInstance(\"instance of \" + (this.name || this.id));\r\n\r\n        instance.parent = newParent || this.parent;\r\n        instance.position = this.position.clone();\r\n        instance.scaling = this.scaling.clone();\r\n        if (this.rotationQuaternion) {\r\n            instance.rotationQuaternion = this.rotationQuaternion.clone();\r\n        } else {\r\n            instance.rotation = this.rotation.clone();\r\n        }\r\n\r\n        if (onNewNodeCreated) {\r\n            onNewNodeCreated(this, instance);\r\n        }\r\n\r\n        for (const child of this.getChildTransformNodes(true)) {\r\n            // instancedMesh should have a different sourced mesh\r\n            if (child.getClassName() === \"InstancedMesh\" && instance.getClassName() === \"Mesh\" && (child as InstancedMesh).sourceMesh === this) {\r\n                (child as InstancedMesh).instantiateHierarchy(\r\n                    instance,\r\n                    {\r\n                        doNotInstantiate: (options && options.doNotInstantiate) || false,\r\n                        newSourcedMesh: instance as Mesh,\r\n                    },\r\n                    onNewNodeCreated\r\n                );\r\n            } else {\r\n                child.instantiateHierarchy(instance, options, onNewNodeCreated);\r\n            }\r\n        }\r\n\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"Mesh\".\r\n     */\r\n    public getClassName(): string {\r\n        return \"Mesh\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _isMesh() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns a description of this mesh\r\n     * @param fullDetails define if full details about this mesh must be used\r\n     * @returns a descriptive string representing this mesh\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = super.toString(fullDetails);\r\n        ret += \", n vertices: \" + this.getTotalVertices();\r\n        ret += \", parent: \" + (this._waitingParentId ? this._waitingParentId : this.parent ? this.parent.name : \"NONE\");\r\n\r\n        if (this.animations) {\r\n            for (let i = 0; i < this.animations.length; i++) {\r\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\r\n            }\r\n        }\r\n\r\n        if (fullDetails) {\r\n            if (this._geometry) {\r\n                const ib = this.getIndices();\r\n                const vb = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n                if (vb && ib) {\r\n                    ret += \", flat shading: \" + (vb.length / 3 === ib.length ? \"YES\" : \"NO\");\r\n                }\r\n            } else {\r\n                ret += \", flat shading: UNKNOWN\";\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /** @internal */\r\n    public _unBindEffect() {\r\n        super._unBindEffect();\r\n\r\n        for (const instance of this.instances) {\r\n            instance._unBindEffect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has LOD\r\n     */\r\n    public get hasLODLevels(): boolean {\r\n        return this._internalMeshDataInfo._LODLevels.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of MeshLODLevel associated with the current mesh\r\n     * @returns an array of MeshLODLevel\r\n     */\r\n    public getLODLevels(): MeshLODLevel[] {\r\n        return this._internalMeshDataInfo._LODLevels;\r\n    }\r\n\r\n    private _sortLODLevels(): void {\r\n        const sortingOrderFactor = this._internalMeshDataInfo._useLODScreenCoverage ? -1 : 1;\r\n        this._internalMeshDataInfo._LODLevels.sort((a, b) => {\r\n            if (a.distanceOrScreenCoverage < b.distanceOrScreenCoverage) {\r\n                return sortingOrderFactor;\r\n            }\r\n            if (a.distanceOrScreenCoverage > b.distanceOrScreenCoverage) {\r\n                return -sortingOrderFactor;\r\n            }\r\n\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add a mesh as LOD level triggered at the given distance.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param distanceOrScreenCoverage Either distance from the center of the object to show this level or the screen coverage if `useScreenCoverage` is set to `true`.\r\n     * If screen coverage, value is a fraction of the screen's total surface, between 0 and 1.\r\n     * Example Playground for distance https://playground.babylonjs.com/#QE7KM#197\r\n     * Example Playground for screen coverage https://playground.babylonjs.com/#QE7KM#196\r\n     * @param mesh The mesh to be added as LOD level (can be null)\r\n     * @returns This mesh (for chaining)\r\n     */\r\n    public addLODLevel(distanceOrScreenCoverage: number, mesh: Nullable<Mesh>): Mesh {\r\n        if (mesh && mesh._masterMesh) {\r\n            Logger.Warn(\"You cannot use a mesh as LOD level twice\");\r\n            return this;\r\n        }\r\n\r\n        const level = new MeshLODLevel(distanceOrScreenCoverage, mesh);\r\n        this._internalMeshDataInfo._LODLevels.push(level);\r\n\r\n        if (mesh) {\r\n            mesh._masterMesh = this;\r\n        }\r\n\r\n        this._sortLODLevels();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the LOD level mesh at the passed distance or null if not found.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param distance The distance from the center of the object to show this level\r\n     * @returns a Mesh or `null`\r\n     */\r\n    public getLODLevelAtDistance(distance: number): Nullable<Mesh> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\r\n            const level = internalDataInfo._LODLevels[index];\r\n\r\n            if (level.distanceOrScreenCoverage === distance) {\r\n                return level.mesh;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Remove a mesh from the LOD array\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param mesh defines the mesh to be removed\r\n     * @returns This mesh (for chaining)\r\n     */\r\n    public removeLODLevel(mesh: Nullable<Mesh>): Mesh {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\r\n            if (internalDataInfo._LODLevels[index].mesh === mesh) {\r\n                internalDataInfo._LODLevels.splice(index, 1);\r\n                if (mesh) {\r\n                    mesh._masterMesh = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._sortLODLevels();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the registered LOD mesh distant from the parameter `camera` position if any, else returns the current mesh.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param camera defines the camera to use to compute distance\r\n     * @param boundingSphere defines a custom bounding sphere to use instead of the one from this mesh\r\n     * @returns This mesh (for chaining)\r\n     */\r\n    public getLOD(camera: Camera, boundingSphere?: BoundingSphere): Nullable<AbstractMesh> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        if (!internalDataInfo._LODLevels || internalDataInfo._LODLevels.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        const bSphere = boundingSphere || this.getBoundingInfo().boundingSphere;\r\n\r\n        const distanceToCamera = camera.mode === Camera.ORTHOGRAPHIC_CAMERA ? camera.minZ : bSphere.centerWorld.subtract(camera.globalPosition).length();\r\n        let compareValue = distanceToCamera;\r\n        let compareSign = 1;\r\n\r\n        if (internalDataInfo._useLODScreenCoverage) {\r\n            const screenArea = camera.screenArea;\r\n            let meshArea = (bSphere.radiusWorld * camera.minZ) / distanceToCamera;\r\n            meshArea = meshArea * meshArea * Math.PI;\r\n            compareValue = meshArea / screenArea;\r\n            compareSign = -1;\r\n        }\r\n\r\n        if (compareSign * internalDataInfo._LODLevels[internalDataInfo._LODLevels.length - 1].distanceOrScreenCoverage > compareSign * compareValue) {\r\n            if (this.onLODLevelSelection) {\r\n                this.onLODLevelSelection(compareValue, this, this);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\r\n            const level = internalDataInfo._LODLevels[index];\r\n\r\n            if (compareSign * level.distanceOrScreenCoverage < compareSign * compareValue) {\r\n                if (level.mesh) {\r\n                    if (level.mesh.delayLoadState === Constants.DELAYLOADSTATE_NOTLOADED) {\r\n                        level.mesh._checkDelayState();\r\n                        return this;\r\n                    }\r\n\r\n                    if (level.mesh.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n                        return this;\r\n                    }\r\n\r\n                    level.mesh._preActivate();\r\n                    level.mesh._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\r\n                }\r\n\r\n                if (this.onLODLevelSelection) {\r\n                    this.onLODLevelSelection(compareValue, this, level.mesh);\r\n                }\r\n\r\n                return level.mesh;\r\n            }\r\n        }\r\n\r\n        if (this.onLODLevelSelection) {\r\n            this.onLODLevelSelection(compareValue, this, this);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh internal Geometry object\r\n     */\r\n    public get geometry(): Nullable<Geometry> {\r\n        return this._geometry;\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of vertices within the mesh geometry or zero if the mesh has no geometry.\r\n     * @returns the total number of vertices\r\n     */\r\n    public getTotalVertices(): number {\r\n        if (this._geometry === null || this._geometry === undefined) {\r\n            return 0;\r\n        }\r\n        return this._geometry.getTotalVertices();\r\n    }\r\n\r\n    /**\r\n     * Returns the content of an associated vertex buffer\r\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param copyWhenShared defines a boolean indicating that if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one\r\n     * @param forceCopy defines a boolean forcing the copy of the buffer no matter what the value of copyWhenShared is\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a FloatArray or null if the mesh has no geometry or no vertex buffer for this kind.\r\n     */\r\n    public getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean, bypassInstanceData?: boolean): Nullable<FloatArray> {\r\n        if (!this._geometry) {\r\n            return null;\r\n        }\r\n        let data = bypassInstanceData\r\n            ? undefined\r\n            : this._userInstancedBuffersStorage?.vertexBuffers[kind]?.getFloatData(\r\n                  this.instances.length + 1, // +1 because the master mesh is not included in the instances array\r\n                  forceCopy || (copyWhenShared && this._geometry.meshes.length !== 1)\r\n              );\r\n        if (!data) {\r\n            data = this._geometry.getVerticesData(kind, copyWhenShared, forceCopy);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh VertexBuffer object from the requested `kind`\r\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.NormalKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a FloatArray or null if the mesh has no vertex buffer for this kind.\r\n     */\r\n    public getVertexBuffer(kind: string, bypassInstanceData?: boolean): Nullable<VertexBuffer> {\r\n        if (!this._geometry) {\r\n            return null;\r\n        }\r\n\r\n        return (bypassInstanceData ? undefined : this._userInstancedBuffersStorage?.vertexBuffers[kind]) ?? this._geometry.getVertexBuffer(kind);\r\n    }\r\n\r\n    /**\r\n     * Tests if a specific vertex buffer is associated with this mesh\r\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.NormalKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a boolean\r\n     */\r\n    public isVerticesDataPresent(kind: string, bypassInstanceData?: boolean): boolean {\r\n        if (!this._geometry) {\r\n            if (this._delayInfo) {\r\n                return this._delayInfo.indexOf(kind) !== -1;\r\n            }\r\n            return false;\r\n        }\r\n        return (!bypassInstanceData && this._userInstancedBuffersStorage?.vertexBuffers[kind] !== undefined) || this._geometry.isVerticesDataPresent(kind);\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable.\r\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a boolean\r\n     */\r\n    public isVertexBufferUpdatable(kind: string, bypassInstanceData?: boolean): boolean {\r\n        if (!this._geometry) {\r\n            if (this._delayInfo) {\r\n                return this._delayInfo.indexOf(kind) !== -1;\r\n            }\r\n            return false;\r\n        }\r\n        if (!bypassInstanceData) {\r\n            const buffer = this._userInstancedBuffersStorage?.vertexBuffers[kind];\r\n            if (buffer) {\r\n                return buffer.isUpdatable();\r\n            }\r\n        }\r\n        return this._geometry.isVertexBufferUpdatable(kind);\r\n    }\r\n\r\n    /**\r\n     * Returns a string which contains the list of existing `kinds` of Vertex Data associated with this mesh.\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns an array of strings\r\n     */\r\n    public getVerticesDataKinds(bypassInstanceData?: boolean): string[] {\r\n        if (!this._geometry) {\r\n            const result: string[] = [];\r\n            if (this._delayInfo) {\r\n                this._delayInfo.forEach(function (kind) {\r\n                    result.push(kind);\r\n                });\r\n            }\r\n            return result;\r\n        }\r\n        const kinds = this._geometry.getVerticesDataKinds();\r\n        if (!bypassInstanceData && this._userInstancedBuffersStorage) {\r\n            for (const kind in this._userInstancedBuffersStorage.vertexBuffers) {\r\n                if (kinds.indexOf(kind) === -1) {\r\n                    kinds.push(kind);\r\n                }\r\n            }\r\n        }\r\n        return kinds;\r\n    }\r\n\r\n    /**\r\n     * Returns a positive integer : the total number of indices in this mesh geometry.\r\n     * @returns the numner of indices or zero if the mesh has no geometry.\r\n     */\r\n    public getTotalIndices(): number {\r\n        if (!this._geometry) {\r\n            return 0;\r\n        }\r\n        return this._geometry.getTotalIndices();\r\n    }\r\n\r\n    /**\r\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\r\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns the indices array or an empty array if the mesh has no geometry\r\n     */\r\n    public getIndices(copyWhenShared?: boolean, forceCopy?: boolean): Nullable<IndicesArray> {\r\n        if (!this._geometry) {\r\n            return [];\r\n        }\r\n        return this._geometry.getIndices(copyWhenShared, forceCopy);\r\n    }\r\n\r\n    public get isBlocked(): boolean {\r\n        return this._masterMesh !== null && this._masterMesh !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Determine if the current mesh is ready to be rendered\r\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\r\n     * @param forceInstanceSupport will check if the mesh will be ready when used with instances (false by default)\r\n     * @returns true if all associated assets are ready (material, textures, shaders)\r\n     */\r\n    public isReady(completeCheck = false, forceInstanceSupport = false): boolean {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.isReady(completeCheck)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.subMeshes || this.subMeshes.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        if (!completeCheck) {\r\n            return true;\r\n        }\r\n\r\n        const engine = this.getEngine();\r\n        const scene = this.getScene();\r\n        const hardwareInstancedRendering = forceInstanceSupport || (engine.getCaps().instancedArrays && (this.instances.length > 0 || this.hasThinInstances));\r\n\r\n        this.computeWorldMatrix();\r\n\r\n        const mat = this.material || scene.defaultMaterial;\r\n        if (mat) {\r\n            if (mat._storeEffectOnSubMeshes) {\r\n                for (const subMesh of this.subMeshes) {\r\n                    const effectiveMaterial = subMesh.getMaterial();\r\n                    if (effectiveMaterial) {\r\n                        if (effectiveMaterial._storeEffectOnSubMeshes) {\r\n                            if (!effectiveMaterial.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\r\n                                return false;\r\n                            }\r\n                        } else {\r\n                            if (!effectiveMaterial.isReady(this, hardwareInstancedRendering)) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (!mat.isReady(this, hardwareInstancedRendering)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Shadows\r\n        const currentRenderPassId = engine.currentRenderPassId;\r\n        for (const light of this.lightSources) {\r\n            const generators = light.getShadowGenerators();\r\n\r\n            if (!generators) {\r\n                continue;\r\n            }\r\n\r\n            const iterator = generators.values();\r\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                const generator = key.value;\r\n                if (generator && (!generator.getShadowMap()?.renderList || (generator.getShadowMap()?.renderList && generator.getShadowMap()?.renderList?.indexOf(this) !== -1))) {\r\n                    const shadowMap = generator.getShadowMap()!;\r\n                    const renderPassIds = shadowMap.renderPassIds ?? [engine.currentRenderPassId];\r\n                    for (let p = 0; p < renderPassIds.length; ++p) {\r\n                        engine.currentRenderPassId = renderPassIds[p];\r\n                        for (const subMesh of this.subMeshes) {\r\n                            if (!generator.isReady(subMesh, hardwareInstancedRendering, subMesh.getMaterial()?.needAlphaBlendingForMesh(this) ?? false)) {\r\n                                engine.currentRenderPassId = currentRenderPassId;\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    engine.currentRenderPassId = currentRenderPassId;\r\n                }\r\n            }\r\n        }\r\n\r\n        // LOD\r\n        for (const lod of this._internalMeshDataInfo._LODLevels) {\r\n            if (lod.mesh && !lod.mesh.isReady(hardwareInstancedRendering)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the normals aren't to be recomputed on next mesh `positions` array update. This property is pertinent only for updatable parametric shapes.\r\n     */\r\n    public get areNormalsFrozen(): boolean {\r\n        return this._internalMeshDataInfo._areNormalsFrozen;\r\n    }\r\n\r\n    /**\r\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It prevents the mesh normals from being recomputed on next `positions` array update.\r\n     * @returns the current mesh\r\n     */\r\n    public freezeNormals(): Mesh {\r\n        this._internalMeshDataInfo._areNormalsFrozen = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It reactivates the mesh normals computation if it was previously frozen\r\n     * @returns the current mesh\r\n     */\r\n    public unfreezeNormals(): Mesh {\r\n        this._internalMeshDataInfo._areNormalsFrozen = false;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a value overriding the instance count. Only applicable when custom instanced InterleavedVertexBuffer are used rather than InstancedMeshs\r\n     */\r\n    public set overridenInstanceCount(count: number) {\r\n        this._instanceDataStorage.overridenInstanceCount = count;\r\n    }\r\n\r\n    // Methods\r\n    /** @internal */\r\n    public _preActivate(): Mesh {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        const sceneRenderId = this.getScene().getRenderId();\r\n        if (internalDataInfo._preActivateId === sceneRenderId) {\r\n            return this;\r\n        }\r\n\r\n        internalDataInfo._preActivateId = sceneRenderId;\r\n        this._instanceDataStorage.visibleInstances = null;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preActivateForIntermediateRendering(renderId: number): Mesh {\r\n        if (this._instanceDataStorage.visibleInstances) {\r\n            this._instanceDataStorage.visibleInstances.intermediateDefaultRenderId = renderId;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _registerInstanceForRenderId(instance: InstancedMesh, renderId: number): Mesh {\r\n        if (!this._instanceDataStorage.visibleInstances) {\r\n            this._instanceDataStorage.visibleInstances = {\r\n                defaultRenderId: renderId,\r\n                selfDefaultRenderId: this._renderId,\r\n            };\r\n        }\r\n\r\n        if (!this._instanceDataStorage.visibleInstances[renderId]) {\r\n            if (this._instanceDataStorage.previousRenderId !== undefined && this._instanceDataStorage.isFrozen) {\r\n                this._instanceDataStorage.visibleInstances[this._instanceDataStorage.previousRenderId] = null;\r\n            }\r\n            this._instanceDataStorage.previousRenderId = renderId;\r\n            this._instanceDataStorage.visibleInstances[renderId] = new Array<InstancedMesh>();\r\n        }\r\n\r\n        this._instanceDataStorage.visibleInstances[renderId].push(instance);\r\n        return this;\r\n    }\r\n\r\n    protected _afterComputeWorldMatrix(): void {\r\n        super._afterComputeWorldMatrix();\r\n\r\n        if (!this.hasThinInstances) {\r\n            return;\r\n        }\r\n\r\n        if (!this.doNotSyncBoundingInfo) {\r\n            this.thinInstanceRefreshBoundingInfo(false);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _postActivate(): void {\r\n        if (this.edgesShareWithInstances && this.edgesRenderer && this.edgesRenderer.isEnabled && this._renderingGroup) {\r\n            this._renderingGroup._edgesRenderers.pushNoDuplicate(this.edgesRenderer);\r\n            this.edgesRenderer.customInstances.push(this.getWorldMatrix());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\r\n     * This means the mesh underlying bounding box and sphere are recomputed.\r\n     * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\r\n     * @param applyMorph  defines whether to apply the morph target before computing the bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public refreshBoundingInfo(applySkeleton: boolean = false, applyMorph: boolean = false): Mesh {\r\n        if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\r\n            return this;\r\n        }\r\n\r\n        const bias = this.geometry ? this.geometry.boundingBias : null;\r\n        this._refreshBoundingInfo(this._getPositionData(applySkeleton, applyMorph), bias);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _createGlobalSubMesh(force: boolean): Nullable<SubMesh> {\r\n        const totalVertices = this.getTotalVertices();\r\n        if (!totalVertices || !this.getIndices()) {\r\n            return null;\r\n        }\r\n\r\n        // Check if we need to recreate the submeshes\r\n        if (this.subMeshes && this.subMeshes.length > 0) {\r\n            const ib = this.getIndices();\r\n\r\n            if (!ib) {\r\n                return null;\r\n            }\r\n\r\n            const totalIndices = ib.length;\r\n            let needToRecreate = false;\r\n\r\n            if (force) {\r\n                needToRecreate = true;\r\n            } else {\r\n                for (const submesh of this.subMeshes) {\r\n                    if (submesh.indexStart + submesh.indexCount > totalIndices) {\r\n                        needToRecreate = true;\r\n                        break;\r\n                    }\r\n\r\n                    if (submesh.verticesStart + submesh.verticesCount > totalVertices) {\r\n                        needToRecreate = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!needToRecreate) {\r\n                return this.subMeshes[0];\r\n            }\r\n        }\r\n\r\n        this.releaseSubMeshes();\r\n        return new SubMesh(0, 0, totalVertices, 0, this.getTotalIndices(), this);\r\n    }\r\n\r\n    /**\r\n     * This function will subdivide the mesh into multiple submeshes\r\n     * @param count defines the expected number of submeshes\r\n     */\r\n    public subdivide(count: number): void {\r\n        if (count < 1) {\r\n            return;\r\n        }\r\n\r\n        const totalIndices = this.getTotalIndices();\r\n        let subdivisionSize = (totalIndices / count) | 0;\r\n        let offset = 0;\r\n\r\n        // Ensure that subdivisionSize is a multiple of 3\r\n        while (subdivisionSize % 3 !== 0) {\r\n            subdivisionSize++;\r\n        }\r\n\r\n        this.releaseSubMeshes();\r\n        for (let index = 0; index < count; index++) {\r\n            if (offset >= totalIndices) {\r\n                break;\r\n            }\r\n\r\n            SubMesh.CreateFromIndices(0, offset, index === count - 1 ? totalIndices - offset : subdivisionSize, this, undefined, false);\r\n\r\n            offset += subdivisionSize;\r\n        }\r\n\r\n        this.refreshBoundingInfo();\r\n        this.synchronizeInstances();\r\n    }\r\n\r\n    /**\r\n     * Copy a FloatArray into a specific associated vertex buffer\r\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\r\n     * @param stride defines the data stride size (can be null)\r\n     * @returns the current mesh\r\n     */\r\n    public setVerticesData(kind: string, data: FloatArray, updatable: boolean = false, stride?: number): AbstractMesh {\r\n        if (!this._geometry) {\r\n            const vertexData = new VertexData();\r\n            vertexData.set(data, kind);\r\n\r\n            const scene = this.getScene();\r\n\r\n            new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\r\n        } else {\r\n            this._geometry.setVerticesData(kind, data, updatable, stride);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Delete a vertex buffer associated with this mesh\r\n     * @param kind defines which buffer to delete (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     */\r\n    public removeVerticesData(kind: string) {\r\n        if (!this._geometry) {\r\n            return;\r\n        }\r\n\r\n        this._geometry.removeVerticesData(kind);\r\n    }\r\n\r\n    /**\r\n     * Flags an associated vertex buffer as updatable\r\n     * @param kind defines which buffer to use (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\r\n     */\r\n    public markVerticesDataAsUpdatable(kind: string, updatable = true) {\r\n        const vb = this.getVertexBuffer(kind);\r\n\r\n        if (!vb || vb.isUpdatable() === updatable) {\r\n            return;\r\n        }\r\n\r\n        this.setVerticesData(kind, <FloatArray>this.getVerticesData(kind), updatable);\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh global Vertex Buffer\r\n     * @param buffer defines the buffer to use\r\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\r\n     * @returns the current mesh\r\n     */\r\n    public setVerticesBuffer(buffer: VertexBuffer, disposeExistingBuffer = true): Mesh {\r\n        if (!this._geometry) {\r\n            this._geometry = Geometry.CreateGeometryForMesh(this);\r\n        }\r\n\r\n        this._geometry.setVerticesBuffer(buffer, null, disposeExistingBuffer);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a specific associated vertex buffer\r\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\r\n     * @param makeItUnique defines if the geometry associated with the mesh must be cloned to make the change only for this mesh (and not all meshes associated with the same geometry)\r\n     * @returns the current mesh\r\n     */\r\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): AbstractMesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n        if (!makeItUnique) {\r\n            this._geometry.updateVerticesData(kind, data, updateExtends);\r\n        } else {\r\n            this.makeGeometryUnique();\r\n            this.updateVerticesData(kind, data, updateExtends, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This method updates the vertex positions of an updatable mesh according to the `positionFunction` returned values.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#other-shapes-updatemeshpositions\r\n     * @param positionFunction is a simple JS function what is passed the mesh `positions` array. It doesn't need to return anything\r\n     * @param computeNormals is a boolean (default true) to enable/disable the mesh normal recomputation after the vertex position update\r\n     * @returns the current mesh\r\n     */\r\n    public updateMeshPositions(positionFunction: (data: FloatArray) => void, computeNormals: boolean = true): Mesh {\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        if (!positions) {\r\n            return this;\r\n        }\r\n\r\n        positionFunction(positions);\r\n        this.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\r\n\r\n        if (computeNormals) {\r\n            const indices = this.getIndices();\r\n            const normals = this.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n            if (!normals) {\r\n                return this;\r\n            }\r\n\r\n            VertexData.ComputeNormals(positions, indices, normals);\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a un-shared specific occurence of the geometry for the mesh.\r\n     * @returns the current mesh\r\n     */\r\n    public makeGeometryUnique(): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        if (this._geometry.meshes.length === 1) {\r\n            return this;\r\n        }\r\n\r\n        const oldGeometry = this._geometry;\r\n        const geometry = this._geometry.copy(Geometry.RandomId());\r\n        oldGeometry.releaseForMesh(this, true);\r\n        geometry.applyToMesh(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the index buffer of this mesh.\r\n     * @param indexBuffer Defines the index buffer to use for this mesh\r\n     * @param totalVertices Defines the total number of vertices used by the buffer\r\n     * @param totalIndices Defines the total number of indices in the index buffer\r\n     */\r\n    public setIndexBuffer(indexBuffer: DataBuffer, totalVertices: number, totalIndices: number): void {\r\n        let geometry = this._geometry;\r\n        if (!geometry) {\r\n            geometry = new Geometry(Geometry.RandomId(), this.getScene(), undefined, undefined, this);\r\n        }\r\n        geometry.setIndexBuffer(indexBuffer, totalVertices, totalIndices);\r\n    }\r\n\r\n    /**\r\n     * Set the index buffer of this mesh\r\n     * @param indices defines the source data\r\n     * @param totalVertices defines the total number of vertices referenced by this index data (can be null)\r\n     * @param updatable defines if the updated index buffer must be flagged as updatable (default is false)\r\n     * @returns the current mesh\r\n     */\r\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number> = null, updatable: boolean = false): AbstractMesh {\r\n        if (!this._geometry) {\r\n            const vertexData = new VertexData();\r\n            vertexData.indices = indices;\r\n\r\n            const scene = this.getScene();\r\n\r\n            new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\r\n        } else {\r\n            this._geometry.setIndices(indices, totalVertices, updatable);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update the current index buffer\r\n     * @param indices defines the source data\r\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\r\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\r\n     * @returns the current mesh\r\n     */\r\n    public updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): AbstractMesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        this._geometry.updateIndices(indices, offset, gpuMemoryOnly);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Invert the geometry to move from a right handed system to a left handed one.\r\n     * @returns the current mesh\r\n     */\r\n    public toLeftHanded(): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n        this._geometry.toLeftHanded();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bind(subMesh: SubMesh, effect: Effect, fillMode: number, allowInstancedRendering = true): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        const engine = this.getScene().getEngine();\r\n\r\n        // Morph targets\r\n        if (this.morphTargetManager && this.morphTargetManager.isUsingTextureForTargets) {\r\n            this.morphTargetManager._bind(effect);\r\n        }\r\n\r\n        // Wireframe\r\n        let indexToBind;\r\n        if (this._unIndexed) {\r\n            indexToBind = null;\r\n        } else {\r\n            switch (this._getRenderingFillMode(fillMode)) {\r\n                case Material.PointFillMode:\r\n                    indexToBind = null;\r\n                    break;\r\n                case Material.WireFrameFillMode:\r\n                    indexToBind = subMesh._getLinesIndexBuffer(<IndicesArray>this.getIndices(), engine);\r\n                    break;\r\n                default:\r\n                case Material.TriangleFillMode:\r\n                    indexToBind = this._geometry.getIndexBuffer();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // VBOs\r\n        if (!allowInstancedRendering || !this._userInstancedBuffersStorage || this.hasThinInstances) {\r\n            this._geometry._bind(effect, indexToBind);\r\n        } else {\r\n            this._geometry._bind(effect, indexToBind, this._userInstancedBuffersStorage.vertexBuffers, this._userInstancedBuffersStorage.vertexArrayObjects);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(subMesh: SubMesh, fillMode: number, instancesCount?: number): Mesh {\r\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\r\n            return this;\r\n        }\r\n\r\n        if (this._internalMeshDataInfo._onBeforeDrawObservable) {\r\n            this._internalMeshDataInfo._onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        if (this._unIndexed || fillMode == Material.PointFillMode) {\r\n            // or triangles as points\r\n            engine.drawArraysType(fillMode, subMesh.verticesStart, subMesh.verticesCount, this.forcedInstanceCount || instancesCount);\r\n        } else if (fillMode == Material.WireFrameFillMode) {\r\n            // Triangles as wireframe\r\n            engine.drawElementsType(fillMode, 0, subMesh._linesIndexCount, this.forcedInstanceCount || instancesCount);\r\n        } else {\r\n            engine.drawElementsType(fillMode, subMesh.indexStart, subMesh.indexCount, this.forcedInstanceCount || instancesCount);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Registers for this mesh a javascript function called just before the rendering process\r\n     * @param func defines the function to call before rendering this mesh\r\n     * @returns the current mesh\r\n     */\r\n    public registerBeforeRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onBeforeRenderObservable.add(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes a previously registered javascript function called before the rendering\r\n     * @param func defines the function to remove\r\n     * @returns the current mesh\r\n     */\r\n    public unregisterBeforeRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onBeforeRenderObservable.removeCallback(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Registers for this mesh a javascript function called just after the rendering is complete\r\n     * @param func defines the function to call after rendering this mesh\r\n     * @returns the current mesh\r\n     */\r\n    public registerAfterRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onAfterRenderObservable.add(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes a previously registered javascript function called after the rendering.\r\n     * @param func defines the function to remove\r\n     * @returns the current mesh\r\n     */\r\n    public unregisterAfterRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onAfterRenderObservable.removeCallback(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getInstancesRenderList(subMeshId: number, isReplacementMode: boolean = false): _InstancesBatch {\r\n        if (this._instanceDataStorage.isFrozen) {\r\n            if (isReplacementMode) {\r\n                this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.hardwareInstancedRendering[subMeshId] = false;\r\n                this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.renderSelf[subMeshId] = true;\r\n                return this._instanceDataStorage.batchCacheReplacementModeInFrozenMode;\r\n            }\r\n            if (this._instanceDataStorage.previousBatch) {\r\n                return this._instanceDataStorage.previousBatch;\r\n            }\r\n        }\r\n        const scene = this.getScene();\r\n        const isInIntermediateRendering = scene._isInIntermediateRendering();\r\n        const onlyForInstances = isInIntermediateRendering\r\n            ? this._internalAbstractMeshDataInfo._onlyForInstancesIntermediate\r\n            : this._internalAbstractMeshDataInfo._onlyForInstances;\r\n        const batchCache = this._instanceDataStorage.batchCache;\r\n        batchCache.mustReturn = false;\r\n        batchCache.renderSelf[subMeshId] = isReplacementMode || (!onlyForInstances && this.isEnabled() && this.isVisible);\r\n        batchCache.visibleInstances[subMeshId] = null;\r\n\r\n        if (this._instanceDataStorage.visibleInstances && !isReplacementMode) {\r\n            const visibleInstances = this._instanceDataStorage.visibleInstances;\r\n            const currentRenderId = scene.getRenderId();\r\n            const defaultRenderId = isInIntermediateRendering ? visibleInstances.intermediateDefaultRenderId : visibleInstances.defaultRenderId;\r\n            batchCache.visibleInstances[subMeshId] = visibleInstances[currentRenderId];\r\n\r\n            if (!batchCache.visibleInstances[subMeshId] && defaultRenderId) {\r\n                batchCache.visibleInstances[subMeshId] = visibleInstances[defaultRenderId];\r\n            }\r\n        }\r\n        batchCache.hardwareInstancedRendering[subMeshId] =\r\n            !isReplacementMode &&\r\n            this._instanceDataStorage.hardwareInstancedRendering &&\r\n            batchCache.visibleInstances[subMeshId] !== null &&\r\n            batchCache.visibleInstances[subMeshId] !== undefined;\r\n        this._instanceDataStorage.previousBatch = batchCache;\r\n\r\n        return batchCache;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderWithInstances(subMesh: SubMesh, fillMode: number, batch: _InstancesBatch, effect: Effect, engine: Engine): Mesh {\r\n        const visibleInstances = batch.visibleInstances[subMesh._id];\r\n        const visibleInstanceCount = visibleInstances ? visibleInstances.length : 0;\r\n\r\n        const instanceStorage = this._instanceDataStorage;\r\n        const currentInstancesBufferSize = instanceStorage.instancesBufferSize;\r\n        let instancesBuffer = instanceStorage.instancesBuffer;\r\n        let instancesPreviousBuffer = instanceStorage.instancesPreviousBuffer;\r\n        const matricesCount = visibleInstanceCount + 1;\r\n        const bufferSize = matricesCount * 16 * 4;\r\n\r\n        while (instanceStorage.instancesBufferSize < bufferSize) {\r\n            instanceStorage.instancesBufferSize *= 2;\r\n        }\r\n\r\n        if (!instanceStorage.instancesData || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\r\n            instanceStorage.instancesData = new Float32Array(instanceStorage.instancesBufferSize / 4);\r\n        }\r\n        if ((this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousData) || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\r\n            instanceStorage.instancesPreviousData = new Float32Array(instanceStorage.instancesBufferSize / 4);\r\n        }\r\n\r\n        let offset = 0;\r\n        let instancesCount = 0;\r\n\r\n        const renderSelf = batch.renderSelf[subMesh._id];\r\n\r\n        const needUpdateBuffer =\r\n            !instancesBuffer ||\r\n            currentInstancesBufferSize !== instanceStorage.instancesBufferSize ||\r\n            (this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousBuffer);\r\n\r\n        if (!this._instanceDataStorage.manualUpdate && (!instanceStorage.isFrozen || needUpdateBuffer)) {\r\n            const world = this.getWorldMatrix();\r\n            if (renderSelf) {\r\n                if (this._scene.needsPreviousWorldMatrices) {\r\n                    if (!instanceStorage.masterMeshPreviousWorldMatrix) {\r\n                        instanceStorage.masterMeshPreviousWorldMatrix = world.clone();\r\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                    } else {\r\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyFrom(world);\r\n                    }\r\n                }\r\n                world.copyToArray(instanceStorage.instancesData, offset);\r\n                offset += 16;\r\n                instancesCount++;\r\n            }\r\n\r\n            if (visibleInstances) {\r\n                if (Mesh.INSTANCEDMESH_SORT_TRANSPARENT && this._scene.activeCamera && subMesh.getMaterial()?.needAlphaBlendingForMesh(subMesh.getRenderingMesh())) {\r\n                    const cameraPosition = this._scene.activeCamera.globalPosition;\r\n                    for (let instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\r\n                        const instanceMesh = visibleInstances[instanceIndex];\r\n                        instanceMesh._distanceToCamera = Vector3.Distance(instanceMesh.getBoundingInfo().boundingSphere.centerWorld, cameraPosition);\r\n                    }\r\n                    visibleInstances.sort((m1, m2) => {\r\n                        return m1._distanceToCamera > m2._distanceToCamera ? -1 : m1._distanceToCamera < m2._distanceToCamera ? 1 : 0;\r\n                    });\r\n                }\r\n                for (let instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\r\n                    const instance = visibleInstances[instanceIndex];\r\n                    const matrix = instance.getWorldMatrix();\r\n                    matrix.copyToArray(instanceStorage.instancesData, offset);\r\n\r\n                    if (this._scene.needsPreviousWorldMatrices) {\r\n                        if (!instance._previousWorldMatrix) {\r\n                            instance._previousWorldMatrix = matrix.clone();\r\n                            instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                        } else {\r\n                            instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                            instance._previousWorldMatrix.copyFrom(matrix);\r\n                        }\r\n                    }\r\n\r\n                    offset += 16;\r\n                    instancesCount++;\r\n                }\r\n            }\r\n        } else {\r\n            instancesCount = (renderSelf ? 1 : 0) + visibleInstanceCount;\r\n        }\r\n\r\n        if (needUpdateBuffer) {\r\n            if (instancesBuffer) {\r\n                instancesBuffer.dispose();\r\n            }\r\n\r\n            if (instancesPreviousBuffer) {\r\n                instancesPreviousBuffer.dispose();\r\n            }\r\n\r\n            instancesBuffer = new Buffer(engine, instanceStorage.instancesData, true, 16, false, true);\r\n            instanceStorage.instancesBuffer = instancesBuffer;\r\n            if (!this._userInstancedBuffersStorage) {\r\n                this._userInstancedBuffersStorage = {\r\n                    data: {},\r\n                    vertexBuffers: {},\r\n                    strides: {},\r\n                    sizes: {},\r\n                    vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined,\r\n                };\r\n            }\r\n\r\n            this._userInstancedBuffersStorage.vertexBuffers[\"world0\"] = instancesBuffer.createVertexBuffer(\"world0\", 0, 4);\r\n            this._userInstancedBuffersStorage.vertexBuffers[\"world1\"] = instancesBuffer.createVertexBuffer(\"world1\", 4, 4);\r\n            this._userInstancedBuffersStorage.vertexBuffers[\"world2\"] = instancesBuffer.createVertexBuffer(\"world2\", 8, 4);\r\n            this._userInstancedBuffersStorage.vertexBuffers[\"world3\"] = instancesBuffer.createVertexBuffer(\"world3\", 12, 4);\r\n\r\n            if (this._scene.needsPreviousWorldMatrices) {\r\n                instancesPreviousBuffer = new Buffer(engine, instanceStorage.instancesPreviousData, true, 16, false, true);\r\n                instanceStorage.instancesPreviousBuffer = instancesPreviousBuffer;\r\n\r\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld0\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld0\", 0, 4);\r\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld1\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld1\", 4, 4);\r\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld2\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld2\", 8, 4);\r\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld3\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld3\", 12, 4);\r\n            }\r\n            this._invalidateInstanceVertexArrayObject();\r\n        } else {\r\n            if (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) {\r\n                instancesBuffer!.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\r\n                if (this._scene.needsPreviousWorldMatrices && (!this._instanceDataStorage.manualUpdate || this._instanceDataStorage.previousManualUpdate)) {\r\n                    instancesPreviousBuffer!.updateDirectly(instanceStorage.instancesPreviousData, 0, instancesCount);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._processInstancedBuffers(visibleInstances, renderSelf);\r\n\r\n        // Stats\r\n        this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\r\n\r\n        // Draw\r\n        if (engine._currentDrawContext) {\r\n            engine._currentDrawContext.useInstancing = true;\r\n        }\r\n        this._bind(subMesh, effect, fillMode);\r\n        this._draw(subMesh, fillMode, instancesCount);\r\n\r\n        // Write current matrices as previous matrices in case of manual update\r\n        // Default behaviour when previous matrices are not specified explicitly\r\n        // Will break if instances number/order changes\r\n        if (\r\n            this._scene.needsPreviousWorldMatrices &&\r\n            !needUpdateBuffer &&\r\n            this._instanceDataStorage.manualUpdate &&\r\n            (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) &&\r\n            !this._instanceDataStorage.previousManualUpdate\r\n        ) {\r\n            instancesPreviousBuffer!.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\r\n        }\r\n\r\n        engine.unbindInstanceAttributes();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderWithThinInstances(subMesh: SubMesh, fillMode: number, effect: Effect, engine: Engine) {\r\n        // Stats\r\n        const instancesCount = this._thinInstanceDataStorage?.instancesCount ?? 0;\r\n\r\n        this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\r\n\r\n        // Draw\r\n        if (engine._currentDrawContext) {\r\n            engine._currentDrawContext.useInstancing = true;\r\n        }\r\n        this._bind(subMesh, effect, fillMode);\r\n        this._draw(subMesh, fillMode, instancesCount);\r\n\r\n        // Write current matrices as previous matrices\r\n        // Default behaviour when previous matrices are not specified explicitly\r\n        // Will break if instances number/order changes\r\n        if (this._scene.needsPreviousWorldMatrices && !this._thinInstanceDataStorage.previousMatrixData && this._thinInstanceDataStorage.matrixData) {\r\n            if (!this._thinInstanceDataStorage.previousMatrixBuffer) {\r\n                this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", this._thinInstanceDataStorage.matrixData, false);\r\n            } else {\r\n                this._thinInstanceDataStorage.previousMatrixBuffer!.updateDirectly(this._thinInstanceDataStorage.matrixData, 0, instancesCount);\r\n            }\r\n        }\r\n\r\n        engine.unbindInstanceAttributes();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _processInstancedBuffers(visibleInstances: Nullable<InstancedMesh[]>, renderSelf: boolean) {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processRendering(\r\n        renderingMesh: AbstractMesh,\r\n        subMesh: SubMesh,\r\n        effect: Effect,\r\n        fillMode: number,\r\n        batch: _InstancesBatch,\r\n        hardwareInstancedRendering: boolean,\r\n        onBeforeDraw: (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => void,\r\n        effectiveMaterial?: Material\r\n    ): Mesh {\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n        fillMode = this._getRenderingFillMode(fillMode);\r\n\r\n        if (hardwareInstancedRendering && subMesh.getRenderingMesh().hasThinInstances) {\r\n            this._renderWithThinInstances(subMesh, fillMode, effect, engine);\r\n            return this;\r\n        }\r\n\r\n        if (hardwareInstancedRendering) {\r\n            this._renderWithInstances(subMesh, fillMode, batch, effect, engine);\r\n        } else {\r\n            if (engine._currentDrawContext) {\r\n                engine._currentDrawContext.useInstancing = false;\r\n            }\r\n\r\n            let instanceCount = 0;\r\n            if (batch.renderSelf[subMesh._id]) {\r\n                // Draw\r\n                if (onBeforeDraw) {\r\n                    onBeforeDraw(false, renderingMesh.getWorldMatrix(), effectiveMaterial);\r\n                }\r\n                instanceCount++;\r\n\r\n                this._draw(subMesh, fillMode, this._instanceDataStorage.overridenInstanceCount);\r\n            }\r\n\r\n            const visibleInstancesForSubMesh = batch.visibleInstances[subMesh._id];\r\n\r\n            if (visibleInstancesForSubMesh) {\r\n                const visibleInstanceCount = visibleInstancesForSubMesh.length;\r\n                instanceCount += visibleInstanceCount;\r\n\r\n                // Stats\r\n                for (let instanceIndex = 0; instanceIndex < visibleInstanceCount; instanceIndex++) {\r\n                    const instance = visibleInstancesForSubMesh[instanceIndex];\r\n\r\n                    // World\r\n                    const world = instance.getWorldMatrix();\r\n                    if (onBeforeDraw) {\r\n                        onBeforeDraw(true, world, effectiveMaterial);\r\n                    }\r\n                    // Draw\r\n                    this._draw(subMesh, fillMode);\r\n                }\r\n            }\r\n\r\n            // Stats\r\n            scene._activeIndices.addCount(subMesh.indexCount * instanceCount, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _rebuild(dispose = false): void {\r\n        if (this._instanceDataStorage.instancesBuffer) {\r\n            // Dispose instance buffer to be recreated in _renderWithInstances when rendered\r\n            if (dispose) {\r\n                this._instanceDataStorage.instancesBuffer.dispose();\r\n            }\r\n            this._instanceDataStorage.instancesBuffer = null;\r\n        }\r\n        if (this._userInstancedBuffersStorage) {\r\n            for (const kind in this._userInstancedBuffersStorage.vertexBuffers) {\r\n                const buffer = this._userInstancedBuffersStorage.vertexBuffers[kind];\r\n                if (buffer) {\r\n                    // Dispose instance buffer to be recreated in _renderWithInstances when rendered\r\n                    if (dispose) {\r\n                        buffer.dispose();\r\n                    }\r\n                    this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\r\n                }\r\n            }\r\n            if (this._userInstancedBuffersStorage.vertexArrayObjects) {\r\n                this._userInstancedBuffersStorage.vertexArrayObjects = {};\r\n            }\r\n        }\r\n        this._internalMeshDataInfo._effectiveMaterial = null;\r\n        super._rebuild(dispose);\r\n    }\r\n\r\n    /** @internal */\r\n    public _freeze() {\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        // Prepare batches\r\n        for (let index = 0; index < this.subMeshes.length; index++) {\r\n            this._getInstancesRenderList(index);\r\n        }\r\n\r\n        this._internalMeshDataInfo._effectiveMaterial = null;\r\n        this._instanceDataStorage.isFrozen = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _unFreeze() {\r\n        this._instanceDataStorage.isFrozen = false;\r\n        this._instanceDataStorage.previousBatch = null;\r\n    }\r\n\r\n    /**\r\n     * Triggers the draw call for the mesh (or a submesh), for a specific render pass id\r\n     * @param renderPassId defines the render pass id to use to draw the mesh / submesh. If not provided, use the current renderPassId of the engine.\r\n     * @param enableAlphaMode defines if alpha mode can be changed (default: false)\r\n     * @param effectiveMeshReplacement defines an optional mesh used to provide info for the rendering (default: undefined)\r\n     * @param subMesh defines the subMesh to render. If not provided, draw all mesh submeshes (default: undefined)\r\n     * @param checkFrustumCulling defines if frustum culling must be checked (default: true). If you know the mesh is in the frustum (or if you don't care!), you can pass false to optimize.\r\n     * @returns the current mesh\r\n     */\r\n    public renderWithRenderPassId(renderPassId?: number, enableAlphaMode?: boolean, effectiveMeshReplacement?: AbstractMesh, subMesh?: SubMesh, checkFrustumCulling = true) {\r\n        const engine = this._scene.getEngine();\r\n        const currentRenderPassId = engine.currentRenderPassId;\r\n\r\n        if (renderPassId !== undefined) {\r\n            engine.currentRenderPassId = renderPassId;\r\n        }\r\n\r\n        if (subMesh) {\r\n            if (!checkFrustumCulling || (checkFrustumCulling && subMesh.isInFrustum(this._scene._frustumPlanes))) {\r\n                this.render(subMesh, !!enableAlphaMode, effectiveMeshReplacement);\r\n            }\r\n        } else {\r\n            for (let s = 0; s < this.subMeshes.length; s++) {\r\n                const subMesh = this.subMeshes[s];\r\n                if (!checkFrustumCulling || (checkFrustumCulling && subMesh.isInFrustum(this._scene._frustumPlanes))) {\r\n                    this.render(subMesh, !!enableAlphaMode, effectiveMeshReplacement);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (renderPassId !== undefined) {\r\n            engine.currentRenderPassId = currentRenderPassId;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Triggers the draw call for the mesh. Usually, you don't need to call this method by your own because the mesh rendering is handled by the scene rendering manager\r\n     * @param subMesh defines the subMesh to render\r\n     * @param enableAlphaMode defines if alpha mode can be changed\r\n     * @param effectiveMeshReplacement defines an optional mesh used to provide info for the rendering\r\n     * @returns the current mesh\r\n     */\r\n    public render(subMesh: SubMesh, enableAlphaMode: boolean, effectiveMeshReplacement?: AbstractMesh): Mesh {\r\n        const scene = this.getScene();\r\n\r\n        if (this._internalAbstractMeshDataInfo._isActiveIntermediate) {\r\n            this._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n        } else {\r\n            this._internalAbstractMeshDataInfo._isActive = false;\r\n        }\r\n\r\n        const numActiveCameras = scene.activeCameras?.length ?? 0;\r\n        const canCheckOcclusionQuery = (numActiveCameras > 1 && scene.activeCamera === scene.activeCameras![0]) || numActiveCameras <= 1;\r\n\r\n        if (canCheckOcclusionQuery && this._checkOcclusionQuery() && !this._occlusionDataStorage.forceRenderingWhenOccluded) {\r\n            return this;\r\n        }\r\n\r\n        // Managing instances\r\n        const batch = this._getInstancesRenderList(subMesh._id, !!effectiveMeshReplacement);\r\n\r\n        if (batch.mustReturn) {\r\n            return this;\r\n        }\r\n\r\n        // Checking geometry state\r\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\r\n            return this;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n        let oldCameraMaxZ = 0;\r\n        let oldCamera: Nullable<Camera> = null;\r\n        if (this.ignoreCameraMaxZ && scene.activeCamera && !scene._isInIntermediateRendering()) {\r\n            oldCameraMaxZ = scene.activeCamera.maxZ;\r\n            oldCamera = scene.activeCamera;\r\n            scene.activeCamera.maxZ = 0;\r\n            scene.updateTransformMatrix(true);\r\n        }\r\n\r\n        if (this._internalMeshDataInfo._onBeforeRenderObservable) {\r\n            this._internalMeshDataInfo._onBeforeRenderObservable.notifyObservers(this);\r\n        }\r\n\r\n        const renderingMesh = subMesh.getRenderingMesh();\r\n        const hardwareInstancedRendering =\r\n            batch.hardwareInstancedRendering[subMesh._id] ||\r\n            renderingMesh.hasThinInstances ||\r\n            (!!this._userInstancedBuffersStorage && !subMesh.getMesh()._internalAbstractMeshDataInfo._actAsRegularMesh);\r\n        const instanceDataStorage = this._instanceDataStorage;\r\n\r\n        const material = subMesh.getMaterial();\r\n        if (!material) {\r\n            if (oldCamera) {\r\n                oldCamera.maxZ = oldCameraMaxZ;\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // Material\r\n        if (!instanceDataStorage.isFrozen || !this._internalMeshDataInfo._effectiveMaterial || this._internalMeshDataInfo._effectiveMaterial !== material) {\r\n            if (material._storeEffectOnSubMeshes) {\r\n                if (!material.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\r\n                    if (oldCamera) {\r\n                        oldCamera.maxZ = oldCameraMaxZ;\r\n                        scene.updateTransformMatrix(true);\r\n                    }\r\n                    return this;\r\n                }\r\n            } else if (!material.isReady(this, hardwareInstancedRendering)) {\r\n                if (oldCamera) {\r\n                    oldCamera.maxZ = oldCameraMaxZ;\r\n                    scene.updateTransformMatrix(true);\r\n                }\r\n                return this;\r\n            }\r\n\r\n            this._internalMeshDataInfo._effectiveMaterial = material;\r\n        } else if (\r\n            (material._storeEffectOnSubMeshes && !subMesh._drawWrapper?._wasPreviouslyReady) ||\r\n            (!material._storeEffectOnSubMeshes && !material._getDrawWrapper()._wasPreviouslyReady)\r\n        ) {\r\n            if (oldCamera) {\r\n                oldCamera.maxZ = oldCameraMaxZ;\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // Alpha mode\r\n        if (enableAlphaMode) {\r\n            engine.setAlphaMode(this._internalMeshDataInfo._effectiveMaterial.alphaMode);\r\n        }\r\n\r\n        let drawWrapper: Nullable<DrawWrapper>;\r\n        if (this._internalMeshDataInfo._effectiveMaterial._storeEffectOnSubMeshes) {\r\n            drawWrapper = subMesh._drawWrapper;\r\n        } else {\r\n            drawWrapper = this._internalMeshDataInfo._effectiveMaterial._getDrawWrapper();\r\n        }\r\n\r\n        const effect = drawWrapper?.effect ?? null;\r\n\r\n        for (const step of scene._beforeRenderingMeshStage) {\r\n            step.action(this, subMesh, batch, effect);\r\n        }\r\n\r\n        if (!drawWrapper || !effect) {\r\n            if (oldCamera) {\r\n                oldCamera.maxZ = oldCameraMaxZ;\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        const effectiveMesh = effectiveMeshReplacement || this;\r\n\r\n        let sideOrientation: Nullable<number>;\r\n\r\n        if (\r\n            !instanceDataStorage.isFrozen &&\r\n            (this._internalMeshDataInfo._effectiveMaterial.backFaceCulling ||\r\n                this.overrideMaterialSideOrientation !== null ||\r\n                (this._internalMeshDataInfo._effectiveMaterial as any).twoSidedLighting)\r\n        ) {\r\n            // Note: if two sided lighting is enabled, we need to ensure that the normal will point in the right direction even if the determinant of the world matrix is negative\r\n            const mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\r\n            sideOrientation = this.overrideMaterialSideOrientation;\r\n            if (sideOrientation == null) {\r\n                sideOrientation = this._internalMeshDataInfo._effectiveMaterial.sideOrientation;\r\n            }\r\n            if (mainDeterminant < 0) {\r\n                sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\r\n            }\r\n            instanceDataStorage.sideOrientation = sideOrientation!;\r\n        } else {\r\n            sideOrientation = instanceDataStorage.sideOrientation;\r\n        }\r\n\r\n        const reverse = this._internalMeshDataInfo._effectiveMaterial._preBind(drawWrapper, sideOrientation);\r\n\r\n        if (this._internalMeshDataInfo._effectiveMaterial.forceDepthWrite) {\r\n            engine.setDepthWrite(true);\r\n        }\r\n\r\n        // Bind\r\n        const effectiveMaterial = this._internalMeshDataInfo._effectiveMaterial;\r\n        const fillMode = effectiveMaterial.fillMode;\r\n\r\n        if (this._internalMeshDataInfo._onBeforeBindObservable) {\r\n            this._internalMeshDataInfo._onBeforeBindObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (!hardwareInstancedRendering) {\r\n            // Binding will be done later because we need to add more info to the VB\r\n            this._bind(subMesh, effect, fillMode, false);\r\n        }\r\n\r\n        const world = effectiveMesh.getWorldMatrix();\r\n        if (effectiveMaterial._storeEffectOnSubMeshes) {\r\n            effectiveMaterial.bindForSubMesh(world, this, subMesh);\r\n        } else {\r\n            effectiveMaterial.bind(world, this);\r\n        }\r\n\r\n        if (!effectiveMaterial.backFaceCulling && effectiveMaterial.separateCullingPass) {\r\n            engine.setState(true, effectiveMaterial.zOffset, false, !reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\r\n            this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\r\n            engine.setState(true, effectiveMaterial.zOffset, false, reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\r\n\r\n            if (this._internalMeshDataInfo._onBetweenPassObservable) {\r\n                this._internalMeshDataInfo._onBetweenPassObservable.notifyObservers(subMesh);\r\n            }\r\n        }\r\n\r\n        // Draw\r\n        this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\r\n\r\n        // Unbind\r\n        this._internalMeshDataInfo._effectiveMaterial.unbind();\r\n\r\n        for (const step of scene._afterRenderingMeshStage) {\r\n            step.action(this, subMesh, batch, effect);\r\n        }\r\n\r\n        if (this._internalMeshDataInfo._onAfterRenderObservable) {\r\n            this._internalMeshDataInfo._onAfterRenderObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (oldCamera) {\r\n            oldCamera.maxZ = oldCameraMaxZ;\r\n            scene.updateTransformMatrix(true);\r\n        }\r\n\r\n        if (scene.performancePriority === ScenePerformancePriority.Aggressive && !instanceDataStorage.isFrozen) {\r\n            this._freeze();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _onBeforeDraw: (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => void;\r\n\r\n    /**\r\n     *   Renormalize the mesh and patch it up if there are no weights\r\n     *   Similar to normalization by adding the weights compute the reciprocal and multiply all elements, this wil ensure that everything adds to 1.\r\n     *   However in the case of zero weights then we set just a single influence to 1.\r\n     *   We check in the function for extra's present and if so we use the normalizeSkinWeightsWithExtras rather than the FourWeights version.\r\n     */\r\n    public cleanMatrixWeights(): void {\r\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\r\n                this._normalizeSkinWeightsAndExtra();\r\n            } else {\r\n                this._normalizeSkinFourWeights();\r\n            }\r\n        }\r\n    }\r\n\r\n    // faster 4 weight version.\r\n    private _normalizeSkinFourWeights(): void {\r\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n        const numWeights = matricesWeights.length;\r\n\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            // accumulate weights\r\n            const t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\r\n            // check for invalid weight and just set it to 1.\r\n            if (t === 0) {\r\n                matricesWeights[a] = 1;\r\n            } else {\r\n                // renormalize so everything adds to 1 use reciprocal\r\n                const recip = 1 / t;\r\n                matricesWeights[a] *= recip;\r\n                matricesWeights[a + 1] *= recip;\r\n                matricesWeights[a + 2] *= recip;\r\n                matricesWeights[a + 3] *= recip;\r\n            }\r\n        }\r\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\r\n    }\r\n    // handle special case of extra verts.  (in theory gltf can handle 12 influences)\r\n    private _normalizeSkinWeightsAndExtra(): void {\r\n        const matricesWeightsExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\r\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n        const numWeights = matricesWeights.length;\r\n\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            // accumulate weights\r\n            let t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\r\n            t += matricesWeightsExtra[a] + matricesWeightsExtra[a + 1] + matricesWeightsExtra[a + 2] + matricesWeightsExtra[a + 3];\r\n            // check for invalid weight and just set it to 1.\r\n            if (t === 0) {\r\n                matricesWeights[a] = 1;\r\n            } else {\r\n                // renormalize so everything adds to 1 use reciprocal\r\n                const recip = 1 / t;\r\n                matricesWeights[a] *= recip;\r\n                matricesWeights[a + 1] *= recip;\r\n                matricesWeights[a + 2] *= recip;\r\n                matricesWeights[a + 3] *= recip;\r\n                // same goes for extras\r\n                matricesWeightsExtra[a] *= recip;\r\n                matricesWeightsExtra[a + 1] *= recip;\r\n                matricesWeightsExtra[a + 2] *= recip;\r\n                matricesWeightsExtra[a + 3] *= recip;\r\n            }\r\n        }\r\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\r\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsExtra);\r\n    }\r\n\r\n    /**\r\n     * ValidateSkinning is used to determine that a mesh has valid skinning data along with skin metrics, if missing weights,\r\n     * or not normalized it is returned as invalid mesh the string can be used for console logs, or on screen messages to let\r\n     * the user know there was an issue with importing the mesh\r\n     * @returns a validation object with skinned, valid and report string\r\n     */\r\n    public validateSkinning(): { skinned: boolean; valid: boolean; report: string } {\r\n        const matricesWeightsExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\r\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n        if (matricesWeights === null || this.skeleton == null) {\r\n            return { skinned: false, valid: true, report: \"not skinned\" };\r\n        }\r\n\r\n        const numWeights = matricesWeights.length;\r\n        let numberNotSorted: number = 0;\r\n        let missingWeights: number = 0;\r\n        let maxUsedWeights: number = 0;\r\n        let numberNotNormalized: number = 0;\r\n        const numInfluences: number = matricesWeightsExtra === null ? 4 : 8;\r\n        const usedWeightCounts: number[] = [];\r\n        for (let a = 0; a <= numInfluences; a++) {\r\n            usedWeightCounts[a] = 0;\r\n        }\r\n        const toleranceEpsilon: number = 0.001;\r\n\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            let lastWeight: number = matricesWeights[a];\r\n            let t = lastWeight;\r\n            let usedWeights: number = t === 0 ? 0 : 1;\r\n\r\n            for (let b = 1; b < numInfluences; b++) {\r\n                const d = b < 4 ? matricesWeights[a + b] : matricesWeightsExtra[a + b - 4];\r\n                if (d > lastWeight) {\r\n                    numberNotSorted++;\r\n                }\r\n                if (d !== 0) {\r\n                    usedWeights++;\r\n                }\r\n                t += d;\r\n                lastWeight = d;\r\n            }\r\n            // count the buffer weights usage\r\n            usedWeightCounts[usedWeights]++;\r\n\r\n            // max influences\r\n            if (usedWeights > maxUsedWeights) {\r\n                maxUsedWeights = usedWeights;\r\n            }\r\n\r\n            // check for invalid weight and just set it to 1.\r\n            if (t === 0) {\r\n                missingWeights++;\r\n            } else {\r\n                // renormalize so everything adds to 1 use reciprocal\r\n                const recip = 1 / t;\r\n                let tolerance = 0;\r\n                for (let b = 0; b < numInfluences; b++) {\r\n                    if (b < 4) {\r\n                        tolerance += Math.abs(matricesWeights[a + b] - matricesWeights[a + b] * recip);\r\n                    } else {\r\n                        tolerance += Math.abs(matricesWeightsExtra[a + b - 4] - matricesWeightsExtra[a + b - 4] * recip);\r\n                    }\r\n                }\r\n                // arbitrary epsilon value for dictating not normalized\r\n                if (tolerance > toleranceEpsilon) {\r\n                    numberNotNormalized++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // validate bone indices are in range of the skeleton\r\n        const numBones: number = this.skeleton.bones.length;\r\n        const matricesIndices = <FloatArray>this.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n        const matricesIndicesExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\r\n        let numBadBoneIndices: number = 0;\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            for (let b = 0; b < numInfluences; b++) {\r\n                const index = b < 4 ? matricesIndices[a + b] : matricesIndicesExtra[a + b - 4];\r\n                if (index >= numBones || index < 0) {\r\n                    numBadBoneIndices++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // log mesh stats\r\n        const output =\r\n            \"Number of Weights = \" +\r\n            numWeights / 4 +\r\n            \"\\nMaximum influences = \" +\r\n            maxUsedWeights +\r\n            \"\\nMissing Weights = \" +\r\n            missingWeights +\r\n            \"\\nNot Sorted = \" +\r\n            numberNotSorted +\r\n            \"\\nNot Normalized = \" +\r\n            numberNotNormalized +\r\n            \"\\nWeightCounts = [\" +\r\n            usedWeightCounts +\r\n            \"]\" +\r\n            \"\\nNumber of bones = \" +\r\n            numBones +\r\n            \"\\nBad Bone Indices = \" +\r\n            numBadBoneIndices;\r\n\r\n        return { skinned: true, valid: missingWeights === 0 && numberNotNormalized === 0 && numBadBoneIndices === 0, report: output };\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkDelayState(): Mesh {\r\n        const scene = this.getScene();\r\n        if (this._geometry) {\r\n            this._geometry.load(scene);\r\n        } else if (this.delayLoadState === Constants.DELAYLOADSTATE_NOTLOADED) {\r\n            this.delayLoadState = Constants.DELAYLOADSTATE_LOADING;\r\n\r\n            this._queueLoad(scene);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private _queueLoad(scene: Scene): Mesh {\r\n        scene.addPendingData(this);\r\n\r\n        const getBinaryData = this.delayLoadingFile.indexOf(\".babylonbinarymeshdata\") !== -1;\r\n\r\n        Tools.LoadFile(\r\n            this.delayLoadingFile,\r\n            (data) => {\r\n                if (data instanceof ArrayBuffer) {\r\n                    this._delayLoadingFunction(data, this);\r\n                } else {\r\n                    this._delayLoadingFunction(JSON.parse(data), this);\r\n                }\r\n\r\n                this.instances.forEach((instance) => {\r\n                    instance.refreshBoundingInfo();\r\n                    instance._syncSubMeshes();\r\n                });\r\n\r\n                this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\r\n                scene.removePendingData(this);\r\n            },\r\n            () => {},\r\n            scene.offlineProvider,\r\n            getBinaryData\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\r\n     * A mesh is in the frustum if its bounding box intersects the frustum\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is in the frustum planes\r\n     */\r\n    public isInFrustum(frustumPlanes: Plane[]): boolean {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.isInFrustum(frustumPlanes)) {\r\n            return false;\r\n        }\r\n\r\n        this._checkDelayState();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh material by the material or multiMaterial `id` property\r\n     * @param id is a string identifying the material or the multiMaterial\r\n     * @returns the current mesh\r\n     */\r\n    public setMaterialById(id: string): Mesh {\r\n        const materials = this.getScene().materials;\r\n        let index: number;\r\n        for (index = materials.length - 1; index > -1; index--) {\r\n            if (materials[index].id === id) {\r\n                this.material = materials[index];\r\n                return this;\r\n            }\r\n        }\r\n\r\n        // Multi\r\n        const multiMaterials = this.getScene().multiMaterials;\r\n        for (index = multiMaterials.length - 1; index > -1; index--) {\r\n            if (multiMaterials[index].id === id) {\r\n                this.material = multiMaterials[index];\r\n                return this;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns as a new array populated with the mesh material and/or skeleton, if any.\r\n     * @returns an array of IAnimatable\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results: IAnimatable[] = [];\r\n\r\n        if (this.material) {\r\n            results.push(this.material);\r\n        }\r\n\r\n        if (this.skeleton) {\r\n            results.push(this.skeleton);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to the passed transformation matrix.\r\n     * This method returns nothing, but it really modifies the mesh even if it's originally not set as updatable.\r\n     * The mesh normals are modified using the same transformation.\r\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\r\n     * @param transform defines the transform matrix to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\r\n     * @returns the current mesh\r\n     */\r\n    public bakeTransformIntoVertices(transform: Matrix): Mesh {\r\n        // Position\r\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            return this;\r\n        }\r\n\r\n        const submeshes = this.subMeshes.splice(0);\r\n\r\n        this._resetPointsArrayCache();\r\n\r\n        let data = <FloatArray>this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        const temp = Vector3.Zero();\r\n        let index: number;\r\n        for (index = 0; index < data.length; index += 3) {\r\n            Vector3.TransformCoordinatesFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp).toArray(data, index);\r\n        }\r\n\r\n        this.setVerticesData(VertexBuffer.PositionKind, data, (<VertexBuffer>this.getVertexBuffer(VertexBuffer.PositionKind)).isUpdatable());\r\n\r\n        // Normals\r\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            data = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\r\n            for (index = 0; index < data.length; index += 3) {\r\n                Vector3.TransformNormalFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp)\r\n                    .normalize()\r\n                    .toArray(data, index);\r\n            }\r\n            this.setVerticesData(VertexBuffer.NormalKind, data, (<VertexBuffer>this.getVertexBuffer(VertexBuffer.NormalKind)).isUpdatable());\r\n        }\r\n\r\n        // Tangents\r\n        if (this.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            data = <FloatArray>this.getVerticesData(VertexBuffer.TangentKind);\r\n            for (index = 0; index < data.length; index += 4) {\r\n                Vector3.TransformNormalFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp)\r\n                    .normalize()\r\n                    .toArray(data, index);\r\n            }\r\n            this.setVerticesData(VertexBuffer.TangentKind, data, (<VertexBuffer>this.getVertexBuffer(VertexBuffer.TangentKind)).isUpdatable());\r\n        }\r\n\r\n        // flip faces?\r\n        if (transform.determinant() < 0) {\r\n            this.flipFaces();\r\n        }\r\n\r\n        // Restore submeshes\r\n        this.releaseSubMeshes();\r\n        this.subMeshes = submeshes;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to its own current World Matrix.\r\n     * The mesh World Matrix is then reset.\r\n     * This method returns nothing but really modifies the mesh even if it's originally not set as updatable.\r\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\r\n     * @param bakeIndependentlyOfChildren indicates whether to preserve all child nodes' World Matrix during baking\r\n     * @returns the current mesh\r\n     */\r\n    public bakeCurrentTransformIntoVertices(bakeIndependentlyOfChildren: boolean = true): Mesh {\r\n        this.bakeTransformIntoVertices(this.computeWorldMatrix(true));\r\n        this.resetLocalMatrix(bakeIndependentlyOfChildren);\r\n        return this;\r\n    }\r\n\r\n    // Cache\r\n\r\n    /** @internal */\r\n    public get _positions(): Nullable<Vector3[]> {\r\n        if (this._internalAbstractMeshDataInfo._positions) {\r\n            return this._internalAbstractMeshDataInfo._positions;\r\n        }\r\n\r\n        if (this._geometry) {\r\n            return this._geometry._positions;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _resetPointsArrayCache(): Mesh {\r\n        if (this._geometry) {\r\n            this._geometry._resetPointsArrayCache();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _generatePointsArray(): boolean {\r\n        if (this._geometry) {\r\n            return this._geometry._generatePointsArray();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Mesh object generated from the current mesh properties.\r\n     * This method must not get confused with createInstance()\r\n     * @param name is a string, the name given to the new mesh\r\n     * @param newParent can be any Node object (default `null`)\r\n     * @param doNotCloneChildren allows/denies the recursive cloning of the original mesh children if any (default `false`)\r\n     * @param clonePhysicsImpostor allows/denies the cloning in the same time of the original mesh `body` used by the physics engine, if any (default `true`)\r\n     * @returns a new mesh\r\n     */\r\n    public clone(name: string = \"\", newParent: Nullable<Node> = null, doNotCloneChildren?: boolean, clonePhysicsImpostor: boolean = true): Mesh {\r\n        return new Mesh(name, this.getScene(), newParent, this, doNotCloneChildren, clonePhysicsImpostor);\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this mesh.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        this.morphTargetManager = null;\r\n\r\n        if (this._geometry) {\r\n            this._geometry.releaseForMesh(this, true);\r\n        }\r\n\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n\r\n        if (internalDataInfo._onBeforeDrawObservable) {\r\n            internalDataInfo._onBeforeDrawObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onBeforeBindObservable) {\r\n            internalDataInfo._onBeforeBindObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onBeforeRenderObservable) {\r\n            internalDataInfo._onBeforeRenderObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onAfterRenderObservable) {\r\n            internalDataInfo._onAfterRenderObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onBetweenPassObservable) {\r\n            internalDataInfo._onBetweenPassObservable.clear();\r\n        }\r\n\r\n        // Sources\r\n        if (this._scene.useClonedMeshMap) {\r\n            if (internalDataInfo.meshMap) {\r\n                for (const uniqueId in internalDataInfo.meshMap) {\r\n                    const mesh = internalDataInfo.meshMap[uniqueId];\r\n                    if (mesh) {\r\n                        mesh._internalMeshDataInfo._source = null;\r\n                        internalDataInfo.meshMap[uniqueId] = undefined;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (internalDataInfo._source && internalDataInfo._source._internalMeshDataInfo.meshMap) {\r\n                internalDataInfo._source._internalMeshDataInfo.meshMap[this.uniqueId] = undefined;\r\n            }\r\n        } else {\r\n            const meshes = this.getScene().meshes;\r\n            for (const abstractMesh of meshes) {\r\n                const mesh = abstractMesh as Mesh;\r\n                if (mesh._internalMeshDataInfo && mesh._internalMeshDataInfo._source && mesh._internalMeshDataInfo._source === this) {\r\n                    mesh._internalMeshDataInfo._source = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        internalDataInfo._source = null;\r\n        this._instanceDataStorage.visibleInstances = {};\r\n\r\n        // Instances\r\n        this._disposeInstanceSpecificData();\r\n\r\n        // Thin instances\r\n        this._disposeThinInstanceSpecificData();\r\n\r\n        if (this._internalMeshDataInfo._checkReadinessObserver) {\r\n            this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\r\n        }\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /** @internal */\r\n    public _disposeInstanceSpecificData() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _disposeThinInstanceSpecificData() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _invalidateInstanceVertexArrayObject() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to a displacement map.\r\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\r\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\r\n     * @param url is a string, the URL from the image file is to be downloaded.\r\n     * @param minHeight is the lower limit of the displacement.\r\n     * @param maxHeight is the upper limit of the displacement.\r\n     * @param onSuccess is an optional Javascript function to be called just after the mesh is modified. It is passed the modified mesh and must return nothing.\r\n     * @param uvOffset is an optional vector2 used to offset UV.\r\n     * @param uvScale is an optional vector2 used to scale UV.\r\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\r\n     * @param onError defines a callback called when an error occurs during the processing of the request.\r\n     * @returns the Mesh.\r\n     */\r\n    public applyDisplacementMap(\r\n        url: string,\r\n        minHeight: number,\r\n        maxHeight: number,\r\n        onSuccess?: (mesh: Mesh) => void,\r\n        uvOffset?: Vector2,\r\n        uvScale?: Vector2,\r\n        forceUpdate = false,\r\n        onError?: (message?: string, exception?: any) => void\r\n    ): Mesh {\r\n        const scene = this.getScene();\r\n\r\n        const onload = (img: HTMLImageElement | ImageBitmap) => {\r\n            // Getting height map data\r\n            const heightMapWidth = img.width;\r\n            const heightMapHeight = img.height;\r\n            const canvas = this.getEngine().createCanvas(heightMapWidth, heightMapHeight);\r\n            const context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n\r\n            context.drawImage(img, 0, 0);\r\n\r\n            // Create VertexData from map data\r\n            //Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\r\n            const buffer = <Uint8Array>(<any>context.getImageData(0, 0, heightMapWidth, heightMapHeight).data);\r\n\r\n            this.applyDisplacementMapFromBuffer(buffer, heightMapWidth, heightMapHeight, minHeight, maxHeight, uvOffset, uvScale, forceUpdate);\r\n            //execute success callback, if set\r\n            if (onSuccess) {\r\n                onSuccess(this);\r\n            }\r\n        };\r\n\r\n        Tools.LoadImage(url, onload, onError ? onError : () => {}, scene.offlineProvider);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to a displacementMap buffer.\r\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\r\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\r\n     * @param buffer is a `Uint8Array` buffer containing series of `Uint8` lower than 255, the red, green, blue and alpha values of each successive pixel.\r\n     * @param heightMapWidth is the width of the buffer image.\r\n     * @param heightMapHeight is the height of the buffer image.\r\n     * @param minHeight is the lower limit of the displacement.\r\n     * @param maxHeight is the upper limit of the displacement.\r\n     * @param uvOffset is an optional vector2 used to offset UV.\r\n     * @param uvScale is an optional vector2 used to scale UV.\r\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\r\n     * @returns the Mesh.\r\n     */\r\n    public applyDisplacementMapFromBuffer(\r\n        buffer: Uint8Array,\r\n        heightMapWidth: number,\r\n        heightMapHeight: number,\r\n        minHeight: number,\r\n        maxHeight: number,\r\n        uvOffset?: Vector2,\r\n        uvScale?: Vector2,\r\n        forceUpdate = false\r\n    ): Mesh {\r\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind) || !this.isVerticesDataPresent(VertexBuffer.NormalKind) || !this.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            Logger.Warn(\"Cannot call applyDisplacementMap: Given mesh is not complete. Position, Normal or UV are missing\");\r\n            return this;\r\n        }\r\n\r\n        const positions = <FloatArray>this.getVerticesData(VertexBuffer.PositionKind, true, true);\r\n        const normals = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\r\n        const uvs = <number[]>this.getVerticesData(VertexBuffer.UVKind);\r\n        let position = Vector3.Zero();\r\n        const normal = Vector3.Zero();\r\n        const uv = Vector2.Zero();\r\n\r\n        uvOffset = uvOffset || Vector2.Zero();\r\n        uvScale = uvScale || new Vector2(1, 1);\r\n\r\n        for (let index = 0; index < positions.length; index += 3) {\r\n            Vector3.FromArrayToRef(positions, index, position);\r\n            Vector3.FromArrayToRef(normals, index, normal);\r\n            Vector2.FromArrayToRef(uvs, (index / 3) * 2, uv);\r\n\r\n            // Compute height\r\n            const u = (Math.abs(uv.x * uvScale.x + (uvOffset.x % 1)) * (heightMapWidth - 1)) % heightMapWidth | 0;\r\n            const v = (Math.abs(uv.y * uvScale.y + (uvOffset.y % 1)) * (heightMapHeight - 1)) % heightMapHeight | 0;\r\n\r\n            const pos = (u + v * heightMapWidth) * 4;\r\n            const r = buffer[pos] / 255.0;\r\n            const g = buffer[pos + 1] / 255.0;\r\n            const b = buffer[pos + 2] / 255.0;\r\n\r\n            const gradient = r * 0.3 + g * 0.59 + b * 0.11;\r\n\r\n            normal.normalize();\r\n            normal.scaleInPlace(minHeight + (maxHeight - minHeight) * gradient);\r\n            position = position.add(normal);\r\n\r\n            position.toArray(positions, index);\r\n        }\r\n\r\n        VertexData.ComputeNormals(positions, this.getIndices(), normals);\r\n\r\n        if (forceUpdate) {\r\n            this.setVerticesData(VertexBuffer.PositionKind, positions);\r\n            this.setVerticesData(VertexBuffer.NormalKind, normals);\r\n            this.setVerticesData(VertexBuffer.UVKind, uvs);\r\n        } else {\r\n            this.updateVerticesData(VertexBuffer.PositionKind, positions);\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normals);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private _getFlattenedNormals(indices: IndicesArray, positions: FloatArray): Float32Array {\r\n        const normals = new Float32Array(indices.length * 3);\r\n        let normalsCount = 0;\r\n\r\n        // Decide if normals should be flipped\r\n        const flipNormalGeneration =\r\n            this.overrideMaterialSideOrientation ===\r\n            (this._scene.useRightHandedSystem ? Constants.MATERIAL_CounterClockWiseSideOrientation : Constants.MATERIAL_ClockWiseSideOrientation);\r\n\r\n        // Generate new normals\r\n        for (let index = 0; index < indices.length; index += 3) {\r\n            const p1 = Vector3.FromArray(positions, indices[index] * 3);\r\n            const p2 = Vector3.FromArray(positions, indices[index + 1] * 3);\r\n            const p3 = Vector3.FromArray(positions, indices[index + 2] * 3);\r\n\r\n            const p1p2 = p1.subtract(p2);\r\n            const p3p2 = p3.subtract(p2);\r\n\r\n            const normal = Vector3.Normalize(Vector3.Cross(p1p2, p3p2));\r\n            if (flipNormalGeneration) {\r\n                normal.scaleInPlace(-1);\r\n            }\r\n\r\n            // Store same normals for every vertex\r\n            for (let localIndex = 0; localIndex < 3; localIndex++) {\r\n                normals[normalsCount++] = normal.x;\r\n                normals[normalsCount++] = normal.y;\r\n                normals[normalsCount++] = normal.z;\r\n            }\r\n        }\r\n\r\n        return normals;\r\n    }\r\n\r\n    private _convertToUnIndexedMesh(flattenNormals: boolean = false): Mesh {\r\n        const kinds = this.getVerticesDataKinds();\r\n        const indices = this.getIndices()!;\r\n        const data: { [kind: string]: FloatArray } = {};\r\n\r\n        const separateVertices = (data: FloatArray, stride: number): Float32Array => {\r\n            const newData = new Float32Array(indices.length * stride);\r\n            let count = 0;\r\n            for (let index = 0; index < indices.length; index++) {\r\n                for (let offset = 0; offset < stride; offset++) {\r\n                    newData[count++] = data[indices[index] * stride + offset];\r\n                }\r\n            }\r\n            return newData;\r\n        };\r\n\r\n        // Save previous submeshes\r\n        const previousSubmeshes = this.geometry ? this.subMeshes.slice(0) : [];\r\n\r\n        // Cache vertex data\r\n        for (const kind of kinds) {\r\n            data[kind] = this.getVerticesData(kind)!;\r\n        }\r\n\r\n        // Update vertex data\r\n        for (const kind of kinds) {\r\n            const vertexBuffer = this.getVertexBuffer(kind)!;\r\n            const stride = vertexBuffer.getStrideSize();\r\n\r\n            if (flattenNormals && kind === VertexBuffer.NormalKind) {\r\n                const normals = this._getFlattenedNormals(indices, data[VertexBuffer.PositionKind]);\r\n                this.setVerticesData(VertexBuffer.NormalKind, normals, vertexBuffer.isUpdatable(), stride);\r\n            } else {\r\n                this.setVerticesData(kind, separateVertices(data[kind], stride), vertexBuffer.isUpdatable(), stride);\r\n            }\r\n        }\r\n\r\n        // Update morph targets\r\n        if (this.morphTargetManager) {\r\n            for (let targetIndex = 0; targetIndex < this.morphTargetManager.numTargets; targetIndex++) {\r\n                const target = this.morphTargetManager.getTarget(targetIndex);\r\n\r\n                const positions = target.getPositions()!;\r\n                target.setPositions(separateVertices(positions, 3));\r\n\r\n                const normals = target.getNormals();\r\n                if (normals) {\r\n                    target.setNormals(flattenNormals ? this._getFlattenedNormals(indices, positions) : separateVertices(normals, 3));\r\n                }\r\n\r\n                const tangents = target.getTangents();\r\n                if (tangents) {\r\n                    target.setTangents(separateVertices(tangents, 3));\r\n                }\r\n\r\n                const uvs = target.getUVs();\r\n                if (uvs) {\r\n                    target.setUVs(separateVertices(uvs, 2));\r\n                }\r\n            }\r\n            this.morphTargetManager.synchronize();\r\n        }\r\n\r\n        // Update indices\r\n        for (let index = 0; index < indices.length; index++) {\r\n            indices[index] = index;\r\n        }\r\n        this.setIndices(indices);\r\n\r\n        this._unIndexed = true;\r\n\r\n        // Update submeshes\r\n        this.releaseSubMeshes();\r\n        for (const previousOne of previousSubmeshes) {\r\n            SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\r\n        }\r\n\r\n        this.synchronizeInstances();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Modify the mesh to get a flat shading rendering.\r\n     * This means each mesh facet will then have its own normals. Usually new vertices are added in the mesh geometry to get this result.\r\n     * Warning : the mesh is really modified even if not set originally as updatable and, under the hood, a new VertexBuffer is allocated.\r\n     * @returns current mesh\r\n     */\r\n    public convertToFlatShadedMesh(): Mesh {\r\n        return this._convertToUnIndexedMesh(true);\r\n    }\r\n\r\n    /**\r\n     * This method removes all the mesh indices and add new vertices (duplication) in order to unfold facets into buffers.\r\n     * In other words, more vertices, no more indices and a single bigger VBO.\r\n     * The mesh is really modified even if not set originally as updatable. Under the hood, a new VertexBuffer is allocated.\r\n     * @returns current mesh\r\n     */\r\n    public convertToUnIndexedMesh(): Mesh {\r\n        return this._convertToUnIndexedMesh();\r\n    }\r\n\r\n    /**\r\n     * Inverses facet orientations.\r\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\r\n     * @param flipNormals will also inverts the normals\r\n     * @returns current mesh\r\n     */\r\n    public flipFaces(flipNormals: boolean = false): Mesh {\r\n        const vertex_data = VertexData.ExtractFromMesh(this);\r\n        let i: number;\r\n        if (flipNormals && this.isVerticesDataPresent(VertexBuffer.NormalKind) && vertex_data.normals) {\r\n            for (i = 0; i < vertex_data.normals.length; i++) {\r\n                vertex_data.normals[i] *= -1;\r\n            }\r\n        }\r\n\r\n        if (vertex_data.indices) {\r\n            let temp;\r\n            for (i = 0; i < vertex_data.indices.length; i += 3) {\r\n                // reassign indices\r\n                temp = vertex_data.indices[i + 1];\r\n                vertex_data.indices[i + 1] = vertex_data.indices[i + 2];\r\n                vertex_data.indices[i + 2] = temp;\r\n            }\r\n        }\r\n\r\n        vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Increase the number of facets and hence vertices in a mesh\r\n     * Vertex normals are interpolated from existing vertex normals\r\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\r\n     * @param numberPerEdge the number of new vertices to add to each edge of a facet, optional default 1\r\n     */\r\n    public increaseVertices(numberPerEdge: number = 1): void {\r\n        const vertex_data = VertexData.ExtractFromMesh(this);\r\n        const currentIndices = vertex_data.indices && !Array.isArray(vertex_data.indices) && Array.from ? Array.from(vertex_data.indices) : vertex_data.indices;\r\n        const positions = vertex_data.positions && !Array.isArray(vertex_data.positions) && Array.from ? Array.from(vertex_data.positions) : vertex_data.positions;\r\n        const uvs = vertex_data.uvs && !Array.isArray(vertex_data.uvs) && Array.from ? Array.from(vertex_data.uvs) : vertex_data.uvs;\r\n        const normals = vertex_data.normals && !Array.isArray(vertex_data.normals) && Array.from ? Array.from(vertex_data.normals) : vertex_data.normals;\r\n\r\n        if (!currentIndices || !positions) {\r\n            Logger.Warn(\"Couldn't increase number of vertices : VertexData must contain at least indices and positions\");\r\n        } else {\r\n            vertex_data.indices = currentIndices;\r\n            vertex_data.positions = positions;\r\n            if (uvs) {\r\n                vertex_data.uvs = uvs;\r\n            }\r\n            if (normals) {\r\n                vertex_data.normals = normals;\r\n            }\r\n\r\n            const segments: number = numberPerEdge + 1; //segments per current facet edge, become sides of new facets\r\n            const tempIndices: Array<Array<number>> = new Array();\r\n            for (let i = 0; i < segments + 1; i++) {\r\n                tempIndices[i] = new Array();\r\n            }\r\n            let a: number; //vertex index of one end of a side\r\n            let b: number; //vertex index of other end of the side\r\n            const deltaPosition: Vector3 = new Vector3(0, 0, 0);\r\n            const deltaNormal: Vector3 = new Vector3(0, 0, 0);\r\n            const deltaUV: Vector2 = new Vector2(0, 0);\r\n            const indices: number[] = new Array();\r\n            const vertexIndex: number[] = new Array();\r\n            const side: Array<Array<Array<number>>> = new Array();\r\n            let len: number;\r\n            let positionPtr: number = positions.length;\r\n            let uvPtr: number;\r\n            if (uvs) {\r\n                uvPtr = uvs.length;\r\n            }\r\n            let normalsPtr: number;\r\n            if (normals) {\r\n                normalsPtr = normals.length;\r\n            }\r\n\r\n            for (let i = 0; i < currentIndices.length; i += 3) {\r\n                vertexIndex[0] = currentIndices[i];\r\n                vertexIndex[1] = currentIndices[i + 1];\r\n                vertexIndex[2] = currentIndices[i + 2];\r\n                for (let j = 0; j < 3; j++) {\r\n                    a = vertexIndex[j];\r\n                    b = vertexIndex[(j + 1) % 3];\r\n                    if (side[a] === undefined && side[b] === undefined) {\r\n                        side[a] = new Array();\r\n                        side[b] = new Array();\r\n                    } else {\r\n                        if (side[a] === undefined) {\r\n                            side[a] = new Array();\r\n                        }\r\n                        if (side[b] === undefined) {\r\n                            side[b] = new Array();\r\n                        }\r\n                    }\r\n                    if (side[a][b] === undefined && side[b][a] === undefined) {\r\n                        side[a][b] = [];\r\n                        deltaPosition.x = (positions[3 * b] - positions[3 * a]) / segments;\r\n                        deltaPosition.y = (positions[3 * b + 1] - positions[3 * a + 1]) / segments;\r\n                        deltaPosition.z = (positions[3 * b + 2] - positions[3 * a + 2]) / segments;\r\n                        if (normals) {\r\n                            deltaNormal.x = (normals[3 * b] - normals[3 * a]) / segments;\r\n                            deltaNormal.y = (normals[3 * b + 1] - normals[3 * a + 1]) / segments;\r\n                            deltaNormal.z = (normals[3 * b + 2] - normals[3 * a + 2]) / segments;\r\n                        }\r\n                        if (uvs) {\r\n                            deltaUV.x = (uvs[2 * b] - uvs[2 * a]) / segments;\r\n                            deltaUV.y = (uvs[2 * b + 1] - uvs[2 * a + 1]) / segments;\r\n                        }\r\n                        side[a][b].push(a);\r\n                        for (let k = 1; k < segments; k++) {\r\n                            side[a][b].push(positions.length / 3);\r\n                            positions[positionPtr++] = positions[3 * a] + k * deltaPosition.x;\r\n                            positions[positionPtr++] = positions[3 * a + 1] + k * deltaPosition.y;\r\n                            positions[positionPtr++] = positions[3 * a + 2] + k * deltaPosition.z;\r\n                            if (normals) {\r\n                                normals[normalsPtr!++] = normals[3 * a] + k * deltaNormal.x;\r\n                                normals[normalsPtr!++] = normals[3 * a + 1] + k * deltaNormal.y;\r\n                                normals[normalsPtr!++] = normals[3 * a + 2] + k * deltaNormal.z;\r\n                            }\r\n                            if (uvs) {\r\n                                uvs[uvPtr!++] = uvs[2 * a] + k * deltaUV.x;\r\n                                uvs[uvPtr!++] = uvs[2 * a + 1] + k * deltaUV.y;\r\n                            }\r\n                        }\r\n                        side[a][b].push(b);\r\n                        side[b][a] = new Array();\r\n                        len = side[a][b].length;\r\n                        for (let idx = 0; idx < len; idx++) {\r\n                            side[b][a][idx] = side[a][b][len - 1 - idx];\r\n                        }\r\n                    }\r\n                }\r\n                //Calculate positions, normals and uvs of new internal vertices\r\n                tempIndices[0][0] = currentIndices[i];\r\n                tempIndices[1][0] = side[currentIndices[i]][currentIndices[i + 1]][1];\r\n                tempIndices[1][1] = side[currentIndices[i]][currentIndices[i + 2]][1];\r\n                for (let k = 2; k < segments; k++) {\r\n                    tempIndices[k][0] = side[currentIndices[i]][currentIndices[i + 1]][k];\r\n                    tempIndices[k][k] = side[currentIndices[i]][currentIndices[i + 2]][k];\r\n                    deltaPosition.x = (positions[3 * tempIndices[k][k]] - positions[3 * tempIndices[k][0]]) / k;\r\n                    deltaPosition.y = (positions[3 * tempIndices[k][k] + 1] - positions[3 * tempIndices[k][0] + 1]) / k;\r\n                    deltaPosition.z = (positions[3 * tempIndices[k][k] + 2] - positions[3 * tempIndices[k][0] + 2]) / k;\r\n                    if (normals) {\r\n                        deltaNormal.x = (normals[3 * tempIndices[k][k]] - normals[3 * tempIndices[k][0]]) / k;\r\n                        deltaNormal.y = (normals[3 * tempIndices[k][k] + 1] - normals[3 * tempIndices[k][0] + 1]) / k;\r\n                        deltaNormal.z = (normals[3 * tempIndices[k][k] + 2] - normals[3 * tempIndices[k][0] + 2]) / k;\r\n                    }\r\n                    if (uvs) {\r\n                        deltaUV.x = (uvs[2 * tempIndices[k][k]] - uvs[2 * tempIndices[k][0]]) / k;\r\n                        deltaUV.y = (uvs[2 * tempIndices[k][k] + 1] - uvs[2 * tempIndices[k][0] + 1]) / k;\r\n                    }\r\n                    for (let j = 1; j < k; j++) {\r\n                        tempIndices[k][j] = positions.length / 3;\r\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0]] + j * deltaPosition.x;\r\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0] + 1] + j * deltaPosition.y;\r\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0] + 2] + j * deltaPosition.z;\r\n                        if (normals) {\r\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0]] + j * deltaNormal.x;\r\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0] + 1] + j * deltaNormal.y;\r\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0] + 2] + j * deltaNormal.z;\r\n                        }\r\n                        if (uvs) {\r\n                            uvs[uvPtr!++] = uvs[2 * tempIndices[k][0]] + j * deltaUV.x;\r\n                            uvs[uvPtr!++] = uvs[2 * tempIndices[k][0] + 1] + j * deltaUV.y;\r\n                        }\r\n                    }\r\n                }\r\n                tempIndices[segments] = side[currentIndices[i + 1]][currentIndices[i + 2]];\r\n\r\n                // reform indices\r\n                indices.push(tempIndices[0][0], tempIndices[1][0], tempIndices[1][1]);\r\n                for (let k = 1; k < segments; k++) {\r\n                    let j: number;\r\n                    for (j = 0; j < k; j++) {\r\n                        indices.push(tempIndices[k][j], tempIndices[k + 1][j], tempIndices[k + 1][j + 1]);\r\n                        indices.push(tempIndices[k][j], tempIndices[k + 1][j + 1], tempIndices[k][j + 1]);\r\n                    }\r\n                    indices.push(tempIndices[k][j], tempIndices[k + 1][j], tempIndices[k + 1][j + 1]);\r\n                }\r\n            }\r\n\r\n            vertex_data.indices = indices;\r\n            vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Force adjacent facets to share vertices and remove any facets that have all vertices in a line\r\n     * This will undo any application of covertToFlatShadedMesh\r\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\r\n     */\r\n    public forceSharedVertices(): void {\r\n        const vertex_data = VertexData.ExtractFromMesh(this);\r\n        const currentUVs = vertex_data.uvs;\r\n        const currentIndices = vertex_data.indices;\r\n        const currentPositions = vertex_data.positions;\r\n        const currentColors = vertex_data.colors;\r\n        const currentMatrixIndices = vertex_data.matricesIndices;\r\n        const currentMatrixWeights = vertex_data.matricesWeights;\r\n        const currentMatrixIndicesExtra = vertex_data.matricesIndicesExtra;\r\n        const currentMatrixWeightsExtra = vertex_data.matricesWeightsExtra;\r\n\r\n        if (currentIndices === void 0 || currentPositions === void 0 || currentIndices === null || currentPositions === null) {\r\n            Logger.Warn(\"VertexData contains empty entries\");\r\n        } else {\r\n            const positions: Array<number> = new Array();\r\n            const indices: Array<number> = new Array();\r\n            const uvs: Array<number> = new Array();\r\n            const colors: Array<number> = new Array();\r\n            const matrixIndices: Array<number> = new Array();\r\n            const matrixWeights: Array<number> = new Array();\r\n            const matrixIndicesExtra: Array<number> = new Array();\r\n            const matrixWeightsExtra: Array<number> = new Array();\r\n            let pstring: Array<string> = new Array(); //lists facet vertex positions (a,b,c) as string \"a|b|c\"\r\n\r\n            let indexPtr: number = 0; // pointer to next available index value\r\n            const uniquePositions: { [key: string]: number } = {}; // unique vertex positions\r\n            let ptr: number; // pointer to element in uniquePositions\r\n            let facet: Array<number>;\r\n\r\n            for (let i = 0; i < currentIndices.length; i += 3) {\r\n                facet = [currentIndices[i], currentIndices[i + 1], currentIndices[i + 2]]; //facet vertex indices\r\n                pstring = [];\r\n                for (let j = 0; j < 3; j++) {\r\n                    pstring[j] = \"\";\r\n                    for (let k = 0; k < 3; k++) {\r\n                        //small values make 0\r\n                        if (Math.abs(currentPositions[3 * facet[j] + k]) < 0.00000001) {\r\n                            currentPositions[3 * facet[j] + k] = 0;\r\n                        }\r\n                        pstring[j] += currentPositions[3 * facet[j] + k] + \"|\";\r\n                    }\r\n                }\r\n                //check facet vertices to see that none are repeated\r\n                // do not process any facet that has a repeated vertex, ie is a line\r\n                if (!(pstring[0] == pstring[1] || pstring[0] == pstring[2] || pstring[1] == pstring[2])) {\r\n                    //for each facet position check if already listed in uniquePositions\r\n                    // if not listed add to uniquePositions and set index pointer\r\n                    // if listed use its index in uniquePositions and new index pointer\r\n                    for (let j = 0; j < 3; j++) {\r\n                        ptr = uniquePositions[pstring[j]];\r\n                        if (ptr === undefined) {\r\n                            uniquePositions[pstring[j]] = indexPtr;\r\n                            ptr = indexPtr++;\r\n                            //not listed so add individual x, y, z coordinates to positions\r\n                            for (let k = 0; k < 3; k++) {\r\n                                positions.push(currentPositions[3 * facet[j] + k]);\r\n                            }\r\n                            if (currentColors !== null && currentColors !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    colors.push(currentColors[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentUVs !== null && currentUVs !== void 0) {\r\n                                for (let k = 0; k < 2; k++) {\r\n                                    uvs.push(currentUVs[2 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixIndices.push(currentMatrixIndices[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixWeights.push(currentMatrixWeights[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixIndicesExtra.push(currentMatrixIndicesExtra[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixWeightsExtra !== null && currentMatrixWeightsExtra !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixWeightsExtra.push(currentMatrixWeightsExtra[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                        }\r\n                        // add new index pointer to indices array\r\n                        indices.push(ptr);\r\n                    }\r\n                }\r\n            }\r\n\r\n            const normals: Array<number> = new Array();\r\n            VertexData.ComputeNormals(positions, indices, normals);\r\n\r\n            //create new vertex data object and update\r\n            vertex_data.positions = positions;\r\n            vertex_data.indices = indices;\r\n            vertex_data.normals = normals;\r\n            if (currentUVs !== null && currentUVs !== void 0) {\r\n                vertex_data.uvs = uvs;\r\n            }\r\n            if (currentColors !== null && currentColors !== void 0) {\r\n                vertex_data.colors = colors;\r\n            }\r\n            if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\r\n                vertex_data.matricesIndices = matrixIndices;\r\n            }\r\n            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\r\n                vertex_data.matricesWeights = matrixWeights;\r\n            }\r\n            if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\r\n                vertex_data.matricesIndicesExtra = matrixIndicesExtra;\r\n            }\r\n            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\r\n                vertex_data.matricesWeightsExtra = matrixWeightsExtra;\r\n            }\r\n\r\n            vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\r\n        }\r\n    }\r\n\r\n    // Instances\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/naming-convention\r\n    public static _instancedMeshFactory(name: string, mesh: Mesh): InstancedMesh {\r\n        throw _WarnImport(\"InstancedMesh\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _PhysicsImpostorParser(scene: Scene, physicObject: IPhysicsEnabledObject, jsonObject: any): PhysicsImpostor {\r\n        throw _WarnImport(\"PhysicsImpostor\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new InstancedMesh object from the mesh model.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n     * @param name defines the name of the new instance\r\n     * @returns a new InstancedMesh\r\n     */\r\n    public createInstance(name: string): InstancedMesh {\r\n        return Mesh._instancedMeshFactory(name, this);\r\n    }\r\n\r\n    /**\r\n     * Synchronises all the mesh instance submeshes to the current mesh submeshes, if any.\r\n     * After this call, all the mesh instances have the same submeshes than the current mesh.\r\n     * @returns the current mesh\r\n     */\r\n    public synchronizeInstances(): Mesh {\r\n        for (let instanceIndex = 0; instanceIndex < this.instances.length; instanceIndex++) {\r\n            const instance = this.instances[instanceIndex];\r\n            instance._syncSubMeshes();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Optimization of the mesh's indices, in case a mesh has duplicated vertices.\r\n     * The function will only reorder the indices and will not remove unused vertices to avoid problems with submeshes.\r\n     * This should be used together with the simplification to avoid disappearing triangles.\r\n     * @param successCallback an optional success callback to be called after the optimization finished.\r\n     * @returns the current mesh\r\n     */\r\n    public optimizeIndices(successCallback?: (mesh?: Mesh) => void): Mesh {\r\n        const indices = <IndicesArray>this.getIndices();\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!positions || !indices) {\r\n            return this;\r\n        }\r\n\r\n        const vectorPositions: Vector3[] = [];\r\n        for (let pos = 0; pos < positions.length; pos = pos + 3) {\r\n            vectorPositions.push(Vector3.FromArray(positions, pos));\r\n        }\r\n        const dupes: number[] = [];\r\n\r\n        AsyncLoop.SyncAsyncForLoop(\r\n            vectorPositions.length,\r\n            40,\r\n            (iteration) => {\r\n                const realPos = vectorPositions.length - 1 - iteration;\r\n                const testedPosition = vectorPositions[realPos];\r\n                for (let j = 0; j < realPos; ++j) {\r\n                    const againstPosition = vectorPositions[j];\r\n                    if (testedPosition.equals(againstPosition)) {\r\n                        dupes[realPos] = j;\r\n                        break;\r\n                    }\r\n                }\r\n            },\r\n            () => {\r\n                for (let i = 0; i < indices.length; ++i) {\r\n                    indices[i] = dupes[indices[i]] || indices[i];\r\n                }\r\n\r\n                //indices are now reordered\r\n                const originalSubMeshes = this.subMeshes.slice(0);\r\n                this.setIndices(indices);\r\n                this.subMeshes = originalSubMeshes;\r\n                if (successCallback) {\r\n                    successCallback(this);\r\n                }\r\n            }\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serialize current mesh\r\n     * @param serializationObject defines the object which will receive the serialization data\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(serializationObject: any = {}): any {\r\n        serializationObject.name = this.name;\r\n        serializationObject.id = this.id;\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject.type = this.getClassName();\r\n\r\n        if (Tags && Tags.HasTags(this)) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n\r\n        serializationObject.position = this.position.asArray();\r\n\r\n        if (this.rotationQuaternion) {\r\n            serializationObject.rotationQuaternion = this.rotationQuaternion.asArray();\r\n        } else if (this.rotation) {\r\n            serializationObject.rotation = this.rotation.asArray();\r\n        }\r\n\r\n        serializationObject.scaling = this.scaling.asArray();\r\n        if (this._postMultiplyPivotMatrix) {\r\n            serializationObject.pivotMatrix = this.getPivotMatrix().asArray();\r\n        } else {\r\n            serializationObject.localMatrix = this.getPivotMatrix().asArray();\r\n        }\r\n\r\n        serializationObject.isEnabled = this.isEnabled(false);\r\n        serializationObject.isVisible = this.isVisible;\r\n        serializationObject.infiniteDistance = this.infiniteDistance;\r\n        serializationObject.pickable = this.isPickable;\r\n\r\n        serializationObject.receiveShadows = this.receiveShadows;\r\n\r\n        serializationObject.billboardMode = this.billboardMode;\r\n        serializationObject.visibility = this.visibility;\r\n        serializationObject.alwaysSelectAsActiveMesh = this.alwaysSelectAsActiveMesh;\r\n\r\n        serializationObject.checkCollisions = this.checkCollisions;\r\n        serializationObject.ellipsoid = this.ellipsoid.asArray();\r\n        serializationObject.ellipsoidOffset = this.ellipsoidOffset.asArray();\r\n        serializationObject.doNotSyncBoundingInfo = this.doNotSyncBoundingInfo;\r\n        serializationObject.isBlocker = this.isBlocker;\r\n        serializationObject.overrideMaterialSideOrientation = this.overrideMaterialSideOrientation;\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        // Geometry\r\n        serializationObject.isUnIndexed = this.isUnIndexed;\r\n        const geometry = this._geometry;\r\n        if (geometry && this.subMeshes) {\r\n            serializationObject.geometryUniqueId = geometry.uniqueId;\r\n            serializationObject.geometryId = geometry.id;\r\n\r\n            // SubMeshes\r\n            serializationObject.subMeshes = [];\r\n            for (let subIndex = 0; subIndex < this.subMeshes.length; subIndex++) {\r\n                const subMesh = this.subMeshes[subIndex];\r\n\r\n                serializationObject.subMeshes.push({\r\n                    materialIndex: subMesh.materialIndex,\r\n                    verticesStart: subMesh.verticesStart,\r\n                    verticesCount: subMesh.verticesCount,\r\n                    indexStart: subMesh.indexStart,\r\n                    indexCount: subMesh.indexCount,\r\n                });\r\n            }\r\n        }\r\n\r\n        // Material\r\n        if (this.material) {\r\n            if (!this.material.doNotSerialize) {\r\n                serializationObject.materialUniqueId = this.material.uniqueId;\r\n                serializationObject.materialId = this.material.id; // back compat\r\n            }\r\n        } else {\r\n            this.material = null;\r\n            serializationObject.materialUniqueId = this._scene.defaultMaterial.uniqueId;\r\n            serializationObject.materialId = this._scene.defaultMaterial.id; // back compat\r\n        }\r\n\r\n        // Morph targets\r\n        if (this.morphTargetManager) {\r\n            serializationObject.morphTargetManagerId = this.morphTargetManager.uniqueId;\r\n        }\r\n\r\n        // Skeleton\r\n        if (this.skeleton) {\r\n            serializationObject.skeletonId = this.skeleton.id;\r\n            serializationObject.numBoneInfluencers = this.numBoneInfluencers;\r\n        }\r\n\r\n        // Physics\r\n        //TODO implement correct serialization for physics impostors.\r\n        if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\r\n            const impostor = this.getPhysicsImpostor();\r\n            if (impostor) {\r\n                serializationObject.physicsMass = impostor.getParam(\"mass\");\r\n                serializationObject.physicsFriction = impostor.getParam(\"friction\");\r\n                serializationObject.physicsRestitution = impostor.getParam(\"mass\");\r\n                serializationObject.physicsImpostor = impostor.type;\r\n            }\r\n        }\r\n\r\n        // Metadata\r\n        if (this.metadata) {\r\n            serializationObject.metadata = this.metadata;\r\n        }\r\n\r\n        // Instances\r\n        serializationObject.instances = [];\r\n        for (let index = 0; index < this.instances.length; index++) {\r\n            const instance = this.instances[index];\r\n            if (instance.doNotSerialize) {\r\n                continue;\r\n            }\r\n\r\n            const serializationInstance: any = {\r\n                name: instance.name,\r\n                id: instance.id,\r\n                isEnabled: instance.isEnabled(false),\r\n                isVisible: instance.isVisible,\r\n                isPickable: instance.isPickable,\r\n                checkCollisions: instance.checkCollisions,\r\n                position: instance.position.asArray(),\r\n                scaling: instance.scaling.asArray(),\r\n            };\r\n\r\n            if (instance.parent) {\r\n                instance.parent._serializeAsParent(serializationInstance);\r\n            }\r\n\r\n            if (instance.rotationQuaternion) {\r\n                serializationInstance.rotationQuaternion = instance.rotationQuaternion.asArray();\r\n            } else if (instance.rotation) {\r\n                serializationInstance.rotation = instance.rotation.asArray();\r\n            }\r\n\r\n            // Physics\r\n            //TODO implement correct serialization for physics impostors.\r\n            if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\r\n                const impostor = instance.getPhysicsImpostor();\r\n                if (impostor) {\r\n                    serializationInstance.physicsMass = impostor.getParam(\"mass\");\r\n                    serializationInstance.physicsFriction = impostor.getParam(\"friction\");\r\n                    serializationInstance.physicsRestitution = impostor.getParam(\"mass\");\r\n                    serializationInstance.physicsImpostor = impostor.type;\r\n                }\r\n            }\r\n\r\n            // Metadata\r\n            if (instance.metadata) {\r\n                serializationInstance.metadata = instance.metadata;\r\n            }\r\n\r\n            // Action Manager\r\n            if (instance.actionManager) {\r\n                serializationInstance.actions = instance.actionManager.serialize(instance.name);\r\n            }\r\n\r\n            serializationObject.instances.push(serializationInstance);\r\n\r\n            // Animations\r\n            SerializationHelper.AppendSerializedAnimations(instance, serializationInstance);\r\n            serializationInstance.ranges = instance.serializeAnimationRanges();\r\n        }\r\n\r\n        // Thin instances\r\n        if (this._thinInstanceDataStorage.instancesCount && this._thinInstanceDataStorage.matrixData) {\r\n            serializationObject.thinInstances = {\r\n                instancesCount: this._thinInstanceDataStorage.instancesCount,\r\n                matrixData: Array.from(this._thinInstanceDataStorage.matrixData),\r\n                matrixBufferSize: this._thinInstanceDataStorage.matrixBufferSize,\r\n                enablePicking: this.thinInstanceEnablePicking,\r\n            };\r\n\r\n            if (this._userThinInstanceBuffersStorage) {\r\n                const userThinInstance: any = {\r\n                    data: {},\r\n                    sizes: {},\r\n                    strides: {},\r\n                };\r\n\r\n                for (const kind in this._userThinInstanceBuffersStorage.data) {\r\n                    userThinInstance.data[kind] = Array.from(this._userThinInstanceBuffersStorage.data[kind]);\r\n                    userThinInstance.sizes[kind] = this._userThinInstanceBuffersStorage.sizes[kind];\r\n                    userThinInstance.strides[kind] = this._userThinInstanceBuffersStorage.strides[kind];\r\n                }\r\n\r\n                serializationObject.thinInstances.userThinInstance = userThinInstance;\r\n            }\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        // Layer mask\r\n        serializationObject.layerMask = this.layerMask;\r\n\r\n        // Alpha\r\n        serializationObject.alphaIndex = this.alphaIndex;\r\n        serializationObject.hasVertexAlpha = this.hasVertexAlpha;\r\n\r\n        // Overlay\r\n        serializationObject.overlayAlpha = this.overlayAlpha;\r\n        serializationObject.overlayColor = this.overlayColor.asArray();\r\n        serializationObject.renderOverlay = this.renderOverlay;\r\n\r\n        // Fog\r\n        serializationObject.applyFog = this.applyFog;\r\n\r\n        // Action Manager\r\n        if (this.actionManager) {\r\n            serializationObject.actions = this.actionManager.serialize(this.name);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /** @internal */\r\n    public _syncGeometryWithMorphTargetManager() {\r\n        if (!this.geometry) {\r\n            return;\r\n        }\r\n\r\n        this._markSubMeshesAsAttributesDirty();\r\n\r\n        const morphTargetManager = this._internalAbstractMeshDataInfo._morphTargetManager;\r\n        if (morphTargetManager && morphTargetManager.vertexCount) {\r\n            if (morphTargetManager.vertexCount !== this.getTotalVertices()) {\r\n                Logger.Error(\"Mesh is incompatible with morph targets. Targets and mesh must all have the same vertices count.\");\r\n                this.morphTargetManager = null;\r\n                return;\r\n            }\r\n\r\n            if (morphTargetManager.isUsingTextureForTargets) {\r\n                return;\r\n            }\r\n\r\n            for (let index = 0; index < morphTargetManager.numInfluencers; index++) {\r\n                const morphTarget = morphTargetManager.getActiveTarget(index);\r\n\r\n                const positions = morphTarget.getPositions();\r\n                if (!positions) {\r\n                    Logger.Error(\"Invalid morph target. Target must have positions.\");\r\n                    return;\r\n                }\r\n\r\n                this.geometry.setVerticesData(VertexBuffer.PositionKind + index, positions, false, 3);\r\n\r\n                const normals = morphTarget.getNormals();\r\n                if (normals) {\r\n                    this.geometry.setVerticesData(VertexBuffer.NormalKind + index, normals, false, 3);\r\n                }\r\n\r\n                const tangents = morphTarget.getTangents();\r\n                if (tangents) {\r\n                    this.geometry.setVerticesData(VertexBuffer.TangentKind + index, tangents, false, 3);\r\n                }\r\n\r\n                const uvs = morphTarget.getUVs();\r\n                if (uvs) {\r\n                    this.geometry.setVerticesData(VertexBuffer.UVKind + \"_\" + index, uvs, false, 2);\r\n                }\r\n            }\r\n        } else {\r\n            let index = 0;\r\n\r\n            // Positions\r\n            while (this.geometry.isVerticesDataPresent(VertexBuffer.PositionKind + index)) {\r\n                this.geometry.removeVerticesData(VertexBuffer.PositionKind + index);\r\n\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.NormalKind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.NormalKind + index);\r\n                }\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.TangentKind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.TangentKind + index);\r\n                }\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.UVKind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.UVKind + \"_\" + index);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GroundMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"GroundMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GoldbergMeshParser = (parsedMesh: any, scene: Scene): GoldbergMesh => {\r\n        throw _WarnImport(\"GoldbergMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _LinesMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"LinesMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GreasedLineMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"GreasedLineMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GreasedLineRibbonMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"GreasedLineRibbonMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _TrailMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"TrailMesh\");\r\n    };\r\n\r\n    /**\r\n     * Returns a new Mesh object parsed from the source provided.\r\n     * @param parsedMesh is the source\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl is the root URL to prefix the `delayLoadingFile` property with\r\n     * @returns a new Mesh\r\n     */\r\n    public static Parse(parsedMesh: any, scene: Scene, rootUrl: string): Mesh {\r\n        let mesh: Mesh;\r\n\r\n        if (parsedMesh.type && parsedMesh.type === \"LinesMesh\") {\r\n            mesh = Mesh._LinesMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"GroundMesh\") {\r\n            mesh = Mesh._GroundMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"GoldbergMesh\") {\r\n            mesh = Mesh._GoldbergMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"GreasedLineMesh\") {\r\n            mesh = Mesh._GreasedLineMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"TrailMesh\") {\r\n            mesh = Mesh._TrailMeshParser(parsedMesh, scene);\r\n        } else {\r\n            mesh = new Mesh(parsedMesh.name, scene);\r\n        }\r\n        mesh.id = parsedMesh.id;\r\n        mesh._waitingParsedUniqueId = parsedMesh.uniqueId;\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(mesh, parsedMesh.tags);\r\n        }\r\n\r\n        mesh.position = Vector3.FromArray(parsedMesh.position);\r\n\r\n        if (parsedMesh.metadata !== undefined) {\r\n            mesh.metadata = parsedMesh.metadata;\r\n        }\r\n\r\n        if (parsedMesh.rotationQuaternion) {\r\n            mesh.rotationQuaternion = Quaternion.FromArray(parsedMesh.rotationQuaternion);\r\n        } else if (parsedMesh.rotation) {\r\n            mesh.rotation = Vector3.FromArray(parsedMesh.rotation);\r\n        }\r\n\r\n        mesh.scaling = Vector3.FromArray(parsedMesh.scaling);\r\n\r\n        if (parsedMesh.localMatrix) {\r\n            mesh.setPreTransformMatrix(Matrix.FromArray(parsedMesh.localMatrix));\r\n        } else if (parsedMesh.pivotMatrix) {\r\n            mesh.setPivotMatrix(Matrix.FromArray(parsedMesh.pivotMatrix));\r\n        }\r\n\r\n        mesh.setEnabled(parsedMesh.isEnabled);\r\n        mesh.isVisible = parsedMesh.isVisible;\r\n        mesh.infiniteDistance = parsedMesh.infiniteDistance;\r\n        mesh.alwaysSelectAsActiveMesh = !!parsedMesh.alwaysSelectAsActiveMesh;\r\n\r\n        mesh.showBoundingBox = parsedMesh.showBoundingBox;\r\n        mesh.showSubMeshesBoundingBox = parsedMesh.showSubMeshesBoundingBox;\r\n\r\n        if (parsedMesh.applyFog !== undefined) {\r\n            mesh.applyFog = parsedMesh.applyFog;\r\n        }\r\n\r\n        if (parsedMesh.pickable !== undefined) {\r\n            mesh.isPickable = parsedMesh.pickable;\r\n        }\r\n\r\n        if (parsedMesh.alphaIndex !== undefined) {\r\n            mesh.alphaIndex = parsedMesh.alphaIndex;\r\n        }\r\n\r\n        mesh.receiveShadows = parsedMesh.receiveShadows;\r\n\r\n        if (parsedMesh.billboardMode !== undefined) {\r\n            mesh.billboardMode = parsedMesh.billboardMode;\r\n        }\r\n\r\n        if (parsedMesh.visibility !== undefined) {\r\n            mesh.visibility = parsedMesh.visibility;\r\n        }\r\n\r\n        mesh.checkCollisions = parsedMesh.checkCollisions;\r\n        mesh.doNotSyncBoundingInfo = !!parsedMesh.doNotSyncBoundingInfo;\r\n\r\n        if (parsedMesh.ellipsoid) {\r\n            mesh.ellipsoid = Vector3.FromArray(parsedMesh.ellipsoid);\r\n        }\r\n\r\n        if (parsedMesh.ellipsoidOffset) {\r\n            mesh.ellipsoidOffset = Vector3.FromArray(parsedMesh.ellipsoidOffset);\r\n        }\r\n\r\n        if (parsedMesh.overrideMaterialSideOrientation !== undefined) {\r\n            mesh.overrideMaterialSideOrientation = parsedMesh.overrideMaterialSideOrientation;\r\n        }\r\n\r\n        if (parsedMesh.isBlocker !== undefined) {\r\n            mesh.isBlocker = parsedMesh.isBlocker;\r\n        }\r\n\r\n        mesh._shouldGenerateFlatShading = parsedMesh.useFlatShading;\r\n\r\n        // freezeWorldMatrix\r\n        if (parsedMesh.freezeWorldMatrix) {\r\n            mesh._waitingData.freezeWorldMatrix = parsedMesh.freezeWorldMatrix;\r\n        }\r\n\r\n        // Parent\r\n        if (parsedMesh.parentId !== undefined) {\r\n            mesh._waitingParentId = parsedMesh.parentId;\r\n        }\r\n\r\n        if (parsedMesh.parentInstanceIndex !== undefined) {\r\n            mesh._waitingParentInstanceIndex = parsedMesh.parentInstanceIndex;\r\n        }\r\n\r\n        // Actions\r\n        if (parsedMesh.actions !== undefined) {\r\n            mesh._waitingData.actions = parsedMesh.actions;\r\n        }\r\n\r\n        // Overlay\r\n        if (parsedMesh.overlayAlpha !== undefined) {\r\n            mesh.overlayAlpha = parsedMesh.overlayAlpha;\r\n        }\r\n\r\n        if (parsedMesh.overlayColor !== undefined) {\r\n            mesh.overlayColor = Color3.FromArray(parsedMesh.overlayColor);\r\n        }\r\n\r\n        if (parsedMesh.renderOverlay !== undefined) {\r\n            mesh.renderOverlay = parsedMesh.renderOverlay;\r\n        }\r\n\r\n        // Geometry\r\n        mesh.isUnIndexed = !!parsedMesh.isUnIndexed;\r\n        mesh.hasVertexAlpha = parsedMesh.hasVertexAlpha;\r\n\r\n        if (parsedMesh.delayLoadingFile) {\r\n            mesh.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n            mesh.delayLoadingFile = rootUrl + parsedMesh.delayLoadingFile;\r\n            mesh.buildBoundingInfo(Vector3.FromArray(parsedMesh.boundingBoxMinimum), Vector3.FromArray(parsedMesh.boundingBoxMaximum));\r\n\r\n            if (parsedMesh._binaryInfo) {\r\n                mesh._binaryInfo = parsedMesh._binaryInfo;\r\n            }\r\n\r\n            mesh._delayInfo = [];\r\n            if (parsedMesh.hasUVs) {\r\n                mesh._delayInfo.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs2) {\r\n                mesh._delayInfo.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs3) {\r\n                mesh._delayInfo.push(VertexBuffer.UV3Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs4) {\r\n                mesh._delayInfo.push(VertexBuffer.UV4Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs5) {\r\n                mesh._delayInfo.push(VertexBuffer.UV5Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs6) {\r\n                mesh._delayInfo.push(VertexBuffer.UV6Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasColors) {\r\n                mesh._delayInfo.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (parsedMesh.hasMatricesIndices) {\r\n                mesh._delayInfo.push(VertexBuffer.MatricesIndicesKind);\r\n            }\r\n\r\n            if (parsedMesh.hasMatricesWeights) {\r\n                mesh._delayInfo.push(VertexBuffer.MatricesWeightsKind);\r\n            }\r\n\r\n            mesh._delayLoadingFunction = Geometry._ImportGeometry;\r\n\r\n            if (SceneLoaderFlags.ForceFullSceneLoadingForIncremental) {\r\n                mesh._checkDelayState();\r\n            }\r\n        } else {\r\n            Geometry._ImportGeometry(parsedMesh, mesh);\r\n        }\r\n\r\n        // Material\r\n        if (parsedMesh.materialUniqueId) {\r\n            mesh._waitingMaterialId = parsedMesh.materialUniqueId;\r\n        } else if (parsedMesh.materialId) {\r\n            mesh._waitingMaterialId = parsedMesh.materialId;\r\n        }\r\n\r\n        // Morph targets\r\n        if (parsedMesh.morphTargetManagerId > -1) {\r\n            mesh.morphTargetManager = scene.getMorphTargetManagerById(parsedMesh.morphTargetManagerId);\r\n        }\r\n\r\n        // Skeleton\r\n        if (parsedMesh.skeletonId !== undefined && parsedMesh.skeletonId !== null) {\r\n            mesh.skeleton = scene.getLastSkeletonById(parsedMesh.skeletonId);\r\n            if (parsedMesh.numBoneInfluencers) {\r\n                mesh.numBoneInfluencers = parsedMesh.numBoneInfluencers;\r\n            }\r\n        }\r\n\r\n        // Animations\r\n        if (parsedMesh.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedMesh.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedMesh.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    mesh.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(mesh, parsedMesh, scene);\r\n        }\r\n\r\n        if (parsedMesh.autoAnimate) {\r\n            scene.beginAnimation(mesh, parsedMesh.autoAnimateFrom, parsedMesh.autoAnimateTo, parsedMesh.autoAnimateLoop, parsedMesh.autoAnimateSpeed || 1.0);\r\n        }\r\n\r\n        // Layer Mask\r\n        if (parsedMesh.layerMask && !isNaN(parsedMesh.layerMask)) {\r\n            mesh.layerMask = Math.abs(parseInt(parsedMesh.layerMask));\r\n        } else {\r\n            mesh.layerMask = 0x0fffffff;\r\n        }\r\n\r\n        // Physics\r\n        if (parsedMesh.physicsImpostor) {\r\n            Mesh._PhysicsImpostorParser(scene, mesh, parsedMesh);\r\n        }\r\n\r\n        // Levels\r\n        if (parsedMesh.lodMeshIds) {\r\n            mesh._waitingData.lods = {\r\n                ids: parsedMesh.lodMeshIds,\r\n                distances: parsedMesh.lodDistances ? parsedMesh.lodDistances : null,\r\n                coverages: parsedMesh.lodCoverages ? parsedMesh.lodCoverages : null,\r\n            };\r\n        }\r\n\r\n        // Instances\r\n        if (parsedMesh.instances) {\r\n            for (let index = 0; index < parsedMesh.instances.length; index++) {\r\n                const parsedInstance = parsedMesh.instances[index];\r\n                const instance = mesh.createInstance(parsedInstance.name);\r\n\r\n                if (parsedInstance.id) {\r\n                    instance.id = parsedInstance.id;\r\n                }\r\n\r\n                if (Tags) {\r\n                    if (parsedInstance.tags) {\r\n                        Tags.AddTagsTo(instance, parsedInstance.tags);\r\n                    } else {\r\n                        Tags.AddTagsTo(instance, parsedMesh.tags);\r\n                    }\r\n                }\r\n\r\n                instance.position = Vector3.FromArray(parsedInstance.position);\r\n\r\n                if (parsedInstance.metadata !== undefined) {\r\n                    instance.metadata = parsedInstance.metadata;\r\n                }\r\n\r\n                if (parsedInstance.parentId !== undefined) {\r\n                    instance._waitingParentId = parsedInstance.parentId;\r\n                }\r\n\r\n                if (parsedInstance.parentInstanceIndex !== undefined) {\r\n                    instance._waitingParentInstanceIndex = parsedInstance.parentInstanceIndex;\r\n                }\r\n\r\n                if (parsedInstance.isEnabled !== undefined && parsedInstance.isEnabled !== null) {\r\n                    instance.setEnabled(parsedInstance.isEnabled);\r\n                }\r\n\r\n                if (parsedInstance.isVisible !== undefined && parsedInstance.isVisible !== null) {\r\n                    instance.isVisible = parsedInstance.isVisible;\r\n                }\r\n\r\n                if (parsedInstance.isPickable !== undefined && parsedInstance.isPickable !== null) {\r\n                    instance.isPickable = parsedInstance.isPickable;\r\n                }\r\n\r\n                if (parsedInstance.rotationQuaternion) {\r\n                    instance.rotationQuaternion = Quaternion.FromArray(parsedInstance.rotationQuaternion);\r\n                } else if (parsedInstance.rotation) {\r\n                    instance.rotation = Vector3.FromArray(parsedInstance.rotation);\r\n                }\r\n\r\n                instance.scaling = Vector3.FromArray(parsedInstance.scaling);\r\n\r\n                if (parsedInstance.checkCollisions != undefined && parsedInstance.checkCollisions != null) {\r\n                    instance.checkCollisions = parsedInstance.checkCollisions;\r\n                }\r\n                if (parsedInstance.pickable != undefined && parsedInstance.pickable != null) {\r\n                    instance.isPickable = parsedInstance.pickable;\r\n                }\r\n                if (parsedInstance.showBoundingBox != undefined && parsedInstance.showBoundingBox != null) {\r\n                    instance.showBoundingBox = parsedInstance.showBoundingBox;\r\n                }\r\n                if (parsedInstance.showSubMeshesBoundingBox != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\r\n                    instance.showSubMeshesBoundingBox = parsedInstance.showSubMeshesBoundingBox;\r\n                }\r\n                if (parsedInstance.alphaIndex != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\r\n                    instance.alphaIndex = parsedInstance.alphaIndex;\r\n                }\r\n\r\n                // Physics\r\n                if (parsedInstance.physicsImpostor) {\r\n                    Mesh._PhysicsImpostorParser(scene, instance, parsedInstance);\r\n                }\r\n\r\n                // Actions\r\n                if (parsedInstance.actions !== undefined) {\r\n                    instance._waitingData.actions = parsedInstance.actions;\r\n                }\r\n\r\n                // Animation\r\n                if (parsedInstance.animations) {\r\n                    for (let animationIndex = 0; animationIndex < parsedInstance.animations.length; animationIndex++) {\r\n                        const parsedAnimation = parsedInstance.animations[animationIndex];\r\n                        const internalClass = GetClass(\"BABYLON.Animation\");\r\n                        if (internalClass) {\r\n                            instance.animations.push(internalClass.Parse(parsedAnimation));\r\n                        }\r\n                    }\r\n                    Node.ParseAnimationRanges(instance, parsedInstance, scene);\r\n\r\n                    if (parsedInstance.autoAnimate) {\r\n                        scene.beginAnimation(\r\n                            instance,\r\n                            parsedInstance.autoAnimateFrom,\r\n                            parsedInstance.autoAnimateTo,\r\n                            parsedInstance.autoAnimateLoop,\r\n                            parsedInstance.autoAnimateSpeed || 1.0\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thin instances\r\n        if (parsedMesh.thinInstances) {\r\n            const thinInstances = parsedMesh.thinInstances;\r\n\r\n            mesh.thinInstanceEnablePicking = !!thinInstances.enablePicking;\r\n\r\n            if (thinInstances.matrixData) {\r\n                mesh.thinInstanceSetBuffer(\"matrix\", new Float32Array(thinInstances.matrixData), 16, false);\r\n\r\n                mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\r\n                mesh._thinInstanceDataStorage.instancesCount = thinInstances.instancesCount;\r\n            } else {\r\n                mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\r\n            }\r\n\r\n            if (parsedMesh.thinInstances.userThinInstance) {\r\n                const userThinInstance = parsedMesh.thinInstances.userThinInstance;\r\n\r\n                for (const kind in userThinInstance.data) {\r\n                    mesh.thinInstanceSetBuffer(kind, new Float32Array(userThinInstance.data[kind]), userThinInstance.strides[kind], false);\r\n                    mesh._userThinInstanceBuffersStorage.sizes[kind] = userThinInstance.sizes[kind];\r\n                }\r\n            }\r\n        }\r\n\r\n        return mesh;\r\n    }\r\n\r\n    // Skeletons\r\n\r\n    /**\r\n     * Prepare internal position array for software CPU skinning\r\n     * @returns original positions used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh\r\n     */\r\n    public setPositionsForCPUSkinning(): Nullable<Float32Array> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        if (!internalDataInfo._sourcePositions) {\r\n            const source = this.getVerticesData(VertexBuffer.PositionKind);\r\n            if (!source) {\r\n                return internalDataInfo._sourcePositions;\r\n            }\r\n\r\n            internalDataInfo._sourcePositions = new Float32Array(<any>source);\r\n\r\n            if (!this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\r\n                this.setVerticesData(VertexBuffer.PositionKind, source, true);\r\n            }\r\n        }\r\n        return internalDataInfo._sourcePositions;\r\n    }\r\n\r\n    /**\r\n     * Prepare internal normal array for software CPU skinning\r\n     * @returns original normals used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh.\r\n     */\r\n    public setNormalsForCPUSkinning(): Nullable<Float32Array> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n\r\n        if (!internalDataInfo._sourceNormals) {\r\n            const source = this.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n            if (!source) {\r\n                return internalDataInfo._sourceNormals;\r\n            }\r\n\r\n            internalDataInfo._sourceNormals = new Float32Array(<any>source);\r\n\r\n            if (!this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\r\n                this.setVerticesData(VertexBuffer.NormalKind, source, true);\r\n            }\r\n        }\r\n        return internalDataInfo._sourceNormals;\r\n    }\r\n\r\n    /**\r\n     * Updates the vertex buffer by applying transformation from the bones\r\n     * @param skeleton defines the skeleton to apply to current mesh\r\n     * @returns the current mesh\r\n     */\r\n    public applySkeleton(skeleton: Skeleton): Mesh {\r\n        if (!this.geometry) {\r\n            return this;\r\n        }\r\n\r\n        if (this.geometry._softwareSkinningFrameId == this.getScene().getFrameId()) {\r\n            return this;\r\n        }\r\n\r\n        this.geometry._softwareSkinningFrameId = this.getScene().getFrameId();\r\n\r\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            return this;\r\n        }\r\n        if (!this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\r\n            return this;\r\n        }\r\n        if (!this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            return this;\r\n        }\r\n\r\n        const hasNormals = this.isVerticesDataPresent(VertexBuffer.NormalKind);\r\n\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n\r\n        if (!internalDataInfo._sourcePositions) {\r\n            const submeshes = this.subMeshes.slice();\r\n            this.setPositionsForCPUSkinning();\r\n            this.subMeshes = submeshes;\r\n        }\r\n\r\n        if (hasNormals && !internalDataInfo._sourceNormals) {\r\n            this.setNormalsForCPUSkinning();\r\n        }\r\n\r\n        // positionsData checks for not being Float32Array will only pass at most once\r\n        let positionsData = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!positionsData) {\r\n            return this;\r\n        }\r\n\r\n        if (!(positionsData instanceof Float32Array)) {\r\n            positionsData = new Float32Array(positionsData);\r\n        }\r\n\r\n        // normalsData checks for not being Float32Array will only pass at most once\r\n        let normalsData = this.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n        if (hasNormals) {\r\n            if (!normalsData) {\r\n                return this;\r\n            }\r\n\r\n            if (!(normalsData instanceof Float32Array)) {\r\n                normalsData = new Float32Array(normalsData);\r\n            }\r\n        }\r\n\r\n        const matricesIndicesData = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n        const matricesWeightsData = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n\r\n        if (!matricesWeightsData || !matricesIndicesData) {\r\n            return this;\r\n        }\r\n\r\n        const needExtras = this.numBoneInfluencers > 4;\r\n        const matricesIndicesExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\r\n        const matricesWeightsExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\r\n\r\n        const skeletonMatrices = skeleton.getTransformMatrices(this);\r\n\r\n        const tempVector3 = Vector3.Zero();\r\n        const finalMatrix = new Matrix();\r\n        const tempMatrix = new Matrix();\r\n\r\n        let matWeightIdx = 0;\r\n        let inf: number;\r\n        for (let index = 0; index < positionsData.length; index += 3, matWeightIdx += 4) {\r\n            let weight: number;\r\n            for (inf = 0; inf < 4; inf++) {\r\n                weight = matricesWeightsData[matWeightIdx + inf];\r\n                if (weight > 0) {\r\n                    Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                    finalMatrix.addToSelf(tempMatrix);\r\n                }\r\n            }\r\n            if (needExtras) {\r\n                for (inf = 0; inf < 4; inf++) {\r\n                    weight = matricesWeightsExtraData![matWeightIdx + inf];\r\n                    if (weight > 0) {\r\n                        Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData![matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                        finalMatrix.addToSelf(tempMatrix);\r\n                    }\r\n                }\r\n            }\r\n\r\n            Vector3.TransformCoordinatesFromFloatsToRef(\r\n                internalDataInfo._sourcePositions![index],\r\n                internalDataInfo._sourcePositions![index + 1],\r\n                internalDataInfo._sourcePositions![index + 2],\r\n                finalMatrix,\r\n                tempVector3\r\n            );\r\n            tempVector3.toArray(positionsData, index);\r\n\r\n            if (hasNormals) {\r\n                Vector3.TransformNormalFromFloatsToRef(\r\n                    internalDataInfo._sourceNormals![index],\r\n                    internalDataInfo._sourceNormals![index + 1],\r\n                    internalDataInfo._sourceNormals![index + 2],\r\n                    finalMatrix,\r\n                    tempVector3\r\n                );\r\n                tempVector3.toArray(normalsData!, index);\r\n            }\r\n\r\n            finalMatrix.reset();\r\n        }\r\n\r\n        this.updateVerticesData(VertexBuffer.PositionKind, positionsData);\r\n        if (hasNormals) {\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normalsData!);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // Tools\r\n\r\n    /**\r\n     * Returns an object containing a min and max Vector3 which are the minimum and maximum vectors of each mesh bounding box from the passed array, in the world coordinates\r\n     * @param meshes defines the list of meshes to scan\r\n     * @returns an object `{min:` Vector3`, max:` Vector3`}`\r\n     */\r\n    public static MinMax(meshes: AbstractMesh[]): { min: Vector3; max: Vector3 } {\r\n        let minVector: Nullable<Vector3> = null;\r\n        let maxVector: Nullable<Vector3> = null;\r\n\r\n        meshes.forEach(function (mesh) {\r\n            const boundingInfo = mesh.getBoundingInfo();\r\n\r\n            const boundingBox = boundingInfo.boundingBox;\r\n            if (!minVector || !maxVector) {\r\n                minVector = boundingBox.minimumWorld;\r\n                maxVector = boundingBox.maximumWorld;\r\n            } else {\r\n                minVector.minimizeInPlace(boundingBox.minimumWorld);\r\n                maxVector.maximizeInPlace(boundingBox.maximumWorld);\r\n            }\r\n        });\r\n\r\n        if (!minVector || !maxVector) {\r\n            return {\r\n                min: Vector3.Zero(),\r\n                max: Vector3.Zero(),\r\n            };\r\n        }\r\n\r\n        return {\r\n            min: minVector,\r\n            max: maxVector,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the center of the `{min:` Vector3`, max:` Vector3`}` or the center of MinMax vector3 computed from a mesh array\r\n     * @param meshesOrMinMaxVector could be an array of meshes or a `{min:` Vector3`, max:` Vector3`}` object\r\n     * @returns a vector3\r\n     */\r\n    public static Center(meshesOrMinMaxVector: { min: Vector3; max: Vector3 } | AbstractMesh[]): Vector3 {\r\n        const minMaxVector = meshesOrMinMaxVector instanceof Array ? Mesh.MinMax(meshesOrMinMaxVector) : meshesOrMinMaxVector;\r\n        return Vector3.Center(minMaxVector.min, minMaxVector.max);\r\n    }\r\n\r\n    /**\r\n     * Merge the array of meshes into a single mesh for performance reasons.\r\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\r\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\r\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\r\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\r\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\r\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\r\n     * @returns a new mesh\r\n     */\r\n    public static MergeMeshes(\r\n        meshes: Array<Mesh>,\r\n        disposeSource = true,\r\n        allow32BitsIndices?: boolean,\r\n        meshSubclass?: Mesh,\r\n        subdivideWithSubMeshes?: boolean,\r\n        multiMultiMaterials?: boolean\r\n    ) {\r\n        return runCoroutineSync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, false));\r\n    }\r\n\r\n    /**\r\n     * Merge the array of meshes into a single mesh for performance reasons.\r\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\r\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\r\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\r\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\r\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\r\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\r\n     * @returns a new mesh\r\n     */\r\n    public static MergeMeshesAsync(\r\n        meshes: Array<Mesh>,\r\n        disposeSource = true,\r\n        allow32BitsIndices?: boolean,\r\n        meshSubclass?: Mesh,\r\n        subdivideWithSubMeshes?: boolean,\r\n        multiMultiMaterials?: boolean\r\n    ) {\r\n        return runCoroutineAsync(\r\n            Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, true),\r\n            createYieldingScheduler()\r\n        );\r\n    }\r\n\r\n    private static *_MergeMeshesCoroutine(\r\n        meshes: Array<Mesh>,\r\n        disposeSource = true,\r\n        allow32BitsIndices: boolean | undefined,\r\n        meshSubclass: Mesh | undefined,\r\n        subdivideWithSubMeshes: boolean | undefined,\r\n        multiMultiMaterials: boolean | undefined,\r\n        isAsync: boolean\r\n    ): Coroutine<Nullable<Mesh>> {\r\n        // Remove any null/undefined entries from the mesh array\r\n        meshes = meshes.filter(Boolean);\r\n\r\n        if (meshes.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let index: number;\r\n        if (!allow32BitsIndices) {\r\n            let totalVertices = 0;\r\n\r\n            // Counting vertices\r\n            for (index = 0; index < meshes.length; index++) {\r\n                totalVertices += meshes[index].getTotalVertices();\r\n\r\n                if (totalVertices >= 65536) {\r\n                    Logger.Warn(\"Cannot merge meshes because resulting mesh will have more than 65536 vertices. Please use allow32BitsIndices = true to use 32 bits indices\");\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        if (multiMultiMaterials) {\r\n            subdivideWithSubMeshes = false;\r\n        }\r\n        const materialArray: Array<Material> = new Array<Material>();\r\n        const materialIndexArray: Array<number> = new Array<number>();\r\n        // Merge\r\n        const indiceArray: Array<number> = new Array<number>();\r\n        const currentOverrideMaterialSideOrientation = meshes[0].overrideMaterialSideOrientation;\r\n\r\n        for (index = 0; index < meshes.length; index++) {\r\n            const mesh = meshes[index];\r\n            if (mesh.isAnInstance) {\r\n                Logger.Warn(\"Cannot merge instance meshes.\");\r\n                return null;\r\n            }\r\n\r\n            if (currentOverrideMaterialSideOrientation !== mesh.overrideMaterialSideOrientation) {\r\n                Logger.Warn(\"Cannot merge meshes with different overrideMaterialSideOrientation values.\");\r\n                return null;\r\n            }\r\n\r\n            if (subdivideWithSubMeshes) {\r\n                indiceArray.push(mesh.getTotalIndices());\r\n            }\r\n\r\n            if (multiMultiMaterials) {\r\n                if (mesh.material) {\r\n                    const material = mesh.material;\r\n                    if (material instanceof MultiMaterial) {\r\n                        for (let matIndex = 0; matIndex < material.subMaterials.length; matIndex++) {\r\n                            if (materialArray.indexOf(<Material>material.subMaterials[matIndex]) < 0) {\r\n                                materialArray.push(<Material>material.subMaterials[matIndex]);\r\n                            }\r\n                        }\r\n                        for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\r\n                            materialIndexArray.push(materialArray.indexOf(<Material>material.subMaterials[mesh.subMeshes[subIndex].materialIndex]));\r\n                            indiceArray.push(mesh.subMeshes[subIndex].indexCount);\r\n                        }\r\n                    } else {\r\n                        if (materialArray.indexOf(<Material>material) < 0) {\r\n                            materialArray.push(<Material>material);\r\n                        }\r\n                        for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\r\n                            materialIndexArray.push(materialArray.indexOf(<Material>material));\r\n                            indiceArray.push(mesh.subMeshes[subIndex].indexCount);\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\r\n                        materialIndexArray.push(0);\r\n                        indiceArray.push(mesh.subMeshes[subIndex].indexCount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const source = meshes[0];\r\n\r\n        const getVertexDataFromMesh = (mesh: Mesh) => {\r\n            const wm = mesh.computeWorldMatrix(true);\r\n            const vertexData = VertexData.ExtractFromMesh(mesh, false, false);\r\n            return { vertexData, transform: wm };\r\n        };\r\n\r\n        const { vertexData: sourceVertexData, transform: sourceTransform } = getVertexDataFromMesh(source);\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n\r\n        const meshVertexDatas = new Array<{ vertexData: VertexData; transform?: Matrix }>(meshes.length - 1);\r\n        for (let i = 1; i < meshes.length; i++) {\r\n            meshVertexDatas[i - 1] = getVertexDataFromMesh(meshes[i]);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        const mergeCoroutine = sourceVertexData._mergeCoroutine(sourceTransform, meshVertexDatas, allow32BitsIndices, isAsync, !disposeSource);\r\n        let mergeCoroutineStep = mergeCoroutine.next();\r\n        while (!mergeCoroutineStep.done) {\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n            mergeCoroutineStep = mergeCoroutine.next();\r\n        }\r\n        const vertexData = mergeCoroutineStep.value;\r\n\r\n        if (!meshSubclass) {\r\n            meshSubclass = new Mesh(source.name + \"_merged\", source.getScene());\r\n        }\r\n\r\n        const applyToCoroutine = vertexData._applyToCoroutine(meshSubclass, undefined, isAsync);\r\n        let applyToCoroutineStep = applyToCoroutine.next();\r\n        while (!applyToCoroutineStep.done) {\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n            applyToCoroutineStep = applyToCoroutine.next();\r\n        }\r\n\r\n        // Setting properties\r\n        meshSubclass.checkCollisions = source.checkCollisions;\r\n        meshSubclass.overrideMaterialSideOrientation = source.overrideMaterialSideOrientation;\r\n\r\n        // Cleaning\r\n        if (disposeSource) {\r\n            for (index = 0; index < meshes.length; index++) {\r\n                meshes[index].dispose();\r\n            }\r\n        }\r\n\r\n        // Subdivide\r\n        if (subdivideWithSubMeshes || multiMultiMaterials) {\r\n            //-- removal of global submesh\r\n            meshSubclass.releaseSubMeshes();\r\n            index = 0;\r\n            let offset = 0;\r\n\r\n            //-- apply subdivision according to index table\r\n            while (index < indiceArray.length) {\r\n                SubMesh.CreateFromIndices(0, offset, indiceArray[index], meshSubclass, undefined, false);\r\n                offset += indiceArray[index];\r\n                index++;\r\n            }\r\n\r\n            for (const subMesh of meshSubclass.subMeshes) {\r\n                subMesh.refreshBoundingInfo();\r\n            }\r\n\r\n            meshSubclass.computeWorldMatrix(true);\r\n        }\r\n\r\n        if (multiMultiMaterials) {\r\n            const newMultiMaterial = new MultiMaterial(source.name + \"_merged\", source.getScene());\r\n            newMultiMaterial.subMaterials = materialArray;\r\n            for (let subIndex = 0; subIndex < meshSubclass.subMeshes.length; subIndex++) {\r\n                meshSubclass.subMeshes[subIndex].materialIndex = materialIndexArray[subIndex];\r\n            }\r\n            meshSubclass.material = newMultiMaterial;\r\n        } else {\r\n            meshSubclass.material = source.material;\r\n        }\r\n\r\n        return meshSubclass;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public addInstance(instance: InstancedMesh) {\r\n        instance._indexInSourceMeshInstanceArray = this.instances.length;\r\n        this.instances.push(instance);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public removeInstance(instance: InstancedMesh) {\r\n        // Remove from mesh\r\n        const index = instance._indexInSourceMeshInstanceArray;\r\n        if (index != -1) {\r\n            if (index !== this.instances.length - 1) {\r\n                const last = this.instances[this.instances.length - 1];\r\n                this.instances[index] = last;\r\n                last._indexInSourceMeshInstanceArray = index;\r\n            }\r\n\r\n            instance._indexInSourceMeshInstanceArray = -1;\r\n            this.instances.pop();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _shouldConvertRHS() {\r\n        return this.overrideMaterialSideOrientation === Material.CounterClockWiseSideOrientation;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getRenderingFillMode(fillMode: number): number {\r\n        const scene = this.getScene();\r\n\r\n        if (scene.forcePointsCloud) return Material.PointFillMode;\r\n\r\n        if (scene.forceWireframe) return Material.WireFrameFillMode;\r\n\r\n        return this.overrideRenderingFillMode ?? fillMode;\r\n    }\r\n\r\n    // deprecated methods\r\n    /**\r\n     * Sets the mesh material by the material or multiMaterial `id` property\r\n     * @param id is a string identifying the material or the multiMaterial\r\n     * @returns the current mesh\r\n     * @deprecated Please use MeshBuilder instead Please use setMaterialById instead\r\n     */\r\n    public setMaterialByID(id: string): Mesh {\r\n        return this.setMaterialById(id);\r\n    }\r\n\r\n    /**\r\n     * Creates a ribbon mesh.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n     * @param name defines the name of the mesh to create\r\n     * @param pathArray is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry.\r\n     * @param closeArray creates a seam between the first and the last paths of the path array (default is false)\r\n     * @param closePath creates a seam between the first and the last points of each path of the path array\r\n     * @param offset is taken in account only if the `pathArray` is containing a single path\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance defines an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#ribbon)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateRibbon(\r\n        name: string,\r\n        pathArray: Vector3[][],\r\n        closeArray: boolean,\r\n        closePath: boolean,\r\n        offset: number,\r\n        scene?: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a plane polygonal mesh.  By default, this is a disc.\r\n     * @param name defines the name of the mesh to create\r\n     * @param radius sets the radius size (float) of the polygon (default 0.5)\r\n     * @param tessellation sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateDisc(name: string, radius: number, tessellation: number, scene: Nullable<Scene>, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a box mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param size sets the size (float) of each box side (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateBox(name: string, size: number, scene: Nullable<Scene>, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param segments sets the sphere number of horizontal stripes (positive integer, default 32)\r\n     * @param diameter sets the diameter size (float) of the sphere (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateSphere(name: string, segments: number, diameter: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a hemisphere mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param segments sets the sphere number of horizontal stripes (positive integer, default 32)\r\n     * @param diameter sets the diameter size (float) of the sphere (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateHemisphere(name: string, segments: number, diameter: number, scene?: Scene): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a cylinder or a cone mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param height sets the height size (float) of the cylinder/cone (float, default 2)\r\n     * @param diameterTop set the top cap diameter (floats, default 1)\r\n     * @param diameterBottom set the bottom cap diameter (floats, default 1). This value can't be zero\r\n     * @param tessellation sets the number of cylinder sides (positive integer, default 24). Set it to 3 to get a prism for instance\r\n     * @param subdivisions sets the number of rings along the cylinder height (positive integer, default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateCylinder(\r\n        name: string,\r\n        height: number,\r\n        diameterTop: number,\r\n        diameterBottom: number,\r\n        tessellation: number,\r\n        subdivisions: any,\r\n        scene?: Scene,\r\n        updatable?: any,\r\n        sideOrientation?: number\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    // Torus  (Code from SharpDX.org)\r\n    /**\r\n     * Creates a torus mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param diameter sets the diameter size (float) of the torus (default 1)\r\n     * @param thickness sets the diameter size of the tube of the torus (float, default 0.5)\r\n     * @param tessellation sets the number of torus sides (positive integer, default 16)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTorus(name: string, diameter: number, thickness: number, tessellation: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a torus knot mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param radius sets the global radius size (float) of the torus knot (default 2)\r\n     * @param tube sets the diameter size of the tube of the torus (float, default 0.5)\r\n     * @param radialSegments sets the number of sides on each tube segments (positive integer, default 32)\r\n     * @param tubularSegments sets the number of tubes to decompose the knot into (positive integer, default 32)\r\n     * @param p the number of windings on X axis (positive integers, default 2)\r\n     * @param q the number of windings on Y axis (positive integers, default 3)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTorusKnot(\r\n        name: string,\r\n        radius: number,\r\n        tube: number,\r\n        radialSegments: number,\r\n        tubularSegments: number,\r\n        p: number,\r\n        q: number,\r\n        scene?: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a line mesh..\r\n     * @param name defines the name of the mesh to create\r\n     * @param points is an array successive Vector3\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param instance is an instance of an existing LineMesh object to be updated with the passed `points` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#lines-and-dashedlines).\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateLines(name: string, points: Vector3[], scene: Nullable<Scene>, updatable: boolean, instance?: Nullable<LinesMesh>): LinesMesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a dashed line mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param points is an array successive Vector3\r\n     * @param dashSize is the size of the dashes relatively the dash number (positive float, default 3)\r\n     * @param gapSize is the size of the gap between two successive dashes relatively the dash number (positive float, default 1)\r\n     * @param dashNb is the intended total number of dashes (positive integer, default 200)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param instance is an instance of an existing LineMesh object to be updated with the passed `points` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#lines-and-dashedlines)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateDashedLines(\r\n        name: string,\r\n        points: Vector3[],\r\n        dashSize: number,\r\n        gapSize: number,\r\n        dashNb: number,\r\n        scene: Nullable<Scene>,\r\n        updatable?: boolean,\r\n        instance?: LinesMesh\r\n    ): LinesMesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a polygon mesh.Please consider using the same method from the MeshBuilder class instead\r\n     * The polygon's shape will depend on the input parameters and is constructed parallel to a ground mesh.\r\n     * The parameter `shape` is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors.\r\n     * You can set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n     * Remember you can only change the shape positions, not their number when updating a polygon.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#non-regular-polygon\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\r\n     * @param scene defines the hosting scene\r\n     * @param holes is a required array of arrays of successive Vector3 used to defines holes in the polygon\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param earcutInjection can be used to inject your own earcut reference\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreatePolygon(name: string, shape: Vector3[], scene: Scene, holes?: Vector3[][], updatable?: boolean, sideOrientation?: number, earcutInjection?: any): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates an extruded polygon mesh, with depth in the Y direction..\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-non-regular-polygon\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\r\n     * @param depth defines the height of extrusion\r\n     * @param scene defines the hosting scene\r\n     * @param holes is a required array of arrays of successive Vector3 used to defines holes in the polygon\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param earcutInjection can be used to inject your own earcut reference\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static ExtrudePolygon(\r\n        name: string,\r\n        shape: Vector3[],\r\n        depth: number,\r\n        scene: Scene,\r\n        holes?: Vector3[][],\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        earcutInjection?: any\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates an extruded shape mesh.\r\n     * The extrusion is a parametric shape. It has no predefined shape. Its final shape will depend on the input parameters.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-shapes\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis\r\n     * @param path is a required array of successive Vector3. This is the axis curve the shape is extruded along\r\n     * @param scale is the value to scale the shape\r\n     * @param rotation is the angle value to rotate the shape each step (each path point), from the former step (so rotation added each step) along the curve\r\n     * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#extruded-shape)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static ExtrudeShape(\r\n        name: string,\r\n        shape: Vector3[],\r\n        path: Vector3[],\r\n        scale: number,\r\n        rotation: number,\r\n        cap: number,\r\n        scene: Nullable<Scene>,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates an custom extruded shape mesh.\r\n     * The custom extrusion is a parametric shape.\r\n     * It has no predefined shape. Its final shape will depend on the input parameters.\r\n     *\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-shapes\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis\r\n     * @param path is a required array of successive Vector3. This is the axis curve the shape is extruded along\r\n     * @param scaleFunction is a custom Javascript function called on each path point\r\n     * @param rotationFunction is a custom Javascript function called on each path point\r\n     * @param ribbonCloseArray forces the extrusion underlying ribbon to close all the paths in its `pathArray`\r\n     * @param ribbonClosePath forces the extrusion underlying ribbon to close its `pathArray`\r\n     * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters (https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#extruded-shape)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static ExtrudeShapeCustom(\r\n        name: string,\r\n        shape: Vector3[],\r\n        path: Vector3[],\r\n        scaleFunction: Nullable<{ (i: number, distance: number): number }>,\r\n        rotationFunction: Nullable<{ (i: number, distance: number): number }>,\r\n        ribbonCloseArray: boolean,\r\n        ribbonClosePath: boolean,\r\n        cap: number,\r\n        scene: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates lathe mesh.\r\n     * The lathe is a shape with a symmetry axis : a 2D model shape is rotated around this axis to design the lathe.\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3. This array depicts the shape to be rotated in its local space : the shape must be designed in the xOy plane and will be rotated around the Y axis. It's usually a 2D shape, so the Vector3 z coordinates are often set to zero\r\n     * @param radius is the radius value of the lathe\r\n     * @param tessellation is the side number of the lathe.\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateLathe(name: string, shape: Vector3[], radius: number, tessellation: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a plane mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param size sets the size (float) of both sides of the plane at once (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreatePlane(name: string, size: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a ground mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param width set the width of the ground\r\n     * @param height set the height of the ground\r\n     * @param subdivisions sets the number of subdivisions per side\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateGround(name: string, width: number, height: number, subdivisions: number, scene?: Scene, updatable?: boolean): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a tiled ground mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param xmin set the ground minimum X coordinate\r\n     * @param zmin set the ground minimum Y coordinate\r\n     * @param xmax set the ground maximum X coordinate\r\n     * @param zmax set the ground maximum Z coordinate\r\n     * @param subdivisions is an object `{w: positive integer, h: positive integer}` (default `{w: 6, h: 6}`). `w` and `h` are the numbers of subdivisions on the ground width and height. Each subdivision is called a tile\r\n     * @param precision is an object `{w: positive integer, h: positive integer}` (default `{w: 2, h: 2}`). `w` and `h` are the numbers of subdivisions on the ground width and height of each tile\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTiledGround(\r\n        name: string,\r\n        xmin: number,\r\n        zmin: number,\r\n        xmax: number,\r\n        zmax: number,\r\n        subdivisions: { w: number; h: number },\r\n        precision: { w: number; h: number },\r\n        scene: Scene,\r\n        updatable?: boolean\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a ground mesh from a height map.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/height_map\r\n     * @param name defines the name of the mesh to create\r\n     * @param url sets the URL of the height map image resource\r\n     * @param width set the ground width size\r\n     * @param height set the ground height size\r\n     * @param subdivisions sets the number of subdivision per side\r\n     * @param minHeight is the minimum altitude on the ground\r\n     * @param maxHeight is the maximum altitude on the ground\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param onReady  is a callback function that will be called  once the mesh is built (the height map download can last some time)\r\n     * @param alphaFilter will filter any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateGroundFromHeightMap(\r\n        name: string,\r\n        url: string,\r\n        width: number,\r\n        height: number,\r\n        subdivisions: number,\r\n        minHeight: number,\r\n        maxHeight: number,\r\n        scene: Scene,\r\n        updatable?: boolean,\r\n        onReady?: (mesh: GroundMesh) => void,\r\n        alphaFilter?: number\r\n    ): GroundMesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a tube mesh.\r\n     * The tube is a parametric shape.\r\n     * It has no predefined shape. Its final shape will depend on the input parameters.\r\n     *\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n     * @param name defines the name of the mesh to create\r\n     * @param path is a required array of successive Vector3. It is the curve used as the axis of the tube\r\n     * @param radius sets the tube radius size\r\n     * @param tessellation is the number of sides on the tubular surface\r\n     * @param radiusFunction is a custom function. If it is not null, it overrides the parameter `radius`. This function is called on each point of the tube path and is passed the index `i` of the i-th point and the distance of this point from the first point of the path\r\n     * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance is an instance of an existing Tube object to be updated with the passed `pathArray` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#tube)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTube(\r\n        name: string,\r\n        path: Vector3[],\r\n        radius: number,\r\n        tessellation: number,\r\n        radiusFunction: { (i: number, distance: number): number },\r\n        cap: number,\r\n        scene: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a polyhedron mesh.\r\n     *.\r\n     * * The parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embedded types. Please refer to the type sheet in the tutorial to choose the wanted type\r\n     * * The parameter `size` (positive float, default 1) sets the polygon size\r\n     * * You can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value)\r\n     * * You can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overwrittes the parameter `type`\r\n     * * A `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\r\n     * * You can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`)\r\n     * * To understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : https://doc.babylonjs.com/features/featuresDeepDive/materials/using/texturePerBoxFace\r\n     * * The parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored\r\n     * * You can also set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n     * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n     * @param name defines the name of the mesh to create\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreatePolyhedron(\r\n        name: string,\r\n        options: {\r\n            type?: number;\r\n            size?: number;\r\n            sizeX?: number;\r\n            sizeY?: number;\r\n            sizeZ?: number;\r\n            custom?: any;\r\n            faceUV?: Vector4[];\r\n            faceColors?: Color4[];\r\n            updatable?: boolean;\r\n            sideOrientation?: number;\r\n        },\r\n        scene: Scene\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided\r\n     * * The parameter `radius` sets the radius size (float) of the icosphere (default 1)\r\n     * * You can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value than `radius`)\r\n     * * The parameter `subdivisions` sets the number of subdivisions (positive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size\r\n     * * The parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface\r\n     * * You can also set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n     * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/polyhedra#icosphere\r\n     * @param name defines the name of the mesh\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateIcoSphere(\r\n        name: string,\r\n        options: { radius?: number; flat?: boolean; subdivisions?: number; sideOrientation?: number; updatable?: boolean },\r\n        scene: Scene\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a decal mesh.\r\n     *.\r\n     * A decal is a mesh usually applied as a model onto the surface of another mesh\r\n     * @param name  defines the name of the mesh\r\n     * @param sourceMesh defines the mesh receiving the decal\r\n     * @param position sets the position of the decal in world coordinates\r\n     * @param normal sets the normal of the mesh where the decal is applied onto in world coordinates\r\n     * @param size sets the decal scaling\r\n     * @param angle sets the angle to rotate the decal\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateDecal(name: string, sourceMesh: AbstractMesh, position: Vector3, normal: Vector3, size: Vector3, angle: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /** Creates a Capsule Mesh\r\n     * @param name defines the name of the mesh.\r\n     * @param options the constructors options used to shape the mesh.\r\n     * @param scene defines the scene the mesh is scoped to.\r\n     * @returns the capsule mesh\r\n     * @see https://doc.babylonjs.com/how_to/capsule_shape\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateCapsule(name: string, options: ICreateCapsuleOptions, scene: Scene): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Extends a mesh to a Goldberg mesh\r\n     * Warning  the mesh to convert MUST be an import of a perviously exported Goldberg mesh\r\n     * @param mesh the mesh to convert\r\n     * @returns the extended mesh\r\n     * @deprecated Please use ExtendMeshToGoldberg instead\r\n     */\r\n    public static ExtendToGoldberg(mesh: Mesh): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.Mesh\", Mesh);\r\n", "import type { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { IPhysicsEnginePlugin } from \"./IPhysicsEnginePlugin\";\r\n/**\r\n * Interface for Physics-Joint data\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface PhysicsJointData {\r\n    //Important for some engines, optional!\r\n    /**\r\n     * The main pivot of the joint\r\n     */\r\n    mainPivot?: Vector3;\r\n    /**\r\n     * The connected pivot of the joint\r\n     */\r\n    connectedPivot?: Vector3;\r\n    /**\r\n     * The main axis of the joint\r\n     */\r\n    mainAxis?: Vector3;\r\n    /**\r\n     * The connected axis of the joint\r\n     */\r\n    connectedAxis?: Vector3;\r\n    /**\r\n     * The collision of the joint\r\n     */\r\n    collision?: boolean;\r\n    /**\r\n     * Native Oimo/Cannon/Energy data\r\n     */\r\n    nativeParams?: any;\r\n}\r\n\r\n/**\r\n * This is a holder class for the physics joint created by the physics plugin\r\n * It holds a set of functions to control the underlying joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsJoint {\r\n    private _physicsJoint: any;\r\n    protected _physicsPlugin: IPhysicsEnginePlugin;\r\n\r\n    /**\r\n     * Initializes the physics joint\r\n     * @param type The type of the physics joint\r\n     * @param jointData The data for the physics joint\r\n     */\r\n    constructor(\r\n        /**\r\n         * The type of the physics joint\r\n         */\r\n        public type: number,\r\n        /**\r\n         * The data for the physics joint\r\n         */\r\n        public jointData: PhysicsJointData\r\n    ) {\r\n        jointData.nativeParams = jointData.nativeParams || {};\r\n    }\r\n\r\n    /**\r\n     * Gets the physics joint\r\n     */\r\n    public get physicsJoint(): any {\r\n        return this._physicsJoint;\r\n    }\r\n\r\n    /**\r\n     * Sets the physics joint\r\n     */\r\n    public set physicsJoint(newJoint: any) {\r\n        if (this._physicsJoint) {\r\n            //remove from the world\r\n        }\r\n\r\n        this._physicsJoint = newJoint;\r\n    }\r\n\r\n    /**\r\n     * Sets the physics plugin\r\n     */\r\n    public set physicsPlugin(physicsPlugin: IPhysicsEnginePlugin) {\r\n        this._physicsPlugin = physicsPlugin;\r\n    }\r\n\r\n    /**\r\n     * Execute a function that is physics-plugin specific.\r\n     * @param {Function} func the function that will be executed.\r\n     *                        It accepts two parameters: the physics world and the physics joint\r\n     */\r\n    public executeNativeFunction(func: (world: any, physicsJoint: any) => void) {\r\n        func(this._physicsPlugin.world, this._physicsJoint);\r\n    }\r\n\r\n    //TODO check if the native joints are the same\r\n\r\n    //Joint Types\r\n    /**\r\n     * Distance-Joint type\r\n     */\r\n    public static DistanceJoint = 0;\r\n    /**\r\n     * Hinge-Joint type\r\n     */\r\n    public static HingeJoint = 1;\r\n    /**\r\n     * Ball-and-Socket joint type\r\n     */\r\n    public static BallAndSocketJoint = 2;\r\n    /**\r\n     * Wheel-Joint type\r\n     */\r\n    public static WheelJoint = 3;\r\n    /**\r\n     * Slider-Joint type\r\n     */\r\n    public static SliderJoint = 4;\r\n    //OIMO\r\n    /**\r\n     * Prismatic-Joint type\r\n     */\r\n    public static PrismaticJoint = 5;\r\n    //\r\n    /**\r\n     * Universal-Joint type\r\n     * ENERGY FTW! (compare with this - @see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions)\r\n     */\r\n    public static UniversalJoint = 6;\r\n    /**\r\n     * Hinge-Joint 2 type\r\n     */\r\n    public static Hinge2Joint = PhysicsJoint.WheelJoint;\r\n    //Cannon\r\n    /**\r\n     * Point to Point Joint type.  Similar to a Ball-Joint.  Different in parameters\r\n     */\r\n    public static PointToPointJoint = 8;\r\n    //Cannon only at the moment\r\n    /**\r\n     * Spring-Joint type\r\n     */\r\n    public static SpringJoint = 9;\r\n    /**\r\n     * Lock-Joint type\r\n     */\r\n    public static LockJoint = 10;\r\n}\r\n\r\n/**\r\n * A class representing a physics distance joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class DistanceJoint extends PhysicsJoint {\r\n    /**\r\n     *\r\n     * @param jointData The data for the Distance-Joint\r\n     */\r\n    constructor(jointData: DistanceJointData) {\r\n        super(PhysicsJoint.DistanceJoint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Update the predefined distance.\r\n     * @param maxDistance The maximum preferred distance\r\n     * @param minDistance The minimum preferred distance\r\n     */\r\n    public updateDistance(maxDistance: number, minDistance?: number) {\r\n        this._physicsPlugin.updateDistanceJoint(this, maxDistance, minDistance);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a Motor-Enabled Joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class MotorEnabledJoint extends PhysicsJoint implements IMotorEnabledJoint {\r\n    /**\r\n     * Initializes the Motor-Enabled Joint\r\n     * @param type The type of the joint\r\n     * @param jointData The physical joint data for the joint\r\n     */\r\n    constructor(type: number, jointData: PhysicsJointData) {\r\n        super(type, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param force the force to apply\r\n     * @param maxForce max force for this motor.\r\n     */\r\n    public setMotor(force?: number, maxForce?: number) {\r\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\r\n    }\r\n\r\n    /**\r\n     * Set the motor's limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\r\n    }\r\n}\r\n\r\n/**\r\n * This class represents a single physics Hinge-Joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class HingeJoint extends MotorEnabledJoint {\r\n    /**\r\n     * Initializes the Hinge-Joint\r\n     * @param jointData The joint data for the Hinge-Joint\r\n     */\r\n    constructor(jointData: PhysicsJointData) {\r\n        super(PhysicsJoint.HingeJoint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param {number} force the force to apply\r\n     * @param {number} maxForce max force for this motor.\r\n     */\r\n    public setMotor(force?: number, maxForce?: number) {\r\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\r\n    }\r\n\r\n    /**\r\n     * Set the motor's limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\r\n    }\r\n}\r\n\r\n/**\r\n * This class represents a dual hinge physics joint (same as wheel joint)\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class Hinge2Joint extends MotorEnabledJoint {\r\n    /**\r\n     * Initializes the Hinge2-Joint\r\n     * @param jointData The joint data for the Hinge2-Joint\r\n     */\r\n    constructor(jointData: PhysicsJointData) {\r\n        super(PhysicsJoint.Hinge2Joint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param targetSpeed the speed the motor is to reach\r\n     * @param maxForce max force for this motor.\r\n     * @param motorIndex motor's index, 0 or 1.\r\n     */\r\n    public setMotor(targetSpeed?: number, maxForce?: number, motorIndex: number = 0) {\r\n        this._physicsPlugin.setMotor(this, targetSpeed || 0, maxForce, motorIndex);\r\n    }\r\n\r\n    /**\r\n     * Set the motor limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit the upper limit\r\n     * @param lowerLimit lower limit\r\n     * @param motorIndex the motor's index, 0 or 1.\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number, motorIndex: number = 0) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit, motorIndex);\r\n    }\r\n}\r\n\r\n/**\r\n * Interface for a motor enabled joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface IMotorEnabledJoint {\r\n    /**\r\n     * Physics joint\r\n     */\r\n    physicsJoint: any;\r\n    /**\r\n     * Sets the motor of the motor-enabled joint\r\n     * @param force The force of the motor\r\n     * @param maxForce The maximum force of the motor\r\n     * @param motorIndex The index of the motor\r\n     */\r\n    setMotor(force?: number, maxForce?: number, motorIndex?: number): void;\r\n    /**\r\n     * Sets the limit of the motor\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     * @param motorIndex The index of the motor\r\n     */\r\n    setLimit(upperLimit: number, lowerLimit?: number, motorIndex?: number): void;\r\n}\r\n\r\n/**\r\n * Joint data for a Distance-Joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface DistanceJointData extends PhysicsJointData {\r\n    /**\r\n     * Max distance the 2 joint objects can be apart\r\n     */\r\n    maxDistance: number;\r\n    //Oimo - minDistance\r\n    //Cannon - maxForce\r\n}\r\n\r\n/**\r\n * Joint data from a spring joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface SpringJointData extends PhysicsJointData {\r\n    /**\r\n     * Length of the spring\r\n     */\r\n    length: number;\r\n    /**\r\n     * Stiffness of the spring\r\n     */\r\n    stiffness: number;\r\n    /**\r\n     * Damping of the spring\r\n     */\r\n    damping: number;\r\n    /** this callback will be called when applying the force to the impostors. */\r\n    forceApplicationCallback: () => void;\r\n}\r\n", "import type { Nullable, IndicesArray } from \"../../types\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { ArrayTools } from \"../../Misc/arrayTools\";\r\nimport type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector3, Quaternion } from \"../../Maths/math.vector\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Bone } from \"../../Bones/bone\";\r\nimport type { BoundingInfo } from \"../../Culling/boundingInfo\";\r\nimport type { PhysicsEngine as PhysicsEngineV1 } from \"./physicsEngine\";\r\n\r\nimport type { PhysicsJointData } from \"./physicsJoint\";\r\nimport { PhysicsJoint } from \"./physicsJoint\";\r\nimport { Space } from \"../../Maths/math.axis\";\r\n\r\n/**\r\n * The interface for the physics imposter parameters\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface PhysicsImpostorParameters {\r\n    /**\r\n     * The mass of the physics imposter\r\n     */\r\n    mass: number;\r\n    /**\r\n     * The friction of the physics imposter\r\n     */\r\n    friction?: number;\r\n    /**\r\n     * The coefficient of restitution of the physics imposter\r\n     */\r\n    restitution?: number;\r\n    /**\r\n     * The native options of the physics imposter\r\n     */\r\n    nativeOptions?: any;\r\n    /**\r\n     * Specifies if the parent should be ignored\r\n     */\r\n    ignoreParent?: boolean;\r\n    /**\r\n     * Specifies if bi-directional transformations should be disabled\r\n     */\r\n    disableBidirectionalTransformation?: boolean;\r\n    /**\r\n     * The pressure inside the physics imposter, soft object only\r\n     */\r\n    pressure?: number;\r\n    /**\r\n     * The stiffness the physics imposter, soft object only\r\n     */\r\n    stiffness?: number;\r\n    /**\r\n     * The number of iterations used in maintaining consistent vertex velocities, soft object only\r\n     */\r\n    velocityIterations?: number;\r\n    /**\r\n     * The number of iterations used in maintaining consistent vertex positions, soft object only\r\n     */\r\n    positionIterations?: number;\r\n    /**\r\n     * The number used to fix points on a cloth (0, 1, 2, 4, 8) or rope (0, 1, 2) only\r\n     * 0 None, 1, back left or top, 2, back right or bottom, 4, front left, 8, front right\r\n     * Add to fix multiple points\r\n     */\r\n    fixedPoints?: number;\r\n    /**\r\n     * The collision margin around a soft object\r\n     */\r\n    margin?: number;\r\n    /**\r\n     * The collision margin around a soft object\r\n     */\r\n    damping?: number;\r\n    /**\r\n     * The path for a rope based on an extrusion\r\n     */\r\n    path?: any;\r\n    /**\r\n     * The shape of an extrusion used for a rope based on an extrusion\r\n     */\r\n    shape?: any;\r\n}\r\n\r\n/**\r\n * Interface for a physics-enabled object\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface IPhysicsEnabledObject {\r\n    /**\r\n     * The position of the physics-enabled object\r\n     */\r\n    position: Vector3;\r\n    /**\r\n     * The rotation of the physics-enabled object\r\n     */\r\n    rotationQuaternion: Nullable<Quaternion>;\r\n    /**\r\n     * The scale of the physics-enabled object\r\n     */\r\n    scaling: Vector3;\r\n    /**\r\n     * The rotation of the physics-enabled object\r\n     */\r\n    rotation?: Vector3;\r\n    /**\r\n     * The parent of the physics-enabled object\r\n     */\r\n    parent?: any;\r\n    /**\r\n     * The bounding info of the physics-enabled object\r\n     * @returns The bounding info of the physics-enabled object\r\n     */\r\n    getBoundingInfo(): BoundingInfo;\r\n    /**\r\n     * Computes the world matrix\r\n     * @param force Specifies if the world matrix should be computed by force\r\n     * @returns A world matrix\r\n     */\r\n    computeWorldMatrix(force: boolean): Matrix;\r\n    /**\r\n     * Gets the world matrix\r\n     * @returns A world matrix\r\n     */\r\n    getWorldMatrix?(): Matrix;\r\n    /**\r\n     * Gets the child meshes\r\n     * @param directDescendantsOnly Specifies if only direct-descendants should be obtained\r\n     * @returns An array of abstract meshes\r\n     */\r\n    getChildMeshes?(directDescendantsOnly?: boolean): Array<AbstractMesh>;\r\n    /**\r\n     * Gets the vertex data\r\n     * @param kind The type of vertex data\r\n     * @returns A nullable array of numbers, or a float32 array\r\n     */\r\n    getVerticesData(kind: string): Nullable<Array<number> | Float32Array>;\r\n    /**\r\n     * Gets the indices from the mesh\r\n     * @returns A nullable array of index arrays\r\n     */\r\n    getIndices?(): Nullable<IndicesArray>;\r\n    /**\r\n     * Gets the scene from the mesh\r\n     * @returns the indices array or null\r\n     */\r\n    getScene?(): Scene;\r\n    /**\r\n     * Gets the absolute position from the mesh\r\n     * @returns the absolute position\r\n     */\r\n    getAbsolutePosition(): Vector3;\r\n    /**\r\n     * Gets the absolute pivot point from the mesh\r\n     * @returns the absolute pivot point\r\n     */\r\n    getAbsolutePivotPoint(): Vector3;\r\n    /**\r\n     * Rotates the mesh\r\n     * @param axis The axis of rotation\r\n     * @param amount The amount of rotation\r\n     * @param space The space of the rotation\r\n     * @returns The rotation transform node\r\n     */\r\n    rotate(axis: Vector3, amount: number, space?: Space): TransformNode;\r\n    /**\r\n     * Translates the mesh\r\n     * @param axis The axis of translation\r\n     * @param distance The distance of translation\r\n     * @param space The space of the translation\r\n     * @returns The transform node\r\n     */\r\n    translate(axis: Vector3, distance: number, space?: Space): TransformNode;\r\n    /**\r\n     * Sets the absolute position of the mesh\r\n     * @param absolutePosition The absolute position of the mesh\r\n     * @returns The transform node\r\n     */\r\n    setAbsolutePosition(absolutePosition: Vector3): TransformNode;\r\n    /**\r\n     * Gets the class name of the mesh\r\n     * @returns The class name\r\n     */\r\n    getClassName(): string;\r\n}\r\n\r\nMesh._PhysicsImpostorParser = function (scene: Scene, physicObject: IPhysicsEnabledObject, jsonObject: any): PhysicsImpostor {\r\n    return new PhysicsImpostor(\r\n        physicObject,\r\n        jsonObject.physicsImpostor,\r\n        {\r\n            mass: jsonObject.physicsMass,\r\n            friction: jsonObject.physicsFriction,\r\n            restitution: jsonObject.physicsRestitution,\r\n        },\r\n        scene\r\n    );\r\n};\r\n\r\n/**\r\n * Represents a physics imposter\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsImpostor {\r\n    /**\r\n     * The default object size of the imposter\r\n     */\r\n    public static DEFAULT_OBJECT_SIZE: Vector3 = new Vector3(1, 1, 1);\r\n\r\n    /**\r\n     * The identity quaternion of the imposter\r\n     */\r\n    public static IDENTITY_QUATERNION = Quaternion.Identity();\r\n\r\n    /** @internal */\r\n    public _pluginData: any = {};\r\n\r\n    private _physicsEngine: Nullable<PhysicsEngineV1>;\r\n    //The native cannon/oimo/energy physics body object.\r\n    private _physicsBody: any;\r\n    private _bodyUpdateRequired: boolean = false;\r\n\r\n    private _onBeforePhysicsStepCallbacks = new Array<(impostor: PhysicsImpostor) => void>();\r\n    private _onAfterPhysicsStepCallbacks = new Array<(impostor: PhysicsImpostor) => void>();\r\n    /** @internal */\r\n    public _onPhysicsCollideCallbacks: Array<{\r\n        callback: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor, point: Nullable<Vector3>, distance: number, impulse: number, normal: Nullable<Vector3>) => void;\r\n        otherImpostors: Array<PhysicsImpostor>;\r\n    }> = [];\r\n\r\n    private _deltaPosition: Vector3 = Vector3.Zero();\r\n    private _deltaRotation: Quaternion;\r\n    private _deltaRotationConjugated: Quaternion;\r\n\r\n    /** @internal */\r\n    public _isFromLine: boolean;\r\n\r\n    //If set, this is this impostor's parent\r\n    private _parent: Nullable<PhysicsImpostor>;\r\n\r\n    private _isDisposed = false;\r\n\r\n    private static _TmpVecs: Vector3[] = ArrayTools.BuildArray(3, Vector3.Zero);\r\n    private static _TmpQuat: Quaternion = Quaternion.Identity();\r\n\r\n    /**\r\n     * Specifies if the physics imposter is disposed\r\n     */\r\n    get isDisposed(): boolean {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    /**\r\n     * Gets the mass of the physics imposter\r\n     */\r\n    get mass(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyMass(this) : 0;\r\n    }\r\n\r\n    set mass(value: number) {\r\n        this.setMass(value);\r\n    }\r\n\r\n    /**\r\n     * Gets the coefficient of friction\r\n     */\r\n    get friction(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyFriction(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coefficient of friction\r\n     */\r\n    set friction(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        this._physicsEngine.getPhysicsPlugin().setBodyFriction(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the coefficient of restitution\r\n     */\r\n    get restitution(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyRestitution(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coefficient of restitution\r\n     */\r\n    set restitution(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        this._physicsEngine.getPhysicsPlugin().setBodyRestitution(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the pressure of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get pressure(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPressure) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyPressure!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the pressure of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set pressure(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPressure) {\r\n            return;\r\n        }\r\n        plugin.setBodyPressure!(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the stiffness of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get stiffness(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyStiffness) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyStiffness!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the stiffness of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set stiffness(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyStiffness) {\r\n            return;\r\n        }\r\n        plugin.setBodyStiffness!(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get velocityIterations(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyVelocityIterations) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyVelocityIterations!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set velocityIterations(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyVelocityIterations) {\r\n            return;\r\n        }\r\n        plugin.setBodyVelocityIterations!(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the positionIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get positionIterations(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyPositionIterations) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyPositionIterations!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the positionIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set positionIterations(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPositionIterations) {\r\n            return;\r\n        }\r\n        plugin.setBodyPositionIterations!(this, value);\r\n    }\r\n\r\n    /**\r\n     * The unique id of the physics imposter\r\n     * set by the physics engine when adding this impostor to the array\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public soft: boolean = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public segments: number = 0;\r\n\r\n    private _joints: Array<{\r\n        joint: PhysicsJoint;\r\n        otherImpostor: PhysicsImpostor;\r\n    }>;\r\n\r\n    /**\r\n     * Initializes the physics imposter\r\n     * @param object The physics-enabled object used as the physics imposter\r\n     * @param type The type of the physics imposter. Types are available as static members of this class.\r\n     * @param _options The options for the physics imposter\r\n     * @param _scene The Babylon scene\r\n     */\r\n    constructor(\r\n        /**\r\n         * The physics-enabled object used as the physics imposter\r\n         */\r\n        public object: IPhysicsEnabledObject,\r\n        /**\r\n         * The type of the physics imposter\r\n         */\r\n        public type: number,\r\n        private _options: PhysicsImpostorParameters = { mass: 0 },\r\n        private _scene?: Scene\r\n    ) {\r\n        //sanity check!\r\n        if (!this.object) {\r\n            Logger.Error(\"No object was provided. A physics object is obligatory\");\r\n            return;\r\n        }\r\n        if (this.object.parent && _options.mass !== 0) {\r\n            Logger.Warn(\"A physics impostor has been created for an object which has a parent. Babylon physics currently works in local space so unexpected issues may occur.\");\r\n        }\r\n\r\n        // Legacy support for old syntax.\r\n        if (!this._scene && object.getScene) {\r\n            this._scene = object.getScene();\r\n        }\r\n\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n\r\n        if (this.type > 100) {\r\n            this.soft = true;\r\n        }\r\n\r\n        this._physicsEngine = this._scene.getPhysicsEngine() as any;\r\n        if (!this._physicsEngine) {\r\n            Logger.Error(\"Physics not enabled. Please use scene.enablePhysics(...) before creating impostors.\");\r\n        } else {\r\n            //set the object's quaternion, if not set\r\n            if (!this.object.rotationQuaternion) {\r\n                if (this.object.rotation) {\r\n                    this.object.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.object.rotation.y, this.object.rotation.x, this.object.rotation.z);\r\n                } else {\r\n                    this.object.rotationQuaternion = new Quaternion();\r\n                }\r\n            }\r\n            //default options params\r\n            this._options.mass = _options.mass === void 0 ? 0 : _options.mass;\r\n            this._options.friction = _options.friction === void 0 ? 0.2 : _options.friction;\r\n            this._options.restitution = _options.restitution === void 0 ? 0.2 : _options.restitution;\r\n            if (this.soft) {\r\n                //softbody mass must be above 0;\r\n                this._options.mass = this._options.mass > 0 ? this._options.mass : 1;\r\n                this._options.pressure = _options.pressure === void 0 ? 200 : _options.pressure;\r\n                this._options.stiffness = _options.stiffness === void 0 ? 1 : _options.stiffness;\r\n                this._options.velocityIterations = _options.velocityIterations === void 0 ? 20 : _options.velocityIterations;\r\n                this._options.positionIterations = _options.positionIterations === void 0 ? 20 : _options.positionIterations;\r\n                this._options.fixedPoints = _options.fixedPoints === void 0 ? 0 : _options.fixedPoints;\r\n                this._options.margin = _options.margin === void 0 ? 0 : _options.margin;\r\n                this._options.damping = _options.damping === void 0 ? 0 : _options.damping;\r\n                this._options.path = _options.path === void 0 ? null : _options.path;\r\n                this._options.shape = _options.shape === void 0 ? null : _options.shape;\r\n            }\r\n            this._joints = [];\r\n            //If the mesh has a parent, don't initialize the physicsBody. Instead wait for the parent to do that.\r\n            if (!this.object.parent || this._options.ignoreParent) {\r\n                this._init();\r\n            } else if (this.object.parent.physicsImpostor) {\r\n                Logger.Warn(\"You must affect impostors to children before affecting impostor to parent.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function will completely initialize this impostor.\r\n     * It will create a new body - but only if this mesh has no parent.\r\n     * If it has, this impostor will not be used other than to define the impostor\r\n     * of the child mesh.\r\n     * @internal\r\n     */\r\n    public _init() {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this._physicsEngine.removeImpostor(this);\r\n        this.physicsBody = null;\r\n        this._parent = this._parent || this._getPhysicsParent();\r\n        if (!this._isDisposed && (!this.parent || this._options.ignoreParent)) {\r\n            this._physicsEngine.addImpostor(this);\r\n        }\r\n    }\r\n\r\n    private _getPhysicsParent(): Nullable<PhysicsImpostor> {\r\n        if (this.object.parent instanceof AbstractMesh) {\r\n            const parentMesh: AbstractMesh = <AbstractMesh>this.object.parent;\r\n            return parentMesh.physicsImpostor;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Should a new body be generated.\r\n     * @returns boolean specifying if body initialization is required\r\n     */\r\n    public isBodyInitRequired(): boolean {\r\n        return this._bodyUpdateRequired || (!this._physicsBody && (!this._parent || !!this._options.ignoreParent));\r\n    }\r\n\r\n    /**\r\n     * Sets the updated scaling\r\n     */\r\n    public setScalingUpdated() {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Force a regeneration of this or the parent's impostor's body.\r\n     * Use with caution - This will remove all previously-instantiated joints.\r\n     */\r\n    public forceUpdate() {\r\n        this._init();\r\n        if (this.parent && !this._options.ignoreParent) {\r\n            this.parent.forceUpdate();\r\n        }\r\n    }\r\n\r\n    /*public get mesh(): AbstractMesh {\r\n        return this._mesh;\r\n    }*/\r\n\r\n    /**\r\n     * Gets the body that holds this impostor. Either its own, or its parent.\r\n     */\r\n    public get physicsBody(): any {\r\n        return this._parent && !this._options.ignoreParent ? this._parent.physicsBody : this._physicsBody;\r\n    }\r\n\r\n    /**\r\n     * Get the parent of the physics imposter\r\n     * @returns Physics imposter or null\r\n     */\r\n    public get parent(): Nullable<PhysicsImpostor> {\r\n        return !this._options.ignoreParent && this._parent ? this._parent : null;\r\n    }\r\n\r\n    /**\r\n     * Sets the parent of the physics imposter\r\n     */\r\n    public set parent(value: Nullable<PhysicsImpostor>) {\r\n        this._parent = value;\r\n    }\r\n\r\n    /**\r\n     * Set the physics body. Used mainly by the physics engine/plugin\r\n     */\r\n    public set physicsBody(physicsBody: any) {\r\n        if (this._physicsBody && this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().removePhysicsBody(this);\r\n        }\r\n        this._physicsBody = physicsBody;\r\n        this.resetUpdateFlags();\r\n    }\r\n\r\n    /**\r\n     * Resets the update flags\r\n     */\r\n    public resetUpdateFlags() {\r\n        this._bodyUpdateRequired = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the object extents\r\n     * @returns the object extents\r\n     */\r\n    public getObjectExtents(): Vector3 {\r\n        if (this.object.getBoundingInfo) {\r\n            const q = this.object.rotationQuaternion;\r\n            const scaling = this.object.scaling.clone();\r\n            //reset rotation\r\n            this.object.rotationQuaternion = PhysicsImpostor.IDENTITY_QUATERNION;\r\n            //calculate the world matrix with no rotation\r\n            const worldMatrix = this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\r\n            if (worldMatrix) {\r\n                worldMatrix.decompose(scaling, undefined, undefined);\r\n            }\r\n            const boundingInfo = this.object.getBoundingInfo();\r\n            // get the global scaling of the object\r\n            const size = boundingInfo.boundingBox.extendSize.scale(2).multiplyInPlace(scaling);\r\n            size.x = Math.abs(size.x);\r\n            size.y = Math.abs(size.y);\r\n            size.z = Math.abs(size.z);\r\n            //bring back the rotation\r\n            this.object.rotationQuaternion = q;\r\n            //calculate the world matrix with the new rotation\r\n            this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\r\n            return size;\r\n        } else {\r\n            return PhysicsImpostor.DEFAULT_OBJECT_SIZE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the object center\r\n     * @returns The object center\r\n     */\r\n    public getObjectCenter(): Vector3 {\r\n        if (this.object.getBoundingInfo) {\r\n            const boundingInfo = this.object.getBoundingInfo();\r\n            return boundingInfo.boundingBox.centerWorld;\r\n        } else {\r\n            return this.object.position;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a specific parameter from the options parameters\r\n     * @param paramName The object parameter name\r\n     * @returns The object parameter\r\n     */\r\n    public getParam(paramName: string): any {\r\n        return (<any>this._options)[paramName];\r\n    }\r\n\r\n    /**\r\n     * Sets a specific parameter in the options given to the physics plugin\r\n     * @param paramName The parameter name\r\n     * @param value The value of the parameter\r\n     */\r\n    public setParam(paramName: string, value: number) {\r\n        (<any>this._options)[paramName] = value;\r\n        this._bodyUpdateRequired = true;\r\n    }\r\n\r\n    /**\r\n     * Specifically change the body's mass. Won't recreate the physics body object\r\n     * @param mass The mass of the physics imposter\r\n     */\r\n    public setMass(mass: number) {\r\n        if (this.getParam(\"mass\") !== mass) {\r\n            this.setParam(\"mass\", mass);\r\n        }\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setBodyMass(this, mass);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the linear velocity\r\n     * @returns  linear velocity or null\r\n     */\r\n    public getLinearVelocity(): Nullable<Vector3> {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getLinearVelocity(this) : Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the linear velocity\r\n     * @param velocity  linear velocity or null\r\n     */\r\n    public setLinearVelocity(velocity: Nullable<Vector3>) {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setLinearVelocity(this, velocity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the angular velocity\r\n     * @returns angular velocity or null\r\n     */\r\n    public getAngularVelocity(): Nullable<Vector3> {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getAngularVelocity(this) : Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the angular velocity\r\n     * @param velocity The velocity or null\r\n     */\r\n    public setAngularVelocity(velocity: Nullable<Vector3>) {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setAngularVelocity(this, velocity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a function with the physics plugin native code\r\n     * Provide a function the will have two variables - the world object and the physics body object\r\n     * @param func The function to execute with the physics plugin native code\r\n     */\r\n    public executeNativeFunction(func: (world: any, physicsBody: any) => void) {\r\n        if (this._physicsEngine) {\r\n            func(this._physicsEngine.getPhysicsPlugin().world, this.physicsBody);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a function that will be executed before the physics world is stepping forward\r\n     * @param func The function to execute before the physics world is stepped forward\r\n     */\r\n    public registerBeforePhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        this._onBeforePhysicsStepCallbacks.push(func);\r\n    }\r\n\r\n    /**\r\n     * Unregister a function that will be executed before the physics world is stepping forward\r\n     * @param func The function to execute before the physics world is stepped forward\r\n     */\r\n    public unregisterBeforePhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        const index = this._onBeforePhysicsStepCallbacks.indexOf(func);\r\n\r\n        if (index > -1) {\r\n            this._onBeforePhysicsStepCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a function that will be executed after the physics step\r\n     * @param func The function to execute after physics step\r\n     */\r\n    public registerAfterPhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        this._onAfterPhysicsStepCallbacks.push(func);\r\n    }\r\n\r\n    /**\r\n     * Unregisters a function that will be executed after the physics step\r\n     * @param func The function to execute after physics step\r\n     */\r\n    public unregisterAfterPhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        const index = this._onAfterPhysicsStepCallbacks.indexOf(func);\r\n\r\n        if (index > -1) {\r\n            this._onAfterPhysicsStepCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * register a function that will be executed when this impostor collides against a different body\r\n     * @param collideAgainst Physics imposter, or array of physics imposters to collide against\r\n     * @param func Callback that is executed on collision\r\n     */\r\n    public registerOnPhysicsCollide(\r\n        collideAgainst: PhysicsImpostor | Array<PhysicsImpostor>,\r\n        func: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor, point: Nullable<Vector3>) => void\r\n    ): void {\r\n        const collidedAgainstList: Array<PhysicsImpostor> = collideAgainst instanceof Array ? <Array<PhysicsImpostor>>collideAgainst : [<PhysicsImpostor>collideAgainst];\r\n        this._onPhysicsCollideCallbacks.push({ callback: func, otherImpostors: collidedAgainstList });\r\n    }\r\n\r\n    /**\r\n     * Unregisters the physics imposter's collision callback\r\n     * @param collideAgainst The physics object to collide against\r\n     * @param func Callback to execute on collision\r\n     */\r\n    public unregisterOnPhysicsCollide(\r\n        collideAgainst: PhysicsImpostor | Array<PhysicsImpostor>,\r\n        func: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor | Array<PhysicsImpostor>, point: Nullable<Vector3>) => void\r\n    ): void {\r\n        const collidedAgainstList: Array<PhysicsImpostor> = collideAgainst instanceof Array ? <Array<PhysicsImpostor>>collideAgainst : [<PhysicsImpostor>collideAgainst];\r\n        let index = -1;\r\n        const found = this._onPhysicsCollideCallbacks.some((cbDef, idx) => {\r\n            if (cbDef.callback === func && cbDef.otherImpostors.length === collidedAgainstList.length) {\r\n                // chcek the arrays match\r\n                const sameList = cbDef.otherImpostors.every((impostor) => {\r\n                    return collidedAgainstList.indexOf(impostor) > -1;\r\n                });\r\n                if (sameList) {\r\n                    index = idx;\r\n                }\r\n                return sameList;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        if (found) {\r\n            this._onPhysicsCollideCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    //temp variables for parent rotation calculations\r\n    //private _mats: Array<Matrix> = [new Matrix(), new Matrix()];\r\n    private _tmpQuat: Quaternion = new Quaternion();\r\n    private _tmpQuat2: Quaternion = new Quaternion();\r\n\r\n    /**\r\n     * Get the parent rotation\r\n     * @returns The parent rotation\r\n     */\r\n    public getParentsRotation(): Quaternion {\r\n        let parent = this.object.parent;\r\n        this._tmpQuat.copyFromFloats(0, 0, 0, 1);\r\n        while (parent) {\r\n            if (parent.rotationQuaternion) {\r\n                this._tmpQuat2.copyFrom(parent.rotationQuaternion);\r\n            } else {\r\n                Quaternion.RotationYawPitchRollToRef(parent.rotation.y, parent.rotation.x, parent.rotation.z, this._tmpQuat2);\r\n            }\r\n            this._tmpQuat.multiplyToRef(this._tmpQuat2, this._tmpQuat);\r\n            parent = parent.parent;\r\n        }\r\n        return this._tmpQuat;\r\n    }\r\n\r\n    /**\r\n     * this function is executed by the physics engine.\r\n     */\r\n    public beforeStep = () => {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this.object.translate(this._deltaPosition, -1);\r\n        this._deltaRotationConjugated &&\r\n            this.object.rotationQuaternion &&\r\n            this.object.rotationQuaternion.multiplyToRef(this._deltaRotationConjugated, this.object.rotationQuaternion);\r\n        this.object.computeWorldMatrix(false);\r\n        if (this.object.parent && this.object.rotationQuaternion) {\r\n            this.getParentsRotation();\r\n            this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this._tmpQuat);\r\n        } else {\r\n            this._tmpQuat.copyFrom(this.object.rotationQuaternion || new Quaternion());\r\n        }\r\n        if (!this._options.disableBidirectionalTransformation) {\r\n            this.object.rotationQuaternion &&\r\n                this._physicsEngine.getPhysicsPlugin().setPhysicsBodyTransformation(this, /*bInfo.boundingBox.centerWorld*/ this.object.getAbsolutePosition(), this._tmpQuat);\r\n        }\r\n\r\n        this._onBeforePhysicsStepCallbacks.forEach((func) => {\r\n            func(this);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * this function is executed by the physics engine\r\n     */\r\n    public afterStep = () => {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this._onAfterPhysicsStepCallbacks.forEach((func) => {\r\n            func(this);\r\n        });\r\n\r\n        this._physicsEngine.getPhysicsPlugin().setTransformationFromPhysicsBody(this);\r\n        // object has now its world rotation. needs to be converted to local.\r\n        if (this.object.parent && this.object.rotationQuaternion) {\r\n            this.getParentsRotation();\r\n            this._tmpQuat.conjugateInPlace();\r\n            this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this.object.rotationQuaternion);\r\n        }\r\n        // take the position set and make it the absolute position of this object.\r\n        this.object.setAbsolutePosition(this.object.position);\r\n        if (this._deltaRotation) {\r\n            this.object.rotationQuaternion && this.object.rotationQuaternion.multiplyToRef(this._deltaRotation, this.object.rotationQuaternion);\r\n            this._deltaPosition.applyRotationQuaternionToRef(this._deltaRotation, PhysicsImpostor._TmpVecs[0]);\r\n            this.object.translate(PhysicsImpostor._TmpVecs[0], 1);\r\n        } else {\r\n            this.object.translate(this._deltaPosition, 1);\r\n        }\r\n        this.object.computeWorldMatrix(true);\r\n    };\r\n\r\n    /**\r\n     * Legacy collision detection event support\r\n     */\r\n    public onCollideEvent: Nullable<(collider: PhysicsImpostor, collidedWith: PhysicsImpostor) => void> = null;\r\n\r\n    /**\r\n     *  define an onCollide function to call when this impostor collides against a different body\r\n     * @param e collide event data\r\n     */\r\n    public onCollide = (e: { body: any; point: Nullable<Vector3>; distance: number; impulse: number; normal: Nullable<Vector3> }) => {\r\n        if (!this._onPhysicsCollideCallbacks.length && !this.onCollideEvent) {\r\n            return;\r\n        }\r\n\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const otherImpostor = this._physicsEngine.getImpostorWithPhysicsBody(e.body);\r\n        if (otherImpostor) {\r\n            // Legacy collision detection event support\r\n            if (this.onCollideEvent) {\r\n                this.onCollideEvent(this, otherImpostor);\r\n            }\r\n            this._onPhysicsCollideCallbacks\r\n                .filter((obj) => {\r\n                    return obj.otherImpostors.indexOf(<PhysicsImpostor>otherImpostor) !== -1;\r\n                })\r\n                .forEach((obj) => {\r\n                    obj.callback(this, <PhysicsImpostor>otherImpostor, e.point, e.distance, e.impulse, e.normal);\r\n                });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Apply a force\r\n     * @param force The force to apply\r\n     * @param contactPoint The contact point for the force\r\n     * @returns The physics imposter\r\n     */\r\n    public applyForce(force: Vector3, contactPoint: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().applyForce(this, force, contactPoint);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Apply an impulse\r\n     * @param force The impulse force\r\n     * @param contactPoint The contact point for the impulse force\r\n     * @returns The physics imposter\r\n     */\r\n    public applyImpulse(force: Vector3, contactPoint: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().applyImpulse(this, force, contactPoint);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * A help function to create a joint\r\n     * @param otherImpostor A physics imposter used to create a joint\r\n     * @param jointType The type of joint\r\n     * @param jointData The data for the joint\r\n     * @returns The physics imposter\r\n     */\r\n    public createJoint(otherImpostor: PhysicsImpostor, jointType: number, jointData: PhysicsJointData): PhysicsImpostor {\r\n        const joint = new PhysicsJoint(jointType, jointData);\r\n        this.addJoint(otherImpostor, joint);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a joint to this impostor with a different impostor\r\n     * @param otherImpostor A physics imposter used to add a joint\r\n     * @param joint The joint to add\r\n     * @returns The physics imposter\r\n     */\r\n    public addJoint(otherImpostor: PhysicsImpostor, joint: PhysicsJoint): PhysicsImpostor {\r\n        this._joints.push({\r\n            otherImpostor: otherImpostor,\r\n            joint: joint,\r\n        });\r\n\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.addJoint(this, otherImpostor, joint);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add an anchor to a cloth impostor\r\n     * @param otherImpostor rigid impostor to anchor to\r\n     * @param width ratio across width from 0 to 1\r\n     * @param height ratio up height from 0 to 1\r\n     * @param influence the elasticity between cloth impostor and anchor from 0, very stretchy to 1, little stretch\r\n     * @param noCollisionBetweenLinkedBodies when true collisions between cloth impostor and anchor are ignored; default false\r\n     * @returns impostor the soft imposter\r\n     */\r\n    public addAnchor(otherImpostor: PhysicsImpostor, width: number, height: number, influence: number, noCollisionBetweenLinkedBodies: boolean): PhysicsImpostor {\r\n        if (!this._physicsEngine) {\r\n            return this;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.appendAnchor) {\r\n            return this;\r\n        }\r\n        if (this._physicsEngine) {\r\n            plugin.appendAnchor!(this, otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a hook to a rope impostor\r\n     * @param otherImpostor rigid impostor to anchor to\r\n     * @param length ratio across rope from 0 to 1\r\n     * @param influence the elasticity between rope impostor and anchor from 0, very stretchy to 1, little stretch\r\n     * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\r\n     * @returns impostor the rope imposter\r\n     */\r\n    public addHook(otherImpostor: PhysicsImpostor, length: number, influence: number, noCollisionBetweenLinkedBodies: boolean): PhysicsImpostor {\r\n        if (!this._physicsEngine) {\r\n            return this;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.appendAnchor) {\r\n            return this;\r\n        }\r\n        if (this._physicsEngine) {\r\n            plugin.appendHook!(this, otherImpostor, length, influence, noCollisionBetweenLinkedBodies);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Will keep this body still, in a sleep mode.\r\n     * @returns the physics imposter\r\n     */\r\n    public sleep(): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().sleepBody(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Wake the body up.\r\n     * @returns The physics imposter\r\n     */\r\n    public wakeUp(): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().wakeUpBody(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clones the physics imposter\r\n     * @param newObject The physics imposter clones to this physics-enabled object\r\n     * @returns A nullable physics imposter\r\n     */\r\n    public clone(newObject: IPhysicsEnabledObject): Nullable<PhysicsImpostor> {\r\n        if (!newObject) {\r\n            return null;\r\n        }\r\n        return new PhysicsImpostor(newObject, this.type, this._options, this._scene);\r\n    }\r\n\r\n    /**\r\n     * Disposes the physics imposter\r\n     */\r\n    public dispose(/*disposeChildren: boolean = true*/) {\r\n        //no dispose if no physics engine is available.\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this._joints.forEach((j) => {\r\n            if (this._physicsEngine) {\r\n                this._physicsEngine.removeJoint(this, j.otherImpostor, j.joint);\r\n            }\r\n        });\r\n        //dispose the physics body\r\n        this._physicsEngine.removeImpostor(this);\r\n        if (this.parent) {\r\n            this.parent.forceUpdate();\r\n        } else {\r\n            /*this._object.getChildMeshes().forEach(function(mesh) {\r\n                if (mesh.physicsImpostor) {\r\n                    if (disposeChildren) {\r\n                        mesh.physicsImpostor.dispose();\r\n                        mesh.physicsImpostor = null;\r\n                    }\r\n                }\r\n            })*/\r\n        }\r\n\r\n        this._isDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the delta position\r\n     * @param position The delta position amount\r\n     */\r\n    public setDeltaPosition(position: Vector3) {\r\n        this._deltaPosition.copyFrom(position);\r\n    }\r\n\r\n    /**\r\n     * Sets the delta rotation\r\n     * @param rotation The delta rotation amount\r\n     */\r\n    public setDeltaRotation(rotation: Quaternion) {\r\n        if (!this._deltaRotation) {\r\n            this._deltaRotation = new Quaternion();\r\n        }\r\n        this._deltaRotation.copyFrom(rotation);\r\n        this._deltaRotationConjugated = this._deltaRotation.conjugate();\r\n    }\r\n\r\n    /**\r\n     * Gets the box size of the physics imposter and stores the result in the input parameter\r\n     * @param result Stores the box size\r\n     * @returns The physics imposter\r\n     */\r\n    public getBoxSizeToRef(result: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().getBoxSizeToRef(this, result);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the radius of the physics imposter\r\n     * @returns Radius of the physics imposter\r\n     */\r\n    public getRadius(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getRadius(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sync a bone with this impostor\r\n     * @param bone The bone to sync to the impostor.\r\n     * @param boneMesh The mesh that the bone is influencing.\r\n     * @param jointPivot The pivot of the joint / bone in local space.\r\n     * @param distToJoint Optional distance from the impostor to the joint.\r\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\r\n     */\r\n    public syncBoneWithImpostor(bone: Bone, boneMesh: AbstractMesh, jointPivot: Vector3, distToJoint?: number, adjustRotation?: Quaternion) {\r\n        const tempVec = PhysicsImpostor._TmpVecs[0];\r\n        const mesh = <AbstractMesh>this.object;\r\n\r\n        if (mesh.rotationQuaternion) {\r\n            if (adjustRotation) {\r\n                const tempQuat = PhysicsImpostor._TmpQuat;\r\n                mesh.rotationQuaternion.multiplyToRef(adjustRotation, tempQuat);\r\n                bone.setRotationQuaternion(tempQuat, Space.WORLD, boneMesh);\r\n            } else {\r\n                bone.setRotationQuaternion(mesh.rotationQuaternion, Space.WORLD, boneMesh);\r\n            }\r\n        }\r\n\r\n        tempVec.x = 0;\r\n        tempVec.y = 0;\r\n        tempVec.z = 0;\r\n\r\n        if (jointPivot) {\r\n            tempVec.x = jointPivot.x;\r\n            tempVec.y = jointPivot.y;\r\n            tempVec.z = jointPivot.z;\r\n\r\n            bone.getDirectionToRef(tempVec, boneMesh, tempVec);\r\n\r\n            if (distToJoint === undefined || distToJoint === null) {\r\n                distToJoint = jointPivot.length();\r\n            }\r\n\r\n            tempVec.x *= distToJoint;\r\n            tempVec.y *= distToJoint;\r\n            tempVec.z *= distToJoint;\r\n        }\r\n\r\n        if (bone.getParent()) {\r\n            tempVec.addInPlace(mesh.getAbsolutePosition());\r\n            bone.setAbsolutePosition(tempVec, boneMesh);\r\n        } else {\r\n            boneMesh.setAbsolutePosition(mesh.getAbsolutePosition());\r\n            boneMesh.position.x -= tempVec.x;\r\n            boneMesh.position.y -= tempVec.y;\r\n            boneMesh.position.z -= tempVec.z;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sync impostor to a bone\r\n     * @param bone The bone that the impostor will be synced to.\r\n     * @param boneMesh The mesh that the bone is influencing.\r\n     * @param jointPivot The pivot of the joint / bone in local space.\r\n     * @param distToJoint Optional distance from the impostor to the joint.\r\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\r\n     * @param boneAxis Optional vector3 axis the bone is aligned with\r\n     */\r\n    public syncImpostorWithBone(bone: Bone, boneMesh: AbstractMesh, jointPivot: Vector3, distToJoint?: number, adjustRotation?: Quaternion, boneAxis?: Vector3) {\r\n        const mesh = <AbstractMesh>this.object;\r\n\r\n        if (mesh.rotationQuaternion) {\r\n            if (adjustRotation) {\r\n                const tempQuat = PhysicsImpostor._TmpQuat;\r\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, tempQuat);\r\n                tempQuat.multiplyToRef(adjustRotation, mesh.rotationQuaternion);\r\n            } else {\r\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, mesh.rotationQuaternion);\r\n            }\r\n        }\r\n\r\n        const pos = PhysicsImpostor._TmpVecs[0];\r\n        const boneDir = PhysicsImpostor._TmpVecs[1];\r\n\r\n        if (!boneAxis) {\r\n            boneAxis = PhysicsImpostor._TmpVecs[2];\r\n            boneAxis.x = 0;\r\n            boneAxis.y = 1;\r\n            boneAxis.z = 0;\r\n        }\r\n\r\n        bone.getDirectionToRef(boneAxis, boneMesh, boneDir);\r\n        bone.getAbsolutePositionToRef(boneMesh, pos);\r\n\r\n        if ((distToJoint === undefined || distToJoint === null) && jointPivot) {\r\n            distToJoint = jointPivot.length();\r\n        }\r\n\r\n        if (distToJoint !== undefined && distToJoint !== null) {\r\n            pos.x += boneDir.x * distToJoint;\r\n            pos.y += boneDir.y * distToJoint;\r\n            pos.z += boneDir.z * distToJoint;\r\n        }\r\n\r\n        mesh.setAbsolutePosition(pos);\r\n    }\r\n\r\n    //Impostor types\r\n    /**\r\n     * No-Imposter type\r\n     */\r\n    public static NoImpostor = 0;\r\n    /**\r\n     * Sphere-Imposter type\r\n     */\r\n    public static SphereImpostor = 1;\r\n    /**\r\n     * Box-Imposter type\r\n     */\r\n    public static BoxImpostor = 2;\r\n    /**\r\n     * Plane-Imposter type\r\n     */\r\n    public static PlaneImpostor = 3;\r\n    /**\r\n     * Mesh-imposter type (Only available to objects with vertices data)\r\n     */\r\n    public static MeshImpostor = 4;\r\n    /**\r\n     * Capsule-Impostor type (Ammo.js plugin only)\r\n     */\r\n    public static CapsuleImpostor = 6;\r\n    /**\r\n     * Cylinder-Imposter type\r\n     */\r\n    public static CylinderImpostor = 7;\r\n    /**\r\n     * Particle-Imposter type\r\n     */\r\n    public static ParticleImpostor = 8;\r\n    /**\r\n     * Heightmap-Imposter type\r\n     */\r\n    public static HeightmapImpostor = 9;\r\n    /**\r\n     * ConvexHull-Impostor type (Ammo.js plugin only)\r\n     */\r\n    public static ConvexHullImpostor = 10;\r\n    /**\r\n     * Custom-Imposter type (Ammo.js plugin only)\r\n     */\r\n    public static CustomImpostor = 100;\r\n    /**\r\n     * Rope-Imposter type\r\n     */\r\n    public static RopeImpostor = 101;\r\n    /**\r\n     * Cloth-Imposter type\r\n     */\r\n    public static ClothImpostor = 102;\r\n    /**\r\n     * Softbody-Imposter type\r\n     */\r\n    public static SoftbodyImpostor = 103;\r\n}\r\n", "import { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { AnimationGroup } from \"../Animations/animationGroup\";\r\nimport type { AssetContainer } from \"../assetContainer\";\r\nimport type { IParticleSystem } from \"../Particles/IParticleSystem\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { SceneLoaderFlags } from \"./sceneLoaderFlags\";\r\nimport type { IFileRequest } from \"../Misc/fileRequest\";\r\nimport type { WebRequest } from \"../Misc/webRequest\";\r\nimport type { LoadFileError } from \"../Misc/fileTools\";\r\nimport { IsBase64DataUrl } from \"../Misc/fileTools\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { Geometry } from \"../Meshes/geometry\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport { RuntimeError, ErrorCodes } from \"../Misc/error\";\r\nimport type { ISpriteManager } from \"../Sprites/spriteManager\";\r\nimport { RandomGUID } from \"../Misc/guid\";\r\n\r\n/**\r\n * Type used for the success callback of ImportMesh\r\n */\r\nexport type SceneLoaderSuccessCallback = (\r\n    meshes: AbstractMesh[],\r\n    particleSystems: IParticleSystem[],\r\n    skeletons: Skeleton[],\r\n    animationGroups: AnimationGroup[],\r\n    transformNodes: TransformNode[],\r\n    geometries: Geometry[],\r\n    lights: Light[],\r\n    spriteManagers: ISpriteManager[]\r\n) => void;\r\n\r\n/**\r\n * Interface used for the result of ImportMeshAsync\r\n */\r\nexport interface ISceneLoaderAsyncResult {\r\n    /**\r\n     * The array of loaded meshes\r\n     */\r\n    readonly meshes: AbstractMesh[];\r\n\r\n    /**\r\n     * The array of loaded particle systems\r\n     */\r\n    readonly particleSystems: IParticleSystem[];\r\n\r\n    /**\r\n     * The array of loaded skeletons\r\n     */\r\n    readonly skeletons: Skeleton[];\r\n\r\n    /**\r\n     * The array of loaded animation groups\r\n     */\r\n    readonly animationGroups: AnimationGroup[];\r\n\r\n    /**\r\n     * The array of loaded transform nodes\r\n     */\r\n    readonly transformNodes: TransformNode[];\r\n\r\n    /**\r\n     * The array of loaded geometries\r\n     */\r\n    readonly geometries: Geometry[];\r\n\r\n    /**\r\n     * The array of loaded lights\r\n     */\r\n    readonly lights: Light[];\r\n\r\n    /**\r\n     * The array of loaded sprite managers\r\n     */\r\n    readonly spriteManagers: ISpriteManager[];\r\n}\r\n\r\n/**\r\n * Interface used to represent data loading progression\r\n */\r\nexport interface ISceneLoaderProgressEvent {\r\n    /**\r\n     * Defines if data length to load can be evaluated\r\n     */\r\n    readonly lengthComputable: boolean;\r\n\r\n    /**\r\n     * Defines the loaded data length\r\n     */\r\n    readonly loaded: number;\r\n\r\n    /**\r\n     * Defines the data length to load\r\n     */\r\n    readonly total: number;\r\n}\r\n\r\n/**\r\n * Interface used by SceneLoader plugins to define supported file extensions\r\n */\r\nexport interface ISceneLoaderPluginExtensions {\r\n    /**\r\n     * Defines the list of supported extensions\r\n     */\r\n    [extension: string]: {\r\n        isBinary: boolean;\r\n    };\r\n}\r\n\r\n/**\r\n * Interface used by SceneLoader plugin factory\r\n */\r\nexport interface ISceneLoaderPluginFactory {\r\n    /**\r\n     * Defines the name of the factory\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Function called to create a new plugin\r\n     * @returns the new plugin\r\n     */\r\n    createPlugin(): ISceneLoaderPlugin | ISceneLoaderPluginAsync;\r\n\r\n    /**\r\n     * The callback that returns true if the data can be directly loaded.\r\n     * @param data string containing the file data\r\n     * @returns if the data can be loaded directly\r\n     */\r\n    canDirectLoad?(data: string): boolean;\r\n}\r\n\r\n/**\r\n * Interface used to define the base of ISceneLoaderPlugin and ISceneLoaderPluginAsync\r\n */\r\nexport interface ISceneLoaderPluginBase {\r\n    /**\r\n     * The friendly name of this plugin.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The file extensions supported by this plugin.\r\n     */\r\n    extensions: string | ISceneLoaderPluginExtensions;\r\n\r\n    /**\r\n     * The callback called when loading from a url.\r\n     * @param scene scene loading this url\r\n     * @param fileOrUrl file or url to load\r\n     * @param rootUrl root url to use to load assets\r\n     * @param onSuccess callback called when the file successfully loads\r\n     * @param onProgress callback called while file is loading (if the server supports this mode)\r\n     * @param useArrayBuffer defines a boolean indicating that date must be returned as ArrayBuffer\r\n     * @param onError callback called when the file fails to load\r\n     * @param name defines the name of the file when loading a binary file\r\n     * @returns a file request object\r\n     */\r\n    loadFile?(\r\n        scene: Scene,\r\n        fileOrUrl: File | string | ArrayBufferView,\r\n        rootUrl: string,\r\n        onSuccess: (data: any, responseURL?: string) => void,\r\n        onProgress?: (ev: ISceneLoaderProgressEvent) => void,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        name?: string\r\n    ): Nullable<IFileRequest>;\r\n\r\n    /**\r\n     * The callback that returns true if the data can be directly loaded.\r\n     * @param data string containing the file data\r\n     * @returns if the data can be loaded directly\r\n     */\r\n    canDirectLoad?(data: string): boolean;\r\n\r\n    /**\r\n     * The callback that returns the data to pass to the plugin if the data can be directly loaded.\r\n     * @param scene scene loading this data\r\n     * @param data string containing the data\r\n     * @returns data to pass to the plugin\r\n     */\r\n    directLoad?(scene: Scene, data: string): any;\r\n\r\n    /**\r\n     * The callback that allows custom handling of the root url based on the response url.\r\n     * @param rootUrl the original root url\r\n     * @param responseURL the response url if available\r\n     * @returns the new root url\r\n     */\r\n    rewriteRootURL?(rootUrl: string, responseURL?: string): string;\r\n}\r\n\r\n/**\r\n * Interface used to define a SceneLoader plugin\r\n */\r\nexport interface ISceneLoaderPlugin extends ISceneLoaderPluginBase {\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param meshes The meshes array to import into\r\n     * @param particleSystems The particle systems array to import into\r\n     * @param skeletons The skeletons array to import into\r\n     * @param onError The callback when import fails\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    importMesh(\r\n        meshesNames: any,\r\n        scene: Scene,\r\n        data: any,\r\n        rootUrl: string,\r\n        meshes: AbstractMesh[],\r\n        particleSystems: IParticleSystem[],\r\n        skeletons: Skeleton[],\r\n        onError?: (message: string, exception?: any) => void\r\n    ): boolean;\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onError The callback when import fails\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    load(scene: Scene, data: any, rootUrl: string, onError?: (message: string, exception?: any) => void): boolean;\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onError The callback when import fails\r\n     * @returns The loaded asset container\r\n     */\r\n    loadAssetContainer(scene: Scene, data: any, rootUrl: string, onError?: (message: string, exception?: any) => void): AssetContainer;\r\n}\r\n\r\n/**\r\n * Interface used to define an async SceneLoader plugin\r\n */\r\nexport interface ISceneLoaderPluginAsync extends ISceneLoaderPluginBase {\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onProgress The callback when the load progresses\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns The loaded objects (e.g. meshes, particle systems, skeletons, animation groups, etc.)\r\n     */\r\n    importMeshAsync(\r\n        meshesNames: any,\r\n        scene: Scene,\r\n        data: any,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ): Promise<ISceneLoaderAsyncResult>;\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onProgress The callback when the load progresses\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns Nothing\r\n     */\r\n    loadAsync(scene: Scene, data: any, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string): Promise<void>;\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onProgress The callback when the load progresses\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns The loaded asset container\r\n     */\r\n    loadAssetContainerAsync(scene: Scene, data: any, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string): Promise<AssetContainer>;\r\n}\r\n\r\n/**\r\n * Mode that determines how to handle old animation groups before loading new ones.\r\n */\r\nexport enum SceneLoaderAnimationGroupLoadingMode {\r\n    /**\r\n     * Reset all old animations to initial state then dispose them.\r\n     */\r\n    Clean = 0,\r\n\r\n    /**\r\n     * Stop all old animations.\r\n     */\r\n    Stop = 1,\r\n\r\n    /**\r\n     * Restart old animations from first frame.\r\n     */\r\n    Sync = 2,\r\n\r\n    /**\r\n     * Old animations remains untouched.\r\n     */\r\n    NoSync = 3,\r\n}\r\n\r\n/**\r\n * Defines a plugin registered by the SceneLoader\r\n */\r\ninterface IRegisteredPlugin {\r\n    /**\r\n     * Defines the plugin to use\r\n     */\r\n    plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync | ISceneLoaderPluginFactory;\r\n    /**\r\n     * Defines if the plugin supports binary data\r\n     */\r\n    isBinary: boolean;\r\n}\r\n\r\n/**\r\n * Defines file information\r\n */\r\ninterface IFileInfo {\r\n    /**\r\n     * Gets the file url\r\n     */\r\n    url: string;\r\n    /**\r\n     * Gets the root url\r\n     */\r\n    rootUrl: string;\r\n    /**\r\n     * Gets filename\r\n     */\r\n    name: string;\r\n    /**\r\n     * Gets the file\r\n     */\r\n    file: Nullable<File>;\r\n\r\n    /**\r\n     * Gets raw binary data.\r\n     */\r\n    rawData: Nullable<ArrayBufferView>;\r\n}\r\n\r\n/**\r\n * Class used to load scene from various file formats using registered plugins\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/loadingFileTypes\r\n */\r\nexport class SceneLoader {\r\n    /**\r\n     * No logging while loading\r\n     */\r\n    public static readonly NO_LOGGING = Constants.SCENELOADER_NO_LOGGING;\r\n\r\n    /**\r\n     * Minimal logging while loading\r\n     */\r\n    public static readonly MINIMAL_LOGGING = Constants.SCENELOADER_MINIMAL_LOGGING;\r\n\r\n    /**\r\n     * Summary logging while loading\r\n     */\r\n    public static readonly SUMMARY_LOGGING = Constants.SCENELOADER_SUMMARY_LOGGING;\r\n\r\n    /**\r\n     * Detailed logging while loading\r\n     */\r\n    public static readonly DETAILED_LOGGING = Constants.SCENELOADER_DETAILED_LOGGING;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if entire scene must be loaded even if scene contains incremental data\r\n     */\r\n    public static get ForceFullSceneLoadingForIncremental() {\r\n        return SceneLoaderFlags.ForceFullSceneLoadingForIncremental;\r\n    }\r\n\r\n    public static set ForceFullSceneLoadingForIncremental(value: boolean) {\r\n        SceneLoaderFlags.ForceFullSceneLoadingForIncremental = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if loading screen must be displayed while loading a scene\r\n     */\r\n    public static get ShowLoadingScreen(): boolean {\r\n        return SceneLoaderFlags.ShowLoadingScreen;\r\n    }\r\n\r\n    public static set ShowLoadingScreen(value: boolean) {\r\n        SceneLoaderFlags.ShowLoadingScreen = value;\r\n    }\r\n\r\n    /**\r\n     * Defines the current logging level (while loading the scene)\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static get loggingLevel(): number {\r\n        return SceneLoaderFlags.loggingLevel;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static set loggingLevel(value: number) {\r\n        SceneLoaderFlags.loggingLevel = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set a boolean indicating if matrix weights must be cleaned upon loading\r\n     */\r\n    public static get CleanBoneMatrixWeights(): boolean {\r\n        return SceneLoaderFlags.CleanBoneMatrixWeights;\r\n    }\r\n\r\n    public static set CleanBoneMatrixWeights(value: boolean) {\r\n        SceneLoaderFlags.CleanBoneMatrixWeights = value;\r\n    }\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Event raised when a plugin is used to load a scene\r\n     */\r\n    public static OnPluginActivatedObservable = new Observable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>();\r\n\r\n    private static _RegisteredPlugins: { [extension: string]: IRegisteredPlugin } = {};\r\n\r\n    private static _ShowingLoadingScreen = false;\r\n\r\n    /**\r\n     * Gets the default plugin (used to load Babylon files)\r\n     * @returns the .babylon plugin\r\n     */\r\n    public static GetDefaultPlugin(): IRegisteredPlugin {\r\n        return SceneLoader._RegisteredPlugins[\".babylon\"];\r\n    }\r\n\r\n    private static _GetPluginForExtension(extension: string): IRegisteredPlugin {\r\n        const registeredPlugin = SceneLoader._RegisteredPlugins[extension];\r\n        if (registeredPlugin) {\r\n            return registeredPlugin;\r\n        }\r\n        Logger.Warn(\r\n            \"Unable to find a plugin to load \" +\r\n                extension +\r\n                \" files. Trying to use .babylon default plugin. To load from a specific filetype (eg. gltf) see: https://doc.babylonjs.com/features/featuresDeepDive/importers/loadingFileTypes\"\r\n        );\r\n        return SceneLoader.GetDefaultPlugin();\r\n    }\r\n\r\n    private static _GetPluginForDirectLoad(data: string): IRegisteredPlugin {\r\n        for (const extension in SceneLoader._RegisteredPlugins) {\r\n            const plugin = SceneLoader._RegisteredPlugins[extension].plugin;\r\n\r\n            if (plugin.canDirectLoad && plugin.canDirectLoad(data)) {\r\n                return SceneLoader._RegisteredPlugins[extension];\r\n            }\r\n        }\r\n\r\n        return SceneLoader.GetDefaultPlugin();\r\n    }\r\n\r\n    private static _GetPluginForFilename(sceneFilename: string): IRegisteredPlugin {\r\n        const queryStringPosition = sceneFilename.indexOf(\"?\");\r\n\r\n        if (queryStringPosition !== -1) {\r\n            sceneFilename = sceneFilename.substring(0, queryStringPosition);\r\n        }\r\n\r\n        const dotPosition = sceneFilename.lastIndexOf(\".\");\r\n\r\n        const extension = sceneFilename.substring(dotPosition, sceneFilename.length).toLowerCase();\r\n        return SceneLoader._GetPluginForExtension(extension);\r\n    }\r\n\r\n    private static _GetDirectLoad(sceneFilename: string): Nullable<string> {\r\n        if (sceneFilename.substr(0, 5) === \"data:\") {\r\n            return sceneFilename.substr(5);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private static _FormatErrorMessage(fileInfo: IFileInfo, message?: string, exception?: any): string {\r\n        const fromLoad = fileInfo.rawData ? \"binary data\" : fileInfo.url;\r\n        let errorMessage = \"Unable to load from \" + fromLoad;\r\n\r\n        if (message) {\r\n            errorMessage += `: ${message}`;\r\n        } else if (exception) {\r\n            errorMessage += `: ${exception}`;\r\n        }\r\n\r\n        return errorMessage;\r\n    }\r\n\r\n    private static _LoadData(\r\n        fileInfo: IFileInfo,\r\n        scene: Scene,\r\n        onSuccess: (plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync, data: any, responseURL?: string) => void,\r\n        onProgress: ((event: ISceneLoaderProgressEvent) => void) | undefined,\r\n        onError: (message?: string, exception?: any) => void,\r\n        onDispose: () => void,\r\n        pluginExtension: Nullable<string>,\r\n        name: string\r\n    ): Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync> {\r\n        const directLoad = SceneLoader._GetDirectLoad(fileInfo.url);\r\n\r\n        if (fileInfo.rawData && !pluginExtension) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"When using ArrayBufferView to load data the file extension must be provided.\";\r\n        }\r\n\r\n        const registeredPlugin = pluginExtension\r\n            ? SceneLoader._GetPluginForExtension(pluginExtension)\r\n            : directLoad\r\n              ? SceneLoader._GetPluginForDirectLoad(fileInfo.url)\r\n              : SceneLoader._GetPluginForFilename(fileInfo.url);\r\n\r\n        if (fileInfo.rawData && !registeredPlugin.isBinary) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"Loading from ArrayBufferView can not be used with plugins that don't support binary loading.\";\r\n        }\r\n\r\n        let plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync;\r\n\r\n        if ((registeredPlugin.plugin as ISceneLoaderPluginFactory).createPlugin !== undefined) {\r\n            plugin = (registeredPlugin.plugin as ISceneLoaderPluginFactory).createPlugin();\r\n        } else {\r\n            plugin = <any>registeredPlugin.plugin;\r\n        }\r\n\r\n        if (!plugin) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"The loader plugin corresponding to the file type you are trying to load has not been found. If using es6, please import the plugin you wish to use before.\";\r\n        }\r\n\r\n        SceneLoader.OnPluginActivatedObservable.notifyObservers(plugin);\r\n\r\n        // Check if we have a direct load url. If the plugin is registered to handle\r\n        // it or it's not a base64 data url, then pass it through the direct load path.\r\n        if (directLoad && ((plugin.canDirectLoad && plugin.canDirectLoad(fileInfo.url)) || !IsBase64DataUrl(fileInfo.url))) {\r\n            if (plugin.directLoad) {\r\n                const result = plugin.directLoad(scene, directLoad);\r\n                if (result.then) {\r\n                    result\r\n                        .then((data: any) => {\r\n                            onSuccess(plugin, data);\r\n                        })\r\n                        .catch((error: any) => {\r\n                            onError(\"Error in directLoad of _loadData: \" + error, error);\r\n                        });\r\n                } else {\r\n                    onSuccess(plugin, result);\r\n                }\r\n            } else {\r\n                onSuccess(plugin, directLoad);\r\n            }\r\n            return plugin;\r\n        }\r\n\r\n        const useArrayBuffer = registeredPlugin.isBinary;\r\n\r\n        const dataCallback = (data: any, responseURL?: string) => {\r\n            if (scene.isDisposed) {\r\n                onError(\"Scene has been disposed\");\r\n                return;\r\n            }\r\n\r\n            onSuccess(plugin, data, responseURL);\r\n        };\r\n\r\n        let request: Nullable<IFileRequest> = null;\r\n        let pluginDisposed = false;\r\n        const onDisposeObservable = (plugin as any).onDisposeObservable as Observable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>;\r\n        if (onDisposeObservable) {\r\n            onDisposeObservable.add(() => {\r\n                pluginDisposed = true;\r\n\r\n                if (request) {\r\n                    request.abort();\r\n                    request = null;\r\n                }\r\n\r\n                onDispose();\r\n            });\r\n        }\r\n\r\n        const manifestChecked = () => {\r\n            if (pluginDisposed) {\r\n                return;\r\n            }\r\n\r\n            const errorCallback = (request?: WebRequest, exception?: LoadFileError) => {\r\n                onError(request?.statusText, exception);\r\n            };\r\n\r\n            if (!plugin.loadFile && fileInfo.rawData) {\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw \"Plugin does not support loading ArrayBufferView.\";\r\n            }\r\n\r\n            request = plugin.loadFile\r\n                ? plugin.loadFile(scene, fileInfo.rawData || fileInfo.file || fileInfo.url, fileInfo.rootUrl, dataCallback, onProgress, useArrayBuffer, errorCallback, name)\r\n                : scene._loadFile(fileInfo.file || fileInfo.url, dataCallback, onProgress, true, useArrayBuffer, errorCallback);\r\n        };\r\n\r\n        const engine = scene.getEngine();\r\n        let canUseOfflineSupport = engine.enableOfflineSupport;\r\n        if (canUseOfflineSupport) {\r\n            // Also check for exceptions\r\n            let exceptionFound = false;\r\n            for (const regex of scene.disableOfflineSupportExceptionRules) {\r\n                if (regex.test(fileInfo.url)) {\r\n                    exceptionFound = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            canUseOfflineSupport = !exceptionFound;\r\n        }\r\n\r\n        if (canUseOfflineSupport && Engine.OfflineProviderFactory) {\r\n            // Checking if a manifest file has been set for this scene and if offline mode has been requested\r\n            scene.offlineProvider = Engine.OfflineProviderFactory(fileInfo.url, manifestChecked, engine.disableManifestCheck);\r\n        } else {\r\n            manifestChecked();\r\n        }\r\n\r\n        return plugin;\r\n    }\r\n\r\n    private static _GetFileInfo(rootUrl: string, sceneFilename: string | File | ArrayBufferView): Nullable<IFileInfo> {\r\n        let url: string;\r\n        let name: string;\r\n        let file: Nullable<File> = null;\r\n        let rawData: Nullable<ArrayBufferView> = null;\r\n\r\n        if (!sceneFilename) {\r\n            url = rootUrl;\r\n            name = Tools.GetFilename(rootUrl);\r\n            rootUrl = Tools.GetFolderPath(rootUrl);\r\n        } else if ((sceneFilename as File).name) {\r\n            const sceneFile = sceneFilename as File;\r\n            url = `file:${sceneFile.name}`;\r\n            name = sceneFile.name;\r\n            file = sceneFile;\r\n        } else if (ArrayBuffer.isView(sceneFilename)) {\r\n            url = \"\";\r\n            name = RandomGUID();\r\n            rawData = sceneFilename as ArrayBufferView;\r\n        } else if (typeof sceneFilename === \"string\" && sceneFilename.startsWith(\"data:\")) {\r\n            url = sceneFilename;\r\n            name = \"\";\r\n        } else {\r\n            const filename = sceneFilename as string;\r\n            if (filename.substr(0, 1) === \"/\") {\r\n                Tools.Error(\"Wrong sceneFilename parameter\");\r\n                return null;\r\n            }\r\n\r\n            url = rootUrl + filename;\r\n            name = filename;\r\n        }\r\n\r\n        return {\r\n            url: url,\r\n            rootUrl: rootUrl,\r\n            name: name,\r\n            file: file,\r\n            rawData,\r\n        };\r\n    }\r\n\r\n    // Public functions\r\n\r\n    /**\r\n     * Gets a plugin that can load the given extension\r\n     * @param extension defines the extension to load\r\n     * @returns a plugin or null if none works\r\n     */\r\n    public static GetPluginForExtension(extension: string): ISceneLoaderPlugin | ISceneLoaderPluginAsync | ISceneLoaderPluginFactory {\r\n        return SceneLoader._GetPluginForExtension(extension).plugin;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the given extension can be loaded\r\n     * @param extension defines the extension to load\r\n     * @returns true if the extension is supported\r\n     */\r\n    public static IsPluginForExtensionAvailable(extension: string): boolean {\r\n        return !!SceneLoader._RegisteredPlugins[extension];\r\n    }\r\n\r\n    /**\r\n     * Adds a new plugin to the list of registered plugins\r\n     * @param plugin defines the plugin to add\r\n     */\r\n    public static RegisterPlugin(plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync): void {\r\n        if (typeof plugin.extensions === \"string\") {\r\n            const extension = <string>plugin.extensions;\r\n            SceneLoader._RegisteredPlugins[extension.toLowerCase()] = {\r\n                plugin: plugin,\r\n                isBinary: false,\r\n            };\r\n        } else {\r\n            const extensions = <ISceneLoaderPluginExtensions>plugin.extensions;\r\n            Object.keys(extensions).forEach((extension) => {\r\n                SceneLoader._RegisteredPlugins[extension.toLowerCase()] = {\r\n                    plugin: plugin,\r\n                    isBinary: extensions[extension].isBinary,\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Import meshes into a scene\r\n     * @param meshNames an array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene the instance of BABYLON.Scene to append to\r\n     * @param onSuccess a callback with a list of imported meshes, particleSystems, skeletons, and animationGroups when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file, if the data is binary\r\n     * @returns The loaded plugin\r\n     */\r\n    public static ImportMesh(\r\n        meshNames: any,\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        onSuccess: Nullable<SceneLoaderSuccessCallback> = null,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync> {\r\n        if (!scene) {\r\n            Logger.Error(\"No scene available to import mesh to\");\r\n            return null;\r\n        }\r\n\r\n        const fileInfo = SceneLoader._GetFileInfo(rootUrl, sceneFilename);\r\n        if (!fileInfo) {\r\n            return null;\r\n        }\r\n\r\n        const loadingToken = {};\r\n        scene.addPendingData(loadingToken);\r\n\r\n        const disposeHandler = () => {\r\n            scene.removePendingData(loadingToken);\r\n        };\r\n\r\n        const errorHandler = (message?: string, exception?: any) => {\r\n            const errorMessage = SceneLoader._FormatErrorMessage(fileInfo, message, exception);\r\n\r\n            if (onError) {\r\n                onError(scene, errorMessage, new RuntimeError(errorMessage, ErrorCodes.SceneLoaderError, exception));\r\n            } else {\r\n                Logger.Error(errorMessage);\r\n                // should the exception be thrown?\r\n            }\r\n\r\n            disposeHandler();\r\n        };\r\n\r\n        const progressHandler = onProgress\r\n            ? (event: ISceneLoaderProgressEvent) => {\r\n                  try {\r\n                      onProgress(event);\r\n                  } catch (e) {\r\n                      errorHandler(\"Error in onProgress callback: \" + e, e);\r\n                  }\r\n              }\r\n            : undefined;\r\n\r\n        const successHandler: SceneLoaderSuccessCallback = (meshes, particleSystems, skeletons, animationGroups, transformNodes, geometries, lights, spriteManagers) => {\r\n            scene.importedMeshesFiles.push(fileInfo.url);\r\n\r\n            if (onSuccess) {\r\n                try {\r\n                    onSuccess(meshes, particleSystems, skeletons, animationGroups, transformNodes, geometries, lights, spriteManagers);\r\n                } catch (e) {\r\n                    errorHandler(\"Error in onSuccess callback: \" + e, e);\r\n                }\r\n            }\r\n\r\n            scene.removePendingData(loadingToken);\r\n        };\r\n\r\n        return SceneLoader._LoadData(\r\n            fileInfo,\r\n            scene,\r\n            (plugin, data, responseURL) => {\r\n                if (plugin.rewriteRootURL) {\r\n                    fileInfo.rootUrl = plugin.rewriteRootURL(fileInfo.rootUrl, responseURL);\r\n                }\r\n\r\n                if ((<any>plugin).importMesh) {\r\n                    const syncedPlugin = <ISceneLoaderPlugin>plugin;\r\n                    const meshes: AbstractMesh[] = [];\r\n                    const particleSystems: IParticleSystem[] = [];\r\n                    const skeletons: Skeleton[] = [];\r\n\r\n                    if (!syncedPlugin.importMesh(meshNames, scene, data, fileInfo.rootUrl, meshes, particleSystems, skeletons, errorHandler)) {\r\n                        return;\r\n                    }\r\n\r\n                    scene.loadingPluginName = plugin.name;\r\n                    successHandler(meshes, particleSystems, skeletons, [], [], [], [], []);\r\n                } else {\r\n                    const asyncedPlugin = <ISceneLoaderPluginAsync>plugin;\r\n                    asyncedPlugin\r\n                        .importMeshAsync(meshNames, scene, data, fileInfo.rootUrl, progressHandler, fileInfo.name)\r\n                        .then((result) => {\r\n                            scene.loadingPluginName = plugin.name;\r\n                            successHandler(\r\n                                result.meshes,\r\n                                result.particleSystems,\r\n                                result.skeletons,\r\n                                result.animationGroups,\r\n                                result.transformNodes,\r\n                                result.geometries,\r\n                                result.lights,\r\n                                result.spriteManagers\r\n                            );\r\n                        })\r\n                        .catch((error) => {\r\n                            errorHandler(error.message, error);\r\n                        });\r\n                }\r\n            },\r\n            progressHandler,\r\n            errorHandler,\r\n            disposeHandler,\r\n            pluginExtension,\r\n            name\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Import meshes into a scene\r\n     * @param meshNames an array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene the instance of BABYLON.Scene to append to\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file\r\n     * @returns The loaded list of imported meshes, particle systems, skeletons, and animation groups\r\n     */\r\n    public static ImportMeshAsync(\r\n        meshNames: any,\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        return new Promise((resolve, reject) => {\r\n            SceneLoader.ImportMesh(\r\n                meshNames,\r\n                rootUrl,\r\n                sceneFilename,\r\n                scene,\r\n                (meshes, particleSystems, skeletons, animationGroups, transformNodes, geometries, lights, spriteManagers) => {\r\n                    resolve({\r\n                        meshes: meshes,\r\n                        particleSystems: particleSystems,\r\n                        skeletons: skeletons,\r\n                        animationGroups: animationGroups,\r\n                        transformNodes: transformNodes,\r\n                        geometries: geometries,\r\n                        lights: lights,\r\n                        spriteManagers: spriteManagers,\r\n                    });\r\n                },\r\n                onProgress,\r\n                (scene, message, exception) => {\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension,\r\n                name\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param engine is the instance of BABYLON.Engine to use to create the scene\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @returns The loaded plugin\r\n     */\r\n    public static Load(\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        engine: Nullable<Engine> = EngineStore.LastCreatedEngine,\r\n        onSuccess: Nullable<(scene: Scene) => void> = null,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync> {\r\n        if (!engine) {\r\n            Tools.Error(\"No engine available\");\r\n            return null;\r\n        }\r\n\r\n        return SceneLoader.Append(rootUrl, sceneFilename, new Scene(engine), onSuccess, onProgress, onError, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Load a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param engine is the instance of BABYLON.Engine to use to create the scene\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @returns The loaded scene\r\n     */\r\n    public static LoadAsync(\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        engine: Nullable<Engine> = EngineStore.LastCreatedEngine,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Promise<Scene> {\r\n        return new Promise((resolve, reject) => {\r\n            SceneLoader.Load(\r\n                rootUrl,\r\n                sceneFilename,\r\n                engine,\r\n                (scene) => {\r\n                    resolve(scene);\r\n                },\r\n                onProgress,\r\n                (scene, message, exception) => {\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension,\r\n                name\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Append a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file, if the data is binary\r\n     * @returns The loaded plugin\r\n     */\r\n    public static Append(\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        onSuccess: Nullable<(scene: Scene) => void> = null,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync> {\r\n        if (!scene) {\r\n            Logger.Error(\"No scene available to append to\");\r\n            return null;\r\n        }\r\n\r\n        const fileInfo = SceneLoader._GetFileInfo(rootUrl, sceneFilename);\r\n        if (!fileInfo) {\r\n            return null;\r\n        }\r\n\r\n        const loadingToken = {};\r\n        scene.addPendingData(loadingToken);\r\n\r\n        const disposeHandler = () => {\r\n            scene.removePendingData(loadingToken);\r\n        };\r\n\r\n        if (SceneLoader.ShowLoadingScreen && !this._ShowingLoadingScreen) {\r\n            this._ShowingLoadingScreen = true;\r\n            scene.getEngine().displayLoadingUI();\r\n            scene.executeWhenReady(() => {\r\n                scene.getEngine().hideLoadingUI();\r\n                this._ShowingLoadingScreen = false;\r\n            });\r\n        }\r\n\r\n        const errorHandler = (message?: string, exception?: any) => {\r\n            const errorMessage = SceneLoader._FormatErrorMessage(fileInfo, message, exception);\r\n\r\n            if (onError) {\r\n                onError(scene, errorMessage, new RuntimeError(errorMessage, ErrorCodes.SceneLoaderError, exception));\r\n            } else {\r\n                Logger.Error(errorMessage);\r\n                // should the exception be thrown?\r\n            }\r\n\r\n            disposeHandler();\r\n        };\r\n\r\n        const progressHandler = onProgress\r\n            ? (event: ISceneLoaderProgressEvent) => {\r\n                  try {\r\n                      onProgress(event);\r\n                  } catch (e) {\r\n                      errorHandler(\"Error in onProgress callback\", e);\r\n                  }\r\n              }\r\n            : undefined;\r\n\r\n        const successHandler = () => {\r\n            if (onSuccess) {\r\n                try {\r\n                    onSuccess(scene);\r\n                } catch (e) {\r\n                    errorHandler(\"Error in onSuccess callback\", e);\r\n                }\r\n            }\r\n\r\n            scene.removePendingData(loadingToken);\r\n        };\r\n\r\n        return SceneLoader._LoadData(\r\n            fileInfo,\r\n            scene,\r\n            (plugin, data) => {\r\n                if ((<any>plugin).load) {\r\n                    const syncedPlugin = <ISceneLoaderPlugin>plugin;\r\n                    if (!syncedPlugin.load(scene, data, fileInfo.rootUrl, errorHandler)) {\r\n                        return;\r\n                    }\r\n\r\n                    scene.loadingPluginName = plugin.name;\r\n                    successHandler();\r\n                } else {\r\n                    const asyncedPlugin = <ISceneLoaderPluginAsync>plugin;\r\n                    asyncedPlugin\r\n                        .loadAsync(scene, data, fileInfo.rootUrl, progressHandler, fileInfo.name)\r\n                        .then(() => {\r\n                            scene.loadingPluginName = plugin.name;\r\n                            successHandler();\r\n                        })\r\n                        .catch((error) => {\r\n                            errorHandler(error.message, error);\r\n                        });\r\n                }\r\n            },\r\n            progressHandler,\r\n            errorHandler,\r\n            disposeHandler,\r\n            pluginExtension,\r\n            name\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Append a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file, if the data is binary\r\n     * @returns The given scene\r\n     */\r\n    public static AppendAsync(\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Promise<Scene> {\r\n        return new Promise((resolve, reject) => {\r\n            SceneLoader.Append(\r\n                rootUrl,\r\n                sceneFilename,\r\n                scene,\r\n                (scene) => {\r\n                    resolve(scene);\r\n                },\r\n                onProgress,\r\n                (scene, message, exception) => {\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension,\r\n                name\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load a scene into an asset container\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @returns The loaded plugin\r\n     */\r\n    public static LoadAssetContainer(\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        onSuccess: Nullable<(assets: AssetContainer) => void> = null,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync> {\r\n        if (!scene) {\r\n            Logger.Error(\"No scene available to load asset container to\");\r\n            return null;\r\n        }\r\n\r\n        const fileInfo = SceneLoader._GetFileInfo(rootUrl, sceneFilename);\r\n        if (!fileInfo) {\r\n            return null;\r\n        }\r\n\r\n        const loadingToken = {};\r\n        scene.addPendingData(loadingToken);\r\n\r\n        const disposeHandler = () => {\r\n            scene.removePendingData(loadingToken);\r\n        };\r\n\r\n        const errorHandler = (message?: string, exception?: any) => {\r\n            const errorMessage = SceneLoader._FormatErrorMessage(fileInfo, message, exception);\r\n\r\n            if (onError) {\r\n                onError(scene, errorMessage, new RuntimeError(errorMessage, ErrorCodes.SceneLoaderError, exception));\r\n            } else {\r\n                Logger.Error(errorMessage);\r\n                // should the exception be thrown?\r\n            }\r\n\r\n            disposeHandler();\r\n        };\r\n\r\n        const progressHandler = onProgress\r\n            ? (event: ISceneLoaderProgressEvent) => {\r\n                  try {\r\n                      onProgress(event);\r\n                  } catch (e) {\r\n                      errorHandler(\"Error in onProgress callback\", e);\r\n                  }\r\n              }\r\n            : undefined;\r\n\r\n        const successHandler = (assets: AssetContainer) => {\r\n            if (onSuccess) {\r\n                try {\r\n                    onSuccess(assets);\r\n                } catch (e) {\r\n                    errorHandler(\"Error in onSuccess callback\", e);\r\n                }\r\n            }\r\n\r\n            scene.removePendingData(loadingToken);\r\n        };\r\n\r\n        return SceneLoader._LoadData(\r\n            fileInfo,\r\n            scene,\r\n            (plugin, data) => {\r\n                if ((<any>plugin).loadAssetContainer) {\r\n                    const syncedPlugin = <ISceneLoaderPlugin>plugin;\r\n                    const assetContainer = syncedPlugin.loadAssetContainer(scene, data, fileInfo.rootUrl, errorHandler);\r\n                    if (!assetContainer) {\r\n                        return;\r\n                    }\r\n                    assetContainer.populateRootNodes();\r\n                    scene.loadingPluginName = plugin.name;\r\n                    successHandler(assetContainer);\r\n                } else if ((<any>plugin).loadAssetContainerAsync) {\r\n                    const asyncedPlugin = <ISceneLoaderPluginAsync>plugin;\r\n                    asyncedPlugin\r\n                        .loadAssetContainerAsync(scene, data, fileInfo.rootUrl, progressHandler, fileInfo.name)\r\n                        .then((assetContainer) => {\r\n                            assetContainer.populateRootNodes();\r\n                            scene.loadingPluginName = plugin.name;\r\n                            successHandler(assetContainer);\r\n                        })\r\n                        .catch((error) => {\r\n                            errorHandler(error.message, error);\r\n                        });\r\n                } else {\r\n                    errorHandler(\"LoadAssetContainer is not supported by this plugin. Plugin did not provide a loadAssetContainer or loadAssetContainerAsync method.\");\r\n                }\r\n            },\r\n            progressHandler,\r\n            errorHandler,\r\n            disposeHandler,\r\n            pluginExtension,\r\n            name\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Load a scene into an asset container\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene (default: empty string)\r\n     * @param scene is the instance of Scene to append to\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @returns The loaded asset container\r\n     */\r\n    public static LoadAssetContainerAsync(\r\n        rootUrl: string,\r\n        sceneFilename: string | File = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        pluginExtension: Nullable<string> = null\r\n    ): Promise<AssetContainer> {\r\n        return new Promise((resolve, reject) => {\r\n            SceneLoader.LoadAssetContainer(\r\n                rootUrl,\r\n                sceneFilename,\r\n                scene,\r\n                (assetContainer) => {\r\n                    resolve(assetContainer);\r\n                },\r\n                onProgress,\r\n                (scene, message, exception) => {\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Import animations from a file into a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param overwriteAnimations when true, animations are cleaned before importing new ones. Animations are appended otherwise\r\n     * @param animationGroupLoadingMode defines how to handle old animations groups before importing new ones\r\n     * @param targetConverter defines a function used to convert animation targets from loaded scene to current scene (default: search node by name)\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     */\r\n    public static ImportAnimations(\r\n        rootUrl: string,\r\n        sceneFilename: string | File = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        overwriteAnimations = true,\r\n        animationGroupLoadingMode = SceneLoaderAnimationGroupLoadingMode.Clean,\r\n        targetConverter: Nullable<(target: any) => any> = null,\r\n        onSuccess: Nullable<(scene: Scene) => void> = null,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n        pluginExtension: Nullable<string> = null\r\n    ): void {\r\n        if (!scene) {\r\n            Logger.Error(\"No scene available to load animations to\");\r\n            return;\r\n        }\r\n\r\n        if (overwriteAnimations) {\r\n            // Reset, stop and dispose all animations before loading new ones\r\n            for (const animatable of scene.animatables) {\r\n                animatable.reset();\r\n            }\r\n            scene.stopAllAnimations();\r\n            scene.animationGroups.slice().forEach((animationGroup) => {\r\n                animationGroup.dispose();\r\n            });\r\n            const nodes = scene.getNodes();\r\n            nodes.forEach((node) => {\r\n                if (node.animations) {\r\n                    node.animations = [];\r\n                }\r\n            });\r\n        } else {\r\n            switch (animationGroupLoadingMode) {\r\n                case SceneLoaderAnimationGroupLoadingMode.Clean:\r\n                    scene.animationGroups.slice().forEach((animationGroup) => {\r\n                        animationGroup.dispose();\r\n                    });\r\n                    break;\r\n                case SceneLoaderAnimationGroupLoadingMode.Stop:\r\n                    scene.animationGroups.forEach((animationGroup) => {\r\n                        animationGroup.stop();\r\n                    });\r\n                    break;\r\n                case SceneLoaderAnimationGroupLoadingMode.Sync:\r\n                    scene.animationGroups.forEach((animationGroup) => {\r\n                        animationGroup.reset();\r\n                        animationGroup.restart();\r\n                    });\r\n                    break;\r\n                case SceneLoaderAnimationGroupLoadingMode.NoSync:\r\n                    // nothing to do\r\n                    break;\r\n                default:\r\n                    Logger.Error(\"Unknown animation group loading mode value '\" + animationGroupLoadingMode + \"'\");\r\n                    return;\r\n            }\r\n        }\r\n\r\n        const startingIndexForNewAnimatables = scene.animatables.length;\r\n\r\n        const onAssetContainerLoaded = (container: AssetContainer) => {\r\n            container.mergeAnimationsTo(scene, scene.animatables.slice(startingIndexForNewAnimatables), targetConverter);\r\n\r\n            container.dispose();\r\n\r\n            scene.onAnimationFileImportedObservable.notifyObservers(scene);\r\n\r\n            if (onSuccess) {\r\n                onSuccess(scene);\r\n            }\r\n        };\r\n\r\n        this.LoadAssetContainer(rootUrl, sceneFilename, scene, onAssetContainerLoaded, onProgress, onError, pluginExtension);\r\n    }\r\n\r\n    /**\r\n     * Import animations from a file into a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param overwriteAnimations when true, animations are cleaned before importing new ones. Animations are appended otherwise\r\n     * @param animationGroupLoadingMode defines how to handle old animations groups before importing new ones\r\n     * @param targetConverter defines a function used to convert animation targets from loaded scene to current scene (default: search node by name)\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @returns the updated scene with imported animations\r\n     */\r\n    public static ImportAnimationsAsync(\r\n        rootUrl: string,\r\n        sceneFilename: string | File = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        overwriteAnimations = true,\r\n        animationGroupLoadingMode = SceneLoaderAnimationGroupLoadingMode.Clean,\r\n        targetConverter: Nullable<(target: any) => any> = null,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        onSuccess: Nullable<(scene: Scene) => void> = null,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n        pluginExtension: Nullable<string> = null\r\n    ): Promise<Scene> {\r\n        return new Promise((resolve, reject) => {\r\n            SceneLoader.ImportAnimations(\r\n                rootUrl,\r\n                sceneFilename,\r\n                scene,\r\n                overwriteAnimations,\r\n                animationGroupLoadingMode,\r\n                targetConverter,\r\n                (_scene: Scene) => {\r\n                    resolve(_scene);\r\n                },\r\n                onProgress,\r\n                (_scene: Scene, message: string, exception: any) => {\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension\r\n            );\r\n        });\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { Material } from \"../Materials/material\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\n/**\r\n * Base class of materials working in push mode in babylon JS\r\n * @internal\r\n */\r\nexport class PushMaterial extends Material {\r\n    protected _activeEffect?: Effect;\r\n\r\n    protected _normalMatrix: Matrix = new Matrix();\r\n\r\n    constructor(name: string, scene?: Scene, storeEffectOnSubMeshes = true) {\r\n        super(name, scene);\r\n        this._storeEffectOnSubMeshes = storeEffectOnSubMeshes;\r\n    }\r\n\r\n    public getEffect(): Effect {\r\n        return this._storeEffectOnSubMeshes ? this._activeEffect! : super.getEffect()!;\r\n    }\r\n\r\n    public isReady(mesh?: AbstractMesh, useInstances?: boolean): boolean {\r\n        if (!mesh) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._storeEffectOnSubMeshes) {\r\n            return true;\r\n        }\r\n\r\n        if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        return this.isReadyForSubMesh(mesh, mesh.subMeshes[0], useInstances);\r\n    }\r\n\r\n    protected _isReadyForSubMesh(subMesh: SubMesh) {\r\n        const defines = subMesh.materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect && defines) {\r\n            if (defines._renderId === this.getScene().getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Binds the given world matrix to the active effect\r\n     *\r\n     * @param world the matrix to bind\r\n     */\r\n    public bindOnlyWorldMatrix(world: Matrix): void {\r\n        this._activeEffect!.setMatrix(\"world\", world);\r\n    }\r\n\r\n    /**\r\n     * Binds the given normal matrix to the active effect\r\n     *\r\n     * @param normalMatrix the matrix to bind\r\n     */\r\n    public bindOnlyNormalMatrix(normalMatrix: Matrix): void {\r\n        this._activeEffect!.setMatrix(\"normalMatrix\", normalMatrix);\r\n    }\r\n\r\n    public bind(world: Matrix, mesh?: Mesh): void {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.bindForSubMesh(world, mesh, mesh.subMeshes[0]);\r\n    }\r\n\r\n    protected _afterBind(mesh?: Mesh, effect: Nullable<Effect> = null, subMesh?: SubMesh): void {\r\n        super._afterBind(mesh, effect, subMesh);\r\n        this.getScene()._cachedEffect = effect;\r\n        if (subMesh) {\r\n            subMesh._drawWrapper._forceRebindOnNextCall = false;\r\n        } else {\r\n            this._drawWrapper._forceRebindOnNextCall = false;\r\n        }\r\n    }\r\n\r\n    protected _mustRebind(scene: Scene, effect: Effect, subMesh: SubMesh, visibility = 1): boolean {\r\n        return subMesh._drawWrapper._forceRebindOnNextCall || scene.isCachedMaterialInvalid(this, effect, visibility);\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean) {\r\n        this._activeEffect = undefined;\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\r\n    }\r\n}\r\n", "/**\r\n * Defines the kind of connection point for node based material\r\n */\r\nexport enum NodeMaterialBlockConnectionPointTypes {\r\n    /** Float */\r\n    Float = 0x0001,\r\n    /** Int */\r\n    Int = 0x0002,\r\n    /** Vector2 */\r\n    Vector2 = 0x0004,\r\n    /** Vector3 */\r\n    Vector3 = 0x0008,\r\n    /** Vector4 */\r\n    Vector4 = 0x0010,\r\n    /** Color3 */\r\n    Color3 = 0x0020,\r\n    /** Color4 */\r\n    Color4 = 0x0040,\r\n    /** Matrix */\r\n    Matrix = 0x0080,\r\n    /** Custom object */\r\n    Object = 0x0100,\r\n    /** Detect type based on connection */\r\n    AutoDetect = 0x0400,\r\n    /** Output type that will be defined by input type */\r\n    BasedOnInput = 0x0800,\r\n    /** Bitmask of all types */\r\n    All = 0x0fff,\r\n}\r\n", "/**\r\n * Enum used to define the target of a block\r\n */\r\nexport enum NodeMaterialBlockTargets {\r\n    /** Vertex shader */\r\n    Vertex = 1,\r\n    /** Fragment shader */\r\n    Fragment = 2,\r\n    /** Neutral */\r\n    Neutral = 4,\r\n    /** Vertex and Fragment */\r\n    VertexAndFragment = Vertex | Fragment,\r\n}\r\n", "import { NodeMaterialBlockConnectionPointTypes } from \"./Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport { NodeMaterialBlockTargets } from \"./Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialBuildStateSharedData } from \"./nodeMaterialBuildStateSharedData\";\r\nimport { Effect } from \"../effect\";\r\n\r\n/**\r\n * Class used to store node based material build state\r\n */\r\nexport class NodeMaterialBuildState {\r\n    /** Gets or sets a boolean indicating if the current state can emit uniform buffers */\r\n    public supportUniformBuffers = false;\r\n    /**\r\n     * Gets the list of emitted attributes\r\n     */\r\n    public attributes: string[] = [];\r\n    /**\r\n     * Gets the list of emitted uniforms\r\n     */\r\n    public uniforms: string[] = [];\r\n    /**\r\n     * Gets the list of emitted constants\r\n     */\r\n    public constants: string[] = [];\r\n    /**\r\n     * Gets the list of emitted samplers\r\n     */\r\n    public samplers: string[] = [];\r\n    /**\r\n     * Gets the list of emitted functions\r\n     */\r\n    public functions: { [key: string]: string } = {};\r\n    /**\r\n     * Gets the list of emitted extensions\r\n     */\r\n    public extensions: { [key: string]: string } = {};\r\n    /**\r\n     * Gets the list of emitted prePass outputs - if using the prepass\r\n     */\r\n    public prePassOutput: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Gets the target of the compilation state\r\n     */\r\n    public target: NodeMaterialBlockTargets;\r\n    /**\r\n     * Gets the list of emitted counters\r\n     */\r\n    public counters: { [key: string]: number } = {};\r\n\r\n    /**\r\n     * Shared data between multiple NodeMaterialBuildState instances\r\n     */\r\n    public sharedData: NodeMaterialBuildStateSharedData;\r\n\r\n    /** @internal */\r\n    public _vertexState: NodeMaterialBuildState;\r\n\r\n    /** @internal */\r\n    public _attributeDeclaration = \"\";\r\n    /** @internal */\r\n    public _uniformDeclaration = \"\";\r\n    /** @internal */\r\n    public _constantDeclaration = \"\";\r\n    /** @internal */\r\n    public _samplerDeclaration = \"\";\r\n    /** @internal */\r\n    public _varyingTransfer = \"\";\r\n    /** @internal */\r\n    public _injectAtEnd = \"\";\r\n\r\n    private _repeatableContentAnchorIndex = 0;\r\n    /** @internal */\r\n    public _builtCompilationString = \"\";\r\n\r\n    /**\r\n     * Gets the emitted compilation strings\r\n     */\r\n    public compilationString = \"\";\r\n\r\n    /**\r\n     * Finalize the compilation strings\r\n     * @param state defines the current compilation state\r\n     */\r\n    public finalize(state: NodeMaterialBuildState) {\r\n        const emitComments = state.sharedData.emitComments;\r\n        const isFragmentMode = this.target === NodeMaterialBlockTargets.Fragment;\r\n\r\n        this.compilationString = `\\n${emitComments ? \"//Entry point\\n\" : \"\"}void main(void) {\\n${this.compilationString}`;\r\n\r\n        if (this._constantDeclaration) {\r\n            this.compilationString = `\\n${emitComments ? \"//Constants\\n\" : \"\"}${this._constantDeclaration}\\n${this.compilationString}`;\r\n        }\r\n\r\n        let functionCode = \"\";\r\n        for (const functionName in this.functions) {\r\n            functionCode += this.functions[functionName] + `\\n`;\r\n        }\r\n        this.compilationString = `\\n${functionCode}\\n${this.compilationString}`;\r\n\r\n        if (!isFragmentMode && this._varyingTransfer) {\r\n            this.compilationString = `${this.compilationString}\\n${this._varyingTransfer}`;\r\n        }\r\n\r\n        if (this._injectAtEnd) {\r\n            this.compilationString = `${this.compilationString}\\n${this._injectAtEnd}`;\r\n        }\r\n\r\n        this.compilationString = `${this.compilationString}\\n}`;\r\n\r\n        if (this.sharedData.varyingDeclaration) {\r\n            this.compilationString = `\\n${emitComments ? \"//Varyings\\n\" : \"\"}${this.sharedData.varyingDeclaration}\\n${this.compilationString}`;\r\n        }\r\n\r\n        if (this._samplerDeclaration) {\r\n            this.compilationString = `\\n${emitComments ? \"//Samplers\\n\" : \"\"}${this._samplerDeclaration}\\n${this.compilationString}`;\r\n        }\r\n\r\n        if (this._uniformDeclaration) {\r\n            this.compilationString = `\\n${emitComments ? \"//Uniforms\\n\" : \"\"}${this._uniformDeclaration}\\n${this.compilationString}`;\r\n        }\r\n\r\n        if (this._attributeDeclaration && !isFragmentMode) {\r\n            this.compilationString = `\\n${emitComments ? \"//Attributes\\n\" : \"\"}${this._attributeDeclaration}\\n${this.compilationString}`;\r\n        }\r\n\r\n        this.compilationString = \"precision highp float;\\n\" + this.compilationString;\r\n        this.compilationString = \"#if defined(WEBGL2) || defines(WEBGPU)\\nprecision highp sampler2DArray;\\n#endif\\n\" + this.compilationString;\r\n\r\n        if (isFragmentMode) {\r\n            this.compilationString =\r\n                \"#if defined(PREPASS)\\r\\n#extension GL_EXT_draw_buffers : require\\r\\nlayout(location = 0) out highp vec4 glFragData[SCENE_MRT_COUNT];\\r\\nhighp vec4 gl_FragColor;\\r\\n#endif\\r\\n\" +\r\n                this.compilationString;\r\n        }\r\n\r\n        for (const extensionName in this.extensions) {\r\n            const extension = this.extensions[extensionName];\r\n            this.compilationString = `\\n${extension}\\n${this.compilationString}`;\r\n        }\r\n\r\n        this._builtCompilationString = this.compilationString;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _repeatableContentAnchor(): string {\r\n        return `###___ANCHOR${this._repeatableContentAnchorIndex++}___###`;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getFreeVariableName(prefix: string): string {\r\n        prefix = prefix.replace(/[^a-zA-Z_]+/g, \"\");\r\n\r\n        if (this.sharedData.variableNames[prefix] === undefined) {\r\n            this.sharedData.variableNames[prefix] = 0;\r\n\r\n            // Check reserved words\r\n            if (prefix === \"output\" || prefix === \"texture\") {\r\n                return prefix + this.sharedData.variableNames[prefix];\r\n            }\r\n\r\n            return prefix;\r\n        } else {\r\n            this.sharedData.variableNames[prefix]++;\r\n        }\r\n\r\n        return prefix + this.sharedData.variableNames[prefix];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getFreeDefineName(prefix: string): string {\r\n        if (this.sharedData.defineNames[prefix] === undefined) {\r\n            this.sharedData.defineNames[prefix] = 0;\r\n        } else {\r\n            this.sharedData.defineNames[prefix]++;\r\n        }\r\n\r\n        return prefix + this.sharedData.defineNames[prefix];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _excludeVariableName(name: string) {\r\n        this.sharedData.variableNames[name] = 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emit2DSampler(name: string) {\r\n        if (this.samplers.indexOf(name) < 0) {\r\n            this._samplerDeclaration += `uniform sampler2D ${name};\\n`;\r\n            this.samplers.push(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emit2DArraySampler(name: string) {\r\n        if (this.samplers.indexOf(name) < 0) {\r\n            this._samplerDeclaration += `uniform sampler2DArray ${name};\\n`;\r\n            this.samplers.push(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getGLType(type: NodeMaterialBlockConnectionPointTypes): string {\r\n        switch (type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                return \"float\";\r\n            case NodeMaterialBlockConnectionPointTypes.Int:\r\n                return \"int\";\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                return \"vec2\";\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                return \"vec3\";\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                return \"vec4\";\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                return \"mat4\";\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitExtension(name: string, extension: string, define: string = \"\") {\r\n        if (this.extensions[name]) {\r\n            return;\r\n        }\r\n\r\n        if (define) {\r\n            extension = `#if ${define}\\n${extension}\\n#endif`;\r\n        }\r\n        this.extensions[name] = extension;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitFunction(name: string, code: string, comments: string) {\r\n        if (this.functions[name]) {\r\n            return;\r\n        }\r\n\r\n        if (this.sharedData.emitComments) {\r\n            code = comments + `\\n` + code;\r\n        }\r\n\r\n        this.functions[name] = code;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitCodeFromInclude(\r\n        includeName: string,\r\n        comments: string,\r\n        options?: {\r\n            replaceStrings?: { search: RegExp; replace: string }[];\r\n            repeatKey?: string;\r\n            substitutionVars?: string;\r\n        }\r\n    ) {\r\n        if (options && options.repeatKey) {\r\n            return `#include<${includeName}>${options.substitutionVars ? \"(\" + options.substitutionVars + \")\" : \"\"}[0..${options.repeatKey}]\\n`;\r\n        }\r\n\r\n        let code = Effect.IncludesShadersStore[includeName] + \"\\n\";\r\n\r\n        if (this.sharedData.emitComments) {\r\n            code = comments + `\\n` + code;\r\n        }\r\n\r\n        if (!options) {\r\n            return code;\r\n        }\r\n\r\n        if (options.replaceStrings) {\r\n            for (let index = 0; index < options.replaceStrings.length; index++) {\r\n                const replaceString = options.replaceStrings[index];\r\n                code = code.replace(replaceString.search, replaceString.replace);\r\n            }\r\n        }\r\n\r\n        return code;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitFunctionFromInclude(\r\n        includeName: string,\r\n        comments: string,\r\n        options?: {\r\n            repeatKey?: string;\r\n            substitutionVars?: string;\r\n            removeAttributes?: boolean;\r\n            removeUniforms?: boolean;\r\n            removeVaryings?: boolean;\r\n            removeIfDef?: boolean;\r\n            replaceStrings?: { search: RegExp; replace: string }[];\r\n        },\r\n        storeKey: string = \"\"\r\n    ) {\r\n        const key = includeName + storeKey;\r\n        if (this.functions[key]) {\r\n            return;\r\n        }\r\n\r\n        if (!options || (!options.removeAttributes && !options.removeUniforms && !options.removeVaryings && !options.removeIfDef && !options.replaceStrings)) {\r\n            if (options && options.repeatKey) {\r\n                this.functions[key] = `#include<${includeName}>${options.substitutionVars ? \"(\" + options.substitutionVars + \")\" : \"\"}[0..${options.repeatKey}]\\n`;\r\n            } else {\r\n                this.functions[key] = `#include<${includeName}>${options?.substitutionVars ? \"(\" + options?.substitutionVars + \")\" : \"\"}\\n`;\r\n            }\r\n\r\n            if (this.sharedData.emitComments) {\r\n                this.functions[key] = comments + `\\n` + this.functions[key];\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.functions[key] = Effect.IncludesShadersStore[includeName];\r\n\r\n        if (this.sharedData.emitComments) {\r\n            this.functions[key] = comments + `\\n` + this.functions[key];\r\n        }\r\n\r\n        if (options.removeIfDef) {\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#ifdef.+$/gm, \"\");\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#endif.*$/gm, \"\");\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#else.*$/gm, \"\");\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#elif.*$/gm, \"\");\r\n        }\r\n\r\n        if (options.removeAttributes) {\r\n            this.functions[key] = this.functions[key].replace(/\\s*?attribute .+?;/g, \"\\n\");\r\n        }\r\n\r\n        if (options.removeUniforms) {\r\n            this.functions[key] = this.functions[key].replace(/\\s*?uniform .*?;/g, \"\\n\");\r\n        }\r\n\r\n        if (options.removeVaryings) {\r\n            this.functions[key] = this.functions[key].replace(/\\s*?(varying|in) .+?;/g, \"\\n\");\r\n        }\r\n\r\n        if (options.replaceStrings) {\r\n            for (let index = 0; index < options.replaceStrings.length; index++) {\r\n                const replaceString = options.replaceStrings[index];\r\n                this.functions[key] = this.functions[key].replace(replaceString.search, replaceString.replace);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _registerTempVariable(name: string) {\r\n        if (this.sharedData.temps.indexOf(name) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        this.sharedData.temps.push(name);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitVaryingFromString(name: string, type: string, define: string = \"\", notDefine = false) {\r\n        if (this.sharedData.varyings.indexOf(name) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        this.sharedData.varyings.push(name);\r\n\r\n        if (define) {\r\n            if (define.startsWith(\"defined(\")) {\r\n                this.sharedData.varyingDeclaration += `#if ${define}\\n`;\r\n            } else {\r\n                this.sharedData.varyingDeclaration += `${notDefine ? \"#ifndef\" : \"#ifdef\"} ${define}\\n`;\r\n            }\r\n        }\r\n        this.sharedData.varyingDeclaration += `varying ${type} ${name};\\n`;\r\n        if (define) {\r\n            this.sharedData.varyingDeclaration += `#endif\\n`;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitUniformFromString(name: string, type: string, define: string = \"\", notDefine = false) {\r\n        if (this.uniforms.indexOf(name) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.uniforms.push(name);\r\n\r\n        if (define) {\r\n            if (define.startsWith(\"defined(\")) {\r\n                this._uniformDeclaration += `#if ${define}\\n`;\r\n            } else {\r\n                this._uniformDeclaration += `${notDefine ? \"#ifndef\" : \"#ifdef\"} ${define}\\n`;\r\n            }\r\n        }\r\n        this._uniformDeclaration += `uniform ${type} ${name};\\n`;\r\n        if (define) {\r\n            this._uniformDeclaration += `#endif\\n`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _emitFloat(value: number) {\r\n        if (value.toString() === value.toFixed(0)) {\r\n            return `${value}.0`;\r\n        }\r\n\r\n        return value.toString();\r\n    }\r\n}\r\n", "import type { NodeMaterialConnectionPoint } from \"./nodeMaterialBlockConnectionPoint\";\r\nimport type { NodeMaterialBlock } from \"./nodeMaterialBlock\";\r\nimport type { InputBlock } from \"./Blocks/Input/inputBlock\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Immutable } from \"../../types\";\r\nimport type { NodeMaterial, NodeMaterialTextureBlocks } from \"./nodeMaterial\";\r\n\r\n/**\r\n * Class used to store shared data between 2 NodeMaterialBuildState\r\n */\r\nexport class NodeMaterialBuildStateSharedData {\r\n    /**\r\n     * The node material we are currently building\r\n     */\r\n    public nodeMaterial: NodeMaterial;\r\n\r\n    /**\r\n     * Gets the list of emitted varyings\r\n     */\r\n    public temps: string[] = [];\r\n\r\n    /**\r\n     * Gets the list of emitted varyings\r\n     */\r\n    public varyings: string[] = [];\r\n\r\n    /**\r\n     * Gets the varying declaration string\r\n     */\r\n    public varyingDeclaration = \"\";\r\n\r\n    /**\r\n     * List of the fragment output nodes\r\n     */\r\n    public fragmentOutputNodes: Immutable<Array<NodeMaterialBlock>>;\r\n\r\n    /**\r\n     * Input blocks\r\n     */\r\n    public inputBlocks: InputBlock[] = [];\r\n\r\n    /**\r\n     * Input blocks\r\n     */\r\n    public textureBlocks: NodeMaterialTextureBlocks[] = [];\r\n\r\n    /**\r\n     * Bindable blocks (Blocks that need to set data to the effect)\r\n     */\r\n    public bindableBlocks: NodeMaterialBlock[] = [];\r\n\r\n    /**\r\n     * Bindable blocks (Blocks that need to set data to the effect) that will always be called (by bindForSubMesh), contrary to bindableBlocks that won't be called if _mustRebind() returns false\r\n     */\r\n    public forcedBindableBlocks: NodeMaterialBlock[] = [];\r\n\r\n    /**\r\n     * List of blocks that can provide a compilation fallback\r\n     */\r\n    public blocksWithFallbacks: NodeMaterialBlock[] = [];\r\n\r\n    /**\r\n     * List of blocks that can provide a define update\r\n     */\r\n    public blocksWithDefines: NodeMaterialBlock[] = [];\r\n\r\n    /**\r\n     * List of blocks that can provide a repeatable content\r\n     */\r\n    public repeatableContentBlocks: NodeMaterialBlock[] = [];\r\n\r\n    /**\r\n     * List of blocks that can provide a dynamic list of uniforms\r\n     */\r\n    public dynamicUniformBlocks: NodeMaterialBlock[] = [];\r\n\r\n    /**\r\n     * List of blocks that can block the isReady function for the material\r\n     */\r\n    public blockingBlocks: NodeMaterialBlock[] = [];\r\n\r\n    /**\r\n     * Gets the list of animated inputs\r\n     */\r\n    public animatedInputs: InputBlock[] = [];\r\n\r\n    /**\r\n     * Build Id used to avoid multiple recompilations\r\n     */\r\n    public buildId: number;\r\n\r\n    /** List of emitted variables */\r\n    public variableNames: { [key: string]: number } = {};\r\n\r\n    /** List of emitted defines */\r\n    public defineNames: { [key: string]: number } = {};\r\n\r\n    /** Should emit comments? */\r\n    public emitComments: boolean;\r\n\r\n    /** Emit build activity */\r\n    public verbose: boolean;\r\n\r\n    /** Gets or sets the hosting scene */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Gets the compilation hints emitted at compilation time\r\n     */\r\n    public hints = {\r\n        needWorldViewMatrix: false,\r\n        needWorldViewProjectionMatrix: false,\r\n        needAlphaBlending: false,\r\n        needAlphaTesting: false,\r\n    };\r\n\r\n    /**\r\n     * List of compilation checks\r\n     */\r\n    public checks = {\r\n        emitVertex: false,\r\n        emitFragment: false,\r\n        notConnectedNonOptionalInputs: new Array<NodeMaterialConnectionPoint>(),\r\n    };\r\n\r\n    /**\r\n     * Is vertex program allowed to be empty?\r\n     */\r\n    public allowEmptyVertexProgram: boolean = false;\r\n\r\n    /** Creates a new shared data */\r\n    public constructor() {\r\n        // Exclude usual attributes from free variable names\r\n        this.variableNames[\"position\"] = 0;\r\n        this.variableNames[\"normal\"] = 0;\r\n        this.variableNames[\"tangent\"] = 0;\r\n        this.variableNames[\"uv\"] = 0;\r\n        this.variableNames[\"uv2\"] = 0;\r\n        this.variableNames[\"uv3\"] = 0;\r\n        this.variableNames[\"uv4\"] = 0;\r\n        this.variableNames[\"uv5\"] = 0;\r\n        this.variableNames[\"uv6\"] = 0;\r\n        this.variableNames[\"color\"] = 0;\r\n        this.variableNames[\"matricesIndices\"] = 0;\r\n        this.variableNames[\"matricesWeights\"] = 0;\r\n        this.variableNames[\"matricesIndicesExtra\"] = 0;\r\n        this.variableNames[\"matricesWeightsExtra\"] = 0;\r\n        this.variableNames[\"diffuseBase\"] = 0;\r\n        this.variableNames[\"specularBase\"] = 0;\r\n        this.variableNames[\"worldPos\"] = 0;\r\n        this.variableNames[\"shadow\"] = 0;\r\n        this.variableNames[\"view\"] = 0;\r\n\r\n        // Exclude known varyings\r\n        this.variableNames[\"vTBN\"] = 0;\r\n\r\n        // Exclude defines\r\n        this.defineNames[\"MAINUV0\"] = 0;\r\n        this.defineNames[\"MAINUV1\"] = 0;\r\n        this.defineNames[\"MAINUV2\"] = 0;\r\n        this.defineNames[\"MAINUV3\"] = 0;\r\n        this.defineNames[\"MAINUV4\"] = 0;\r\n        this.defineNames[\"MAINUV5\"] = 0;\r\n        this.defineNames[\"MAINUV6\"] = 0;\r\n        this.defineNames[\"MAINUV7\"] = 0;\r\n    }\r\n\r\n    /**\r\n     * Emits console errors and exceptions if there is a failing check\r\n     */\r\n    public emitErrors() {\r\n        let errorMessage = \"\";\r\n\r\n        if (!this.checks.emitVertex && !this.allowEmptyVertexProgram) {\r\n            errorMessage += \"NodeMaterial does not have a vertex output. You need to at least add a block that generates a glPosition value.\\n\";\r\n        }\r\n        if (!this.checks.emitFragment) {\r\n            errorMessage += \"NodeMaterial does not have a fragment output. You need to at least add a block that generates a glFragColor value.\\n\";\r\n        }\r\n        for (const notConnectedInput of this.checks.notConnectedNonOptionalInputs) {\r\n            errorMessage += `input ${notConnectedInput.name} from block ${\r\n                notConnectedInput.ownerBlock.name\r\n            }[${notConnectedInput.ownerBlock.getClassName()}] is not connected and is not optional.\\n`;\r\n        }\r\n\r\n        if (errorMessage) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"Build of NodeMaterial failed:\\n\" + errorMessage;\r\n        }\r\n    }\r\n}\r\n", "/**\r\n * Manages the defines for the Material\r\n */\r\nexport class MaterialDefines {\r\n    /** @internal */\r\n    protected _keys: string[] = [];\r\n    private _isDirty = true;\r\n    /** @internal */\r\n    public _renderId: number;\r\n\r\n    /** @internal */\r\n    public _areLightsDirty = true;\r\n    /** @internal */\r\n    public _areLightsDisposed = false;\r\n    /** @internal */\r\n    public _areAttributesDirty = true;\r\n    /** @internal */\r\n    public _areTexturesDirty = true;\r\n    /** @internal */\r\n    public _areFresnelDirty = true;\r\n    /** @internal */\r\n    public _areMiscDirty = true;\r\n    /** @internal */\r\n    public _arePrePassDirty = true;\r\n    /** @internal */\r\n    public _areImageProcessingDirty = true;\r\n\r\n    /** @internal */\r\n    public _normals = false;\r\n    /** @internal */\r\n    public _uvs = false;\r\n\r\n    /** @internal */\r\n    public _needNormals = false;\r\n    /** @internal */\r\n    public _needUVs = false;\r\n\r\n    protected _externalProperties?: { [name: string]: { type: string; default: any } };\r\n\r\n    [id: string]: any;\r\n\r\n    /**\r\n     * Creates a new instance\r\n     * @param externalProperties list of external properties to inject into the object\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        this._externalProperties = externalProperties;\r\n\r\n        // Initialize External Properties\r\n        if (externalProperties) {\r\n            for (const prop in externalProperties) {\r\n                if (Object.prototype.hasOwnProperty.call(externalProperties, prop)) {\r\n                    this._setDefaultValue(prop);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material needs to be re-calculated\r\n     */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it has been re-calculated\r\n     */\r\n    public markAsProcessed() {\r\n        this._isDirty = false;\r\n        this._areAttributesDirty = false;\r\n        this._areTexturesDirty = false;\r\n        this._areFresnelDirty = false;\r\n        this._areLightsDirty = false;\r\n        this._areLightsDisposed = false;\r\n        this._areMiscDirty = false;\r\n        this._arePrePassDirty = false;\r\n        this._areImageProcessingDirty = false;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it needs to be re-calculated\r\n     */\r\n    public markAsUnprocessed() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate all of its defines need to be re-calculated\r\n     */\r\n    public markAllAsDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._areAttributesDirty = true;\r\n        this._areLightsDirty = true;\r\n        this._areFresnelDirty = true;\r\n        this._areMiscDirty = true;\r\n        this._arePrePassDirty = false;\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that image processing needs to be re-calculated\r\n     */\r\n    public markAsImageProcessingDirty() {\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate the lights need to be re-calculated\r\n     * @param disposed Defines whether the light is dirty due to dispose or not\r\n     */\r\n    public markAsLightDirty(disposed = false) {\r\n        this._areLightsDirty = true;\r\n        this._areLightsDisposed = this._areLightsDisposed || disposed;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the attribute state as changed\r\n     */\r\n    public markAsAttributesDirty() {\r\n        this._areAttributesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the texture state as changed\r\n     */\r\n    public markAsTexturesDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the fresnel state as changed\r\n     */\r\n    public markAsFresnelDirty() {\r\n        this._areFresnelDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the misc state as changed\r\n     */\r\n    public markAsMiscDirty() {\r\n        this._areMiscDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the prepass state as changed\r\n     */\r\n    public markAsPrePassDirty() {\r\n        this._arePrePassDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the material defines\r\n     */\r\n    public rebuild() {\r\n        this._keys.length = 0;\r\n\r\n        for (const key of Object.keys(this)) {\r\n            if (key[0] === \"_\") {\r\n                continue;\r\n            }\r\n\r\n            this._keys.push(key);\r\n        }\r\n\r\n        if (this._externalProperties) {\r\n            for (const name in this._externalProperties) {\r\n                if (this._keys.indexOf(name) === -1) {\r\n                    this._keys.push(name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if two material defines are equal\r\n     * @param other - A material define instance to compare to\r\n     * @returns - Boolean indicating if the material defines are equal (true) or not (false)\r\n     */\r\n    public isEqual(other: MaterialDefines): boolean {\r\n        if (this._keys.length !== other._keys.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n\r\n            if ((<any>this)[prop] !== (<any>other)[prop]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clones this instance's defines to another instance\r\n     * @param other - material defines to clone values to\r\n     */\r\n    public cloneTo(other: MaterialDefines): void {\r\n        if (this._keys.length !== other._keys.length) {\r\n            other._keys = this._keys.slice(0);\r\n        }\r\n\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n\r\n            (<any>other)[prop] = (<any>this)[prop];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the material define values\r\n     */\r\n    public reset(): void {\r\n        this._keys.forEach((prop) => this._setDefaultValue(prop));\r\n    }\r\n\r\n    private _setDefaultValue(prop: string): void {\r\n        const type = this._externalProperties?.[prop]?.type ?? typeof (<any>this)[prop];\r\n        const defValue = this._externalProperties?.[prop]?.default;\r\n\r\n        switch (type) {\r\n            case \"number\":\r\n                (<any>this)[prop] = defValue ?? 0;\r\n                break;\r\n            case \"string\":\r\n                (<any>this)[prop] = defValue ?? \"\";\r\n                break;\r\n            default:\r\n                (<any>this)[prop] = defValue ?? false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the material define values to a string\r\n     * @returns - String of material define information\r\n     */\r\n    public toString(): string {\r\n        let result = \"\";\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n            const value = (<any>this)[prop];\r\n            const type = typeof value;\r\n\r\n            switch (type) {\r\n                case \"number\":\r\n                case \"string\":\r\n                    result += \"#define \" + prop + \" \" + value + \"\\n\";\r\n                    break;\r\n                default:\r\n                    if (value) {\r\n                        result += \"#define \" + prop + \"\\n\";\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import { NodeMaterialBlockConnectionPointTypes } from \"./Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport { NodeMaterialBlockTargets } from \"./Enums/nodeMaterialBlockTargets\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { InputBlock } from \"./Blocks/Input/inputBlock\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { NodeMaterialBlock } from \"./nodeMaterialBlock\";\r\n\r\n/**\r\n * Enum used to define the compatibility state between two connection points\r\n */\r\nexport enum NodeMaterialConnectionPointCompatibilityStates {\r\n    /** Points are compatibles */\r\n    Compatible,\r\n    /** Points are incompatible because of their types */\r\n    TypeIncompatible,\r\n    /** Points are incompatible because of their targets (vertex vs fragment) */\r\n    TargetIncompatible,\r\n    /** Points are incompatible because they are in the same hierarchy **/\r\n    HierarchyIssue,\r\n}\r\n\r\n/**\r\n * Defines the direction of a connection point\r\n */\r\nexport enum NodeMaterialConnectionPointDirection {\r\n    /** Input */\r\n    Input,\r\n    /** Output */\r\n    Output,\r\n}\r\n\r\n/**\r\n * Defines a connection point for a block\r\n */\r\nexport class NodeMaterialConnectionPoint {\r\n    /**\r\n     * Checks if two types are equivalent\r\n     * @param type1 type 1 to check\r\n     * @param type2 type 2 to check\r\n     * @returns true if both types are equivalent, else false\r\n     */\r\n    public static AreEquivalentTypes(type1: number, type2: number): boolean {\r\n        switch (type1) {\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3: {\r\n                if (type2 === NodeMaterialBlockConnectionPointTypes.Color3) {\r\n                    return true;\r\n                }\r\n                break;\r\n            }\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4: {\r\n                if (type2 === NodeMaterialBlockConnectionPointTypes.Color4) {\r\n                    return true;\r\n                }\r\n                break;\r\n            }\r\n            case NodeMaterialBlockConnectionPointTypes.Color3: {\r\n                if (type2 === NodeMaterialBlockConnectionPointTypes.Vector3) {\r\n                    return true;\r\n                }\r\n                break;\r\n            }\r\n            case NodeMaterialBlockConnectionPointTypes.Color4: {\r\n                if (type2 === NodeMaterialBlockConnectionPointTypes.Vector4) {\r\n                    return true;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _ownerBlock: NodeMaterialBlock;\r\n    /** @internal */\r\n    public _connectedPoint: Nullable<NodeMaterialConnectionPoint> = null;\r\n\r\n    private _endpoints = new Array<NodeMaterialConnectionPoint>();\r\n    private _associatedVariableName: string;\r\n    private _direction: NodeMaterialConnectionPointDirection;\r\n\r\n    /** @internal */\r\n    public _typeConnectionSource: Nullable<NodeMaterialConnectionPoint> = null;\r\n\r\n    /** @internal */\r\n    public _defaultConnectionPointType: Nullable<NodeMaterialBlockConnectionPointTypes> = null;\r\n\r\n    /** @internal */\r\n    public _linkedConnectionSource: Nullable<NodeMaterialConnectionPoint> = null;\r\n\r\n    /** @internal */\r\n    public _acceptedConnectionPointType: Nullable<NodeMaterialConnectionPoint> = null;\r\n\r\n    private _type = NodeMaterialBlockConnectionPointTypes.Float;\r\n\r\n    /** @internal */\r\n    public _enforceAssociatedVariableName = false;\r\n\r\n    /** Gets the direction of the point */\r\n    public get direction() {\r\n        return this._direction;\r\n    }\r\n\r\n    /** Indicates that this connection point needs dual validation before being connected to another point */\r\n    public needDualDirectionValidation: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets the additional types supported by this connection point\r\n     */\r\n    public acceptedConnectionPointTypes: NodeMaterialBlockConnectionPointTypes[] = [];\r\n\r\n    /**\r\n     * Gets or sets the additional types excluded by this connection point\r\n     */\r\n    public excludedConnectionPointTypes: NodeMaterialBlockConnectionPointTypes[] = [];\r\n\r\n    /**\r\n     * Observable triggered when this point is connected\r\n     */\r\n    public onConnectionObservable = new Observable<NodeMaterialConnectionPoint>();\r\n\r\n    /**\r\n     * Gets or sets the associated variable name in the shader\r\n     */\r\n    public get associatedVariableName(): string {\r\n        if (this._ownerBlock.isInput) {\r\n            return (this._ownerBlock as InputBlock).associatedVariableName;\r\n        }\r\n\r\n        if ((!this._enforceAssociatedVariableName || !this._associatedVariableName) && this._connectedPoint) {\r\n            return this._connectedPoint.associatedVariableName;\r\n        }\r\n\r\n        return this._associatedVariableName;\r\n    }\r\n\r\n    public set associatedVariableName(value: string) {\r\n        this._associatedVariableName = value;\r\n    }\r\n\r\n    /** Get the inner type (ie AutoDetect for instance instead of the inferred one) */\r\n    public get innerType() {\r\n        if (this._linkedConnectionSource && this._linkedConnectionSource.isConnected) {\r\n            return this.type;\r\n        }\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the connection point type (default is float)\r\n     */\r\n    public get type(): NodeMaterialBlockConnectionPointTypes {\r\n        if (this._type === NodeMaterialBlockConnectionPointTypes.AutoDetect) {\r\n            if (this._ownerBlock.isInput) {\r\n                return (this._ownerBlock as InputBlock).type;\r\n            }\r\n\r\n            if (this._connectedPoint) {\r\n                return this._connectedPoint.type;\r\n            }\r\n\r\n            if (this._linkedConnectionSource && this._linkedConnectionSource.isConnected) {\r\n                return this._linkedConnectionSource.type;\r\n            }\r\n        }\r\n\r\n        if (this._type === NodeMaterialBlockConnectionPointTypes.BasedOnInput) {\r\n            if (this._typeConnectionSource) {\r\n                if (!this._typeConnectionSource.isConnected && this._defaultConnectionPointType) {\r\n                    return this._defaultConnectionPointType;\r\n                }\r\n                return this._typeConnectionSource.type;\r\n            } else if (this._defaultConnectionPointType) {\r\n                return this._defaultConnectionPointType;\r\n            }\r\n        }\r\n\r\n        return this._type;\r\n    }\r\n\r\n    public set type(value: NodeMaterialBlockConnectionPointTypes) {\r\n        this._type = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the connection point name\r\n     */\r\n    public name: string;\r\n\r\n    /**\r\n     * Gets or sets the connection point name\r\n     */\r\n    public displayName: string;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point can be omitted\r\n     */\r\n    public isOptional: boolean;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is exposed on a frame\r\n     */\r\n    public isExposedOnFrame: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets number indicating the position that the port is exposed to on a frame\r\n     */\r\n    public exposedPortPosition: number = -1;\r\n\r\n    /**\r\n     * Gets or sets a string indicating that this uniform must be defined under a #ifdef\r\n     */\r\n    public define: string;\r\n\r\n    /** @internal */\r\n    public _prioritizeVertex = false;\r\n\r\n    private _target: NodeMaterialBlockTargets = NodeMaterialBlockTargets.VertexAndFragment;\r\n\r\n    /** Gets or sets the target of that connection point */\r\n    public get target(): NodeMaterialBlockTargets {\r\n        if (!this._prioritizeVertex || !this._ownerBlock) {\r\n            return this._target;\r\n        }\r\n\r\n        if (this._target !== NodeMaterialBlockTargets.VertexAndFragment) {\r\n            return this._target;\r\n        }\r\n\r\n        if (this._ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\r\n            return NodeMaterialBlockTargets.Fragment;\r\n        }\r\n\r\n        return NodeMaterialBlockTargets.Vertex;\r\n    }\r\n\r\n    public set target(value: NodeMaterialBlockTargets) {\r\n        this._target = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the current point is connected to another NodeMaterialBlock\r\n     */\r\n    public get isConnected(): boolean {\r\n        return this.connectedPoint !== null || this.hasEndpoints;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the current point is connected to an input block\r\n     */\r\n    public get isConnectedToInputBlock(): boolean {\r\n        return this.connectedPoint !== null && this.connectedPoint.ownerBlock.isInput;\r\n    }\r\n\r\n    /**\r\n     * Gets a the connected input block (if any)\r\n     */\r\n    public get connectInputBlock(): Nullable<InputBlock> {\r\n        if (!this.isConnectedToInputBlock) {\r\n            return null;\r\n        }\r\n\r\n        return this.connectedPoint!.ownerBlock as InputBlock;\r\n    }\r\n\r\n    /** Get the other side of the connection (if any) */\r\n    public get connectedPoint(): Nullable<NodeMaterialConnectionPoint> {\r\n        return this._connectedPoint;\r\n    }\r\n\r\n    /** Get the block that owns this connection point */\r\n    public get ownerBlock(): NodeMaterialBlock {\r\n        return this._ownerBlock;\r\n    }\r\n\r\n    /** Get the block connected on the other side of this connection (if any) */\r\n    public get sourceBlock(): Nullable<NodeMaterialBlock> {\r\n        if (!this._connectedPoint) {\r\n            return null;\r\n        }\r\n\r\n        return this._connectedPoint.ownerBlock;\r\n    }\r\n\r\n    /** Get the block connected on the endpoints of this connection (if any) */\r\n    public get connectedBlocks(): Array<NodeMaterialBlock> {\r\n        if (this._endpoints.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        return this._endpoints.map((e) => e.ownerBlock);\r\n    }\r\n\r\n    /** Gets the list of connected endpoints */\r\n    public get endpoints() {\r\n        return this._endpoints;\r\n    }\r\n\r\n    /** Gets a boolean indicating if that output point is connected to at least one input */\r\n    public get hasEndpoints(): boolean {\r\n        return this._endpoints && this._endpoints.length > 0;\r\n    }\r\n\r\n    /** Gets a boolean indicating that this connection has a path to the vertex output*/\r\n    public get isDirectlyConnectedToVertexOutput(): boolean {\r\n        if (!this.hasEndpoints) {\r\n            return false;\r\n        }\r\n\r\n        for (const endpoint of this._endpoints) {\r\n            if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Vertex) {\r\n                return true;\r\n            }\r\n\r\n            if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Neutral || endpoint.ownerBlock.target === NodeMaterialBlockTargets.VertexAndFragment) {\r\n                if (endpoint.ownerBlock.outputs.some((o) => o.isDirectlyConnectedToVertexOutput)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** Gets a boolean indicating that this connection will be used in the vertex shader */\r\n    public get isConnectedInVertexShader(): boolean {\r\n        if (this.target === NodeMaterialBlockTargets.Vertex) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.hasEndpoints) {\r\n            return false;\r\n        }\r\n\r\n        for (const endpoint of this._endpoints) {\r\n            if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Vertex) {\r\n                return true;\r\n            }\r\n\r\n            if (endpoint.target === NodeMaterialBlockTargets.Vertex) {\r\n                return true;\r\n            }\r\n\r\n            if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Neutral || endpoint.ownerBlock.target === NodeMaterialBlockTargets.VertexAndFragment) {\r\n                if (endpoint.ownerBlock.outputs.some((o) => o.isConnectedInVertexShader)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** Gets a boolean indicating that this connection will be used in the fragment shader */\r\n    public get isConnectedInFragmentShader(): boolean {\r\n        if (this.target === NodeMaterialBlockTargets.Fragment) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.hasEndpoints) {\r\n            return false;\r\n        }\r\n\r\n        for (const endpoint of this._endpoints) {\r\n            if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\r\n                return true;\r\n            }\r\n\r\n            if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Neutral || endpoint.ownerBlock.target === NodeMaterialBlockTargets.VertexAndFragment) {\r\n                if (endpoint.ownerBlock.isConnectedInFragmentShader()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Creates a block suitable to be used as an input for this input point.\r\n     * If null is returned, a block based on the point type will be created.\r\n     * @returns The returned string parameter is the name of the output point of NodeMaterialBlock (first parameter of the returned array) that can be connected to the input\r\n     */\r\n    public createCustomInputBlock(): Nullable<[NodeMaterialBlock, string]> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection point\r\n     * @param name defines the connection point name\r\n     * @param ownerBlock defines the block hosting this connection point\r\n     * @param direction defines the direction of the connection point\r\n     */\r\n    public constructor(name: string, ownerBlock: NodeMaterialBlock, direction: NodeMaterialConnectionPointDirection) {\r\n        this._ownerBlock = ownerBlock;\r\n        this.name = name;\r\n        this._direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name e.g. \"NodeMaterialConnectionPoint\"\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"NodeMaterialConnectionPoint\";\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the current point can be connected to another point\r\n     * @param connectionPoint defines the other connection point\r\n     * @returns a boolean\r\n     */\r\n    public canConnectTo(connectionPoint: NodeMaterialConnectionPoint) {\r\n        return this.checkCompatibilityState(connectionPoint) === NodeMaterialConnectionPointCompatibilityStates.Compatible;\r\n    }\r\n\r\n    /**\r\n     * Gets a number indicating if the current point can be connected to another point\r\n     * @param connectionPoint defines the other connection point\r\n     * @returns a number defining the compatibility state\r\n     */\r\n    public checkCompatibilityState(connectionPoint: NodeMaterialConnectionPoint): NodeMaterialConnectionPointCompatibilityStates {\r\n        const ownerBlock = this._ownerBlock;\r\n        const otherBlock = connectionPoint.ownerBlock;\r\n\r\n        if (ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\r\n            // Let's check we are not going reverse\r\n\r\n            if (otherBlock.target === NodeMaterialBlockTargets.Vertex) {\r\n                return NodeMaterialConnectionPointCompatibilityStates.TargetIncompatible;\r\n            }\r\n\r\n            for (const output of otherBlock.outputs) {\r\n                if (output.ownerBlock.target != NodeMaterialBlockTargets.Neutral && output.isConnectedInVertexShader) {\r\n                    return NodeMaterialConnectionPointCompatibilityStates.TargetIncompatible;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.type !== connectionPoint.type && connectionPoint.innerType !== NodeMaterialBlockConnectionPointTypes.AutoDetect) {\r\n            // Equivalents\r\n            if (NodeMaterialConnectionPoint.AreEquivalentTypes(this.type, connectionPoint.type)) {\r\n                return NodeMaterialConnectionPointCompatibilityStates.Compatible;\r\n            }\r\n\r\n            // Accepted types\r\n            if (\r\n                (connectionPoint.acceptedConnectionPointTypes && connectionPoint.acceptedConnectionPointTypes.indexOf(this.type) !== -1) ||\r\n                (connectionPoint._acceptedConnectionPointType && NodeMaterialConnectionPoint.AreEquivalentTypes(connectionPoint._acceptedConnectionPointType.type, this.type))\r\n            ) {\r\n                return NodeMaterialConnectionPointCompatibilityStates.Compatible;\r\n            } else {\r\n                return NodeMaterialConnectionPointCompatibilityStates.TypeIncompatible;\r\n            }\r\n        }\r\n\r\n        // Excluded\r\n        if (connectionPoint.excludedConnectionPointTypes && connectionPoint.excludedConnectionPointTypes.indexOf(this.type) !== -1) {\r\n            return NodeMaterialConnectionPointCompatibilityStates.TypeIncompatible;\r\n        }\r\n\r\n        // Check hierarchy\r\n        let targetBlock = otherBlock;\r\n        let sourceBlock = ownerBlock;\r\n        if (this.direction === NodeMaterialConnectionPointDirection.Input) {\r\n            targetBlock = ownerBlock;\r\n            sourceBlock = otherBlock;\r\n        }\r\n\r\n        if (targetBlock.isAnAncestorOf(sourceBlock)) {\r\n            return NodeMaterialConnectionPointCompatibilityStates.HierarchyIssue;\r\n        }\r\n\r\n        return NodeMaterialConnectionPointCompatibilityStates.Compatible;\r\n    }\r\n\r\n    /**\r\n     * Connect this point to another connection point\r\n     * @param connectionPoint defines the other connection point\r\n     * @param ignoreConstraints defines if the system will ignore connection type constraints (default is false)\r\n     * @returns the current connection point\r\n     */\r\n    public connectTo(connectionPoint: NodeMaterialConnectionPoint, ignoreConstraints = false): NodeMaterialConnectionPoint {\r\n        if (!ignoreConstraints && !this.canConnectTo(connectionPoint)) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"Cannot connect these two connectors.\";\r\n        }\r\n\r\n        this._endpoints.push(connectionPoint);\r\n        connectionPoint._connectedPoint = this;\r\n\r\n        this._enforceAssociatedVariableName = false;\r\n\r\n        this.onConnectionObservable.notifyObservers(connectionPoint);\r\n        connectionPoint.onConnectionObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disconnect this point from one of his endpoint\r\n     * @param endpoint defines the other connection point\r\n     * @returns the current connection point\r\n     */\r\n    public disconnectFrom(endpoint: NodeMaterialConnectionPoint): NodeMaterialConnectionPoint {\r\n        const index = this._endpoints.indexOf(endpoint);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._endpoints.splice(index, 1);\r\n        endpoint._connectedPoint = null;\r\n        this._enforceAssociatedVariableName = false;\r\n        endpoint._enforceAssociatedVariableName = false;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Fill the list of excluded connection point types with all types other than those passed in the parameter\r\n     * @param mask Types (ORed values of NodeMaterialBlockConnectionPointTypes) that are allowed, and thus will not be pushed to the excluded list\r\n     */\r\n    public addExcludedConnectionPointFromAllowedTypes(mask: number): void {\r\n        let bitmask = 1;\r\n        while (bitmask < NodeMaterialBlockConnectionPointTypes.All) {\r\n            if (!(mask & bitmask)) {\r\n                this.excludedConnectionPointTypes.push(bitmask);\r\n            }\r\n            bitmask = bitmask << 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes this point in a JSON representation\r\n     * @param isInput defines if the connection point is an input (default is true)\r\n     * @returns the serialized point object\r\n     */\r\n    public serialize(isInput = true): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.displayName = this.displayName;\r\n\r\n        if (isInput && this.connectedPoint) {\r\n            serializationObject.inputName = this.name;\r\n            serializationObject.targetBlockId = this.connectedPoint.ownerBlock.uniqueId;\r\n            serializationObject.targetConnectionName = this.connectedPoint.name;\r\n            serializationObject.isExposedOnFrame = true;\r\n            serializationObject.exposedPortPosition = this.exposedPortPosition;\r\n        }\r\n\r\n        if (this.isExposedOnFrame || this.exposedPortPosition >= 0) {\r\n            serializationObject.isExposedOnFrame = true;\r\n            serializationObject.exposedPortPosition = this.exposedPortPosition;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Release resources\r\n     */\r\n    public dispose() {\r\n        this.onConnectionObservable.clear();\r\n    }\r\n}\r\n", "import { NodeMaterialBlockConnectionPointTypes } from \"./Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"./nodeMaterialBuildState\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { NodeMaterialConnectionPoint, NodeMaterialConnectionPointDirection } from \"./nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"./Enums/nodeMaterialBlockTargets\";\r\nimport type { Effect } from \"../effect\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"./nodeMaterial\";\r\nimport type { InputBlock } from \"./Blocks/Input/inputBlock\";\r\nimport { UniqueIdGenerator } from \"../../Misc/uniqueIdGenerator\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { GetClass } from \"../../Misc/typeStore\";\r\nimport type { EffectFallbacks } from \"../effectFallbacks\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\n/**\r\n * Defines a block that can be used inside a node based material\r\n */\r\nexport class NodeMaterialBlock {\r\n    private _buildId: number;\r\n    private _buildTarget: NodeMaterialBlockTargets;\r\n    protected _target: NodeMaterialBlockTargets;\r\n    private _isFinalMerger = false;\r\n    private _isInput = false;\r\n    private _isTeleportOut = false;\r\n    private _isTeleportIn = false;\r\n    private _name = \"\";\r\n    protected _isUnique = false;\r\n\r\n    /** Gets or sets a boolean indicating that only one input can be connected at a time */\r\n    public inputsAreExclusive = false;\r\n\r\n    /** @internal */\r\n    public _codeVariableName = \"\";\r\n\r\n    /** @internal */\r\n    public _inputs = new Array<NodeMaterialConnectionPoint>();\r\n    /** @internal */\r\n    public _outputs = new Array<NodeMaterialConnectionPoint>();\r\n\r\n    /** @internal */\r\n    public _preparationId: number;\r\n\r\n    /** @internal */\r\n    public readonly _originalTargetIsNeutral: boolean;\r\n\r\n    /**\r\n     * Gets the name of the block\r\n     */\r\n    public get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * Sets the name of the block. Will check if the name is valid.\r\n     */\r\n    public set name(newName: string) {\r\n        if (!this.validateBlockName(newName)) {\r\n            return;\r\n        }\r\n\r\n        this._name = newName;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets the comments associated with this block\r\n     */\r\n    public comments: string = \"\";\r\n\r\n    /**\r\n     * Gets a boolean indicating that this block can only be used once per NodeMaterial\r\n     */\r\n    public get isUnique() {\r\n        return this._isUnique;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that this block is an end block (e.g. it is generating a system value)\r\n     */\r\n    public get isFinalMerger(): boolean {\r\n        return this._isFinalMerger;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that this block is an input (e.g. it sends data to the shader)\r\n     */\r\n    public get isInput(): boolean {\r\n        return this._isInput;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this block is a teleport out\r\n     */\r\n    public get isTeleportOut(): boolean {\r\n        return this._isTeleportOut;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this block is a teleport in\r\n     */\r\n    public get isTeleportIn(): boolean {\r\n        return this._isTeleportIn;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the build Id\r\n     */\r\n    public get buildId(): number {\r\n        return this._buildId;\r\n    }\r\n\r\n    public set buildId(value: number) {\r\n        this._buildId = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the target of the block\r\n     */\r\n    public get target() {\r\n        return this._target;\r\n    }\r\n\r\n    public set target(value: NodeMaterialBlockTargets) {\r\n        if ((this._target & value) !== 0) {\r\n            return;\r\n        }\r\n        this._target = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of input points\r\n     */\r\n    public get inputs(): NodeMaterialConnectionPoint[] {\r\n        return this._inputs;\r\n    }\r\n\r\n    /** Gets the list of output points */\r\n    public get outputs(): NodeMaterialConnectionPoint[] {\r\n        return this._outputs;\r\n    }\r\n\r\n    /**\r\n     * Find an input by its name\r\n     * @param name defines the name of the input to look for\r\n     * @returns the input or null if not found\r\n     */\r\n    public getInputByName(name: string) {\r\n        const filter = this._inputs.filter((e) => e.name === name);\r\n\r\n        if (filter.length) {\r\n            return filter[0];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Find an output by its name\r\n     * @param name defines the name of the output to look for\r\n     * @returns the output or null if not found\r\n     */\r\n    public getOutputByName(name: string) {\r\n        const filter = this._outputs.filter((e) => e.name === name);\r\n\r\n        if (filter.length) {\r\n            return filter[0];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that this input can be edited in the Inspector (false by default) */\r\n    public visibleInInspector = false;\r\n\r\n    /** Gets or sets a boolean indicating that this input can be edited from a collapsed frame */\r\n    public visibleOnFrame = false;\r\n\r\n    /**\r\n     * Creates a new NodeMaterialBlock\r\n     * @param name defines the block name\r\n     * @param target defines the target of that block (Vertex by default)\r\n     * @param isFinalMerger defines a boolean indicating that this block is an end block (e.g. it is generating a system value). Default is false\r\n     */\r\n    public constructor(name: string, target = NodeMaterialBlockTargets.Vertex, isFinalMerger = false) {\r\n        this._target = target;\r\n        this._originalTargetIsNeutral = target === NodeMaterialBlockTargets.Neutral;\r\n        this._isFinalMerger = isFinalMerger;\r\n        this._isInput = this.getClassName() === \"InputBlock\";\r\n        this._isTeleportOut = this.getClassName() === \"NodeMaterialTeleportOutBlock\";\r\n        this._isTeleportIn = this.getClassName() === \"NodeMaterialTeleportInBlock\";\r\n        this._name = name;\r\n        this.uniqueId = UniqueIdGenerator.UniqueId;\r\n    }\r\n\r\n    /** @internal */\r\n    public _setInitialTarget(target: NodeMaterialBlockTargets): void {\r\n        this._target = target;\r\n        (this._originalTargetIsNeutral as boolean) = target === NodeMaterialBlockTargets.Neutral;\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Bind data to effect. Will only be called for blocks with isBindable === true\r\n     * @param effect defines the effect to bind data to\r\n     * @param nodeMaterial defines the hosting NodeMaterial\r\n     * @param mesh defines the mesh that will be rendered\r\n     * @param subMesh defines the submesh that will be rendered\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh, subMesh?: SubMesh) {\r\n        // Do nothing\r\n    }\r\n\r\n    protected _declareOutput(output: NodeMaterialConnectionPoint, state: NodeMaterialBuildState): string {\r\n        return `${state._getGLType(output.type)} ${output.associatedVariableName}`;\r\n    }\r\n\r\n    protected _writeVariable(currentPoint: NodeMaterialConnectionPoint): string {\r\n        const connectionPoint = currentPoint.connectedPoint;\r\n\r\n        if (connectionPoint) {\r\n            return `${currentPoint.associatedVariableName}`;\r\n        }\r\n\r\n        return `0.`;\r\n    }\r\n\r\n    protected _writeFloat(value: number) {\r\n        let stringVersion = value.toString();\r\n\r\n        if (stringVersion.indexOf(\".\") === -1) {\r\n            stringVersion += \".0\";\r\n        }\r\n        return `${stringVersion}`;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name e.g. \"NodeMaterialBlock\"\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"NodeMaterialBlock\";\r\n    }\r\n\r\n    /** Gets a boolean indicating that this connection will be used in the fragment shader\r\n     * @returns true if connected in fragment shader\r\n     */\r\n    public isConnectedInFragmentShader() {\r\n        return this.outputs.some((o) => o.isConnectedInFragmentShader);\r\n    }\r\n\r\n    /**\r\n     * Register a new input. Must be called inside a block constructor\r\n     * @param name defines the connection point name\r\n     * @param type defines the connection point type\r\n     * @param isOptional defines a boolean indicating that this input can be omitted\r\n     * @param target defines the target to use to limit the connection point (will be VertexAndFragment by default)\r\n     * @param point an already created connection point. If not provided, create a new one\r\n     * @returns the current block\r\n     */\r\n    public registerInput(\r\n        name: string,\r\n        type: NodeMaterialBlockConnectionPointTypes,\r\n        isOptional: boolean = false,\r\n        target?: NodeMaterialBlockTargets,\r\n        point?: NodeMaterialConnectionPoint\r\n    ) {\r\n        point = point ?? new NodeMaterialConnectionPoint(name, this, NodeMaterialConnectionPointDirection.Input);\r\n        point.type = type;\r\n        point.isOptional = isOptional;\r\n        if (target) {\r\n            point.target = target;\r\n        }\r\n\r\n        this._inputs.push(point);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Register a new output. Must be called inside a block constructor\r\n     * @param name defines the connection point name\r\n     * @param type defines the connection point type\r\n     * @param target defines the target to use to limit the connection point (will be VertexAndFragment by default)\r\n     * @param point an already created connection point. If not provided, create a new one\r\n     * @returns the current block\r\n     */\r\n    public registerOutput(name: string, type: NodeMaterialBlockConnectionPointTypes, target?: NodeMaterialBlockTargets, point?: NodeMaterialConnectionPoint) {\r\n        point = point ?? new NodeMaterialConnectionPoint(name, this, NodeMaterialConnectionPointDirection.Output);\r\n        point.type = type;\r\n        if (target) {\r\n            point.target = target;\r\n        }\r\n\r\n        this._outputs.push(point);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Will return the first available input e.g. the first one which is not an uniform or an attribute\r\n     * @param forOutput defines an optional connection point to check compatibility with\r\n     * @returns the first available input or null\r\n     */\r\n    public getFirstAvailableInput(forOutput: Nullable<NodeMaterialConnectionPoint> = null) {\r\n        for (const input of this._inputs) {\r\n            if (!input.connectedPoint) {\r\n                if (!forOutput || forOutput.type === input.type || input.type === NodeMaterialBlockConnectionPointTypes.AutoDetect) {\r\n                    return input;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Will return the first available output e.g. the first one which is not yet connected and not a varying\r\n     * @param forBlock defines an optional block to check compatibility with\r\n     * @returns the first available input or null\r\n     */\r\n    public getFirstAvailableOutput(forBlock: Nullable<NodeMaterialBlock> = null) {\r\n        for (const output of this._outputs) {\r\n            if (!forBlock || !forBlock.target || forBlock.target === NodeMaterialBlockTargets.Neutral || (forBlock.target & output.target) !== 0) {\r\n                return output;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the sibling of the given output\r\n     * @param current defines the current output\r\n     * @returns the next output in the list or null\r\n     */\r\n    public getSiblingOutput(current: NodeMaterialConnectionPoint) {\r\n        const index = this._outputs.indexOf(current);\r\n\r\n        if (index === -1 || index >= this._outputs.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._outputs[index + 1];\r\n    }\r\n\r\n    /**\r\n     * Checks if the current block is an ancestor of a given block\r\n     * @param block defines the potential descendant block to check\r\n     * @returns true if block is a descendant\r\n     */\r\n    public isAnAncestorOf(block: NodeMaterialBlock): boolean {\r\n        for (const output of this._outputs) {\r\n            if (!output.hasEndpoints) {\r\n                continue;\r\n            }\r\n\r\n            for (const endpoint of output.endpoints) {\r\n                if (endpoint.ownerBlock === block) {\r\n                    return true;\r\n                }\r\n                if (endpoint.ownerBlock.isAnAncestorOf(block)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Connect current block with another block\r\n     * @param other defines the block to connect with\r\n     * @param options define the various options to help pick the right connections\r\n     * @param options.input\r\n     * @param options.output\r\n     * @param options.outputSwizzle\r\n     * @returns the current block\r\n     */\r\n    public connectTo(\r\n        other: NodeMaterialBlock,\r\n        options?: {\r\n            input?: string;\r\n            output?: string;\r\n            outputSwizzle?: string;\r\n        }\r\n    ) {\r\n        if (this._outputs.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let output = options && options.output ? this.getOutputByName(options.output) : this.getFirstAvailableOutput(other);\r\n\r\n        let notFound = true;\r\n        while (notFound) {\r\n            const input = options && options.input ? other.getInputByName(options.input) : other.getFirstAvailableInput(output);\r\n\r\n            if (output && input && output.canConnectTo(input)) {\r\n                output.connectTo(input);\r\n                notFound = false;\r\n            } else if (!output) {\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw \"Unable to find a compatible match\";\r\n            } else {\r\n                output = this.getSiblingOutput(output);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        // Empty. Must be defined by child nodes\r\n    }\r\n\r\n    /**\r\n     * Add uniforms, samplers and uniform buffers at compilation time\r\n     * @param state defines the state to update\r\n     * @param nodeMaterial defines the node material requesting the update\r\n     * @param defines defines the material defines to update\r\n     * @param uniformBuffers defines the list of uniform buffer names\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public updateUniformsAndSamples(state: NodeMaterialBuildState, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, uniformBuffers: string[]) {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Add potential fallbacks if shader compilation fails\r\n     * @param mesh defines the mesh to be rendered\r\n     * @param fallbacks defines the current prioritized list of fallbacks\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public provideFallbacks(mesh: AbstractMesh, fallbacks: EffectFallbacks) {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Initialize defines for shader compilation\r\n     * @param mesh defines the mesh to be rendered\r\n     * @param nodeMaterial defines the node material requesting the update\r\n     * @param defines defines the material defines to update\r\n     * @param useInstances specifies that instances should be used\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public initializeDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, useInstances: boolean = false) {}\r\n\r\n    /**\r\n     * Update defines for shader compilation\r\n     * @param mesh defines the mesh to be rendered\r\n     * @param nodeMaterial defines the node material requesting the update\r\n     * @param defines defines the material defines to update\r\n     * @param useInstances specifies that instances should be used\r\n     * @param subMesh defines which submesh to render\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, useInstances: boolean = false, subMesh?: SubMesh) {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Lets the block try to connect some inputs automatically\r\n     * @param material defines the hosting NodeMaterial\r\n     * @param additionalFilteringInfo optional additional filtering condition when looking for compatible blocks\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public autoConfigure(material: NodeMaterial, additionalFilteringInfo: (node: NodeMaterialBlock) => boolean = () => true) {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Function called when a block is declared as repeatable content generator\r\n     * @param vertexShaderState defines the current compilation state for the vertex shader\r\n     * @param fragmentShaderState defines the current compilation state for the fragment shader\r\n     * @param mesh defines the mesh to be rendered\r\n     * @param defines defines the material defines to update\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public replaceRepeatableContent(vertexShaderState: NodeMaterialBuildState, fragmentShaderState: NodeMaterialBuildState, mesh: AbstractMesh, defines: NodeMaterialDefines) {\r\n        // Do nothing\r\n    }\r\n\r\n    /** Gets a boolean indicating that the code of this block will be promoted to vertex shader even if connected to fragment output */\r\n    public get willBeGeneratedIntoVertexShaderFromFragmentShader(): boolean {\r\n        if (this.isInput || this.isFinalMerger) {\r\n            return false;\r\n        }\r\n\r\n        if (this._outputs.some((o) => o.isDirectlyConnectedToVertexOutput)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.target === NodeMaterialBlockTargets.Vertex) {\r\n            return false;\r\n        }\r\n\r\n        if (this.target === NodeMaterialBlockTargets.VertexAndFragment || this.target === NodeMaterialBlockTargets.Neutral) {\r\n            if (this._outputs.some((o) => o.isConnectedInVertexShader)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the block is ready\r\n     * @param mesh defines the mesh to be rendered\r\n     * @param nodeMaterial defines the node material requesting the update\r\n     * @param defines defines the material defines to update\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns true if the block is ready\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isReady(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, useInstances: boolean = false) {\r\n        return true;\r\n    }\r\n\r\n    protected _linkConnectionTypes(inputIndex0: number, inputIndex1: number, looseCoupling = false) {\r\n        if (looseCoupling) {\r\n            this._inputs[inputIndex1]._acceptedConnectionPointType = this._inputs[inputIndex0];\r\n        } else {\r\n            this._inputs[inputIndex0]._linkedConnectionSource = this._inputs[inputIndex1];\r\n        }\r\n        this._inputs[inputIndex1]._linkedConnectionSource = this._inputs[inputIndex0];\r\n    }\r\n\r\n    private _processBuild(block: NodeMaterialBlock, state: NodeMaterialBuildState, input: NodeMaterialConnectionPoint, activeBlocks: NodeMaterialBlock[]) {\r\n        block.build(state, activeBlocks);\r\n\r\n        const localBlockIsFragment = state._vertexState != null;\r\n        const otherBlockWasGeneratedInVertexShader = block._buildTarget === NodeMaterialBlockTargets.Vertex && block.target !== NodeMaterialBlockTargets.VertexAndFragment;\r\n\r\n        if (\r\n            localBlockIsFragment &&\r\n            ((block.target & block._buildTarget) === 0 ||\r\n                (block.target & input.target) === 0 ||\r\n                (this.target !== NodeMaterialBlockTargets.VertexAndFragment && otherBlockWasGeneratedInVertexShader))\r\n        ) {\r\n            // context switch! We need a varying\r\n            if (\r\n                (!block.isInput && state.target !== block._buildTarget) || // block was already emitted by vertex shader\r\n                (block.isInput && (block as InputBlock).isAttribute && !(block as InputBlock)._noContextSwitch) // block is an attribute\r\n            ) {\r\n                const connectedPoint = input.connectedPoint!;\r\n                if (state._vertexState._emitVaryingFromString(\"v_\" + connectedPoint.associatedVariableName, state._getGLType(connectedPoint.type))) {\r\n                    state._vertexState.compilationString += `${\"v_\" + connectedPoint.associatedVariableName} = ${connectedPoint.associatedVariableName};\\n`;\r\n                }\r\n                input.associatedVariableName = \"v_\" + connectedPoint.associatedVariableName;\r\n                input._enforceAssociatedVariableName = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates the new name for the block node.\r\n     * @param newName the new name to be given to the node.\r\n     * @returns false if the name is a reserve word, else true.\r\n     */\r\n    public validateBlockName(newName: string) {\r\n        const reservedNames: Array<string> = [\r\n            \"position\",\r\n            \"normal\",\r\n            \"tangent\",\r\n            \"particle_positionw\",\r\n            \"uv\",\r\n            \"uv2\",\r\n            \"uv3\",\r\n            \"uv4\",\r\n            \"uv5\",\r\n            \"uv6\",\r\n            \"position2d\",\r\n            \"particle_uv\",\r\n            \"matricesIndices\",\r\n            \"matricesWeights\",\r\n            \"world0\",\r\n            \"world1\",\r\n            \"world2\",\r\n            \"world3\",\r\n            \"particle_color\",\r\n            \"particle_texturemask\",\r\n        ];\r\n        for (const reservedName of reservedNames) {\r\n            if (newName === reservedName) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _customBuildStep(state: NodeMaterialBuildState, activeBlocks: NodeMaterialBlock[]): void {\r\n        // Must be implemented by children\r\n    }\r\n\r\n    /**\r\n     * Compile the current node and generate the shader code\r\n     * @param state defines the current compilation state (uniforms, samplers, current string)\r\n     * @param activeBlocks defines the list of active blocks (i.e. blocks to compile)\r\n     * @returns true if already built\r\n     */\r\n    public build(state: NodeMaterialBuildState, activeBlocks: NodeMaterialBlock[]): boolean {\r\n        if (this._buildId === state.sharedData.buildId) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.isInput) {\r\n            /** Prepare outputs */\r\n            for (const output of this._outputs) {\r\n                if (!output.associatedVariableName) {\r\n                    output.associatedVariableName = state._getFreeVariableName(output.name);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check if \"parent\" blocks are compiled\r\n        for (const input of this._inputs) {\r\n            if (!input.connectedPoint) {\r\n                if (!input.isOptional) {\r\n                    // Emit a warning\r\n                    state.sharedData.checks.notConnectedNonOptionalInputs.push(input);\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (this.target !== NodeMaterialBlockTargets.Neutral) {\r\n                if ((input.target & this.target!) === 0) {\r\n                    continue;\r\n                }\r\n\r\n                if ((input.target & state.target!) === 0) {\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            const block = input.connectedPoint.ownerBlock;\r\n            if (block && block !== this) {\r\n                this._processBuild(block, state, input, activeBlocks);\r\n            }\r\n        }\r\n\r\n        this._customBuildStep(state, activeBlocks);\r\n\r\n        if (this._buildId === state.sharedData.buildId) {\r\n            return true; // Need to check again as inputs can be connected multiple time to this endpoint\r\n        }\r\n\r\n        // Logs\r\n        if (state.sharedData.verbose) {\r\n            Logger.Log(`${state.target === NodeMaterialBlockTargets.Vertex ? \"Vertex shader\" : \"Fragment shader\"}: Building ${this.name} [${this.getClassName()}]`);\r\n        }\r\n\r\n        // Checks final outputs\r\n        if (this.isFinalMerger) {\r\n            switch (state.target) {\r\n                case NodeMaterialBlockTargets.Vertex:\r\n                    state.sharedData.checks.emitVertex = true;\r\n                    break;\r\n                case NodeMaterialBlockTargets.Fragment:\r\n                    state.sharedData.checks.emitFragment = true;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (!this.isInput && state.sharedData.emitComments) {\r\n            state.compilationString += `\\n//${this.name}\\n`;\r\n        }\r\n\r\n        this._buildBlock(state);\r\n\r\n        this._buildId = state.sharedData.buildId;\r\n        this._buildTarget = state.target;\r\n\r\n        // Compile connected blocks\r\n        for (const output of this._outputs) {\r\n            if ((output.target & state.target) === 0) {\r\n                continue;\r\n            }\r\n\r\n            for (const endpoint of output.endpoints) {\r\n                const block = endpoint.ownerBlock;\r\n\r\n                if (block && (block.target & state.target) !== 0 && activeBlocks.indexOf(block) !== -1) {\r\n                    this._processBuild(block, state, endpoint, activeBlocks);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected _inputRename(name: string) {\r\n        return name;\r\n    }\r\n\r\n    protected _outputRename(name: string) {\r\n        return name;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const variableName = this._codeVariableName;\r\n        return `${variableName}.visibleInInspector = ${this.visibleInInspector};\\n${variableName}.visibleOnFrame = ${this.visibleOnFrame};\\n${variableName}.target = ${this.target};\\n`;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _dumpCode(uniqueNames: string[], alreadyDumped: NodeMaterialBlock[]) {\r\n        alreadyDumped.push(this);\r\n\r\n        // Get unique name\r\n        const nameAsVariableName = this.name.replace(/[^A-Za-z_]+/g, \"\");\r\n        this._codeVariableName = nameAsVariableName || `${this.getClassName()}_${this.uniqueId}`;\r\n\r\n        if (uniqueNames.indexOf(this._codeVariableName) !== -1) {\r\n            let index = 0;\r\n            do {\r\n                index++;\r\n                this._codeVariableName = nameAsVariableName + index;\r\n            } while (uniqueNames.indexOf(this._codeVariableName) !== -1);\r\n        }\r\n\r\n        uniqueNames.push(this._codeVariableName);\r\n\r\n        // Declaration\r\n        let codeString = `\\n// ${this.getClassName()}\\n`;\r\n        if (this.comments) {\r\n            codeString += `// ${this.comments}\\n`;\r\n        }\r\n        codeString += `var ${this._codeVariableName} = new BABYLON.${this.getClassName()}(\"${this.name}\");\\n`;\r\n\r\n        // Properties\r\n        codeString += this._dumpPropertiesCode();\r\n\r\n        // Inputs\r\n        for (const input of this.inputs) {\r\n            if (!input.isConnected) {\r\n                continue;\r\n            }\r\n\r\n            const connectedOutput = input.connectedPoint!;\r\n            const connectedBlock = connectedOutput.ownerBlock;\r\n\r\n            if (alreadyDumped.indexOf(connectedBlock) === -1) {\r\n                codeString += connectedBlock._dumpCode(uniqueNames, alreadyDumped);\r\n            }\r\n        }\r\n\r\n        // Outputs\r\n        for (const output of this.outputs) {\r\n            if (!output.hasEndpoints) {\r\n                continue;\r\n            }\r\n\r\n            for (const endpoint of output.endpoints) {\r\n                const connectedBlock = endpoint.ownerBlock;\r\n                if (connectedBlock && alreadyDumped.indexOf(connectedBlock) === -1) {\r\n                    codeString += connectedBlock._dumpCode(uniqueNames, alreadyDumped);\r\n                }\r\n            }\r\n        }\r\n\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _dumpCodeForOutputConnections(alreadyDumped: NodeMaterialBlock[]) {\r\n        let codeString = \"\";\r\n\r\n        if (alreadyDumped.indexOf(this) !== -1) {\r\n            return codeString;\r\n        }\r\n\r\n        alreadyDumped.push(this);\r\n\r\n        for (const input of this.inputs) {\r\n            if (!input.isConnected) {\r\n                continue;\r\n            }\r\n\r\n            const connectedOutput = input.connectedPoint!;\r\n            const connectedBlock = connectedOutput.ownerBlock;\r\n\r\n            codeString += connectedBlock._dumpCodeForOutputConnections(alreadyDumped);\r\n            codeString += `${connectedBlock._codeVariableName}.${connectedBlock._outputRename(connectedOutput.name)}.connectTo(${this._codeVariableName}.${this._inputRename(\r\n                input.name\r\n            )});\\n`;\r\n        }\r\n\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Clone the current block to a new identical block\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a copy of the current block\r\n     */\r\n    public clone(scene: Scene, rootUrl: string = \"\") {\r\n        const serializationObject = this.serialize();\r\n\r\n        const blockType = GetClass(serializationObject.customType);\r\n        if (blockType) {\r\n            const block: NodeMaterialBlock = new blockType();\r\n            block._deserialize(serializationObject, scene, rootUrl);\r\n\r\n            return block;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n        serializationObject.customType = \"BABYLON.\" + this.getClassName();\r\n        serializationObject.id = this.uniqueId;\r\n        serializationObject.name = this.name;\r\n        serializationObject.comments = this.comments;\r\n        serializationObject.visibleInInspector = this.visibleInInspector;\r\n        serializationObject.visibleOnFrame = this.visibleOnFrame;\r\n        serializationObject.target = this.target;\r\n\r\n        serializationObject.inputs = [];\r\n        serializationObject.outputs = [];\r\n\r\n        for (const input of this.inputs) {\r\n            serializationObject.inputs.push(input.serialize());\r\n        }\r\n\r\n        for (const output of this.outputs) {\r\n            serializationObject.outputs.push(output.serialize(false));\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        this.name = serializationObject.name;\r\n        this.comments = serializationObject.comments;\r\n        this.visibleInInspector = !!serializationObject.visibleInInspector;\r\n        this.visibleOnFrame = !!serializationObject.visibleOnFrame;\r\n        this._target = serializationObject.target ?? this.target;\r\n        this._deserializePortDisplayNamesAndExposedOnFrame(serializationObject);\r\n    }\r\n\r\n    private _deserializePortDisplayNamesAndExposedOnFrame(serializationObject: any) {\r\n        const serializedInputs = serializationObject.inputs;\r\n        const serializedOutputs = serializationObject.outputs;\r\n        if (serializedInputs) {\r\n            serializedInputs.forEach((port: any, i: number) => {\r\n                if (port.displayName) {\r\n                    this.inputs[i].displayName = port.displayName;\r\n                }\r\n                if (port.isExposedOnFrame) {\r\n                    this.inputs[i].isExposedOnFrame = port.isExposedOnFrame;\r\n                    this.inputs[i].exposedPortPosition = port.exposedPortPosition;\r\n                }\r\n            });\r\n        }\r\n        if (serializedOutputs) {\r\n            serializedOutputs.forEach((port: any, i: number) => {\r\n                if (port.displayName) {\r\n                    this.outputs[i].displayName = port.displayName;\r\n                }\r\n                if (port.isExposedOnFrame) {\r\n                    this.outputs[i].isExposedOnFrame = port.isExposedOnFrame;\r\n                    this.outputs[i].exposedPortPosition = port.exposedPortPosition;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release resources\r\n     */\r\n    public dispose() {\r\n        for (const input of this.inputs) {\r\n            input.dispose();\r\n        }\r\n\r\n        for (const output of this.outputs) {\r\n            output.dispose();\r\n        }\r\n    }\r\n}\r\n", "import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport type { InputBlock } from \"./Input/inputBlock\";\r\nimport type { AbstractMesh } from \"../../../Meshes/abstractMesh\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../nodeMaterial\";\r\n\r\n/**\r\n * Block used to transform a vector (2, 3 or 4) with a matrix. It will generate a Vector4\r\n */\r\nexport class TransformBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Defines the value to use to complement W value to transform it to a Vector4\r\n     */\r\n    public complementW = 1;\r\n\r\n    /**\r\n     * Defines the value to use to complement z value to transform it to a Vector4\r\n     */\r\n    public complementZ = 0;\r\n\r\n    /**\r\n     * Creates a new TransformBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.target = NodeMaterialBlockTargets.Vertex;\r\n\r\n        this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"transform\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n\r\n        this._inputs[0].onConnectionObservable.add((other) => {\r\n            if (other.ownerBlock.isInput) {\r\n                const otherAsInput = other.ownerBlock as InputBlock;\r\n\r\n                if (otherAsInput.name === \"normal\" || otherAsInput.name === \"tangent\") {\r\n                    this.complementW = 0;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"TransformBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the vector input\r\n     */\r\n    public get vector(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the xyz output component\r\n     */\r\n    public get xyz(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix transform input\r\n     */\r\n    public get transform(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const vector = this.vector;\r\n        const transform = this.transform;\r\n\r\n        if (vector.connectedPoint) {\r\n            // None uniform scaling case.\r\n            if (this.complementW === 0) {\r\n                const comments = `//${this.name}`;\r\n                state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n                state.sharedData.blocksWithDefines.push(this);\r\n\r\n                const transformName = state._getFreeVariableName(`${transform.associatedVariableName}_NUS`);\r\n                state.compilationString += `mat3 ${transformName} = mat3(${transform.associatedVariableName});\\n`;\r\n                state.compilationString += `#ifdef NONUNIFORMSCALING\\n`;\r\n                state.compilationString += `${transformName} = transposeMat3(inverseMat3(${transformName}));\\n`;\r\n                state.compilationString += `#endif\\n`;\r\n                switch (vector.connectedPoint.type) {\r\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                        state.compilationString +=\r\n                            this._declareOutput(this.output, state) +\r\n                            ` = vec4(${transformName} * vec3(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}), ${this._writeFloat(this.complementW)});\\n`;\r\n                        break;\r\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                        state.compilationString +=\r\n                            this._declareOutput(this.output, state) + ` = vec4(${transformName} * ${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\n`;\r\n                        break;\r\n                    default:\r\n                        state.compilationString +=\r\n                            this._declareOutput(this.output, state) + ` = vec4(${transformName} * ${vector.associatedVariableName}.xyz, ${this._writeFloat(this.complementW)});\\n`;\r\n                        break;\r\n                }\r\n            } else {\r\n                const transformName = transform.associatedVariableName;\r\n                switch (vector.connectedPoint.type) {\r\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                        state.compilationString +=\r\n                            this._declareOutput(this.output, state) +\r\n                            ` = ${transformName} * vec4(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}, ${this._writeFloat(this.complementW)});\\n`;\r\n                        break;\r\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                        state.compilationString +=\r\n                            this._declareOutput(this.output, state) + ` = ${transformName} * vec4(${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\n`;\r\n                        break;\r\n                    default:\r\n                        state.compilationString += this._declareOutput(this.output, state) + ` = ${transformName} * ${vector.associatedVariableName};\\n`;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (this.xyz.hasEndpoints) {\r\n                state.compilationString += this._declareOutput(this.xyz, state) + ` = ${this.output.associatedVariableName}.xyz;\\n`;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update defines for shader compilation\r\n     * @param mesh defines the mesh to be rendered\r\n     * @param nodeMaterial defines the node material requesting the update\r\n     * @param defines defines the material defines to update\r\n     */\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        // Do nothing\r\n        if (mesh.nonUniformScaling) {\r\n            defines.setValue(\"NONUNIFORMSCALING\", true);\r\n        }\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.complementZ = this.complementZ;\r\n        serializationObject.complementW = this.complementW;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.complementZ = serializationObject.complementZ !== undefined ? serializationObject.complementZ : 0.0;\r\n        this.complementW = serializationObject.complementW !== undefined ? serializationObject.complementW : 1.0;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.complementZ = ${this.complementZ};\\n`;\r\n\r\n        codeString += `${this._codeVariableName}.complementW = ${this.complementW};\\n`;\r\n\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.TransformBlock\", TransformBlock);\r\n", "import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { Immutable } from \"../../../../types\";\r\n\r\nimport type { FragmentOutputBlock } from \"../Fragment/fragmentOutputBlock\";\r\n\r\n/**\r\n * Block used to output the vertex position\r\n */\r\nexport class VertexOutputBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new VertexOutputBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Vertex, true);\r\n\r\n        this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"VertexOutputBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the vector input component\r\n     */\r\n    public get vector(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    private _isLogarithmicDepthEnabled(nodeList: Immutable<NodeMaterialBlock[]>, useLogarithmicDepth: boolean): boolean {\r\n        if (useLogarithmicDepth) {\r\n            return true;\r\n        }\r\n\r\n        for (const node of nodeList) {\r\n            if ((node as FragmentOutputBlock).useLogarithmicDepth) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const input = this.vector;\r\n\r\n        state.compilationString += `gl_Position = ${input.associatedVariableName};\\n`;\r\n\r\n        if (this._isLogarithmicDepthEnabled(state.sharedData.fragmentOutputNodes, state.sharedData.nodeMaterial.useLogarithmicDepth)) {\r\n            state._emitUniformFromString(\"logarithmicDepthConstant\", \"float\");\r\n            state._emitVaryingFromString(\"vFragmentDepth\", \"float\");\r\n\r\n            state.compilationString += `vFragmentDepth = 1.0 + gl_Position.w;\\n`;\r\n            state.compilationString += `gl_Position.z = log2(max(0.000001, vFragmentDepth)) * logarithmicDepthConstant;\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.VertexOutputBlock\", VertexOutputBlock);\r\n", "import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\n\r\n/**\r\n * Enum defining the type of properties that can be edited in the property pages in the node editor\r\n */\r\nexport enum PropertyTypeForEdition {\r\n    /** property is a boolean */\r\n    Boolean,\r\n    /** property is a float */\r\n    Float,\r\n    /** property is a int */\r\n    Int,\r\n    /** property is a Vector2 */\r\n    Vector2,\r\n    /** property is a list of values */\r\n    List,\r\n}\r\n\r\n/**\r\n * Interface that defines an option in a variable of type list\r\n */\r\nexport interface IEditablePropertyListOption {\r\n    /** label of the option */\r\n    label: string;\r\n    /** value of the option */\r\n    value: number;\r\n}\r\n\r\n/**\r\n * Interface that defines the options available for an editable property\r\n */\r\nexport interface IEditablePropertyOption {\r\n    /** min value */\r\n    min?: number;\r\n    /** max value */\r\n    max?: number;\r\n    /** notifiers: indicates which actions to take when the property is changed */\r\n    notifiers?: {\r\n        /** the entity should be rebuilt */\r\n        rebuild?: boolean;\r\n        /** the preview should be updated */\r\n        update?: boolean;\r\n        /** the onPreviewCommandActivated observer of the preview manager should be triggered */\r\n        activatePreviewCommand?: boolean;\r\n        /** a callback to trigger */\r\n        callback?: (scene: Nullable<Scene>, block: any) => boolean | undefined | void;\r\n        /** a callback to validate the property. Returns true if the property is ok, else false. If false, the rebuild/update/callback events won't be called */\r\n        onValidation?: (block: any, propertyName: string) => boolean;\r\n    };\r\n    /** list of the options for a variable of type list */\r\n    options?: IEditablePropertyListOption[];\r\n}\r\n\r\n/**\r\n * Interface that describes an editable property\r\n */\r\nexport interface IPropertyDescriptionForEdition {\r\n    /** name of the property */\r\n    propertyName: string;\r\n    /** display name of the property */\r\n    displayName: string;\r\n    /** type of the property */\r\n    type: PropertyTypeForEdition;\r\n    /** group of the property - all properties with the same group value will be displayed in a specific section */\r\n    groupName: string;\r\n    /** options for the property */\r\n    options: IEditablePropertyOption;\r\n}\r\n\r\n/**\r\n * Decorator that flags a property in a node block as being editable\r\n * @param displayName the display name of the property\r\n * @param propertyType the type of the property\r\n * @param groupName the group name of the property\r\n * @param options the options of the property\r\n * @returns the decorator\r\n */\r\nexport function editableInPropertyPage(\r\n    displayName: string,\r\n    propertyType: PropertyTypeForEdition = PropertyTypeForEdition.Boolean,\r\n    groupName: string = \"PROPERTIES\",\r\n    options?: IEditablePropertyOption\r\n) {\r\n    return (target: any, propertyKey: string) => {\r\n        let propStore: IPropertyDescriptionForEdition[] = target._propStore;\r\n        if (!propStore) {\r\n            propStore = [];\r\n            target._propStore = propStore;\r\n        }\r\n        propStore.push({\r\n            propertyName: propertyKey,\r\n            displayName: displayName,\r\n            type: propertyType,\r\n            groupName: groupName,\r\n            options: options ?? {},\r\n        });\r\n    };\r\n}\r\n", "import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { NodeMaterialDefines, NodeMaterial } from \"../../nodeMaterial\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../../../Decorators/nodeDecorator\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport { BindLogDepth } from \"../../../materialHelper.functions\";\r\n\r\n/**\r\n * Block used to output the final color\r\n */\r\nexport class FragmentOutputBlock extends NodeMaterialBlock {\r\n    private _linearDefineName: string;\r\n    private _gammaDefineName: string;\r\n\r\n    /**\r\n     * Create a new FragmentOutputBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment, true);\r\n\r\n        this.registerInput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, true);\r\n        this.registerInput(\"rgb\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.registerInput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.rgb.addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Float\r\n        );\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if content needs to be converted to gamma space */\r\n    @editableInPropertyPage(\"Convert to gamma space\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: true } })\r\n    public convertToGammaSpace = false;\r\n\r\n    /** Gets or sets a boolean indicating if content needs to be converted to linear space */\r\n    @editableInPropertyPage(\"Convert to linear space\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: true } })\r\n    public convertToLinearSpace = false;\r\n\r\n    /** Gets or sets a boolean indicating if logarithmic depth should be used */\r\n    @editableInPropertyPage(\"Use logarithmic depth\", PropertyTypeForEdition.Boolean, \"PROPERTIES\")\r\n    public useLogarithmicDepth = false;\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"FragmentOutputBlock\";\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"logarithmicDepthConstant\");\r\n        state._excludeVariableName(\"vFragmentDepth\");\r\n    }\r\n\r\n    /**\r\n     * Gets the rgba input component\r\n     */\r\n    public get rgba(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb input component\r\n     */\r\n    public get rgb(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the a input component\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        defines.setValue(this._linearDefineName, this.convertToLinearSpace, true);\r\n        defines.setValue(this._gammaDefineName, this.convertToGammaSpace, true);\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if ((this.useLogarithmicDepth || nodeMaterial.useLogarithmicDepth) && mesh) {\r\n            BindLogDepth(undefined, effect, mesh.getScene());\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const rgba = this.rgba;\r\n        const rgb = this.rgb;\r\n        const a = this.a;\r\n\r\n        state.sharedData.hints.needAlphaBlending = rgba.isConnected || a.isConnected;\r\n        state.sharedData.blocksWithDefines.push(this);\r\n        if (this.useLogarithmicDepth || state.sharedData.nodeMaterial.useLogarithmicDepth) {\r\n            state._emitUniformFromString(\"logarithmicDepthConstant\", \"float\");\r\n            state._emitVaryingFromString(\"vFragmentDepth\", \"float\");\r\n            state.sharedData.bindableBlocks.push(this);\r\n        }\r\n        this._linearDefineName = state._getFreeDefineName(\"CONVERTTOLINEAR\");\r\n        this._gammaDefineName = state._getFreeDefineName(\"CONVERTTOGAMMA\");\r\n\r\n        const comments = `//${this.name}`;\r\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n\r\n        if (rgba.connectedPoint) {\r\n            if (a.isConnected) {\r\n                state.compilationString += `gl_FragColor = vec4(${rgba.associatedVariableName}.rgb, ${a.associatedVariableName});\\n`;\r\n            } else {\r\n                state.compilationString += `gl_FragColor = ${rgba.associatedVariableName};\\n`;\r\n            }\r\n        } else if (rgb.connectedPoint) {\r\n            let aValue = \"1.0\";\r\n\r\n            if (a.connectedPoint) {\r\n                aValue = a.associatedVariableName;\r\n            }\r\n\r\n            if (rgb.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n                state.compilationString += `gl_FragColor = vec4(${rgb.associatedVariableName}, ${rgb.associatedVariableName}, ${rgb.associatedVariableName}, ${aValue});\\n`;\r\n            } else {\r\n                state.compilationString += `gl_FragColor = vec4(${rgb.associatedVariableName}, ${aValue});\\n`;\r\n            }\r\n        } else {\r\n            state.sharedData.checks.notConnectedNonOptionalInputs.push(rgba);\r\n        }\r\n\r\n        state.compilationString += `#ifdef ${this._linearDefineName}\\n`;\r\n        state.compilationString += `gl_FragColor = toLinearSpace(gl_FragColor);\\n`;\r\n        state.compilationString += `#endif\\n`;\r\n\r\n        state.compilationString += `#ifdef ${this._gammaDefineName}\\n`;\r\n        state.compilationString += `gl_FragColor = toGammaSpace(gl_FragColor);\\n`;\r\n        state.compilationString += `#endif\\n`;\r\n\r\n        if (this.useLogarithmicDepth || state.sharedData.nodeMaterial.useLogarithmicDepth) {\r\n            state.compilationString += `gl_FragDepthEXT = log2(vFragmentDepth) * logarithmicDepthConstant * 0.5;\\n`;\r\n        }\r\n\r\n        state.compilationString += `#if defined(PREPASS)\\r\\n`;\r\n        state.compilationString += `gl_FragData[0] = gl_FragColor;\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n        codeString += `${this._codeVariableName}.convertToGammaSpace = ${this.convertToGammaSpace};\\n`;\r\n        codeString += `${this._codeVariableName}.convertToLinearSpace = ${this.convertToLinearSpace};\\n`;\r\n        codeString += `${this._codeVariableName}.useLogarithmicDepth = ${this.useLogarithmicDepth};\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.convertToGammaSpace = this.convertToGammaSpace;\r\n        serializationObject.convertToLinearSpace = this.convertToLinearSpace;\r\n        serializationObject.useLogarithmicDepth = this.useLogarithmicDepth;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.convertToGammaSpace = serializationObject.convertToGammaSpace;\r\n        this.convertToLinearSpace = serializationObject.convertToLinearSpace;\r\n        this.useLogarithmicDepth = serializationObject.useLogarithmicDepth ?? false;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FragmentOutputBlock\", FragmentOutputBlock);\r\n", "/**\r\n * Enum defining the mode of a NodeMaterialBlockConnectionPoint\r\n */\r\nexport enum NodeMaterialBlockConnectionPointMode {\r\n    /** Value is an uniform */\r\n    Uniform,\r\n    /** Value is a mesh attribute */\r\n    Attribute,\r\n    /** Value is a varying between vertex and fragment shaders */\r\n    Varying,\r\n    /** Mode is undefined */\r\n    Undefined,\r\n}\r\n", "/**\r\n * Enum used to define system values e.g. values automatically provided by the system\r\n */\r\nexport enum NodeMaterialSystemValues {\r\n    /** World */\r\n    World = 1,\r\n    /** View */\r\n    View = 2,\r\n    /** Projection */\r\n    Projection = 3,\r\n    /** ViewProjection */\r\n    ViewProjection = 4,\r\n    /** WorldView */\r\n    WorldView = 5,\r\n    /** WorldViewProjection */\r\n    WorldViewProjection = 6,\r\n    /** CameraPosition */\r\n    CameraPosition = 7,\r\n    /** Fog Color */\r\n    FogColor = 8,\r\n    /** Delta time */\r\n    DeltaTime = 9,\r\n    /** Camera parameters */\r\n    CameraParameters = 10,\r\n    /** Material alpha */\r\n    MaterialAlpha = 11,\r\n}\r\n", "import type { DeepImmutable, Nullable } from \"../types\";\r\nimport { Scalar } from \"./math.scalar\";\r\nimport { Vector2, Vector3, Quaternion, Matrix } from \"./math.vector\";\r\nimport type { Vector4 } from \"./math.vector\";\r\nimport { Epsilon } from \"./math.constants\";\r\n\r\n/**\r\n * Defines potential orientation for back face culling\r\n */\r\nexport enum Orientation {\r\n    /**\r\n     * Clockwise\r\n     */\r\n    CW = 0,\r\n    /** Counter clockwise */\r\n    CCW = 1,\r\n}\r\n\r\n/** Class used to represent a Bezier curve */\r\nexport class BezierCurve {\r\n    /**\r\n     * Returns the cubic Bezier interpolated value (float) at \"t\" (float) from the given x1, y1, x2, y2 floats\r\n     * @param t defines the time\r\n     * @param x1 defines the left coordinate on X axis\r\n     * @param y1 defines the left coordinate on Y axis\r\n     * @param x2 defines the right coordinate on X axis\r\n     * @param y2 defines the right coordinate on Y axis\r\n     * @returns the interpolated value\r\n     */\r\n    public static Interpolate(t: number, x1: number, y1: number, x2: number, y2: number): number {\r\n        // Extract X (which is equal to time here)\r\n        const f0 = 1 - 3 * x2 + 3 * x1;\r\n        const f1 = 3 * x2 - 6 * x1;\r\n        const f2 = 3 * x1;\r\n\r\n        let refinedT = t;\r\n        for (let i = 0; i < 5; i++) {\r\n            const refinedT2 = refinedT * refinedT;\r\n            const refinedT3 = refinedT2 * refinedT;\r\n\r\n            const x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT;\r\n            const slope = 1.0 / (3.0 * f0 * refinedT2 + 2.0 * f1 * refinedT + f2);\r\n            refinedT -= (x - t) * slope;\r\n            refinedT = Math.min(1, Math.max(0, refinedT));\r\n        }\r\n\r\n        // Resolve cubic bezier for the given x\r\n        return 3 * Math.pow(1 - refinedT, 2) * refinedT * y1 + 3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 + Math.pow(refinedT, 3);\r\n    }\r\n}\r\n\r\n/**\r\n * Defines angle representation\r\n */\r\nexport class Angle {\r\n    private _radians: number;\r\n\r\n    /**\r\n     * Creates an Angle object of \"radians\" radians (float).\r\n     * @param radians the angle in radians\r\n     */\r\n    constructor(radians: number) {\r\n        this._radians = radians;\r\n        if (this._radians < 0.0) {\r\n            this._radians += 2.0 * Math.PI;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get value in degrees\r\n     * @returns the Angle value in degrees (float)\r\n     */\r\n    public degrees() {\r\n        return (this._radians * 180.0) / Math.PI;\r\n    }\r\n\r\n    /**\r\n     * Get value in radians\r\n     * @returns the Angle value in radians (float)\r\n     */\r\n    public radians() {\r\n        return this._radians;\r\n    }\r\n\r\n    /**\r\n     * Gets a new Angle object with a value of the angle (in radians) between the line connecting the two points and the x-axis\r\n     * @param a defines first point as the origin\r\n     * @param b defines point\r\n     * @returns a new Angle\r\n     */\r\n    public static BetweenTwoPoints(a: DeepImmutable<Vector2>, b: DeepImmutable<Vector2>): Angle {\r\n        const delta = b.subtract(a);\r\n        const theta = Math.atan2(delta.y, delta.x);\r\n        return new Angle(theta);\r\n    }\r\n\r\n    /**\r\n     * Gets the angle between the two vectors\r\n     * @param a defines first vector\r\n     * @param b defines vector\r\n     * @returns Returns an new Angle between 0 and PI\r\n     */\r\n    public static BetweenTwoVectors<Vec extends Vector2 | Vector3 | Vector4>(a: DeepImmutable<Vec>, b: DeepImmutable<Vec>): Angle {\r\n        let product = a.lengthSquared() * b.lengthSquared();\r\n        if (product === 0) return new Angle(Math.PI / 2);\r\n        product = Math.sqrt(product);\r\n        let cosVal = a.dot(b as any) / product;\r\n        cosVal = Scalar.Clamp(cosVal, -1, 1);\r\n        const angle = Math.acos(cosVal);\r\n        return new Angle(angle);\r\n    }\r\n\r\n    /**\r\n     * Gets a new Angle object from the given float in radians\r\n     * @param radians defines the angle value in radians\r\n     * @returns a new Angle\r\n     */\r\n    public static FromRadians(radians: number): Angle {\r\n        return new Angle(radians);\r\n    }\r\n    /**\r\n     * Gets a new Angle object from the given float in degrees\r\n     * @param degrees defines the angle value in degrees\r\n     * @returns a new Angle\r\n     */\r\n    public static FromDegrees(degrees: number): Angle {\r\n        return new Angle((degrees * Math.PI) / 180.0);\r\n    }\r\n}\r\n\r\n/**\r\n * This represents an arc in a 2d space.\r\n */\r\nexport class Arc2 {\r\n    /**\r\n     * Defines the center point of the arc.\r\n     */\r\n    public centerPoint: Vector2;\r\n    /**\r\n     * Defines the radius of the arc.\r\n     */\r\n    public radius: number;\r\n    /**\r\n     * Defines the angle of the arc (from mid point to end point).\r\n     */\r\n    public angle: Angle;\r\n    /**\r\n     * Defines the start angle of the arc (from start point to middle point).\r\n     */\r\n    public startAngle: Angle;\r\n    /**\r\n     * Defines the orientation of the arc (clock wise/counter clock wise).\r\n     */\r\n    public orientation: Orientation;\r\n\r\n    /**\r\n     * Creates an Arc object from the three given points : start, middle and end.\r\n     * @param startPoint Defines the start point of the arc\r\n     * @param midPoint Defines the middle point of the arc\r\n     * @param endPoint Defines the end point of the arc\r\n     */\r\n    constructor(\r\n        /** Defines the start point of the arc */\r\n        public startPoint: Vector2,\r\n        /** Defines the mid point of the arc */\r\n        public midPoint: Vector2,\r\n        /** Defines the end point of the arc */\r\n        public endPoint: Vector2\r\n    ) {\r\n        const temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2);\r\n        const startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2;\r\n        const midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2;\r\n        const det = (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) - (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y);\r\n\r\n        this.centerPoint = new Vector2(\r\n            (startToMid * (midPoint.y - endPoint.y) - midToEnd * (startPoint.y - midPoint.y)) / det,\r\n            ((startPoint.x - midPoint.x) * midToEnd - (midPoint.x - endPoint.x) * startToMid) / det\r\n        );\r\n\r\n        this.radius = this.centerPoint.subtract(this.startPoint).length();\r\n\r\n        this.startAngle = Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);\r\n\r\n        const a1 = this.startAngle.degrees();\r\n        let a2 = Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees();\r\n        let a3 = Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees();\r\n\r\n        // angles correction\r\n        if (a2 - a1 > +180.0) {\r\n            a2 -= 360.0;\r\n        }\r\n        if (a2 - a1 < -180.0) {\r\n            a2 += 360.0;\r\n        }\r\n        if (a3 - a2 > +180.0) {\r\n            a3 -= 360.0;\r\n        }\r\n        if (a3 - a2 < -180.0) {\r\n            a3 += 360.0;\r\n        }\r\n\r\n        this.orientation = a2 - a1 < 0 ? Orientation.CW : Orientation.CCW;\r\n        this.angle = Angle.FromDegrees(this.orientation === Orientation.CW ? a1 - a3 : a3 - a1);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a 2D path made up of multiple 2D points\r\n */\r\nexport class Path2 {\r\n    private _points = new Array<Vector2>();\r\n    private _length = 0.0;\r\n\r\n    /**\r\n     * If the path start and end point are the same\r\n     */\r\n    public closed = false;\r\n\r\n    /**\r\n     * Creates a Path2 object from the starting 2D coordinates x and y.\r\n     * @param x the starting points x value\r\n     * @param y the starting points y value\r\n     */\r\n    constructor(x: number, y: number) {\r\n        this._points.push(new Vector2(x, y));\r\n    }\r\n\r\n    /**\r\n     * Adds a new segment until the given coordinates (x, y) to the current Path2.\r\n     * @param x the added points x value\r\n     * @param y the added points y value\r\n     * @returns the updated Path2.\r\n     */\r\n    public addLineTo(x: number, y: number): Path2 {\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n        const newPoint = new Vector2(x, y);\r\n        const previousPoint = this._points[this._points.length - 1];\r\n        this._points.push(newPoint);\r\n        this._length += newPoint.subtract(previousPoint).length();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\r\n     * @param midX middle point x value\r\n     * @param midY middle point y value\r\n     * @param endX end point x value\r\n     * @param endY end point y value\r\n     * @param numberOfSegments (default: 36)\r\n     * @returns the updated Path2.\r\n     */\r\n    public addArcTo(midX: number, midY: number, endX: number, endY: number, numberOfSegments = 36): Path2 {\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n        const startPoint = this._points[this._points.length - 1];\r\n        const midPoint = new Vector2(midX, midY);\r\n        const endPoint = new Vector2(endX, endY);\r\n\r\n        const arc = new Arc2(startPoint, midPoint, endPoint);\r\n\r\n        let increment = arc.angle.radians() / numberOfSegments;\r\n        if (arc.orientation === Orientation.CW) {\r\n            increment *= -1;\r\n        }\r\n        let currentAngle = arc.startAngle.radians() + increment;\r\n\r\n        for (let i = 0; i < numberOfSegments; i++) {\r\n            const x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x;\r\n            const y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y;\r\n            this.addLineTo(x, y);\r\n            currentAngle += increment;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds _numberOfSegments_ segments according to the quadratic curve definition to the current Path2.\r\n     * @param controlX control point x value\r\n     * @param controlY control point y value\r\n     * @param endX end point x value\r\n     * @param endY end point y value\r\n     * @param numberOfSegments (default: 36)\r\n     * @returns the updated Path2.\r\n     */\r\n    public addQuadraticCurveTo(controlX: number, controlY: number, endX: number, endY: number, numberOfSegments = 36): Path2 {\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n\r\n        const equation = (t: number, val0: number, val1: number, val2: number) => {\r\n            const res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;\r\n            return res;\r\n        };\r\n        const startPoint = this._points[this._points.length - 1];\r\n        for (let i = 0; i <= numberOfSegments; i++) {\r\n            const step = i / numberOfSegments;\r\n            const x = equation(step, startPoint.x, controlX, endX);\r\n            const y = equation(step, startPoint.y, controlY, endY);\r\n            this.addLineTo(x, y);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds _numberOfSegments_ segments according to the bezier curve definition to the current Path2.\r\n     * @param originTangentX tangent vector at the origin point x value\r\n     * @param originTangentY tangent vector at the origin point y value\r\n     * @param destinationTangentX tangent vector at the destination point x value\r\n     * @param destinationTangentY tangent vector at the destination point y value\r\n     * @param endX end point x value\r\n     * @param endY end point y value\r\n     * @param numberOfSegments (default: 36)\r\n     * @returns the updated Path2.\r\n     */\r\n    public addBezierCurveTo(\r\n        originTangentX: number,\r\n        originTangentY: number,\r\n        destinationTangentX: number,\r\n        destinationTangentY: number,\r\n        endX: number,\r\n        endY: number,\r\n        numberOfSegments = 36\r\n    ): Path2 {\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n\r\n        const equation = (t: number, val0: number, val1: number, val2: number, val3: number) => {\r\n            const res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 + 3.0 * t * (1.0 - t) * (1.0 - t) * val1 + 3.0 * t * t * (1.0 - t) * val2 + t * t * t * val3;\r\n            return res;\r\n        };\r\n        const startPoint = this._points[this._points.length - 1];\r\n        for (let i = 0; i <= numberOfSegments; i++) {\r\n            const step = i / numberOfSegments;\r\n            const x = equation(step, startPoint.x, originTangentX, destinationTangentX, endX);\r\n            const y = equation(step, startPoint.y, originTangentY, destinationTangentY, endY);\r\n            this.addLineTo(x, y);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Defines if a given point is inside the polygon defines by the path\r\n     * @param point defines the point to test\r\n     * @returns true if the point is inside\r\n     */\r\n    public isPointInside(point: Vector2) {\r\n        let isInside = false;\r\n        const count = this._points.length;\r\n        for (let p = count - 1, q = 0; q < count; p = q++) {\r\n            let edgeLow = this._points[p];\r\n            let edgeHigh = this._points[q];\r\n\r\n            let edgeDx = edgeHigh.x - edgeLow.x;\r\n            let edgeDy = edgeHigh.y - edgeLow.y;\r\n\r\n            if (Math.abs(edgeDy) > Number.EPSILON) {\r\n                // Not parallel\r\n                if (edgeDy < 0) {\r\n                    edgeLow = this._points[q];\r\n                    edgeDx = -edgeDx;\r\n                    edgeHigh = this._points[p];\r\n                    edgeDy = -edgeDy;\r\n                }\r\n\r\n                if (point.y < edgeLow.y || point.y > edgeHigh.y) {\r\n                    continue;\r\n                }\r\n\r\n                if (point.y === edgeLow.y && point.x === edgeLow.x) {\r\n                    return true;\r\n                } else {\r\n                    const perpEdge = edgeDy * (point.x - edgeLow.x) - edgeDx * (point.y - edgeLow.y);\r\n                    if (perpEdge === 0) {\r\n                        return true;\r\n                    }\r\n                    if (perpEdge < 0) {\r\n                        continue;\r\n                    }\r\n                    isInside = !isInside;\r\n                }\r\n            } else {\r\n                // parallel or collinear\r\n                if (point.y !== edgeLow.y) {\r\n                    continue;\r\n                }\r\n\r\n                if ((edgeHigh.x <= point.x && point.x <= edgeLow.x) || (edgeLow.x <= point.x && point.x <= edgeHigh.x)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isInside;\r\n    }\r\n\r\n    /**\r\n     * Closes the Path2.\r\n     * @returns the Path2.\r\n     */\r\n    public close(): Path2 {\r\n        this.closed = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Gets the sum of the distance between each sequential point in the path\r\n     * @returns the Path2 total length (float).\r\n     */\r\n    public length(): number {\r\n        let result = this._length;\r\n\r\n        if (this.closed) {\r\n            const lastPoint = this._points[this._points.length - 1];\r\n            const firstPoint = this._points[0];\r\n            result += firstPoint.subtract(lastPoint).length();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the area of the polygon defined by the path\r\n     * @returns area value\r\n     */\r\n    public area(): number {\r\n        const n = this._points.length;\r\n        let value = 0.0;\r\n\r\n        for (let p = n - 1, q = 0; q < n; p = q++) {\r\n            value += this._points[p].x * this._points[q].y - this._points[q].x * this._points[p].y;\r\n        }\r\n\r\n        return value * 0.5;\r\n    }\r\n\r\n    /**\r\n     * Gets the points which construct the path\r\n     * @returns the Path2 internal array of points.\r\n     */\r\n    public getPoints(): Vector2[] {\r\n        return this._points;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the point at the distance aways from the starting point\r\n     * @param normalizedLengthPosition the length along the path to retrieve the point from\r\n     * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\r\n     */\r\n    public getPointAtLengthPosition(normalizedLengthPosition: number): Vector2 {\r\n        if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        const lengthPosition = normalizedLengthPosition * this.length();\r\n\r\n        let previousOffset = 0;\r\n        for (let i = 0; i < this._points.length; i++) {\r\n            const j = (i + 1) % this._points.length;\r\n\r\n            const a = this._points[i];\r\n            const b = this._points[j];\r\n            const bToA = b.subtract(a);\r\n\r\n            const nextOffset = bToA.length() + previousOffset;\r\n            if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {\r\n                const dir = bToA.normalize();\r\n                const localOffset = lengthPosition - previousOffset;\r\n\r\n                return new Vector2(a.x + dir.x * localOffset, a.y + dir.y * localOffset);\r\n            }\r\n            previousOffset = nextOffset;\r\n        }\r\n\r\n        return Vector2.Zero();\r\n    }\r\n\r\n    /**\r\n     * Creates a new path starting from an x and y position\r\n     * @param x starting x value\r\n     * @param y starting y value\r\n     * @returns a new Path2 starting at the coordinates (x, y).\r\n     */\r\n    public static StartingAt(x: number, y: number): Path2 {\r\n        return new Path2(x, y);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a 3D path made up of multiple 3D points\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/path3D\r\n */\r\nexport class Path3D {\r\n    private _curve = new Array<Vector3>();\r\n    private _distances = new Array<number>();\r\n    private _tangents = new Array<Vector3>();\r\n    private _normals = new Array<Vector3>();\r\n    private _binormals = new Array<Vector3>();\r\n    private _raw: boolean;\r\n    private _alignTangentsWithPath: boolean;\r\n\r\n    // holds interpolated point data\r\n    private readonly _pointAtData = {\r\n        id: 0,\r\n        point: Vector3.Zero(),\r\n        previousPointArrayIndex: 0,\r\n\r\n        position: 0,\r\n        subPosition: 0,\r\n\r\n        interpolateReady: false,\r\n        interpolationMatrix: Matrix.Identity(),\r\n    };\r\n\r\n    /**\r\n     * new Path3D(path, normal, raw)\r\n     * Creates a Path3D. A Path3D is a logical math object, so not a mesh.\r\n     * please read the description in the tutorial : https://doc.babylonjs.com/features/featuresDeepDive/mesh/path3D\r\n     * @param path an array of Vector3, the curve axis of the Path3D\r\n     * @param firstNormal (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\r\n     * @param raw (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed.\r\n     * @param alignTangentsWithPath (optional, default false) : boolean, if true the tangents will be aligned with the path.\r\n     */\r\n    constructor(\r\n        /**\r\n         * an array of Vector3, the curve axis of the Path3D\r\n         */\r\n        public path: Vector3[],\r\n        firstNormal: Nullable<Vector3> = null,\r\n        raw?: boolean,\r\n        alignTangentsWithPath = false\r\n    ) {\r\n        for (let p = 0; p < path.length; p++) {\r\n            this._curve[p] = path[p].clone(); // hard copy\r\n        }\r\n        this._raw = raw || false;\r\n        this._alignTangentsWithPath = alignTangentsWithPath;\r\n        this._compute(firstNormal, alignTangentsWithPath);\r\n    }\r\n\r\n    /**\r\n     * Returns the Path3D array of successive Vector3 designing its curve.\r\n     * @returns the Path3D array of successive Vector3 designing its curve.\r\n     */\r\n    public getCurve(): Vector3[] {\r\n        return this._curve;\r\n    }\r\n\r\n    /**\r\n     * Returns the Path3D array of successive Vector3 designing its curve.\r\n     * @returns the Path3D array of successive Vector3 designing its curve.\r\n     */\r\n    public getPoints(): Vector3[] {\r\n        return this._curve;\r\n    }\r\n\r\n    /**\r\n     * @returns the computed length (float) of the path.\r\n     */\r\n    public length() {\r\n        return this._distances[this._distances.length - 1];\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with tangent vectors on each Path3D curve point.\r\n     * @returns an array populated with tangent vectors on each Path3D curve point.\r\n     */\r\n    public getTangents(): Vector3[] {\r\n        return this._tangents;\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with normal vectors on each Path3D curve point.\r\n     * @returns an array populated with normal vectors on each Path3D curve point.\r\n     */\r\n    public getNormals(): Vector3[] {\r\n        return this._normals;\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with binormal vectors on each Path3D curve point.\r\n     * @returns an array populated with binormal vectors on each Path3D curve point.\r\n     */\r\n    public getBinormals(): Vector3[] {\r\n        return this._binormals;\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with distances (float) of the i-th point from the first curve point.\r\n     * @returns an array populated with distances (float) of the i-th point from the first curve point.\r\n     */\r\n    public getDistances(): number[] {\r\n        return this._distances;\r\n    }\r\n\r\n    /**\r\n     * Returns an interpolated point along this path\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @returns a new Vector3 as the point\r\n     */\r\n    public getPointAt(position: number): Vector3 {\r\n        return this._updatePointAtData(position).point;\r\n    }\r\n\r\n    /**\r\n     * Returns the tangent vector of an interpolated Path3D curve point at the specified position along this path.\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @param interpolated (optional, default false) : boolean, if true returns an interpolated tangent instead of the tangent of the previous path point.\r\n     * @returns a tangent vector corresponding to the interpolated Path3D curve point, if not interpolated, the tangent is taken from the precomputed tangents array.\r\n     */\r\n    public getTangentAt(position: number, interpolated = false): Vector3 {\r\n        this._updatePointAtData(position, interpolated);\r\n        return interpolated ? Vector3.TransformCoordinates(Vector3.Forward(), this._pointAtData.interpolationMatrix) : this._tangents[this._pointAtData.previousPointArrayIndex];\r\n    }\r\n\r\n    /**\r\n     * Returns the tangent vector of an interpolated Path3D curve point at the specified position along this path.\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @param interpolated (optional, default false) : boolean, if true returns an interpolated normal instead of the normal of the previous path point.\r\n     * @returns a normal vector corresponding to the interpolated Path3D curve point, if not interpolated, the normal is taken from the precomputed normals array.\r\n     */\r\n    public getNormalAt(position: number, interpolated = false): Vector3 {\r\n        this._updatePointAtData(position, interpolated);\r\n        return interpolated ? Vector3.TransformCoordinates(Vector3.Right(), this._pointAtData.interpolationMatrix) : this._normals[this._pointAtData.previousPointArrayIndex];\r\n    }\r\n\r\n    /**\r\n     * Returns the binormal vector of an interpolated Path3D curve point at the specified position along this path.\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @param interpolated (optional, default false) : boolean, if true returns an interpolated binormal instead of the binormal of the previous path point.\r\n     * @returns a binormal vector corresponding to the interpolated Path3D curve point, if not interpolated, the binormal is taken from the precomputed binormals array.\r\n     */\r\n    public getBinormalAt(position: number, interpolated = false): Vector3 {\r\n        this._updatePointAtData(position, interpolated);\r\n        return interpolated ? Vector3.TransformCoordinates(Vector3.UpReadOnly, this._pointAtData.interpolationMatrix) : this._binormals[this._pointAtData.previousPointArrayIndex];\r\n    }\r\n\r\n    /**\r\n     * Returns the distance (float) of an interpolated Path3D curve point at the specified position along this path.\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @returns the distance of the interpolated Path3D curve point at the specified position along this path.\r\n     */\r\n    public getDistanceAt(position: number): number {\r\n        return this.length() * position;\r\n    }\r\n\r\n    /**\r\n     * Returns the array index of the previous point of an interpolated point along this path\r\n     * @param position the position of the point to interpolate along this path, from 0.0 to 1.0\r\n     * @returns the array index\r\n     */\r\n    public getPreviousPointIndexAt(position: number) {\r\n        this._updatePointAtData(position);\r\n        return this._pointAtData.previousPointArrayIndex;\r\n    }\r\n\r\n    /**\r\n     * Returns the position of an interpolated point relative to the two path points it lies between, from 0.0 (point A) to 1.0 (point B)\r\n     * @param position the position of the point to interpolate along this path, from 0.0 to 1.0\r\n     * @returns the sub position\r\n     */\r\n    public getSubPositionAt(position: number) {\r\n        this._updatePointAtData(position);\r\n        return this._pointAtData.subPosition;\r\n    }\r\n\r\n    /**\r\n     * Returns the position of the closest virtual point on this path to an arbitrary Vector3, from 0.0 to 1.0\r\n     * @param target the vector of which to get the closest position to\r\n     * @returns the position of the closest virtual point on this path to the target vector\r\n     */\r\n    public getClosestPositionTo(target: Vector3) {\r\n        let smallestDistance = Number.MAX_VALUE;\r\n        let closestPosition = 0.0;\r\n        for (let i = 0; i < this._curve.length - 1; i++) {\r\n            const point = this._curve[i + 0];\r\n            const tangent = this._curve[i + 1].subtract(point).normalize();\r\n            const subLength = this._distances[i + 1] - this._distances[i + 0];\r\n            const subPosition = Math.min((Math.max(Vector3.Dot(tangent, target.subtract(point).normalize()), 0.0) * Vector3.Distance(point, target)) / subLength, 1.0);\r\n            const distance = Vector3.Distance(point.add(tangent.scale(subPosition * subLength)), target);\r\n\r\n            if (distance < smallestDistance) {\r\n                smallestDistance = distance;\r\n                closestPosition = (this._distances[i + 0] + subLength * subPosition) / this.length();\r\n            }\r\n        }\r\n        return closestPosition;\r\n    }\r\n\r\n    /**\r\n     * Returns a sub path (slice) of this path\r\n     * @param start the position of the fist path point, from 0.0 to 1.0, or a negative value, which will get wrapped around from the end of the path to 0.0 to 1.0 values\r\n     * @param end the position of the last path point, from 0.0 to 1.0, or a negative value, which will get wrapped around from the end of the path to 0.0 to 1.0 values\r\n     * @returns a sub path (slice) of this path\r\n     */\r\n    public slice(start: number = 0.0, end: number = 1.0) {\r\n        if (start < 0.0) {\r\n            start = 1 - ((start * -1.0) % 1.0);\r\n        }\r\n        if (end < 0.0) {\r\n            end = 1 - ((end * -1.0) % 1.0);\r\n        }\r\n        if (start > end) {\r\n            const _start = start;\r\n            start = end;\r\n            end = _start;\r\n        }\r\n        const curvePoints = this.getCurve();\r\n\r\n        const startPoint = this.getPointAt(start);\r\n        let startIndex = this.getPreviousPointIndexAt(start);\r\n\r\n        const endPoint = this.getPointAt(end);\r\n        const endIndex = this.getPreviousPointIndexAt(end) + 1;\r\n\r\n        const slicePoints: Vector3[] = [];\r\n        if (start !== 0.0) {\r\n            startIndex++;\r\n            slicePoints.push(startPoint);\r\n        }\r\n\r\n        slicePoints.push(...curvePoints.slice(startIndex, endIndex));\r\n        if (end !== 1.0 || start === 1.0) {\r\n            slicePoints.push(endPoint);\r\n        }\r\n        return new Path3D(slicePoints, this.getNormalAt(start), this._raw, this._alignTangentsWithPath);\r\n    }\r\n\r\n    /**\r\n     * Forces the Path3D tangent, normal, binormal and distance recomputation.\r\n     * @param path path which all values are copied into the curves points\r\n     * @param firstNormal which should be projected onto the curve\r\n     * @param alignTangentsWithPath (optional, default false) : boolean, if true the tangents will be aligned with the path\r\n     * @returns the same object updated.\r\n     */\r\n    public update(path: Vector3[], firstNormal: Nullable<Vector3> = null, alignTangentsWithPath = false): Path3D {\r\n        for (let p = 0; p < path.length; p++) {\r\n            this._curve[p].x = path[p].x;\r\n            this._curve[p].y = path[p].y;\r\n            this._curve[p].z = path[p].z;\r\n        }\r\n        this._compute(firstNormal, alignTangentsWithPath);\r\n        return this;\r\n    }\r\n\r\n    // private function compute() : computes tangents, normals and binormals\r\n    private _compute(firstNormal: Nullable<Vector3>, alignTangentsWithPath = false): void {\r\n        const l = this._curve.length;\r\n\r\n        if (l < 2) {\r\n            return;\r\n        }\r\n\r\n        // first and last tangents\r\n        this._tangents[0] = this._getFirstNonNullVector(0);\r\n        if (!this._raw) {\r\n            this._tangents[0].normalize();\r\n        }\r\n        this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);\r\n        if (!this._raw) {\r\n            this._tangents[l - 1].normalize();\r\n        }\r\n\r\n        // normals and binormals at first point : arbitrary vector with _normalVector()\r\n        const tg0 = this._tangents[0];\r\n        const pp0 = this._normalVector(tg0, firstNormal);\r\n        this._normals[0] = pp0;\r\n        if (!this._raw) {\r\n            this._normals[0].normalize();\r\n        }\r\n        this._binormals[0] = Vector3.Cross(tg0, this._normals[0]);\r\n        if (!this._raw) {\r\n            this._binormals[0].normalize();\r\n        }\r\n        this._distances[0] = 0.0;\r\n\r\n        // normals and binormals : next points\r\n        let prev: Vector3; // previous vector (segment)\r\n        let cur: Vector3; // current vector (segment)\r\n        let curTang: Vector3; // current tangent\r\n        // previous normal\r\n        let prevNor: Vector3; // previous normal\r\n        let prevBinor: Vector3; // previous binormal\r\n\r\n        for (let i = 1; i < l; i++) {\r\n            // tangents\r\n            prev = this._getLastNonNullVector(i);\r\n            if (i < l - 1) {\r\n                cur = this._getFirstNonNullVector(i);\r\n                this._tangents[i] = alignTangentsWithPath ? cur : prev.add(cur);\r\n                this._tangents[i].normalize();\r\n            }\r\n            this._distances[i] = this._distances[i - 1] + this._curve[i].subtract(this._curve[i - 1]).length();\r\n\r\n            // normals and binormals\r\n            // http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html\r\n            curTang = this._tangents[i];\r\n            prevBinor = this._binormals[i - 1];\r\n            this._normals[i] = Vector3.Cross(prevBinor, curTang);\r\n            if (!this._raw) {\r\n                if (this._normals[i].length() === 0) {\r\n                    prevNor = this._normals[i - 1];\r\n                    this._normals[i] = prevNor.clone();\r\n                } else {\r\n                    this._normals[i].normalize();\r\n                }\r\n            }\r\n            this._binormals[i] = Vector3.Cross(curTang, this._normals[i]);\r\n            if (!this._raw) {\r\n                this._binormals[i].normalize();\r\n            }\r\n        }\r\n        this._pointAtData.id = NaN;\r\n    }\r\n\r\n    // private function getFirstNonNullVector(index)\r\n    // returns the first non null vector from index : curve[index + N].subtract(curve[index])\r\n    private _getFirstNonNullVector(index: number): Vector3 {\r\n        let i = 1;\r\n        let nNVector: Vector3 = this._curve[index + i].subtract(this._curve[index]);\r\n        while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {\r\n            i++;\r\n            nNVector = this._curve[index + i].subtract(this._curve[index]);\r\n        }\r\n        return nNVector;\r\n    }\r\n\r\n    // private function getLastNonNullVector(index)\r\n    // returns the last non null vector from index : curve[index].subtract(curve[index - N])\r\n    private _getLastNonNullVector(index: number): Vector3 {\r\n        let i = 1;\r\n        let nLVector: Vector3 = this._curve[index].subtract(this._curve[index - i]);\r\n        while (nLVector.length() === 0 && index > i + 1) {\r\n            i++;\r\n            nLVector = this._curve[index].subtract(this._curve[index - i]);\r\n        }\r\n        return nLVector;\r\n    }\r\n\r\n    // private function normalVector(v0, vt, va) :\r\n    // returns an arbitrary point in the plane defined by the point v0 and the vector vt orthogonal to this plane\r\n    // if va is passed, it returns the va projection on the plane orthogonal to vt at the point v0\r\n    private _normalVector(vt: Vector3, va: Nullable<Vector3>): Vector3 {\r\n        let normal0: Vector3;\r\n        let tgl = vt.length();\r\n        if (tgl === 0.0) {\r\n            tgl = 1.0;\r\n        }\r\n\r\n        if (va === undefined || va === null) {\r\n            let point: Vector3;\r\n            if (!Scalar.WithinEpsilon(Math.abs(vt.y) / tgl, 1.0, Epsilon)) {\r\n                // search for a point in the plane\r\n                point = new Vector3(0.0, -1.0, 0.0);\r\n            } else if (!Scalar.WithinEpsilon(Math.abs(vt.x) / tgl, 1.0, Epsilon)) {\r\n                point = new Vector3(1.0, 0.0, 0.0);\r\n            } else if (!Scalar.WithinEpsilon(Math.abs(vt.z) / tgl, 1.0, Epsilon)) {\r\n                point = new Vector3(0.0, 0.0, 1.0);\r\n            } else {\r\n                point = Vector3.Zero();\r\n            }\r\n            normal0 = Vector3.Cross(vt, point);\r\n        } else {\r\n            normal0 = Vector3.Cross(vt, va);\r\n            Vector3.CrossToRef(normal0, vt, normal0);\r\n        }\r\n        normal0.normalize();\r\n        return normal0;\r\n    }\r\n\r\n    /**\r\n     * Updates the point at data for an interpolated point along this curve\r\n     * @param position the position of the point along this curve, from 0.0 to 1.0\r\n     * @param interpolateTNB\r\n     * @interpolateTNB whether to compute the interpolated tangent, normal and binormal\r\n     * @returns the (updated) point at data\r\n     */\r\n    private _updatePointAtData(position: number, interpolateTNB: boolean = false) {\r\n        // set an id for caching the result\r\n        if (this._pointAtData.id === position) {\r\n            if (!this._pointAtData.interpolateReady) {\r\n                this._updateInterpolationMatrix();\r\n            }\r\n            return this._pointAtData;\r\n        } else {\r\n            this._pointAtData.id = position;\r\n        }\r\n        const curvePoints = this.getPoints();\r\n\r\n        // clamp position between 0.0 and 1.0\r\n        if (position <= 0.0) {\r\n            return this._setPointAtData(0.0, 0.0, curvePoints[0], 0, interpolateTNB);\r\n        } else if (position >= 1.0) {\r\n            return this._setPointAtData(1.0, 1.0, curvePoints[curvePoints.length - 1], curvePoints.length - 1, interpolateTNB);\r\n        }\r\n\r\n        let previousPoint: Vector3 = curvePoints[0];\r\n        let currentPoint: Vector3;\r\n        let currentLength = 0.0;\r\n        const targetLength = position * this.length();\r\n\r\n        for (let i = 1; i < curvePoints.length; i++) {\r\n            currentPoint = curvePoints[i];\r\n            const distance = Vector3.Distance(previousPoint, currentPoint);\r\n            currentLength += distance;\r\n            if (currentLength === targetLength) {\r\n                return this._setPointAtData(position, 1.0, currentPoint, i, interpolateTNB);\r\n            } else if (currentLength > targetLength) {\r\n                const toLength = currentLength - targetLength;\r\n                const diff = toLength / distance;\r\n                const dir = previousPoint.subtract(currentPoint);\r\n                const point = currentPoint.add(dir.scaleInPlace(diff));\r\n                return this._setPointAtData(position, 1 - diff, point, i - 1, interpolateTNB);\r\n            }\r\n            previousPoint = currentPoint;\r\n        }\r\n        return this._pointAtData;\r\n    }\r\n\r\n    /**\r\n     * Updates the point at data from the specified parameters\r\n     * @param position where along the path the interpolated point is, from 0.0 to 1.0\r\n     * @param subPosition\r\n     * @param point the interpolated point\r\n     * @param parentIndex the index of an existing curve point that is on, or else positionally the first behind, the interpolated point\r\n     * @param interpolateTNB whether to compute the interpolated tangent, normal and binormal\r\n     * @returns the (updated) point at data\r\n     */\r\n    private _setPointAtData(position: number, subPosition: number, point: Vector3, parentIndex: number, interpolateTNB: boolean) {\r\n        this._pointAtData.point = point;\r\n        this._pointAtData.position = position;\r\n        this._pointAtData.subPosition = subPosition;\r\n        this._pointAtData.previousPointArrayIndex = parentIndex;\r\n        this._pointAtData.interpolateReady = interpolateTNB;\r\n\r\n        if (interpolateTNB) {\r\n            this._updateInterpolationMatrix();\r\n        }\r\n        return this._pointAtData;\r\n    }\r\n\r\n    /**\r\n     * Updates the point at interpolation matrix for the tangents, normals and binormals\r\n     */\r\n    private _updateInterpolationMatrix() {\r\n        this._pointAtData.interpolationMatrix = Matrix.Identity();\r\n        const parentIndex = this._pointAtData.previousPointArrayIndex;\r\n\r\n        if (parentIndex !== this._tangents.length - 1) {\r\n            const index = parentIndex + 1;\r\n\r\n            const tangentFrom = this._tangents[parentIndex].clone();\r\n            const normalFrom = this._normals[parentIndex].clone();\r\n            const binormalFrom = this._binormals[parentIndex].clone();\r\n\r\n            const tangentTo = this._tangents[index].clone();\r\n            const normalTo = this._normals[index].clone();\r\n            const binormalTo = this._binormals[index].clone();\r\n\r\n            const quatFrom = Quaternion.RotationQuaternionFromAxis(normalFrom, binormalFrom, tangentFrom);\r\n            const quatTo = Quaternion.RotationQuaternionFromAxis(normalTo, binormalTo, tangentTo);\r\n            const quatAt = Quaternion.Slerp(quatFrom, quatTo, this._pointAtData.subPosition);\r\n\r\n            quatAt.toRotationMatrix(this._pointAtData.interpolationMatrix);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\r\n * A Curve3 is designed from a series of successive Vector3.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/drawCurves\r\n */\r\nexport class Curve3 {\r\n    private _points: Vector3[];\r\n    private _length: number = 0.0;\r\n\r\n    /**\r\n     * Returns a Curve3 object along a Quadratic Bezier curve : https://doc.babylonjs.com/features/featuresDeepDive/mesh/drawCurves#quadratic-bezier-curve\r\n     * @param v0 (Vector3) the origin point of the Quadratic Bezier\r\n     * @param v1 (Vector3) the control point\r\n     * @param v2 (Vector3) the end point of the Quadratic Bezier\r\n     * @param nbPoints (integer) the wanted number of points in the curve\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateQuadraticBezier(v0: DeepImmutable<Vector3>, v1: DeepImmutable<Vector3>, v2: DeepImmutable<Vector3>, nbPoints: number): Curve3 {\r\n        nbPoints = nbPoints > 2 ? nbPoints : 3;\r\n        const bez: Vector3[] = [];\r\n        const equation = (t: number, val0: number, val1: number, val2: number) => {\r\n            const res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;\r\n            return res;\r\n        };\r\n        for (let i = 0; i <= nbPoints; i++) {\r\n            bez.push(new Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x), equation(i / nbPoints, v0.y, v1.y, v2.y), equation(i / nbPoints, v0.z, v1.z, v2.z)));\r\n        }\r\n        return new Curve3(bez);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along a Cubic Bezier curve : https://doc.babylonjs.com/features/featuresDeepDive/mesh/drawCurves#cubic-bezier-curve\r\n     * @param v0 (Vector3) the origin point of the Cubic Bezier\r\n     * @param v1 (Vector3) the first control point\r\n     * @param v2 (Vector3) the second control point\r\n     * @param v3 (Vector3) the end point of the Cubic Bezier\r\n     * @param nbPoints (integer) the wanted number of points in the curve\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateCubicBezier(v0: DeepImmutable<Vector3>, v1: DeepImmutable<Vector3>, v2: DeepImmutable<Vector3>, v3: DeepImmutable<Vector3>, nbPoints: number): Curve3 {\r\n        nbPoints = nbPoints > 3 ? nbPoints : 4;\r\n        const bez: Vector3[] = [];\r\n        const equation = (t: number, val0: number, val1: number, val2: number, val3: number) => {\r\n            const res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 + 3.0 * t * (1.0 - t) * (1.0 - t) * val1 + 3.0 * t * t * (1.0 - t) * val2 + t * t * t * val3;\r\n            return res;\r\n        };\r\n        for (let i = 0; i <= nbPoints; i++) {\r\n            bez.push(new Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x), equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y), equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)));\r\n        }\r\n        return new Curve3(bez);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along a Hermite Spline curve : https://doc.babylonjs.com/features/featuresDeepDive/mesh/drawCurves#hermite-spline\r\n     * @param p1 (Vector3) the origin point of the Hermite Spline\r\n     * @param t1 (Vector3) the tangent vector at the origin point\r\n     * @param p2 (Vector3) the end point of the Hermite Spline\r\n     * @param t2 (Vector3) the tangent vector at the end point\r\n     * @param nSeg (integer) the number of curve segments or nSeg + 1 points in the array\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateHermiteSpline(p1: DeepImmutable<Vector3>, t1: DeepImmutable<Vector3>, p2: DeepImmutable<Vector3>, t2: DeepImmutable<Vector3>, nSeg: number): Curve3 {\r\n        const hermite: Vector3[] = [];\r\n        const step = 1.0 / nSeg;\r\n        for (let i = 0; i <= nSeg; i++) {\r\n            hermite.push(Vector3.Hermite(p1, t1, p2, t2, i * step));\r\n        }\r\n        return new Curve3(hermite);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along a CatmullRom Spline curve :\r\n     * @param points (array of Vector3) the points the spline must pass through. At least, four points required\r\n     * @param nbPoints (integer) the wanted number of points between each curve control points\r\n     * @param closed (boolean) optional with default false, when true forms a closed loop from the points\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateCatmullRomSpline(points: DeepImmutable<Vector3[]>, nbPoints: number, closed?: boolean): Curve3 {\r\n        const catmullRom: Vector3[] = [];\r\n        const step = 1.0 / nbPoints;\r\n        let amount = 0.0;\r\n        if (closed) {\r\n            const pointsCount = points.length;\r\n            for (let i = 0; i < pointsCount; i++) {\r\n                amount = 0;\r\n                for (let c = 0; c < nbPoints; c++) {\r\n                    catmullRom.push(\r\n                        Vector3.CatmullRom(points[i % pointsCount], points[(i + 1) % pointsCount], points[(i + 2) % pointsCount], points[(i + 3) % pointsCount], amount)\r\n                    );\r\n                    amount += step;\r\n                }\r\n            }\r\n            catmullRom.push(catmullRom[0]);\r\n        } else {\r\n            const totalPoints: Vector3[] = [];\r\n            totalPoints.push(points[0].clone());\r\n            Array.prototype.push.apply(totalPoints, points);\r\n            totalPoints.push(points[points.length - 1].clone());\r\n            let i = 0;\r\n            for (; i < totalPoints.length - 3; i++) {\r\n                amount = 0;\r\n                for (let c = 0; c < nbPoints; c++) {\r\n                    catmullRom.push(Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\r\n                    amount += step;\r\n                }\r\n            }\r\n            i--;\r\n            catmullRom.push(Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\r\n        }\r\n        return new Curve3(catmullRom);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along an arc through three vector3 points:\r\n     * The three points should not be colinear. When they are the Curve3 is empty.\r\n     * @param first (Vector3) the first point the arc must pass through.\r\n     * @param second (Vector3) the second point the arc must pass through.\r\n     * @param third (Vector3) the third point the arc must pass through.\r\n     * @param steps (number) the larger the number of steps the more detailed the arc.\r\n     * @param closed (boolean) optional with default false, when true forms the chord from the first and third point\r\n     * @param fullCircle Circle (boolean) optional with default false, when true forms the complete circle through the three points\r\n     * @returns the created Curve3\r\n     */\r\n    public static ArcThru3Points(first: Vector3, second: Vector3, third: Vector3, steps: number = 32, closed: boolean = false, fullCircle: boolean = false): Curve3 {\r\n        const arc: Vector3[] = [];\r\n        const vec1 = second.subtract(first);\r\n        const vec2 = third.subtract(second);\r\n        const vec3 = first.subtract(third);\r\n        const zAxis = Vector3.Cross(vec1, vec2);\r\n        const len4 = zAxis.length();\r\n        if (len4 < Math.pow(10, -8)) {\r\n            return new Curve3(arc); // colinear points arc is empty\r\n        }\r\n        const len1_sq = vec1.lengthSquared();\r\n        const len2_sq = vec2.lengthSquared();\r\n        const len3_sq = vec3.lengthSquared();\r\n        const len4_sq = zAxis.lengthSquared();\r\n        const len1 = vec1.length();\r\n        const len2 = vec2.length();\r\n        const len3 = vec3.length();\r\n        const radius = (0.5 * len1 * len2 * len3) / len4;\r\n        const dot1 = Vector3.Dot(vec1, vec3);\r\n        const dot2 = Vector3.Dot(vec1, vec2);\r\n        const dot3 = Vector3.Dot(vec2, vec3);\r\n        const a = (-0.5 * len2_sq * dot1) / len4_sq;\r\n        const b = (-0.5 * len3_sq * dot2) / len4_sq;\r\n        const c = (-0.5 * len1_sq * dot3) / len4_sq;\r\n        const center = first.scale(a).add(second.scale(b)).add(third.scale(c));\r\n        const radiusVec = first.subtract(center);\r\n        const xAxis = radiusVec.normalize();\r\n        const yAxis = Vector3.Cross(zAxis, xAxis).normalize();\r\n        if (fullCircle) {\r\n            const dStep = (2 * Math.PI) / steps;\r\n            for (let theta = 0; theta <= 2 * Math.PI; theta += dStep) {\r\n                arc.push(center.add(xAxis.scale(radius * Math.cos(theta)).add(yAxis.scale(radius * Math.sin(theta)))));\r\n            }\r\n            arc.push(first);\r\n        } else {\r\n            const dStep = 1 / steps;\r\n            let theta = 0;\r\n            let point = Vector3.Zero();\r\n            do {\r\n                point = center.add(xAxis.scale(radius * Math.cos(theta)).add(yAxis.scale(radius * Math.sin(theta))));\r\n                arc.push(point);\r\n                theta += dStep;\r\n            } while (!point.equalsWithEpsilon(third, radius * dStep * 1.1));\r\n            arc.push(third);\r\n            if (closed) {\r\n                arc.push(first);\r\n            }\r\n        }\r\n        return new Curve3(arc);\r\n    }\r\n\r\n    /**\r\n     * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\r\n     * A Curve3 is designed from a series of successive Vector3.\r\n     * Tuto : https://doc.babylonjs.com/features/featuresDeepDive/mesh/drawCurves#curve3-object\r\n     * @param points points which make up the curve\r\n     */\r\n    constructor(points: Vector3[]) {\r\n        this._points = points;\r\n        this._length = this._computeLength(points);\r\n    }\r\n\r\n    /**\r\n     * @returns the Curve3 stored array of successive Vector3\r\n     */\r\n    public getPoints() {\r\n        return this._points;\r\n    }\r\n\r\n    /**\r\n     * @returns the computed length (float) of the curve.\r\n     */\r\n    public length() {\r\n        return this._length;\r\n    }\r\n\r\n    /**\r\n     * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\r\n     * This new Curve3 is built by translating and sticking the curveB at the end of the curveA.\r\n     * curveA and curveB keep unchanged.\r\n     * @param curve the curve to continue from this curve\r\n     * @returns the newly constructed curve\r\n     */\r\n    public continue(curve: DeepImmutable<Curve3>): Curve3 {\r\n        const lastPoint = this._points[this._points.length - 1];\r\n        const continuedPoints = this._points.slice();\r\n        const curvePoints = curve.getPoints();\r\n        for (let i = 1; i < curvePoints.length; i++) {\r\n            continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint));\r\n        }\r\n        const continuedCurve = new Curve3(continuedPoints);\r\n        return continuedCurve;\r\n    }\r\n\r\n    private _computeLength(path: DeepImmutable<Vector3[]>): number {\r\n        let l = 0;\r\n        for (let i = 1; i < path.length; i++) {\r\n            l += path[i].subtract(path[i - 1]).length();\r\n        }\r\n        return l;\r\n    }\r\n}\r\n", "/**\r\n * Interface for the size containing width and height\r\n */\r\nexport interface ISize {\r\n    /**\r\n     * Width\r\n     */\r\n    width: number;\r\n    /**\r\n     * Height\r\n     */\r\n    height: number;\r\n}\r\n\r\n/**\r\n * Size containing width and height\r\n */\r\nexport class Size implements ISize {\r\n    /**\r\n     * Width\r\n     */\r\n    public width: number;\r\n    /**\r\n     * Height\r\n     */\r\n    public height: number;\r\n\r\n    /**\r\n     * Creates a Size object from the given width and height (floats).\r\n     * @param width width of the new size\r\n     * @param height height of the new size\r\n     */\r\n    public constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Returns a string with the Size width and height\r\n     * @returns a string with the Size width and height\r\n     */\r\n    public toString(): string {\r\n        return `{W: ${this.width}, H: ${this.height}}`;\r\n    }\r\n    /**\r\n     * \"Size\"\r\n     * @returns the string \"Size\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Size\";\r\n    }\r\n    /**\r\n     * Returns the Size hash code.\r\n     * @returns a hash code for a unique width and height\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this.width | 0;\r\n        hash = (hash * 397) ^ (this.height | 0);\r\n        return hash;\r\n    }\r\n    /**\r\n     * Updates the current size from the given one.\r\n     * @param src the given size\r\n     */\r\n    public copyFrom(src: Size) {\r\n        this.width = src.width;\r\n        this.height = src.height;\r\n    }\r\n    /**\r\n     * Updates in place the current Size from the given floats.\r\n     * @param width width of the new size\r\n     * @param height height of the new size\r\n     * @returns the updated Size.\r\n     */\r\n    public copyFromFloats(width: number, height: number): Size {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates in place the current Size from the given floats.\r\n     * @param width width to set\r\n     * @param height height to set\r\n     * @returns the updated Size.\r\n     */\r\n    public set(width: number, height: number): Size {\r\n        return this.copyFromFloats(width, height);\r\n    }\r\n    /**\r\n     * Multiplies the width and height by numbers\r\n     * @param w factor to multiple the width by\r\n     * @param h factor to multiple the height by\r\n     * @returns a new Size set with the multiplication result of the current Size and the given floats.\r\n     */\r\n    public multiplyByFloats(w: number, h: number): Size {\r\n        return new Size(this.width * w, this.height * h);\r\n    }\r\n    /**\r\n     * Clones the size\r\n     * @returns a new Size copied from the given one.\r\n     */\r\n    public clone(): Size {\r\n        return new Size(this.width, this.height);\r\n    }\r\n    /**\r\n     * True if the current Size and the given one width and height are strictly equal.\r\n     * @param other the other size to compare against\r\n     * @returns True if the current Size and the given one width and height are strictly equal.\r\n     */\r\n    public equals(other: Size): boolean {\r\n        if (!other) {\r\n            return false;\r\n        }\r\n        return this.width === other.width && this.height === other.height;\r\n    }\r\n    /**\r\n     * The surface of the Size : width * height (float).\r\n     */\r\n    public get surface(): number {\r\n        return this.width * this.height;\r\n    }\r\n    /**\r\n     * Create a new size of zero\r\n     * @returns a new Size set to (0.0, 0.0)\r\n     */\r\n    public static Zero(): Size {\r\n        return new Size(0.0, 0.0);\r\n    }\r\n    /**\r\n     * Sums the width and height of two sizes\r\n     * @param otherSize size to add to this size\r\n     * @returns a new Size set as the addition result of the current Size and the given one.\r\n     */\r\n    public add(otherSize: Size): Size {\r\n        const r = new Size(this.width + otherSize.width, this.height + otherSize.height);\r\n        return r;\r\n    }\r\n    /**\r\n     * Subtracts the width and height of two\r\n     * @param otherSize size to subtract to this size\r\n     * @returns a new Size set as the subtraction result of  the given one from the current Size.\r\n     */\r\n    public subtract(otherSize: Size): Size {\r\n        const r = new Size(this.width - otherSize.width, this.height - otherSize.height);\r\n        return r;\r\n    }\r\n    /**\r\n     * Scales the width and height\r\n     * @param scale the scale to multiply the width and height by\r\n     * @returns a new Size set with the multiplication result of the current Size and the given floats.\r\n     */\r\n    public scale(scale: number): Size {\r\n        return new Size(this.width * scale, this.height * scale);\r\n    }\r\n    /**\r\n     * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n     * @param start starting size to lerp between\r\n     * @param end end size to lerp between\r\n     * @param amount amount to lerp between the start and end values\r\n     * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n     */\r\n    public static Lerp(start: Size, end: Size, amount: number): Size {\r\n        const w = start.width + (end.width - start.width) * amount;\r\n        const h = start.height + (end.height - start.height) * amount;\r\n\r\n        return new Size(w, h);\r\n    }\r\n}\r\n", "import { Vector3, Vector2 } from \"./math.vector\";\r\n\r\n/**\r\n * Contains position and normal vectors for a vertex\r\n */\r\nexport class PositionNormalVertex {\r\n    /**\r\n     * Creates a PositionNormalVertex\r\n     * @param position the position of the vertex (defaut: 0,0,0)\r\n     * @param normal the normal of the vertex (defaut: 0,1,0)\r\n     */\r\n    constructor(\r\n        /** the position of the vertex (defaut: 0,0,0) */\r\n        public position: Vector3 = Vector3.Zero(),\r\n        /** the normal of the vertex (defaut: 0,1,0) */\r\n        public normal: Vector3 = Vector3.Up()\r\n    ) {}\r\n\r\n    /**\r\n     * Clones the PositionNormalVertex\r\n     * @returns the cloned PositionNormalVertex\r\n     */\r\n    public clone(): PositionNormalVertex {\r\n        return new PositionNormalVertex(this.position.clone(), this.normal.clone());\r\n    }\r\n}\r\n\r\n/**\r\n * Contains position, normal and uv vectors for a vertex\r\n */\r\nexport class PositionNormalTextureVertex {\r\n    /**\r\n     * Creates a PositionNormalTextureVertex\r\n     * @param position the position of the vertex (defaut: 0,0,0)\r\n     * @param normal the normal of the vertex (defaut: 0,1,0)\r\n     * @param uv the uv of the vertex (default: 0,0)\r\n     */\r\n    constructor(\r\n        /** the position of the vertex (defaut: 0,0,0) */\r\n        public position: Vector3 = Vector3.Zero(),\r\n        /** the normal of the vertex (defaut: 0,1,0) */\r\n        public normal: Vector3 = Vector3.Up(),\r\n        /** the uv of the vertex (default: 0,0) */\r\n        public uv: Vector2 = Vector2.Zero()\r\n    ) {}\r\n    /**\r\n     * Clones the PositionNormalTextureVertex\r\n     * @returns the cloned PositionNormalTextureVertex\r\n     */\r\n    public clone(): PositionNormalTextureVertex {\r\n        return new PositionNormalTextureVertex(this.position.clone(), this.normal.clone(), this.uv.clone());\r\n    }\r\n}\r\n", "export * from \"./math.axis\";\r\nexport * from \"./math.color\";\r\nexport * from \"./math.constants\";\r\nexport * from \"./math.frustum\";\r\nexport * from \"./math.path\";\r\nexport * from \"./math.plane\";\r\nexport * from \"./math.size\";\r\nexport * from \"./math.vector\";\r\nexport * from \"./math.vertexFormat\";\r\nexport * from \"./math.viewport\";\r\n", "/**\r\n * Enum defining the type of animations supported by InputBlock\r\n */\r\nexport enum AnimatedInputBlockTypes {\r\n    /** No animation */\r\n    None,\r\n    /** Time based animation (is incremented by 0.6 each second). Will only work for floats */\r\n    Time,\r\n    /** Time elapsed (in seconds) since the engine was initialized. Will only work for floats */\r\n    RealTime,\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport { NodeMaterialBlockConnectionPointMode } from \"../../Enums/nodeMaterialBlockConnectionPointMode\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport type { Effect } from \"../../../../Materials/effect\";\r\nimport { Matrix, Vector2, Vector3, Vector4 } from \"../../../../Maths/math.vector\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { GetClass, RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { Color3, Color4, TmpColors } from \"../../../../Maths/math\";\r\nimport { AnimatedInputBlockTypes } from \"./animatedInputBlockTypes\";\r\nimport { Observable } from \"../../../../Misc/observable\";\r\nimport type { NodeMaterial } from \"../../nodeMaterial\";\r\nimport { PrecisionDate } from \"core/Misc/precisionDate\";\r\n\r\nconst remapAttributeName: { [name: string]: string } = {\r\n    position2d: \"position\",\r\n    particle_uv: \"vUV\",\r\n    particle_color: \"vColor\",\r\n    particle_texturemask: \"textureMask\",\r\n    particle_positionw: \"vPositionW\",\r\n};\r\n\r\nconst attributeInFragmentOnly: { [name: string]: boolean } = {\r\n    particle_uv: true,\r\n    particle_color: true,\r\n    particle_texturemask: true,\r\n    particle_positionw: true,\r\n};\r\n\r\nconst attributeAsUniform: { [name: string]: boolean } = {\r\n    particle_texturemask: true,\r\n};\r\n\r\n/**\r\n * Block used to expose an input value\r\n */\r\nexport class InputBlock extends NodeMaterialBlock {\r\n    private _mode = NodeMaterialBlockConnectionPointMode.Undefined;\r\n    private _associatedVariableName: string;\r\n    private _storedValue: any;\r\n    private _valueCallback: () => any;\r\n    private _type: NodeMaterialBlockConnectionPointTypes;\r\n    private _animationType = AnimatedInputBlockTypes.None;\r\n\r\n    /** Gets or set a value used to limit the range of float values */\r\n    public min: number = 0;\r\n\r\n    /** Gets or set a value used to limit the range of float values */\r\n    public max: number = 0;\r\n\r\n    /** Gets or set a value indicating that this input can only get 0 and 1 values */\r\n    public isBoolean: boolean = false;\r\n\r\n    /** Gets or sets a value used by the Node Material editor to determine how to configure the current value if it is a matrix */\r\n    public matrixMode: number = 0;\r\n\r\n    /** @internal */\r\n    public _systemValue: Nullable<NodeMaterialSystemValues> = null;\r\n\r\n    /** Gets or sets a boolean indicating that the value of this input will not change after a build */\r\n    public isConstant = false;\r\n\r\n    /** Gets or sets the group to use to display this block in the Inspector */\r\n    public groupInInspector = \"\";\r\n\r\n    /** Gets an observable raised when the value is changed */\r\n    public onValueChangedObservable = new Observable<InputBlock>();\r\n\r\n    /** Gets or sets a boolean indicating if content needs to be converted to gamma space (for color3/4 only) */\r\n    public convertToGammaSpace = false;\r\n\r\n    /** Gets or sets a boolean indicating if content needs to be converted to linear space (for color3/4 only) */\r\n    public convertToLinearSpace = false;\r\n\r\n    /**\r\n     * Gets or sets the connection point type (default is float)\r\n     */\r\n    public get type(): NodeMaterialBlockConnectionPointTypes {\r\n        if (this._type === NodeMaterialBlockConnectionPointTypes.AutoDetect) {\r\n            if (this.isUniform && this.value != null) {\r\n                if (!isNaN(this.value)) {\r\n                    this._type = NodeMaterialBlockConnectionPointTypes.Float;\r\n                    return this._type;\r\n                }\r\n\r\n                switch (this.value.getClassName()) {\r\n                    case \"Vector2\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\r\n                        return this._type;\r\n                    case \"Vector3\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\r\n                        return this._type;\r\n                    case \"Vector4\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\r\n                        return this._type;\r\n                    case \"Color3\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color3;\r\n                        return this._type;\r\n                    case \"Color4\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color4;\r\n                        return this._type;\r\n                    case \"Matrix\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\r\n                        return this._type;\r\n                }\r\n            }\r\n\r\n            if (this.isAttribute) {\r\n                switch (this.name) {\r\n                    case \"position\":\r\n                    case \"normal\":\r\n                    case \"particle_positionw\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\r\n                        return this._type;\r\n                    case \"uv\":\r\n                    case \"uv2\":\r\n                    case \"uv3\":\r\n                    case \"uv4\":\r\n                    case \"uv5\":\r\n                    case \"uv6\":\r\n                    case \"position2d\":\r\n                    case \"particle_uv\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\r\n                        return this._type;\r\n                    case \"matricesIndices\":\r\n                    case \"matricesWeights\":\r\n                    case \"matricesIndicesExtra\":\r\n                    case \"matricesWeightsExtra\":\r\n                    case \"world0\":\r\n                    case \"world1\":\r\n                    case \"world2\":\r\n                    case \"world3\":\r\n                    case \"tangent\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\r\n                        return this._type;\r\n                    case \"color\":\r\n                    case \"instanceColor\":\r\n                    case \"particle_color\":\r\n                    case \"particle_texturemask\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color4;\r\n                        return this._type;\r\n                }\r\n            }\r\n\r\n            if (this.isSystemValue) {\r\n                switch (this._systemValue) {\r\n                    case NodeMaterialSystemValues.World:\r\n                    case NodeMaterialSystemValues.WorldView:\r\n                    case NodeMaterialSystemValues.WorldViewProjection:\r\n                    case NodeMaterialSystemValues.View:\r\n                    case NodeMaterialSystemValues.ViewProjection:\r\n                    case NodeMaterialSystemValues.Projection:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.CameraPosition:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.FogColor:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color3;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.DeltaTime:\r\n                    case NodeMaterialSystemValues.MaterialAlpha:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Float;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.CameraParameters:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\r\n                        return this._type;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputBlock\r\n     * @param name defines the block name\r\n     * @param target defines the target of that block (Vertex by default)\r\n     * @param type defines the type of the input (can be set to NodeMaterialBlockConnectionPointTypes.AutoDetect)\r\n     */\r\n    public constructor(name: string, target = NodeMaterialBlockTargets.Vertex, type: NodeMaterialBlockConnectionPointTypes = NodeMaterialBlockConnectionPointTypes.AutoDetect) {\r\n        super(name, target, false);\r\n\r\n        this._type = type;\r\n\r\n        this.setDefaultValue();\r\n\r\n        this.registerOutput(\"output\", type);\r\n    }\r\n\r\n    /**\r\n     * Validates if a name is a reserve word.\r\n     * @param newName the new name to be given to the node.\r\n     * @returns false if the name is a reserve word, else true.\r\n     */\r\n    public validateBlockName(newName: string) {\r\n        if (!this.isAttribute) {\r\n            return super.validateBlockName(newName);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Set the source of this connection point to a vertex attribute\r\n     * @param attributeName defines the attribute name (position, uv, normal, etc...). If not specified it will take the connection point name\r\n     * @returns the current connection point\r\n     */\r\n    public setAsAttribute(attributeName?: string): InputBlock {\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Attribute;\r\n        if (attributeName) {\r\n            this.name = attributeName;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the source of this connection point to a system value\r\n     * @param value define the system value to use (world, view, etc...) or null to switch to manual value\r\n     * @returns the current connection point\r\n     */\r\n    public setAsSystemValue(value: Nullable<NodeMaterialSystemValues>): InputBlock {\r\n        this.systemValue = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the value of that point.\r\n     * Please note that this value will be ignored if valueCallback is defined\r\n     */\r\n    public get value(): any {\r\n        return this._storedValue;\r\n    }\r\n\r\n    public set value(value: any) {\r\n        if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n            if (this.isBoolean) {\r\n                value = value ? 1 : 0;\r\n            } else if (this.min !== this.max) {\r\n                value = Math.max(this.min, value);\r\n                value = Math.min(this.max, value);\r\n            }\r\n        }\r\n\r\n        this._storedValue = value;\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\r\n\r\n        this.onValueChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a callback used to get the value of that point.\r\n     * Please note that setting this value will force the connection point to ignore the value property\r\n     */\r\n    public get valueCallback(): () => any {\r\n        return this._valueCallback;\r\n    }\r\n\r\n    public set valueCallback(value: () => any) {\r\n        this._valueCallback = value;\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the associated variable name in the shader\r\n     */\r\n    public get associatedVariableName(): string {\r\n        return this._associatedVariableName;\r\n    }\r\n\r\n    public set associatedVariableName(value: string) {\r\n        this._associatedVariableName = value;\r\n    }\r\n\r\n    /** Gets or sets the type of animation applied to the input */\r\n    public get animationType() {\r\n        return this._animationType;\r\n    }\r\n\r\n    public set animationType(value: AnimatedInputBlockTypes) {\r\n        this._animationType = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that this connection point not defined yet\r\n     */\r\n    public get isUndefined(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is coming from an uniform.\r\n     * In this case the connection point name must be the name of the uniform to use.\r\n     * Can only be set on inputs\r\n     */\r\n    public get isUniform(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Uniform;\r\n    }\r\n\r\n    public set isUniform(value: boolean) {\r\n        this._mode = value ? NodeMaterialBlockConnectionPointMode.Uniform : NodeMaterialBlockConnectionPointMode.Undefined;\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is coming from an attribute.\r\n     * In this case the connection point name must be the name of the attribute to use\r\n     * Can only be set on inputs\r\n     */\r\n    public get isAttribute(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Attribute;\r\n    }\r\n\r\n    public set isAttribute(value: boolean) {\r\n        this._mode = value ? NodeMaterialBlockConnectionPointMode.Attribute : NodeMaterialBlockConnectionPointMode.Undefined;\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is generating a varying variable.\r\n     * Can only be set on exit points\r\n     */\r\n    public get isVarying(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Varying;\r\n    }\r\n\r\n    public set isVarying(value: boolean) {\r\n        this._mode = value ? NodeMaterialBlockConnectionPointMode.Varying : NodeMaterialBlockConnectionPointMode.Undefined;\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the current connection point is a system value\r\n     */\r\n    public get isSystemValue(): boolean {\r\n        return this._systemValue != null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current well known value or null if not defined as a system value\r\n     */\r\n    public get systemValue(): Nullable<NodeMaterialSystemValues> {\r\n        return this._systemValue;\r\n    }\r\n\r\n    public set systemValue(value: Nullable<NodeMaterialSystemValues>) {\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\r\n        this.associatedVariableName = \"\";\r\n        this._systemValue = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"InputBlock\";\r\n    }\r\n\r\n    /**\r\n     * Animate the input if animationType !== None\r\n     * @param scene defines the rendering scene\r\n     */\r\n    public animate(scene: Scene) {\r\n        switch (this._animationType) {\r\n            case AnimatedInputBlockTypes.Time: {\r\n                if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n                    this.value += scene.getAnimationRatio() * 0.01;\r\n                }\r\n                break;\r\n            }\r\n            case AnimatedInputBlockTypes.RealTime: {\r\n                if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n                    this.value = (PrecisionDate.Now - scene.getEngine().startTime) / 1000;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _emitDefine(define: string): string {\r\n        if (define[0] === \"!\") {\r\n            return `#ifndef ${define.substring(1)}\\n`;\r\n        }\r\n\r\n        return `#ifdef ${define}\\n`;\r\n    }\r\n\r\n    public initialize() {\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Set the input block to its default value (based on its type)\r\n     */\r\n    public setDefaultValue() {\r\n        switch (this.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                this.value = 0;\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                this.value = Vector2.Zero();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                this.value = Vector3.Zero();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                this.value = Vector4.Zero();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                this.value = Color3.White();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                this.value = new Color4(1, 1, 1, 1);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                this.value = Matrix.Identity();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _emitConstant(state: NodeMaterialBuildState) {\r\n        switch (this.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                return `${state._emitFloat(this.value)}`;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                return `vec2(${this.value.x}, ${this.value.y})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                return `vec3(${this.value.x}, ${this.value.y}, ${this.value.z})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                return `vec4(${this.value.x}, ${this.value.y}, ${this.value.z}, ${this.value.w})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0], state.sharedData.scene.getEngine().useExactSrgbConversions);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0], state.sharedData.scene.getEngine().useExactSrgbConversions);\r\n                }\r\n                return `vec3(${TmpColors.Color3[0].r}, ${TmpColors.Color3[0].g}, ${TmpColors.Color3[0].b})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0], state.sharedData.scene.getEngine().useExactSrgbConversions);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0], state.sharedData.scene.getEngine().useExactSrgbConversions);\r\n                }\r\n                return `vec4(${TmpColors.Color4[0].r}, ${TmpColors.Color4[0].g}, ${TmpColors.Color4[0].b}, ${TmpColors.Color4[0].a})`;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _noContextSwitch(): boolean {\r\n        return attributeInFragmentOnly[this.name];\r\n    }\r\n\r\n    private _emit(state: NodeMaterialBuildState, define?: string) {\r\n        // Uniforms\r\n        if (this.isUniform) {\r\n            if (!this.associatedVariableName) {\r\n                this.associatedVariableName = state._getFreeVariableName(\"u_\" + this.name);\r\n            }\r\n\r\n            if (this.isConstant) {\r\n                if (state.constants.indexOf(this.associatedVariableName) !== -1) {\r\n                    return;\r\n                }\r\n                state.constants.push(this.associatedVariableName);\r\n                state._constantDeclaration += this._declareOutput(this.output, state) + ` = ${this._emitConstant(state)};\\n`;\r\n                return;\r\n            }\r\n\r\n            if (state.uniforms.indexOf(this.associatedVariableName) !== -1) {\r\n                return;\r\n            }\r\n\r\n            state.uniforms.push(this.associatedVariableName);\r\n            if (define) {\r\n                state._uniformDeclaration += this._emitDefine(define);\r\n            }\r\n            state._uniformDeclaration += `uniform ${state._getGLType(this.type)} ${this.associatedVariableName};\\n`;\r\n            if (define) {\r\n                state._uniformDeclaration += `#endif\\n`;\r\n            }\r\n\r\n            // well known\r\n            const hints = state.sharedData.hints;\r\n            if (this._systemValue !== null && this._systemValue !== undefined) {\r\n                switch (this._systemValue) {\r\n                    case NodeMaterialSystemValues.WorldView:\r\n                        hints.needWorldViewMatrix = true;\r\n                        break;\r\n                    case NodeMaterialSystemValues.WorldViewProjection:\r\n                        hints.needWorldViewProjectionMatrix = true;\r\n                        break;\r\n                }\r\n            } else {\r\n                if (this._animationType !== AnimatedInputBlockTypes.None) {\r\n                    state.sharedData.animatedInputs.push(this);\r\n                }\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Attribute\r\n        if (this.isAttribute) {\r\n            this.associatedVariableName = remapAttributeName[this.name] ?? this.name;\r\n\r\n            if (this.target === NodeMaterialBlockTargets.Vertex && state._vertexState) {\r\n                // Attribute for fragment need to be carried over by varyings\r\n                if (attributeInFragmentOnly[this.name]) {\r\n                    if (attributeAsUniform[this.name]) {\r\n                        state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                    } else {\r\n                        state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                    }\r\n                } else {\r\n                    this._emit(state._vertexState, define);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (state.attributes.indexOf(this.associatedVariableName) !== -1) {\r\n                return;\r\n            }\r\n\r\n            state.attributes.push(this.associatedVariableName);\r\n\r\n            if (attributeInFragmentOnly[this.name]) {\r\n                if (attributeAsUniform[this.name]) {\r\n                    state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                } else {\r\n                    state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                }\r\n            } else {\r\n                if (define) {\r\n                    state._attributeDeclaration += this._emitDefine(define);\r\n                }\r\n                state._attributeDeclaration += `attribute ${state._getGLType(this.type)} ${this.associatedVariableName};\\n`;\r\n                if (define) {\r\n                    state._attributeDeclaration += `#endif\\n`;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _transmitWorld(effect: Effect, world: Matrix, worldView: Matrix, worldViewProjection: Matrix) {\r\n        if (!this._systemValue) {\r\n            return;\r\n        }\r\n\r\n        const variableName = this.associatedVariableName;\r\n        switch (this._systemValue) {\r\n            case NodeMaterialSystemValues.World:\r\n                effect.setMatrix(variableName, world);\r\n                break;\r\n            case NodeMaterialSystemValues.WorldView:\r\n                effect.setMatrix(variableName, worldView);\r\n                break;\r\n            case NodeMaterialSystemValues.WorldViewProjection:\r\n                effect.setMatrix(variableName, worldViewProjection);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _transmit(effect: Effect, scene: Scene, material: NodeMaterial) {\r\n        if (this.isAttribute) {\r\n            return;\r\n        }\r\n\r\n        const variableName = this.associatedVariableName;\r\n        if (this._systemValue) {\r\n            switch (this._systemValue) {\r\n                case NodeMaterialSystemValues.World:\r\n                case NodeMaterialSystemValues.WorldView:\r\n                case NodeMaterialSystemValues.WorldViewProjection:\r\n                    return;\r\n                case NodeMaterialSystemValues.View:\r\n                    effect.setMatrix(variableName, scene.getViewMatrix());\r\n                    break;\r\n                case NodeMaterialSystemValues.Projection:\r\n                    effect.setMatrix(variableName, scene.getProjectionMatrix());\r\n                    break;\r\n                case NodeMaterialSystemValues.ViewProjection:\r\n                    effect.setMatrix(variableName, scene.getTransformMatrix());\r\n                    break;\r\n                case NodeMaterialSystemValues.CameraPosition:\r\n                    scene.bindEyePosition(effect, variableName, true);\r\n                    break;\r\n                case NodeMaterialSystemValues.FogColor:\r\n                    effect.setColor3(variableName, scene.fogColor);\r\n                    break;\r\n                case NodeMaterialSystemValues.DeltaTime:\r\n                    effect.setFloat(variableName, scene.deltaTime / 1000.0);\r\n                    break;\r\n                case NodeMaterialSystemValues.CameraParameters:\r\n                    if (scene.activeCamera) {\r\n                        effect.setFloat4(\r\n                            variableName,\r\n                            scene.getEngine().hasOriginBottomLeft ? -1 : 1,\r\n                            scene.activeCamera.minZ,\r\n                            scene.activeCamera.maxZ,\r\n                            1 / scene.activeCamera.maxZ\r\n                        );\r\n                    }\r\n                    break;\r\n                case NodeMaterialSystemValues.MaterialAlpha:\r\n                    effect.setFloat(variableName, material.alpha);\r\n                    break;\r\n            }\r\n            return;\r\n        }\r\n\r\n        const value = this._valueCallback ? this._valueCallback() : this._storedValue;\r\n\r\n        if (value === null) {\r\n            return;\r\n        }\r\n\r\n        switch (this.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                effect.setFloat(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Int:\r\n                effect.setInt(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0], scene.getEngine().useExactSrgbConversions);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0], scene.getEngine().useExactSrgbConversions);\r\n                }\r\n                effect.setColor3(variableName, TmpColors.Color3[0]);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0], scene.getEngine().useExactSrgbConversions);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0], scene.getEngine().useExactSrgbConversions);\r\n                }\r\n                effect.setDirectColor4(variableName, TmpColors.Color4[0]);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                effect.setVector2(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                effect.setVector3(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                effect.setVector4(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                effect.setMatrix(variableName, value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (this.isUniform || this.isSystemValue) {\r\n            state.sharedData.inputBlocks.push(this);\r\n        }\r\n\r\n        this._emit(state);\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const variableName = this._codeVariableName;\r\n\r\n        if (this.isAttribute) {\r\n            return super._dumpPropertiesCode() + `${variableName}.setAsAttribute(\"${this.name}\");\\n`;\r\n        }\r\n        if (this.isSystemValue) {\r\n            return super._dumpPropertiesCode() + `${variableName}.setAsSystemValue(BABYLON.NodeMaterialSystemValues.${NodeMaterialSystemValues[this._systemValue!]});\\n`;\r\n        }\r\n        if (this.isUniform) {\r\n            const codes: string[] = [];\r\n\r\n            let valueString = \"\";\r\n\r\n            switch (this.type) {\r\n                case NodeMaterialBlockConnectionPointTypes.Float:\r\n                    valueString = `${this.value}`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                    valueString = `new BABYLON.Vector2(${this.value.x}, ${this.value.y})`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                    valueString = `new BABYLON.Vector3(${this.value.x}, ${this.value.y}, ${this.value.z})`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                    valueString = `new BABYLON.Vector4(${this.value.x}, ${this.value.y}, ${this.value.z}, ${this.value.w})`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                    valueString = `new BABYLON.Color3(${this.value.r}, ${this.value.g}, ${this.value.b})`;\r\n                    if (this.convertToGammaSpace) {\r\n                        valueString += \".toGammaSpace()\";\r\n                    }\r\n                    if (this.convertToLinearSpace) {\r\n                        valueString += \".toLinearSpace()\";\r\n                    }\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                    valueString = `new BABYLON.Color4(${this.value.r}, ${this.value.g}, ${this.value.b}, ${this.value.a})`;\r\n                    if (this.convertToGammaSpace) {\r\n                        valueString += \".toGammaSpace()\";\r\n                    }\r\n                    if (this.convertToLinearSpace) {\r\n                        valueString += \".toLinearSpace()\";\r\n                    }\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                    valueString = `BABYLON.Matrix.FromArray([${(this.value as Matrix).m}])`;\r\n                    break;\r\n            }\r\n\r\n            // Common Property \"Value\"\r\n            codes.push(`${variableName}.value = ${valueString}`);\r\n\r\n            // Float-Value-Specific Properties\r\n            if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n                codes.push(\r\n                    `${variableName}.min = ${this.min}`,\r\n                    `${variableName}.max = ${this.max}`,\r\n                    `${variableName}.isBoolean = ${this.isBoolean}`,\r\n                    `${variableName}.matrixMode = ${this.matrixMode}`,\r\n                    `${variableName}.animationType = BABYLON.AnimatedInputBlockTypes.${AnimatedInputBlockTypes[this.animationType]}`\r\n                );\r\n            }\r\n\r\n            // Common Property \"Type\"\r\n            codes.push(`${variableName}.isConstant = ${this.isConstant}`);\r\n\r\n            codes.push(\"\");\r\n\r\n            return super._dumpPropertiesCode() + codes.join(\";\\n\");\r\n        }\r\n        return super._dumpPropertiesCode();\r\n    }\r\n\r\n    public dispose() {\r\n        this.onValueChangedObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.type = this.type;\r\n        serializationObject.mode = this._mode;\r\n        serializationObject.systemValue = this._systemValue;\r\n        serializationObject.animationType = this._animationType;\r\n        serializationObject.min = this.min;\r\n        serializationObject.max = this.max;\r\n        serializationObject.isBoolean = this.isBoolean;\r\n        serializationObject.matrixMode = this.matrixMode;\r\n        serializationObject.isConstant = this.isConstant;\r\n        serializationObject.groupInInspector = this.groupInInspector;\r\n        serializationObject.convertToGammaSpace = this.convertToGammaSpace;\r\n        serializationObject.convertToLinearSpace = this.convertToLinearSpace;\r\n\r\n        if (this._storedValue != null && this._mode === NodeMaterialBlockConnectionPointMode.Uniform) {\r\n            if (this._storedValue.asArray) {\r\n                serializationObject.valueType = \"BABYLON.\" + this._storedValue.getClassName();\r\n                serializationObject.value = this._storedValue.asArray();\r\n            } else {\r\n                serializationObject.valueType = \"number\";\r\n                serializationObject.value = this._storedValue;\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        this._mode = serializationObject.mode;\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this._type = serializationObject.type;\r\n\r\n        this._systemValue = serializationObject.systemValue || serializationObject.wellKnownValue;\r\n        this._animationType = serializationObject.animationType;\r\n        this.min = serializationObject.min || 0;\r\n        this.max = serializationObject.max || 0;\r\n        this.isBoolean = !!serializationObject.isBoolean;\r\n        this.matrixMode = serializationObject.matrixMode || 0;\r\n        this.isConstant = !!serializationObject.isConstant;\r\n        this.groupInInspector = serializationObject.groupInInspector || \"\";\r\n        this.convertToGammaSpace = !!serializationObject.convertToGammaSpace;\r\n        this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\r\n\r\n        // Tangents back compat\r\n        if (\r\n            serializationObject.name === \"tangent\" &&\r\n            serializationObject.mode === NodeMaterialBlockConnectionPointMode.Attribute &&\r\n            serializationObject.type === NodeMaterialBlockConnectionPointTypes.Vector3\r\n        ) {\r\n            this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\r\n        }\r\n\r\n        if (!serializationObject.valueType) {\r\n            return;\r\n        }\r\n\r\n        if (serializationObject.valueType === \"number\") {\r\n            this._storedValue = serializationObject.value;\r\n        } else {\r\n            const valueType = GetClass(serializationObject.valueType);\r\n\r\n            if (valueType) {\r\n                this._storedValue = valueType.FromArray(serializationObject.value);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.InputBlock\", InputBlock);\r\n", "import type { Nullable } from \"../../types\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\n\r\nimport type { ISize } from \"../../Maths/math.size\";\r\nimport { Size } from \"../../Maths/math.size\";\r\n\r\nimport type { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { RenderTargetWrapper } from \"core/Engines/renderTargetWrapper\";\r\n\r\n/**\r\n * Base class of all the textures in babylon.\r\n * It groups all the common properties required to work with Thin Engine.\r\n */\r\nexport class ThinTexture {\r\n    protected _wrapU = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    public get wrapU() {\r\n        return this._wrapU;\r\n    }\r\n\r\n    public set wrapU(value: number) {\r\n        this._wrapU = value;\r\n    }\r\n\r\n    protected _wrapV = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    public get wrapV() {\r\n        return this._wrapV;\r\n    }\r\n\r\n    public set wrapV(value: number) {\r\n        this._wrapV = value;\r\n    }\r\n\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    public wrapR = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n\r\n    /**\r\n     * With compliant hardware and browser (supporting anisotropic filtering)\r\n     * this defines the level of anisotropic filtering in the texture.\r\n     * The higher the better but the slower. This defaults to 4 as it seems to be the best tradeoff.\r\n     */\r\n    public anisotropicFilteringLevel = 4;\r\n\r\n    /**\r\n     * Define the current state of the loading sequence when in delayed load mode.\r\n     */\r\n    public delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n\r\n    /**\r\n     * How a texture is mapped.\r\n     * Unused in thin texture mode.\r\n     */\r\n    public get coordinatesMode(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Define if the texture is a cube texture or if false a 2d texture.\r\n     */\r\n    public get isCube(): boolean {\r\n        if (!this._texture) {\r\n            return false;\r\n        }\r\n\r\n        return this._texture.isCube;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected set isCube(value: boolean) {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._texture.isCube = value;\r\n    }\r\n\r\n    /**\r\n     * Define if the texture is a 3d texture (webgl 2) or if false a 2d texture.\r\n     */\r\n    public get is3D(): boolean {\r\n        if (!this._texture) {\r\n            return false;\r\n        }\r\n\r\n        return this._texture.is3D;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected set is3D(value: boolean) {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._texture.is3D = value;\r\n    }\r\n\r\n    /**\r\n     * Define if the texture is a 2d array texture (webgl 2) or if false a 2d texture.\r\n     */\r\n    public get is2DArray(): boolean {\r\n        if (!this._texture) {\r\n            return false;\r\n        }\r\n\r\n        return this._texture.is2DArray;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected set is2DArray(value: boolean) {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._texture.is2DArray = value;\r\n    }\r\n\r\n    /**\r\n     * Get the class name of the texture.\r\n     * @returns \"ThinTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ThinTexture\";\r\n    }\r\n\r\n    /** @internal */\r\n    public _texture: Nullable<InternalTexture> = null;\r\n\r\n    protected _engine: Nullable<ThinEngine> = null;\r\n\r\n    private _cachedSize: ISize = Size.Zero();\r\n    private _cachedBaseSize: ISize = Size.Zero();\r\n\r\n    private static _IsRenderTargetWrapper(texture: Nullable<InternalTexture> | Nullable<RenderTargetWrapper>): texture is RenderTargetWrapper {\r\n        return (texture as RenderTargetWrapper)?._shareDepth !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new ThinTexture.\r\n     * Base class of all the textures in babylon.\r\n     * This can be used as an internal texture wrapper in ThinEngine to benefit from the cache\r\n     * @param internalTexture Define the internalTexture to wrap. You can also pass a RenderTargetWrapper, in which case the texture will be the render target's texture\r\n     */\r\n    constructor(internalTexture: Nullable<InternalTexture | RenderTargetWrapper>) {\r\n        this._texture = ThinTexture._IsRenderTargetWrapper(internalTexture) ? internalTexture.texture : internalTexture;\r\n        if (this._texture) {\r\n            this._engine = this._texture.getEngine();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get if the texture is ready to be used (downloaded, converted, mip mapped...).\r\n     * @returns true if fully ready\r\n     */\r\n    public isReady(): boolean {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_NOTLOADED) {\r\n            this.delayLoad();\r\n            return false;\r\n        }\r\n\r\n        if (this._texture) {\r\n            return this._texture.isReady;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Triggers the load sequence in delayed load mode.\r\n     */\r\n    public delayLoad(): void {}\r\n\r\n    /**\r\n     * Get the underlying lower level texture from Babylon.\r\n     * @returns the internal texture\r\n     */\r\n    public getInternalTexture(): Nullable<InternalTexture> {\r\n        return this._texture;\r\n    }\r\n\r\n    /**\r\n     * Get the size of the texture.\r\n     * @returns the texture size.\r\n     */\r\n    public getSize(): ISize {\r\n        if (this._texture) {\r\n            if (this._texture.width) {\r\n                this._cachedSize.width = this._texture.width;\r\n                this._cachedSize.height = this._texture.height;\r\n                return this._cachedSize;\r\n            }\r\n\r\n            if (this._texture._size) {\r\n                this._cachedSize.width = this._texture._size;\r\n                this._cachedSize.height = this._texture._size;\r\n                return this._cachedSize;\r\n            }\r\n        }\r\n\r\n        return this._cachedSize;\r\n    }\r\n\r\n    /**\r\n     * Get the base size of the texture.\r\n     * It can be different from the size if the texture has been resized for POT for instance\r\n     * @returns the base size\r\n     */\r\n    public getBaseSize(): ISize {\r\n        if (!this.isReady() || !this._texture) {\r\n            this._cachedBaseSize.width = 0;\r\n            this._cachedBaseSize.height = 0;\r\n            return this._cachedBaseSize;\r\n        }\r\n\r\n        if (this._texture._size) {\r\n            this._cachedBaseSize.width = this._texture._size;\r\n            this._cachedBaseSize.height = this._texture._size;\r\n            return this._cachedBaseSize;\r\n        }\r\n\r\n        this._cachedBaseSize.width = this._texture.baseWidth;\r\n        this._cachedBaseSize.height = this._texture.baseHeight;\r\n        return this._cachedBaseSize;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _initialSamplingMode = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n\r\n    /**\r\n     * Get the current sampling mode associated with the texture.\r\n     */\r\n    public get samplingMode(): number {\r\n        if (!this._texture) {\r\n            return this._initialSamplingMode;\r\n        }\r\n\r\n        return this._texture.samplingMode;\r\n    }\r\n\r\n    /**\r\n     * Update the sampling mode of the texture.\r\n     * Default is Trilinear mode.\r\n     *\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 1     | NEAREST_SAMPLINGMODE or NEAREST_NEAREST_MIPLINEAR  | Nearest is: mag = nearest, min = nearest, mip = linear |\r\n     * | 2     | BILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPNEAREST | Bilinear is: mag = linear, min = linear, mip = nearest |\r\n     * | 3     | TRILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPLINEAR | Trilinear is: mag = linear, min = linear, mip = linear |\r\n     * | 4     | NEAREST_NEAREST_MIPNEAREST |             |\r\n     * | 5    | NEAREST_LINEAR_MIPNEAREST |             |\r\n     * | 6    | NEAREST_LINEAR_MIPLINEAR |             |\r\n     * | 7    | NEAREST_LINEAR |             |\r\n     * | 8    | NEAREST_NEAREST |             |\r\n     * | 9   | LINEAR_NEAREST_MIPNEAREST |             |\r\n     * | 10   | LINEAR_NEAREST_MIPLINEAR |             |\r\n     * | 11   | LINEAR_LINEAR |             |\r\n     * | 12   | LINEAR_NEAREST |             |\r\n     *\r\n     *    > _mag_: magnification filter (close to the viewer)\r\n     *    > _min_: minification filter (far from the viewer)\r\n     *    > _mip_: filter used between mip map levels\r\n     *@param samplingMode Define the new sampling mode of the texture\r\n     */\r\n    public updateSamplingMode(samplingMode: number): void {\r\n        if (this._texture && this._engine) {\r\n            this._engine.updateTextureSamplingMode(samplingMode, this._texture);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release and destroy the underlying lower level texture aka internalTexture.\r\n     */\r\n    public releaseInternalTexture(): void {\r\n        if (this._texture) {\r\n            this._texture.dispose();\r\n            this._texture = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the texture and release its associated resources.\r\n     */\r\n    public dispose(): void {\r\n        if (this._texture) {\r\n            this.releaseInternalTexture();\r\n            this._engine = null;\r\n        }\r\n    }\r\n}\r\n", "import { serialize, serializeAsTexture } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix } from \"../../Maths/math.vector\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\nimport { RandomGUID } from \"../../Misc/guid\";\r\n\r\nimport \"../../Misc/fileTools\";\r\nimport type { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { ThinTexture } from \"./thinTexture\";\r\nimport type { AbstractScene } from \"../../abstractScene\";\r\n\r\nimport type { Animation } from \"../../Animations/animation\";\r\nimport { SerializationHelper } from \"../../Misc/decorators.serialization\";\r\n\r\n/**\r\n * Base class of all the textures in babylon.\r\n * It groups all the common properties the materials, post process, lights... might need\r\n * in order to make a correct use of the texture.\r\n */\r\nexport class BaseTexture extends ThinTexture implements IAnimatable {\r\n    /**\r\n     * Default anisotropic filtering level for the application.\r\n     * It is set to 4 as a good tradeoff between perf and quality.\r\n     */\r\n    public static DEFAULT_ANISOTROPIC_FILTERING_LEVEL = 4;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the texture\r\n     */\r\n    @serialize()\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Define the name of the texture.\r\n     */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information.\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /** @internal */\r\n    public _internalMetadata: any;\r\n\r\n    /**\r\n     * For internal use only. Please do not use.\r\n     */\r\n    public reservedDataStore: any = null;\r\n\r\n    @serialize(\"hasAlpha\")\r\n    private _hasAlpha = false;\r\n    /**\r\n     * Define if the texture is having a usable alpha value (can be use for transparency or glossiness for instance).\r\n     */\r\n    public set hasAlpha(value: boolean) {\r\n        if (this._hasAlpha === value) {\r\n            return;\r\n        }\r\n        this._hasAlpha = value;\r\n        if (this._scene) {\r\n            this._scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n                return mat.hasTexture(this);\r\n            });\r\n        }\r\n    }\r\n    public get hasAlpha(): boolean {\r\n        return this._hasAlpha;\r\n    }\r\n\r\n    @serialize(\"getAlphaFromRGB\")\r\n    private _getAlphaFromRGB = false;\r\n    /**\r\n     * Defines if the alpha value should be determined via the rgb values.\r\n     * If true the luminance of the pixel might be used to find the corresponding alpha value.\r\n     */\r\n    public set getAlphaFromRGB(value: boolean) {\r\n        if (this._getAlphaFromRGB === value) {\r\n            return;\r\n        }\r\n        this._getAlphaFromRGB = value;\r\n        if (this._scene) {\r\n            this._scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n                return mat.hasTexture(this);\r\n            });\r\n        }\r\n    }\r\n    public get getAlphaFromRGB(): boolean {\r\n        return this._getAlphaFromRGB;\r\n    }\r\n\r\n    /**\r\n     * Intensity or strength of the texture.\r\n     * It is commonly used by materials to fine tune the intensity of the texture\r\n     */\r\n    @serialize()\r\n    public level = 1;\r\n\r\n    @serialize(\"coordinatesIndex\")\r\n    protected _coordinatesIndex = 0;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the texture should try to reduce shader code if there is no UV manipulation.\r\n     * (ie. when texture.getTextureMatrix().isIdentityAs3x2() returns true)\r\n     */\r\n    @serialize()\r\n    public optimizeUVAllocation = true;\r\n\r\n    /**\r\n     * Define the UV channel to use starting from 0 and defaulting to 0.\r\n     * This is part of the texture as textures usually maps to one uv set.\r\n     */\r\n    public set coordinatesIndex(value: number) {\r\n        if (this._coordinatesIndex === value) {\r\n            return;\r\n        }\r\n        this._coordinatesIndex = value;\r\n        if (this._scene) {\r\n            this._scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n                return mat.hasTexture(this);\r\n            });\r\n        }\r\n    }\r\n    public get coordinatesIndex(): number {\r\n        return this._coordinatesIndex;\r\n    }\r\n\r\n    @serialize(\"coordinatesMode\")\r\n    protected _coordinatesMode = Constants.TEXTURE_EXPLICIT_MODE;\r\n\r\n    /**\r\n     * How a texture is mapped.\r\n     *\r\n     * | Value | Type                                | Description |\r\n     * | ----- | ----------------------------------- | ----------- |\r\n     * | 0     | EXPLICIT_MODE                       |             |\r\n     * | 1     | SPHERICAL_MODE                      |             |\r\n     * | 2     | PLANAR_MODE                         |             |\r\n     * | 3     | CUBIC_MODE                          |             |\r\n     * | 4     | PROJECTION_MODE                     |             |\r\n     * | 5     | SKYBOX_MODE                         |             |\r\n     * | 6     | INVCUBIC_MODE                       |             |\r\n     * | 7     | EQUIRECTANGULAR_MODE                |             |\r\n     * | 8     | FIXED_EQUIRECTANGULAR_MODE          |             |\r\n     * | 9     | FIXED_EQUIRECTANGULAR_MIRRORED_MODE |             |\r\n     */\r\n    public set coordinatesMode(value: number) {\r\n        if (this._coordinatesMode === value) {\r\n            return;\r\n        }\r\n        this._coordinatesMode = value;\r\n        if (this._scene) {\r\n            this._scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n                return mat.hasTexture(this);\r\n            });\r\n        }\r\n    }\r\n    public get coordinatesMode(): number {\r\n        return this._coordinatesMode;\r\n    }\r\n\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    @serialize()\r\n    public get wrapU() {\r\n        return this._wrapU;\r\n    }\r\n    public set wrapU(value: number) {\r\n        this._wrapU = value;\r\n    }\r\n\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    @serialize()\r\n    public get wrapV() {\r\n        return this._wrapV;\r\n    }\r\n    public set wrapV(value: number) {\r\n        this._wrapV = value;\r\n    }\r\n\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    @serialize()\r\n    public wrapR = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n\r\n    /**\r\n     * With compliant hardware and browser (supporting anisotropic filtering)\r\n     * this defines the level of anisotropic filtering in the texture.\r\n     * The higher the better but the slower. This defaults to 4 as it seems to be the best tradeoff.\r\n     */\r\n    @serialize()\r\n    public anisotropicFilteringLevel = BaseTexture.DEFAULT_ANISOTROPIC_FILTERING_LEVEL;\r\n\r\n    /** @internal */\r\n    public _isCube = false;\r\n    /**\r\n     * Define if the texture is a cube texture or if false a 2d texture.\r\n     */\r\n    @serialize()\r\n    public get isCube(): boolean {\r\n        if (!this._texture) {\r\n            return this._isCube;\r\n        }\r\n\r\n        return this._texture.isCube;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected set isCube(value: boolean) {\r\n        if (!this._texture) {\r\n            this._isCube = value;\r\n        } else {\r\n            this._texture.isCube = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Define if the texture is a 3d texture (webgl 2) or if false a 2d texture.\r\n     */\r\n    @serialize()\r\n    public get is3D(): boolean {\r\n        if (!this._texture) {\r\n            return false;\r\n        }\r\n\r\n        return this._texture.is3D;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected set is3D(value: boolean) {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._texture.is3D = value;\r\n    }\r\n\r\n    /**\r\n     * Define if the texture is a 2d array texture (webgl 2) or if false a 2d texture.\r\n     */\r\n    @serialize()\r\n    public get is2DArray(): boolean {\r\n        if (!this._texture) {\r\n            return false;\r\n        }\r\n\r\n        return this._texture.is2DArray;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected set is2DArray(value: boolean) {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._texture.is2DArray = value;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _gammaSpace = true;\r\n    /**\r\n     * Define if the texture contains data in gamma space (most of the png/jpg aside bump).\r\n     * HDR texture are usually stored in linear space.\r\n     * This only impacts the PBR and Background materials\r\n     */\r\n    @serialize()\r\n    public get gammaSpace(): boolean {\r\n        if (!this._texture) {\r\n            return this._gammaSpace;\r\n        } else {\r\n            if (this._texture._gammaSpace === null) {\r\n                this._texture._gammaSpace = this._gammaSpace;\r\n            }\r\n        }\r\n\r\n        return this._texture._gammaSpace && !this._texture._useSRGBBuffer;\r\n    }\r\n\r\n    public set gammaSpace(gamma: boolean) {\r\n        if (!this._texture) {\r\n            if (this._gammaSpace === gamma) {\r\n                return;\r\n            }\r\n\r\n            this._gammaSpace = gamma;\r\n        } else {\r\n            if (this._texture._gammaSpace === gamma) {\r\n                return;\r\n            }\r\n            this._texture._gammaSpace = gamma;\r\n        }\r\n\r\n        this.getScene()?.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n            return mat.hasTexture(this);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets whether or not the texture contains RGBD data.\r\n     */\r\n    public get isRGBD(): boolean {\r\n        return this._texture != null && this._texture._isRGBD;\r\n    }\r\n    public set isRGBD(value: boolean) {\r\n        if (value === this.isRGBD) {\r\n            return;\r\n        }\r\n\r\n        if (this._texture) {\r\n            this._texture._isRGBD = value;\r\n        }\r\n\r\n        this.getScene()?.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n            return mat.hasTexture(this);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Is Z inverted in the texture (useful in a cube texture).\r\n     */\r\n    @serialize()\r\n    public invertZ = false;\r\n\r\n    /**\r\n     * Are mip maps generated for this texture or not.\r\n     */\r\n    public get noMipmap(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    @serialize()\r\n    public lodLevelInAlpha = false;\r\n\r\n    /**\r\n     * With prefiltered texture, defined the offset used during the prefiltering steps.\r\n     */\r\n    @serialize()\r\n    public get lodGenerationOffset(): number {\r\n        if (this._texture) {\r\n            return this._texture._lodGenerationOffset;\r\n        }\r\n\r\n        return 0.0;\r\n    }\r\n    public set lodGenerationOffset(value: number) {\r\n        if (this._texture) {\r\n            this._texture._lodGenerationOffset = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * With prefiltered texture, defined the scale used during the prefiltering steps.\r\n     */\r\n    @serialize()\r\n    public get lodGenerationScale(): number {\r\n        if (this._texture) {\r\n            return this._texture._lodGenerationScale;\r\n        }\r\n\r\n        return 0.0;\r\n    }\r\n    public set lodGenerationScale(value: number) {\r\n        if (this._texture) {\r\n            this._texture._lodGenerationScale = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * With prefiltered texture, defined if the specular generation is based on a linear ramp.\r\n     * By default we are using a log2 of the linear roughness helping to keep a better resolution for\r\n     * average roughness values.\r\n     */\r\n    @serialize()\r\n    public get linearSpecularLOD(): boolean {\r\n        if (this._texture) {\r\n            return this._texture._linearSpecularLOD;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    public set linearSpecularLOD(value: boolean) {\r\n        if (this._texture) {\r\n            this._texture._linearSpecularLOD = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * In case a better definition than spherical harmonics is required for the diffuse part of the environment.\r\n     * You can set the irradiance texture to rely on a texture instead of the spherical approach.\r\n     * This texture need to have the same characteristics than its parent (Cube vs 2d, coordinates mode, Gamma/Linear, RGBD).\r\n     */\r\n    @serializeAsTexture()\r\n    public get irradianceTexture(): Nullable<BaseTexture> {\r\n        if (this._texture) {\r\n            return this._texture._irradianceTexture;\r\n        }\r\n\r\n        return null;\r\n    }\r\n    public set irradianceTexture(value: Nullable<BaseTexture>) {\r\n        if (this._texture) {\r\n            this._texture._irradianceTexture = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Define if the texture is a render target.\r\n     */\r\n    @serialize()\r\n    public isRenderTarget = false;\r\n\r\n    /**\r\n     * Define the unique id of the texture in the scene.\r\n     */\r\n    public get uid(): string {\r\n        if (!this._uid) {\r\n            this._uid = RandomGUID();\r\n        }\r\n        return this._uid;\r\n    }\r\n\r\n    /** @internal */\r\n    public _prefiltered: boolean = false;\r\n    /** @internal */\r\n    public _forceSerialize: boolean = false;\r\n\r\n    /**\r\n     * Return a string representation of the texture.\r\n     * @returns the texture as a string\r\n     */\r\n    public toString(): string {\r\n        return this.name;\r\n    }\r\n\r\n    /**\r\n     * Get the class name of the texture.\r\n     * @returns \"BaseTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"BaseTexture\";\r\n    }\r\n\r\n    /**\r\n     * Define the list of animation attached to the texture.\r\n     */\r\n    public animations: Animation[] = [];\r\n\r\n    /**\r\n     * An event triggered when the texture is disposed.\r\n     */\r\n    public onDisposeObservable = new Observable<BaseTexture>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<BaseTexture>> = null;\r\n    /**\r\n     * Callback triggered when the texture has been disposed.\r\n     * Kept for back compatibility, you can use the onDisposeObservable instead.\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    protected _scene: Nullable<Scene> = null;\r\n\r\n    /** @internal */\r\n    private _uid: Nullable<string> = null;\r\n\r\n    /**\r\n     * Define if the texture is preventing a material to render or not.\r\n     * If not and the texture is not ready, the engine will use a default black texture instead.\r\n     */\r\n    public get isBlocking(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    protected _loadingError: boolean = false;\r\n    protected _errorObject?: {\r\n        message?: string;\r\n        exception?: any;\r\n    };\r\n\r\n    /**\r\n     * Was there any loading error?\r\n     */\r\n    public get loadingError(): boolean {\r\n        return this._loadingError;\r\n    }\r\n\r\n    /**\r\n     * If a loading error occurred this object will be populated with information about the error.\r\n     */\r\n    public get errorObject():\r\n        | {\r\n              message?: string;\r\n              exception?: any;\r\n          }\r\n        | undefined {\r\n        return this._errorObject;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new BaseTexture.\r\n     * Base class of all the textures in babylon.\r\n     * It groups all the common properties the materials, post process, lights... might need\r\n     * in order to make a correct use of the texture.\r\n     * @param sceneOrEngine Define the scene or engine the texture belongs to\r\n     * @param internalTexture Define the internal texture associated with the texture\r\n     */\r\n    constructor(sceneOrEngine?: Nullable<Scene | ThinEngine>, internalTexture: Nullable<InternalTexture> = null) {\r\n        super(null);\r\n\r\n        if (sceneOrEngine) {\r\n            if (BaseTexture._IsScene(sceneOrEngine)) {\r\n                this._scene = sceneOrEngine;\r\n            } else {\r\n                this._engine = sceneOrEngine;\r\n            }\r\n        } else {\r\n            this._scene = EngineStore.LastCreatedScene;\r\n        }\r\n\r\n        if (this._scene) {\r\n            this.uniqueId = this._scene.getUniqueId();\r\n            this._scene.addTexture(this);\r\n            this._engine = this._scene.getEngine();\r\n        }\r\n\r\n        this._texture = internalTexture;\r\n\r\n        this._uid = null;\r\n    }\r\n\r\n    /**\r\n     * Get the scene the texture belongs to.\r\n     * @returns the scene or null if undefined\r\n     */\r\n    public getScene(): Nullable<Scene> {\r\n        return this._scene;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _getEngine(): Nullable<ThinEngine> {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * Checks if the texture has the same transform matrix than another texture\r\n     * @param texture texture to check against\r\n     * @returns true if the transforms are the same, else false\r\n     */\r\n    public checkTransformsAreIdentical(texture: Nullable<BaseTexture>): boolean {\r\n        return texture !== null;\r\n    }\r\n\r\n    /**\r\n     * Get the texture transform matrix used to offset tile the texture for instance.\r\n     * @returns the transformation matrix\r\n     */\r\n    public getTextureMatrix(): Matrix {\r\n        return <Matrix>Matrix.IdentityReadOnly;\r\n    }\r\n\r\n    /**\r\n     * Get the texture reflection matrix used to rotate/transform the reflection.\r\n     * @returns the reflection matrix\r\n     */\r\n    public getReflectionTextureMatrix(): Matrix {\r\n        return <Matrix>Matrix.IdentityReadOnly;\r\n    }\r\n\r\n    /**\r\n     * Gets a suitable rotate/transform matrix when the texture is used for refraction.\r\n     * There's a separate function from getReflectionTextureMatrix because refraction requires a special configuration of the matrix in right-handed mode.\r\n     * @returns The refraction matrix\r\n     */\r\n    public getRefractionTextureMatrix(): Matrix {\r\n        return this.getReflectionTextureMatrix();\r\n    }\r\n\r\n    /**\r\n     * Get if the texture is ready to be consumed (either it is ready or it is not blocking)\r\n     * @returns true if ready, not blocking or if there was an error loading the texture\r\n     */\r\n    public isReadyOrNotBlocking(): boolean {\r\n        return !this.isBlocking || this.isReady() || this.loadingError;\r\n    }\r\n\r\n    /**\r\n     * Scales the texture if is `canRescale()`\r\n     * @param ratio the resize factor we want to use to rescale\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public scale(ratio: number): void {}\r\n\r\n    /**\r\n     * Get if the texture can rescale.\r\n     */\r\n    public get canRescale(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getFromCache(url: Nullable<string>, noMipmap: boolean, sampling?: number, invertY?: boolean, useSRGBBuffer?: boolean, isCube?: boolean): Nullable<InternalTexture> {\r\n        const engine = this._getEngine();\r\n        if (!engine) {\r\n            return null;\r\n        }\r\n\r\n        const correctedUseSRGBBuffer = engine._getUseSRGBBuffer(!!useSRGBBuffer, noMipmap);\r\n\r\n        const texturesCache = engine.getLoadedTexturesCache();\r\n        for (let index = 0; index < texturesCache.length; index++) {\r\n            const texturesCacheEntry = texturesCache[index];\r\n\r\n            if (useSRGBBuffer === undefined || correctedUseSRGBBuffer === texturesCacheEntry._useSRGBBuffer) {\r\n                if (invertY === undefined || invertY === texturesCacheEntry.invertY) {\r\n                    if (texturesCacheEntry.url === url && texturesCacheEntry.generateMipMaps === !noMipmap) {\r\n                        if (!sampling || sampling === texturesCacheEntry.samplingMode) {\r\n                            if (isCube === undefined || isCube === texturesCacheEntry.isCube) {\r\n                                texturesCacheEntry.incrementReferences();\r\n                                return texturesCacheEntry;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(_fromContextLost = false): void {}\r\n\r\n    /**\r\n     * Clones the texture.\r\n     * @returns the cloned texture\r\n     */\r\n    public clone(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get the texture underlying type (INT, FLOAT...)\r\n     */\r\n    public get textureType(): number {\r\n        if (!this._texture) {\r\n            return Constants.TEXTURETYPE_UNSIGNED_INT;\r\n        }\r\n\r\n        return this._texture.type !== undefined ? this._texture.type : Constants.TEXTURETYPE_UNSIGNED_INT;\r\n    }\r\n\r\n    /**\r\n     * Get the texture underlying format (RGB, RGBA...)\r\n     */\r\n    public get textureFormat(): number {\r\n        if (!this._texture) {\r\n            return Constants.TEXTUREFORMAT_RGBA;\r\n        }\r\n\r\n        return this._texture.format !== undefined ? this._texture.format : Constants.TEXTUREFORMAT_RGBA;\r\n    }\r\n\r\n    /**\r\n     * Indicates that textures need to be re-calculated for all materials\r\n     */\r\n    protected _markAllSubMeshesAsTexturesDirty() {\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Reads the pixels stored in the webgl texture and returns them as an ArrayBuffer.\r\n     * This will returns an RGBA array buffer containing either in values (0-255) or\r\n     * float values (0-1) depending of the underlying buffer type.\r\n     * @param faceIndex defines the face of the texture to read (in case of cube texture)\r\n     * @param level defines the LOD level of the texture to read (in case of Mip Maps)\r\n     * @param buffer defines a user defined buffer to fill with data (can be null)\r\n     * @param flushRenderer true to flush the renderer from the pending commands before reading the pixels\r\n     * @param noDataConversion false to convert the data to Uint8Array (if texture type is UNSIGNED_BYTE) or to Float32Array (if texture type is anything but UNSIGNED_BYTE). If true, the type of the generated buffer (if buffer==null) will depend on the type of the texture\r\n     * @param x defines the region x coordinates to start reading from (default to 0)\r\n     * @param y defines the region y coordinates to start reading from (default to 0)\r\n     * @param width defines the region width to read from (default to the texture size at level)\r\n     * @param height defines the region width to read from (default to the texture size at level)\r\n     * @returns The Array buffer promise containing the pixels data.\r\n     */\r\n    public readPixels(\r\n        faceIndex = 0,\r\n        level = 0,\r\n        buffer: Nullable<ArrayBufferView> = null,\r\n        flushRenderer = true,\r\n        noDataConversion = false,\r\n        x = 0,\r\n        y = 0,\r\n        width = Number.MAX_VALUE,\r\n        height = Number.MAX_VALUE\r\n    ): Nullable<Promise<ArrayBufferView>> {\r\n        if (!this._texture) {\r\n            return null;\r\n        }\r\n\r\n        const engine = this._getEngine();\r\n        if (!engine) {\r\n            return null;\r\n        }\r\n\r\n        const size = this.getSize();\r\n        let maxWidth = size.width;\r\n        let maxHeight = size.height;\r\n        if (level !== 0) {\r\n            maxWidth = maxWidth / Math.pow(2, level);\r\n            maxHeight = maxHeight / Math.pow(2, level);\r\n            maxWidth = Math.round(maxWidth);\r\n            maxHeight = Math.round(maxHeight);\r\n        }\r\n\r\n        width = Math.min(maxWidth, width);\r\n        height = Math.min(maxHeight, height);\r\n\r\n        try {\r\n            if (this._texture.isCube) {\r\n                return engine._readTexturePixels(this._texture, width, height, faceIndex, level, buffer, flushRenderer, noDataConversion, x, y);\r\n            }\r\n\r\n            return engine._readTexturePixels(this._texture, width, height, -1, level, buffer, flushRenderer, noDataConversion, x, y);\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _readPixelsSync(faceIndex = 0, level = 0, buffer: Nullable<ArrayBufferView> = null, flushRenderer = true, noDataConversion = false): Nullable<ArrayBufferView> {\r\n        if (!this._texture) {\r\n            return null;\r\n        }\r\n\r\n        const size = this.getSize();\r\n        let width = size.width;\r\n        let height = size.height;\r\n\r\n        const engine = this._getEngine();\r\n        if (!engine) {\r\n            return null;\r\n        }\r\n\r\n        if (level != 0) {\r\n            width = width / Math.pow(2, level);\r\n            height = height / Math.pow(2, level);\r\n\r\n            width = Math.round(width);\r\n            height = Math.round(height);\r\n        }\r\n\r\n        try {\r\n            if (this._texture.isCube) {\r\n                return engine._readTexturePixelsSync(this._texture, width, height, faceIndex, level, buffer, flushRenderer, noDataConversion);\r\n            }\r\n\r\n            return engine._readTexturePixelsSync(this._texture, width, height, -1, level, buffer, flushRenderer, noDataConversion);\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public get _lodTextureHigh(): Nullable<BaseTexture> {\r\n        if (this._texture) {\r\n            return this._texture._lodTextureHigh;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _lodTextureMid(): Nullable<BaseTexture> {\r\n        if (this._texture) {\r\n            return this._texture._lodTextureMid;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _lodTextureLow(): Nullable<BaseTexture> {\r\n        if (this._texture) {\r\n            return this._texture._lodTextureLow;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Dispose the texture and release its associated resources.\r\n     */\r\n    public dispose(): void {\r\n        if (this._scene) {\r\n            // Animations\r\n            if (this._scene.stopAnimation) {\r\n                this._scene.stopAnimation(this);\r\n            }\r\n\r\n            // Remove from scene\r\n            this._scene.removePendingData(this);\r\n            const index = this._scene.textures.indexOf(this);\r\n\r\n            if (index >= 0) {\r\n                this._scene.textures.splice(index, 1);\r\n            }\r\n            this._scene.onTextureRemovedObservable.notifyObservers(this);\r\n            this._scene = null;\r\n\r\n            if (this._parentContainer) {\r\n                const index = this._parentContainer.textures.indexOf(this);\r\n                if (index > -1) {\r\n                    this._parentContainer.textures.splice(index, 1);\r\n                }\r\n                this._parentContainer = null;\r\n            }\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n\r\n        this.metadata = null;\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Serialize the texture into a JSON representation that can be parsed later on.\r\n     * @param allowEmptyName True to force serialization even if name is empty. Default: false\r\n     * @returns the JSON representation of the texture\r\n     */\r\n    public serialize(allowEmptyName = false): any {\r\n        if (!this.name && !allowEmptyName) {\r\n            return null;\r\n        }\r\n\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Helper function to be called back once a list of texture contains only ready textures.\r\n     * @param textures Define the list of textures to wait for\r\n     * @param callback Define the callback triggered once the entire list will be ready\r\n     */\r\n    public static WhenAllReady(textures: BaseTexture[], callback: () => void): void {\r\n        let numRemaining = textures.length;\r\n        if (numRemaining === 0) {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < textures.length; i++) {\r\n            const texture = textures[i];\r\n\r\n            if (texture.isReady()) {\r\n                if (--numRemaining === 0) {\r\n                    callback();\r\n                }\r\n            } else {\r\n                const onLoadObservable = (texture as any).onLoadObservable as Observable<BaseTexture>;\r\n\r\n                if (onLoadObservable) {\r\n                    onLoadObservable.addOnce(() => {\r\n                        if (--numRemaining === 0) {\r\n                            callback();\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (--numRemaining === 0) {\r\n                        callback();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _IsScene(sceneOrEngine: Scene | ThinEngine): sceneOrEngine is Scene {\r\n        return sceneOrEngine.getClassName() === \"Scene\";\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { ISize } from \"../Maths/math.size\";\r\nimport type { Nullable } from \"../types\";\r\n\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\n\r\n/**\r\n * Transform some pixel data to a base64 string\r\n * @param pixels defines the pixel data to transform to base64\r\n * @param size defines the width and height of the (texture) data\r\n * @param invertY true if the data must be inverted for the Y coordinate during the conversion\r\n * @returns The base64 encoded string or null\r\n */\r\nexport function GenerateBase64StringFromPixelData(pixels: ArrayBufferView, size: ISize, invertY = false): Nullable<string> {\r\n    const width = size.width;\r\n    const height = size.height;\r\n\r\n    if (pixels instanceof Float32Array) {\r\n        let len = pixels.byteLength / pixels.BYTES_PER_ELEMENT;\r\n        const npixels = new Uint8Array(len);\r\n\r\n        while (--len >= 0) {\r\n            let val = pixels[len];\r\n            if (val < 0) {\r\n                val = 0;\r\n            } else if (val > 1) {\r\n                val = 1;\r\n            }\r\n            npixels[len] = val * 255;\r\n        }\r\n\r\n        pixels = npixels;\r\n    }\r\n\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) {\r\n        return null;\r\n    }\r\n\r\n    const imageData = ctx.createImageData(width, height);\r\n    const castData = <any>imageData.data;\r\n    castData.set(pixels);\r\n    ctx.putImageData(imageData, 0, 0);\r\n\r\n    if (invertY) {\r\n        const canvas2 = document.createElement(\"canvas\");\r\n        canvas2.width = width;\r\n        canvas2.height = height;\r\n\r\n        const ctx2 = canvas2.getContext(\"2d\");\r\n        if (!ctx2) {\r\n            return null;\r\n        }\r\n\r\n        ctx2.translate(0, height);\r\n        ctx2.scale(1, -1);\r\n        ctx2.drawImage(canvas, 0, 0);\r\n\r\n        return canvas2.toDataURL(\"image/png\");\r\n    }\r\n\r\n    return canvas.toDataURL(\"image/png\");\r\n}\r\n\r\n/**\r\n * Reads the pixels stored in the webgl texture and returns them as a base64 string\r\n * @param texture defines the texture to read pixels from\r\n * @param faceIndex defines the face of the texture to read (in case of cube texture)\r\n * @param level defines the LOD level of the texture to read (in case of Mip Maps)\r\n * @returns The base64 encoded string or null\r\n */\r\nexport function GenerateBase64StringFromTexture(texture: BaseTexture, faceIndex = 0, level = 0): Nullable<string> {\r\n    const internalTexture = texture.getInternalTexture();\r\n    if (!internalTexture) {\r\n        return null;\r\n    }\r\n\r\n    const pixels = texture._readPixelsSync(faceIndex, level);\r\n    if (!pixels) {\r\n        return null;\r\n    }\r\n\r\n    return GenerateBase64StringFromPixelData(pixels, texture.getSize(), internalTexture.invertY);\r\n}\r\n\r\n/**\r\n * Reads the pixels stored in the webgl texture and returns them as a base64 string\r\n * @param texture defines the texture to read pixels from\r\n * @param faceIndex defines the face of the texture to read (in case of cube texture)\r\n * @param level defines the LOD level of the texture to read (in case of Mip Maps)\r\n * @returns The base64 encoded string or null wrapped in a promise\r\n */\r\nexport async function GenerateBase64StringFromTextureAsync(texture: BaseTexture, faceIndex = 0, level = 0): Promise<Nullable<string>> {\r\n    const internalTexture = texture.getInternalTexture();\r\n    if (!internalTexture) {\r\n        return null;\r\n    }\r\n\r\n    const pixels = await texture.readPixels(faceIndex, level);\r\n    if (!pixels) {\r\n        return null;\r\n    }\r\n\r\n    return GenerateBase64StringFromPixelData(pixels, texture.getSize(), internalTexture.invertY);\r\n}\r\n\r\n/**\r\n * Class used to host copy specific utilities\r\n * (Back-compat)\r\n */\r\nexport const CopyTools = {\r\n    /**\r\n     * Transform some pixel data to a base64 string\r\n     * @param pixels defines the pixel data to transform to base64\r\n     * @param size defines the width and height of the (texture) data\r\n     * @param invertY true if the data must be inverted for the Y coordinate during the conversion\r\n     * @returns The base64 encoded string or null\r\n     */\r\n    GenerateBase64StringFromPixelData,\r\n\r\n    /**\r\n     * Reads the pixels stored in the webgl texture and returns them as a base64 string\r\n     * @param texture defines the texture to read pixels from\r\n     * @param faceIndex defines the face of the texture to read (in case of cube texture)\r\n     * @param level defines the LOD level of the texture to read (in case of Mip Maps)\r\n     * @returns The base64 encoded string or null\r\n     */\r\n    GenerateBase64StringFromTexture,\r\n\r\n    /**\r\n     * Reads the pixels stored in the webgl texture and returns them as a base64 string\r\n     * @param texture defines the texture to read pixels from\r\n     * @param faceIndex defines the face of the texture to read (in case of cube texture)\r\n     * @param level defines the LOD level of the texture to read (in case of Mip Maps)\r\n     * @returns The base64 encoded string or null wrapped in a promise\r\n     */\r\n    GenerateBase64StringFromTextureAsync,\r\n};\r\n", "import { serialize } from \"../../Misc/decorators\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"../../Maths/math.vector\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { GetClass, RegisterClass } from \"../../Misc/typeStore\";\r\nimport { _WarnImport } from \"../../Misc/devTools\";\r\nimport type { IInspectable } from \"../../Misc/iInspectable\";\r\nimport type { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { TimingTools } from \"../../Misc/timingTools\";\r\nimport { InstantiationTools } from \"../../Misc/instantiationTools\";\r\nimport { Plane } from \"../../Maths/math.plane\";\r\nimport { EncodeArrayBufferToBase64 } from \"../../Misc/stringTools\";\r\nimport { GenerateBase64StringFromTexture, GenerateBase64StringFromTextureAsync } from \"../../Misc/copyTools\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\nimport type { InternalTexture } from \"./internalTexture\";\r\n\r\nimport type { CubeTexture } from \"../../Materials/Textures/cubeTexture\";\r\nimport type { MirrorTexture } from \"../../Materials/Textures/mirrorTexture\";\r\nimport type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { VideoTexture, VideoTextureSettings } from \"./videoTexture\";\r\n\r\nimport { SerializationHelper } from \"../../Misc/decorators.serialization\";\r\n\r\n/**\r\n * Defines the available options when creating a texture\r\n */\r\nexport interface ITextureCreationOptions {\r\n    /** Defines if the texture will require mip maps or not (default: false) */\r\n    noMipmap?: boolean;\r\n\r\n    /** Defines if the texture needs to be inverted on the y axis during loading (default: true) */\r\n    invertY?: boolean;\r\n\r\n    /** Defines the sampling mode we want for the texture while fetching from it (Texture.NEAREST_SAMPLINGMODE...) (default: Texture.TRILINEAR_SAMPLINGMODE) */\r\n    samplingMode?: number;\r\n\r\n    /** Defines a callback triggered when the texture has been loaded (default: null) */\r\n    onLoad?: Nullable<() => void>;\r\n\r\n    /** Defines a callback triggered when an error occurred during the loading session (default: null) */\r\n    onError?: Nullable<(message?: string, exception?: any) => void>;\r\n\r\n    /** Defines the buffer to load the texture from in case the texture is loaded from a buffer representation (default: null) */\r\n    buffer?: Nullable<string | ArrayBuffer | ArrayBufferView | HTMLImageElement | Blob | ImageBitmap>;\r\n\r\n    /** Defines if the buffer we are loading the texture from should be deleted after load (default: false) */\r\n    deleteBuffer?: boolean;\r\n\r\n    /** Defines the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...) (default: ) */\r\n    format?: number;\r\n\r\n    /** Defines an optional mime type information (default: undefined) */\r\n    mimeType?: string;\r\n\r\n    /** Options to be passed to the loader (default: undefined) */\r\n    loaderOptions?: any;\r\n\r\n    /** Specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg) (default: undefined) */\r\n    creationFlags?: number;\r\n\r\n    /** Defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU) (default: false) */\r\n    useSRGBBuffer?: boolean;\r\n\r\n    /** Defines the underlying texture from an already existing one */\r\n    internalTexture?: InternalTexture;\r\n\r\n    /** Defines the underlying texture texture space */\r\n    gammaSpace?: boolean;\r\n}\r\n\r\n/**\r\n * This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#texture\r\n */\r\nexport class Texture extends BaseTexture {\r\n    /**\r\n     * Gets or sets a general boolean used to indicate that textures containing direct data (buffers) must be saved as part of the serialization process\r\n     */\r\n    public static SerializeBuffers = true;\r\n\r\n    /**\r\n     * Gets or sets a general boolean used to indicate that texture buffers must be saved as part of the serialization process.\r\n     * If no buffer exists, one will be created as base64 string from the internal webgl data.\r\n     */\r\n    public static ForceSerializeBuffers = false;\r\n\r\n    /**\r\n     * This observable will notify when any texture had a loading error\r\n     */\r\n    public static OnTextureLoadErrorObservable = new Observable<BaseTexture>();\r\n\r\n    /** @internal */\r\n    public static _SerializeInternalTextureUniqueId = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _CubeTextureParser = (jsonTexture: any, scene: Scene, rootUrl: string): CubeTexture => {\r\n        throw _WarnImport(\"CubeTexture\");\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _CreateMirror = (name: string, renderTargetSize: number, scene: Scene, generateMipMaps: boolean): MirrorTexture => {\r\n        throw _WarnImport(\"MirrorTexture\");\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _CreateRenderTargetTexture = (name: string, renderTargetSize: number, scene: Scene, generateMipMaps: boolean, creationFlags?: number): RenderTargetTexture => {\r\n        throw _WarnImport(\"RenderTargetTexture\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _CreateVideoTexture(\r\n        name: Nullable<string>,\r\n        src: string | string[] | HTMLVideoElement,\r\n        scene: Nullable<Scene>,\r\n        generateMipMaps = false,\r\n        invertY = false,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        settings: Partial<VideoTextureSettings> = {},\r\n        onError?: Nullable<(message?: string, exception?: any) => void>,\r\n        format: number = Constants.TEXTUREFORMAT_RGBA\r\n    ): VideoTexture {\r\n        throw _WarnImport(\"VideoTexture\");\r\n    }\r\n\r\n    /** nearest is mag = nearest and min = nearest and no mip */\r\n    public static readonly NEAREST_SAMPLINGMODE = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    /** nearest is mag = nearest and min = nearest and mip = linear */\r\n    public static readonly NEAREST_NEAREST_MIPLINEAR = Constants.TEXTURE_NEAREST_NEAREST_MIPLINEAR; // nearest is mag = nearest and min = nearest and mip = linear\r\n\r\n    /** Bilinear is mag = linear and min = linear and no mip */\r\n    public static readonly BILINEAR_SAMPLINGMODE = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly LINEAR_LINEAR_MIPNEAREST = Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST; // Bilinear is mag = linear and min = linear and mip = nearest\r\n\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TRILINEAR_SAMPLINGMODE = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly LINEAR_LINEAR_MIPLINEAR = Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR; // Trilinear is mag = linear and min = linear and mip = linear\r\n\r\n    /** mag = nearest and min = nearest and mip = nearest */\r\n    public static readonly NEAREST_NEAREST_MIPNEAREST = Constants.TEXTURE_NEAREST_NEAREST_MIPNEAREST;\r\n    /** mag = nearest and min = linear and mip = nearest */\r\n    public static readonly NEAREST_LINEAR_MIPNEAREST = Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST;\r\n    /** mag = nearest and min = linear and mip = linear */\r\n    public static readonly NEAREST_LINEAR_MIPLINEAR = Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR;\r\n    /** mag = nearest and min = linear and mip = none */\r\n    public static readonly NEAREST_LINEAR = Constants.TEXTURE_NEAREST_LINEAR;\r\n    /** mag = nearest and min = nearest and mip = none */\r\n    public static readonly NEAREST_NEAREST = Constants.TEXTURE_NEAREST_NEAREST;\r\n    /** mag = linear and min = nearest and mip = nearest */\r\n    public static readonly LINEAR_NEAREST_MIPNEAREST = Constants.TEXTURE_LINEAR_NEAREST_MIPNEAREST;\r\n    /** mag = linear and min = nearest and mip = linear */\r\n    public static readonly LINEAR_NEAREST_MIPLINEAR = Constants.TEXTURE_LINEAR_NEAREST_MIPLINEAR;\r\n    /** mag = linear and min = linear and mip = none */\r\n    public static readonly LINEAR_LINEAR = Constants.TEXTURE_LINEAR_LINEAR;\r\n    /** mag = linear and min = nearest and mip = none */\r\n    public static readonly LINEAR_NEAREST = Constants.TEXTURE_LINEAR_NEAREST;\r\n\r\n    /** Explicit coordinates mode */\r\n    public static readonly EXPLICIT_MODE = Constants.TEXTURE_EXPLICIT_MODE;\r\n    /** Spherical coordinates mode */\r\n    public static readonly SPHERICAL_MODE = Constants.TEXTURE_SPHERICAL_MODE;\r\n    /** Planar coordinates mode */\r\n    public static readonly PLANAR_MODE = Constants.TEXTURE_PLANAR_MODE;\r\n    /** Cubic coordinates mode */\r\n    public static readonly CUBIC_MODE = Constants.TEXTURE_CUBIC_MODE;\r\n    /** Projection coordinates mode */\r\n    public static readonly PROJECTION_MODE = Constants.TEXTURE_PROJECTION_MODE;\r\n    /** Inverse Cubic coordinates mode */\r\n    public static readonly SKYBOX_MODE = Constants.TEXTURE_SKYBOX_MODE;\r\n    /** Inverse Cubic coordinates mode */\r\n    public static readonly INVCUBIC_MODE = Constants.TEXTURE_INVCUBIC_MODE;\r\n    /** Equirectangular coordinates mode */\r\n    public static readonly EQUIRECTANGULAR_MODE = Constants.TEXTURE_EQUIRECTANGULAR_MODE;\r\n    /** Equirectangular Fixed coordinates mode */\r\n    public static readonly FIXED_EQUIRECTANGULAR_MODE = Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MODE;\r\n    /** Equirectangular Fixed Mirrored coordinates mode */\r\n    public static readonly FIXED_EQUIRECTANGULAR_MIRRORED_MODE = Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE;\r\n\r\n    /** Texture is not repeating outside of 0..1 UVs */\r\n    public static readonly CLAMP_ADDRESSMODE = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n    /** Texture is repeating outside of 0..1 UVs */\r\n    public static readonly WRAP_ADDRESSMODE = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n    /** Texture is repeating and mirrored */\r\n    public static readonly MIRROR_ADDRESSMODE = Constants.TEXTURE_MIRROR_ADDRESSMODE;\r\n\r\n    /**\r\n     * Gets or sets a boolean which defines if the texture url must be build from the serialized URL instead of just using the name and loading them side by side with the scene file\r\n     */\r\n    public static UseSerializedUrlIfAny = false;\r\n\r\n    /**\r\n     * Define the url of the texture.\r\n     */\r\n    @serialize()\r\n    public url: Nullable<string> = null;\r\n\r\n    /**\r\n     * Define an offset on the texture to offset the u coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#offsetting\r\n     */\r\n    @serialize()\r\n    public uOffset = 0;\r\n\r\n    /**\r\n     * Define an offset on the texture to offset the v coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#offsetting\r\n     */\r\n    @serialize()\r\n    public vOffset = 0;\r\n\r\n    /**\r\n     * Define an offset on the texture to scale the u coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#tiling\r\n     */\r\n    @serialize()\r\n    public uScale = 1.0;\r\n\r\n    /**\r\n     * Define an offset on the texture to scale the v coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#tiling\r\n     */\r\n    @serialize()\r\n    public vScale = 1.0;\r\n\r\n    /**\r\n     * Define an offset on the texture to rotate around the u coordinates of the UVs\r\n     * The angle is defined in radians.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials\r\n     */\r\n    @serialize()\r\n    public uAng = 0;\r\n\r\n    /**\r\n     * Define an offset on the texture to rotate around the v coordinates of the UVs\r\n     * The angle is defined in radians.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials\r\n     */\r\n    @serialize()\r\n    public vAng = 0;\r\n\r\n    /**\r\n     * Define an offset on the texture to rotate around the w coordinates of the UVs (in case of 3d texture)\r\n     * The angle is defined in radians.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials\r\n     */\r\n    @serialize()\r\n    public wAng = 0;\r\n\r\n    /**\r\n     * Defines the center of rotation (U)\r\n     */\r\n    @serialize()\r\n    public uRotationCenter = 0.5;\r\n\r\n    /**\r\n     * Defines the center of rotation (V)\r\n     */\r\n    @serialize()\r\n    public vRotationCenter = 0.5;\r\n\r\n    /**\r\n     * Defines the center of rotation (W)\r\n     */\r\n    @serialize()\r\n    public wRotationCenter = 0.5;\r\n\r\n    /**\r\n     * Sets this property to true to avoid deformations when rotating the texture with non-uniform scaling\r\n     */\r\n    @serialize()\r\n    public homogeneousRotationInUVTransform = false;\r\n\r\n    /**\r\n     * Are mip maps generated for this texture or not.\r\n     */\r\n    get noMipmap(): boolean {\r\n        return this._noMipmap;\r\n    }\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector#extensibility\r\n     */\r\n    public inspectableCustomProperties: Nullable<IInspectable[]> = null;\r\n\r\n    /** @internal */\r\n    public _noMipmap: boolean = false;\r\n    /** @internal */\r\n    public _invertY: boolean = false;\r\n    private _rowGenerationMatrix: Nullable<Matrix> = null;\r\n    private _cachedTextureMatrix: Nullable<Matrix> = null;\r\n    private _projectionModeMatrix: Nullable<Matrix> = null;\r\n    private _t0: Nullable<Vector3> = null;\r\n    private _t1: Nullable<Vector3> = null;\r\n    private _t2: Nullable<Vector3> = null;\r\n\r\n    private _cachedUOffset: number = -1;\r\n    private _cachedVOffset: number = -1;\r\n    private _cachedUScale: number = 0;\r\n    private _cachedVScale: number = 0;\r\n    private _cachedUAng: number = -1;\r\n    private _cachedVAng: number = -1;\r\n    private _cachedWAng: number = -1;\r\n    private _cachedReflectionProjectionMatrixId: number = -1;\r\n    private _cachedURotationCenter: number = -1;\r\n    private _cachedVRotationCenter: number = -1;\r\n    private _cachedWRotationCenter: number = -1;\r\n    private _cachedHomogeneousRotationInUVTransform: boolean = false;\r\n\r\n    private _cachedReflectionTextureMatrix: Nullable<Matrix> = null;\r\n    private _cachedReflectionUOffset = -1;\r\n    private _cachedReflectionVOffset = -1;\r\n    private _cachedReflectionUScale = 0;\r\n    private _cachedReflectionVScale = 0;\r\n    private _cachedReflectionCoordinatesMode = -1;\r\n\r\n    /** @internal */\r\n    public _buffer: Nullable<string | ArrayBuffer | ArrayBufferView | HTMLImageElement | Blob | ImageBitmap> = null;\r\n    private _deleteBuffer: boolean = false;\r\n    protected _format: Nullable<number> = null;\r\n    private _delayedOnLoad: Nullable<() => void> = null;\r\n    private _delayedOnError: Nullable<() => void> = null;\r\n    private _mimeType?: string;\r\n    private _loaderOptions?: any;\r\n    private _creationFlags?: number;\r\n    /** @internal */\r\n    public _useSRGBBuffer?: boolean;\r\n    private _forcedExtension?: string;\r\n\r\n    /** Returns the texture mime type if it was defined by a loader (undefined else) */\r\n    public get mimeType() {\r\n        return this._mimeType;\r\n    }\r\n\r\n    /**\r\n     * Observable triggered once the texture has been loaded.\r\n     */\r\n    public onLoadObservable: Observable<Texture> = new Observable<Texture>();\r\n\r\n    protected _isBlocking: boolean = true;\r\n    /**\r\n     * Is the texture preventing material to render while loading.\r\n     * If false, a default texture will be used instead of the loading one during the preparation step.\r\n     */\r\n    public set isBlocking(value: boolean) {\r\n        this._isBlocking = value;\r\n    }\r\n    @serialize()\r\n    public get isBlocking(): boolean {\r\n        return this._isBlocking;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the texture needs to be inverted on the y axis during loading\r\n     */\r\n    public get invertY(): boolean {\r\n        return this._invertY;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new texture.\r\n     * This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#texture\r\n     * @param url defines the url of the picture to load as a texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param noMipmapOrOptions defines if the texture will require mip maps or not or set of all options to create the texture\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading\r\n     * @param samplingMode defines the sampling mode we want for the texture while fetching from it (Texture.NEAREST_SAMPLINGMODE...)\r\n     * @param onLoad defines a callback triggered when the texture has been loaded\r\n     * @param onError defines a callback triggered when an error occurred during the loading session\r\n     * @param buffer defines the buffer to load the texture from in case the texture is loaded from a buffer representation\r\n     * @param deleteBuffer defines if the buffer we are loading the texture from should be deleted after load\r\n     * @param format defines the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\r\n     * @param mimeType defines an optional mime type information\r\n     * @param loaderOptions options to be passed to the loader\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     * @param forcedExtension defines the extension to use to pick the right loader\r\n     */\r\n    constructor(\r\n        url: Nullable<string>,\r\n        sceneOrEngine?: Nullable<Scene | ThinEngine>,\r\n        noMipmapOrOptions?: boolean | ITextureCreationOptions,\r\n        invertY?: boolean,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        onLoad: Nullable<() => void> = null,\r\n        onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n        buffer: Nullable<string | ArrayBuffer | ArrayBufferView | HTMLImageElement | Blob | ImageBitmap> = null,\r\n        deleteBuffer: boolean = false,\r\n        format?: number,\r\n        mimeType?: string,\r\n        loaderOptions?: any,\r\n        creationFlags?: number,\r\n        forcedExtension?: string\r\n    ) {\r\n        super(sceneOrEngine);\r\n\r\n        this.name = url || \"\";\r\n        this.url = url;\r\n\r\n        let noMipmap: boolean;\r\n        let useSRGBBuffer: boolean = false;\r\n        let internalTexture: Nullable<InternalTexture> = null;\r\n        let gammaSpace = true;\r\n\r\n        if (typeof noMipmapOrOptions === \"object\" && noMipmapOrOptions !== null) {\r\n            noMipmap = noMipmapOrOptions.noMipmap ?? false;\r\n            invertY = noMipmapOrOptions.invertY ?? (CompatibilityOptions.UseOpenGLOrientationForUV ? false : true);\r\n            samplingMode = noMipmapOrOptions.samplingMode ?? Texture.TRILINEAR_SAMPLINGMODE;\r\n            onLoad = noMipmapOrOptions.onLoad ?? null;\r\n            onError = noMipmapOrOptions.onError ?? null;\r\n            buffer = noMipmapOrOptions.buffer ?? null;\r\n            deleteBuffer = noMipmapOrOptions.deleteBuffer ?? false;\r\n            format = noMipmapOrOptions.format;\r\n            mimeType = noMipmapOrOptions.mimeType;\r\n            loaderOptions = noMipmapOrOptions.loaderOptions;\r\n            creationFlags = noMipmapOrOptions.creationFlags;\r\n            useSRGBBuffer = noMipmapOrOptions.useSRGBBuffer ?? false;\r\n            internalTexture = noMipmapOrOptions.internalTexture ?? null;\r\n            gammaSpace = noMipmapOrOptions.gammaSpace ?? gammaSpace;\r\n        } else {\r\n            noMipmap = !!noMipmapOrOptions;\r\n        }\r\n\r\n        this._gammaSpace = gammaSpace;\r\n        this._noMipmap = noMipmap;\r\n        this._invertY = invertY === undefined ? (CompatibilityOptions.UseOpenGLOrientationForUV ? false : true) : invertY;\r\n        this._initialSamplingMode = samplingMode;\r\n        this._buffer = buffer;\r\n        this._deleteBuffer = deleteBuffer;\r\n        this._mimeType = mimeType;\r\n        this._loaderOptions = loaderOptions;\r\n        this._creationFlags = creationFlags;\r\n        this._useSRGBBuffer = useSRGBBuffer;\r\n        this._forcedExtension = forcedExtension;\r\n        if (format) {\r\n            this._format = format;\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = this._getEngine();\r\n        if (!engine) {\r\n            return;\r\n        }\r\n\r\n        engine.onBeforeTextureInitObservable.notifyObservers(this);\r\n\r\n        const load = () => {\r\n            if (this._texture) {\r\n                if (this._texture._invertVScale) {\r\n                    this.vScale *= -1;\r\n                    this.vOffset += 1;\r\n                }\r\n\r\n                // Update texture to match internal texture's wrapping\r\n                if (this._texture._cachedWrapU !== null) {\r\n                    this.wrapU = this._texture._cachedWrapU;\r\n                    this._texture._cachedWrapU = null;\r\n                }\r\n                if (this._texture._cachedWrapV !== null) {\r\n                    this.wrapV = this._texture._cachedWrapV;\r\n                    this._texture._cachedWrapV = null;\r\n                }\r\n                if (this._texture._cachedWrapR !== null) {\r\n                    this.wrapR = this._texture._cachedWrapR;\r\n                    this._texture._cachedWrapR = null;\r\n                }\r\n            }\r\n\r\n            if (this.onLoadObservable.hasObservers()) {\r\n                this.onLoadObservable.notifyObservers(this);\r\n            }\r\n            if (onLoad) {\r\n                onLoad();\r\n            }\r\n\r\n            if (!this.isBlocking && scene) {\r\n                scene.resetCachedMaterial();\r\n            }\r\n        };\r\n\r\n        const errorHandler = (message?: string, exception?: any) => {\r\n            this._loadingError = true;\r\n            this._errorObject = { message, exception };\r\n            if (onError) {\r\n                onError(message, exception);\r\n            }\r\n            Texture.OnTextureLoadErrorObservable.notifyObservers(this);\r\n        };\r\n\r\n        if (!this.url && !internalTexture) {\r\n            this._delayedOnLoad = load;\r\n            this._delayedOnError = errorHandler;\r\n            return;\r\n        }\r\n\r\n        this._texture = internalTexture ?? this._getFromCache(this.url, noMipmap, samplingMode, this._invertY, useSRGBBuffer, this.isCube);\r\n\r\n        if (!this._texture) {\r\n            if (!scene || !scene.useDelayedTextureLoading) {\r\n                try {\r\n                    this._texture = engine.createTexture(\r\n                        this.url,\r\n                        noMipmap,\r\n                        this._invertY,\r\n                        scene,\r\n                        samplingMode,\r\n                        load,\r\n                        errorHandler,\r\n                        this._buffer,\r\n                        undefined,\r\n                        this._format,\r\n                        this._forcedExtension,\r\n                        mimeType,\r\n                        loaderOptions,\r\n                        creationFlags,\r\n                        useSRGBBuffer\r\n                    );\r\n                } catch (e) {\r\n                    errorHandler(\"error loading\", e);\r\n                    throw e;\r\n                }\r\n                if (deleteBuffer) {\r\n                    this._buffer = null;\r\n                }\r\n            } else {\r\n                this.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n\r\n                this._delayedOnLoad = load;\r\n                this._delayedOnError = errorHandler;\r\n            }\r\n        } else {\r\n            if (this._texture.isReady) {\r\n                TimingTools.SetImmediate(() => load());\r\n            } else {\r\n                const loadObserver = this._texture.onLoadedObservable.add(load);\r\n                this._texture.onErrorObservable.add((e) => {\r\n                    errorHandler(e.message, e.exception);\r\n                    this._texture?.onLoadedObservable.remove(loadObserver);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the url (and optional buffer) of this texture if url was null during construction.\r\n     * @param url the url of the texture\r\n     * @param buffer the buffer of the texture (defaults to null)\r\n     * @param onLoad callback called when the texture is loaded  (defaults to null)\r\n     * @param forcedExtension defines the extension to use to pick the right loader\r\n     */\r\n    public updateURL(\r\n        url: string,\r\n        buffer: Nullable<string | ArrayBuffer | ArrayBufferView | HTMLImageElement | Blob | ImageBitmap> = null,\r\n        onLoad?: () => void,\r\n        forcedExtension?: string\r\n    ): void {\r\n        if (this.url) {\r\n            this.releaseInternalTexture();\r\n            this.getScene()!.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n                return mat.hasTexture(this);\r\n            });\r\n        }\r\n\r\n        if (!this.name || this.name.startsWith(\"data:\")) {\r\n            this.name = url;\r\n        }\r\n        this.url = url;\r\n        this._buffer = buffer;\r\n        this._forcedExtension = forcedExtension;\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n\r\n        if (onLoad) {\r\n            this._delayedOnLoad = onLoad;\r\n        }\r\n        this.delayLoad();\r\n    }\r\n\r\n    /**\r\n     * Finish the loading sequence of a texture flagged as delayed load.\r\n     * @internal\r\n     */\r\n    public delayLoad(): void {\r\n        if (this.delayLoadState !== Constants.DELAYLOADSTATE_NOTLOADED) {\r\n            return;\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\r\n        this._texture = this._getFromCache(this.url, this._noMipmap, this.samplingMode, this._invertY, this._useSRGBBuffer, this.isCube);\r\n\r\n        if (!this._texture) {\r\n            this._texture = scene\r\n                .getEngine()\r\n                .createTexture(\r\n                    this.url,\r\n                    this._noMipmap,\r\n                    this._invertY,\r\n                    scene,\r\n                    this.samplingMode,\r\n                    this._delayedOnLoad,\r\n                    this._delayedOnError,\r\n                    this._buffer,\r\n                    null,\r\n                    this._format,\r\n                    this._forcedExtension,\r\n                    this._mimeType,\r\n                    this._loaderOptions,\r\n                    this._creationFlags,\r\n                    this._useSRGBBuffer\r\n                );\r\n            if (this._deleteBuffer) {\r\n                this._buffer = null;\r\n            }\r\n        } else {\r\n            if (this._delayedOnLoad) {\r\n                if (this._texture.isReady) {\r\n                    TimingTools.SetImmediate(this._delayedOnLoad);\r\n                } else {\r\n                    this._texture.onLoadedObservable.add(this._delayedOnLoad);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._delayedOnLoad = null;\r\n        this._delayedOnError = null;\r\n    }\r\n\r\n    private _prepareRowForTextureGeneration(x: number, y: number, z: number, t: Vector3): void {\r\n        x *= this._cachedUScale;\r\n        y *= this._cachedVScale;\r\n\r\n        x -= this.uRotationCenter * this._cachedUScale;\r\n        y -= this.vRotationCenter * this._cachedVScale;\r\n        z -= this.wRotationCenter;\r\n\r\n        Vector3.TransformCoordinatesFromFloatsToRef(x, y, z, this._rowGenerationMatrix!, t);\r\n\r\n        t.x += this.uRotationCenter * this._cachedUScale + this._cachedUOffset;\r\n        t.y += this.vRotationCenter * this._cachedVScale + this._cachedVOffset;\r\n        t.z += this.wRotationCenter;\r\n    }\r\n\r\n    /**\r\n     * Checks if the texture has the same transform matrix than another texture\r\n     * @param texture texture to check against\r\n     * @returns true if the transforms are the same, else false\r\n     */\r\n    public checkTransformsAreIdentical(texture: Nullable<Texture>): boolean {\r\n        return (\r\n            texture !== null &&\r\n            this.uOffset === texture.uOffset &&\r\n            this.vOffset === texture.vOffset &&\r\n            this.uScale === texture.uScale &&\r\n            this.vScale === texture.vScale &&\r\n            this.uAng === texture.uAng &&\r\n            this.vAng === texture.vAng &&\r\n            this.wAng === texture.wAng\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the current texture matrix which includes the requested offsetting, tiling and rotation components.\r\n     * @param uBase The horizontal base offset multiplier (1 by default)\r\n     * @returns the transform matrix of the texture.\r\n     */\r\n    public getTextureMatrix(uBase = 1): Matrix {\r\n        if (\r\n            this.uOffset === this._cachedUOffset &&\r\n            this.vOffset === this._cachedVOffset &&\r\n            this.uScale * uBase === this._cachedUScale &&\r\n            this.vScale === this._cachedVScale &&\r\n            this.uAng === this._cachedUAng &&\r\n            this.vAng === this._cachedVAng &&\r\n            this.wAng === this._cachedWAng &&\r\n            this.uRotationCenter === this._cachedURotationCenter &&\r\n            this.vRotationCenter === this._cachedVRotationCenter &&\r\n            this.wRotationCenter === this._cachedWRotationCenter &&\r\n            this.homogeneousRotationInUVTransform === this._cachedHomogeneousRotationInUVTransform\r\n        ) {\r\n            return this._cachedTextureMatrix!;\r\n        }\r\n\r\n        this._cachedUOffset = this.uOffset;\r\n        this._cachedVOffset = this.vOffset;\r\n        this._cachedUScale = this.uScale * uBase;\r\n        this._cachedVScale = this.vScale;\r\n        this._cachedUAng = this.uAng;\r\n        this._cachedVAng = this.vAng;\r\n        this._cachedWAng = this.wAng;\r\n        this._cachedURotationCenter = this.uRotationCenter;\r\n        this._cachedVRotationCenter = this.vRotationCenter;\r\n        this._cachedWRotationCenter = this.wRotationCenter;\r\n        this._cachedHomogeneousRotationInUVTransform = this.homogeneousRotationInUVTransform;\r\n\r\n        if (!this._cachedTextureMatrix || !this._rowGenerationMatrix) {\r\n            this._cachedTextureMatrix = Matrix.Zero();\r\n            this._rowGenerationMatrix = new Matrix();\r\n            this._t0 = Vector3.Zero();\r\n            this._t1 = Vector3.Zero();\r\n            this._t2 = Vector3.Zero();\r\n        }\r\n\r\n        Matrix.RotationYawPitchRollToRef(this.vAng, this.uAng, this.wAng, this._rowGenerationMatrix!);\r\n\r\n        if (this.homogeneousRotationInUVTransform) {\r\n            Matrix.TranslationToRef(-this._cachedURotationCenter, -this._cachedVRotationCenter, -this._cachedWRotationCenter, TmpVectors.Matrix[0]);\r\n            Matrix.TranslationToRef(this._cachedURotationCenter, this._cachedVRotationCenter, this._cachedWRotationCenter, TmpVectors.Matrix[1]);\r\n            Matrix.ScalingToRef(this._cachedUScale, this._cachedVScale, 0, TmpVectors.Matrix[2]);\r\n            Matrix.TranslationToRef(this._cachedUOffset, this._cachedVOffset, 0, TmpVectors.Matrix[3]);\r\n\r\n            TmpVectors.Matrix[0].multiplyToRef(this._rowGenerationMatrix!, this._cachedTextureMatrix);\r\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[1], this._cachedTextureMatrix);\r\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[2], this._cachedTextureMatrix);\r\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[3], this._cachedTextureMatrix);\r\n\r\n            // copy the translation row to the 3rd row of the matrix so that we don't need to update the shaders (which expects the translation to be on the 3rd row)\r\n            this._cachedTextureMatrix.setRowFromFloats(2, this._cachedTextureMatrix.m[12], this._cachedTextureMatrix.m[13], this._cachedTextureMatrix.m[14], 1);\r\n        } else {\r\n            this._prepareRowForTextureGeneration(0, 0, 0, this._t0!);\r\n            this._prepareRowForTextureGeneration(1.0, 0, 0, this._t1!);\r\n            this._prepareRowForTextureGeneration(0, 1.0, 0, this._t2!);\r\n\r\n            this._t1!.subtractInPlace(this._t0!);\r\n            this._t2!.subtractInPlace(this._t0!);\r\n\r\n            Matrix.FromValuesToRef(\r\n                this._t1!.x,\r\n                this._t1!.y,\r\n                this._t1!.z,\r\n                0.0,\r\n                this._t2!.x,\r\n                this._t2!.y,\r\n                this._t2!.z,\r\n                0.0,\r\n                this._t0!.x,\r\n                this._t0!.y,\r\n                this._t0!.z,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                this._cachedTextureMatrix\r\n            );\r\n        }\r\n\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return this._cachedTextureMatrix;\r\n        }\r\n\r\n        if (this.optimizeUVAllocation) {\r\n            // We flag the materials that are using this texture as \"texture dirty\" because depending on the fact that the matrix is the identity or not, some defines\r\n            // will get different values (see PrepareDefinesForMergedUV), meaning we should regenerate the effect accordingly\r\n            scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n                return mat.hasTexture(this);\r\n            });\r\n        }\r\n\r\n        return this._cachedTextureMatrix;\r\n    }\r\n\r\n    /**\r\n     * Get the current matrix used to apply reflection. This is useful to rotate an environment texture for instance.\r\n     * @returns The reflection texture transform\r\n     */\r\n    public getReflectionTextureMatrix(): Matrix {\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return this._cachedReflectionTextureMatrix!;\r\n        }\r\n\r\n        if (\r\n            this.uOffset === this._cachedReflectionUOffset &&\r\n            this.vOffset === this._cachedReflectionVOffset &&\r\n            this.uScale === this._cachedReflectionUScale &&\r\n            this.vScale === this._cachedReflectionVScale &&\r\n            this.coordinatesMode === this._cachedReflectionCoordinatesMode\r\n        ) {\r\n            if (this.coordinatesMode === Texture.PROJECTION_MODE) {\r\n                if (this._cachedReflectionProjectionMatrixId === scene.getProjectionMatrix().updateFlag) {\r\n                    return this._cachedReflectionTextureMatrix!;\r\n                }\r\n            } else {\r\n                return this._cachedReflectionTextureMatrix!;\r\n            }\r\n        }\r\n\r\n        if (!this._cachedReflectionTextureMatrix) {\r\n            this._cachedReflectionTextureMatrix = Matrix.Zero();\r\n        }\r\n\r\n        if (!this._projectionModeMatrix) {\r\n            this._projectionModeMatrix = Matrix.Zero();\r\n        }\r\n\r\n        const flagMaterialsAsTextureDirty = this._cachedReflectionCoordinatesMode !== this.coordinatesMode;\r\n\r\n        this._cachedReflectionUOffset = this.uOffset;\r\n        this._cachedReflectionVOffset = this.vOffset;\r\n        this._cachedReflectionUScale = this.uScale;\r\n        this._cachedReflectionVScale = this.vScale;\r\n        this._cachedReflectionCoordinatesMode = this.coordinatesMode;\r\n\r\n        switch (this.coordinatesMode) {\r\n            case Texture.PLANAR_MODE: {\r\n                Matrix.IdentityToRef(this._cachedReflectionTextureMatrix);\r\n                (<any>this._cachedReflectionTextureMatrix)[0] = this.uScale;\r\n                (<any>this._cachedReflectionTextureMatrix)[5] = this.vScale;\r\n                (<any>this._cachedReflectionTextureMatrix)[12] = this.uOffset;\r\n                (<any>this._cachedReflectionTextureMatrix)[13] = this.vOffset;\r\n                break;\r\n            }\r\n            case Texture.PROJECTION_MODE: {\r\n                Matrix.FromValuesToRef(0.5, 0.0, 0.0, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 1.0, 1.0, this._projectionModeMatrix);\r\n\r\n                const projectionMatrix = scene.getProjectionMatrix();\r\n                this._cachedReflectionProjectionMatrixId = projectionMatrix.updateFlag;\r\n                projectionMatrix.multiplyToRef(this._projectionModeMatrix, this._cachedReflectionTextureMatrix);\r\n                break;\r\n            }\r\n            default:\r\n                Matrix.IdentityToRef(this._cachedReflectionTextureMatrix);\r\n                break;\r\n        }\r\n\r\n        if (flagMaterialsAsTextureDirty) {\r\n            // We flag the materials that are using this texture as \"texture dirty\" if the coordinatesMode has changed.\r\n            // Indeed, this property is used to set the value of some defines used to generate the effect (in material.isReadyForSubMesh), so we must make sure this code will be re-executed and the effect recreated if necessary\r\n            scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n                return mat.hasTexture(this);\r\n            });\r\n        }\r\n\r\n        return this._cachedReflectionTextureMatrix;\r\n    }\r\n\r\n    /**\r\n     * Clones the texture.\r\n     * @returns the cloned texture\r\n     */\r\n    public clone(): Texture {\r\n        const options: ITextureCreationOptions = {\r\n            noMipmap: this._noMipmap,\r\n            invertY: this._invertY,\r\n            samplingMode: this.samplingMode,\r\n            onLoad: undefined,\r\n            onError: undefined,\r\n            buffer: this._texture ? this._texture._buffer : undefined,\r\n            deleteBuffer: this._deleteBuffer,\r\n            format: this.textureFormat,\r\n            mimeType: this.mimeType,\r\n            loaderOptions: this._loaderOptions,\r\n            creationFlags: this._creationFlags,\r\n            useSRGBBuffer: this._useSRGBBuffer,\r\n        };\r\n\r\n        return SerializationHelper.Clone(() => {\r\n            return new Texture(this._texture ? this._texture.url : null, this.getScene(), options);\r\n        }, this);\r\n    }\r\n\r\n    /**\r\n     * Serialize the texture to a JSON representation we can easily use in the respective Parse function.\r\n     * @returns The JSON representation of the texture\r\n     */\r\n    public serialize(): any {\r\n        const savedName = this.name;\r\n\r\n        if (!Texture.SerializeBuffers) {\r\n            if (this.name.startsWith(\"data:\")) {\r\n                this.name = \"\";\r\n            }\r\n        }\r\n\r\n        if (this.name.startsWith(\"data:\") && this.url === this.name) {\r\n            this.url = \"\";\r\n        }\r\n\r\n        const serializationObject = super.serialize(Texture._SerializeInternalTextureUniqueId);\r\n\r\n        if (!serializationObject) {\r\n            return null;\r\n        }\r\n\r\n        if (Texture.SerializeBuffers || Texture.ForceSerializeBuffers) {\r\n            if (typeof this._buffer === \"string\" && (this._buffer as string).substr(0, 5) === \"data:\") {\r\n                serializationObject.base64String = this._buffer;\r\n                serializationObject.name = serializationObject.name.replace(\"data:\", \"\");\r\n            } else if (this.url && this.url.startsWith(\"data:\") && this._buffer instanceof Uint8Array) {\r\n                serializationObject.base64String = \"data:image/png;base64,\" + EncodeArrayBufferToBase64(this._buffer);\r\n            } else if (Texture.ForceSerializeBuffers || (this.url && this.url.startsWith(\"blob:\")) || this._forceSerialize) {\r\n                serializationObject.base64String =\r\n                    !this._engine || this._engine._features.supportSyncTextureRead ? GenerateBase64StringFromTexture(this) : GenerateBase64StringFromTextureAsync(this);\r\n            }\r\n        }\r\n\r\n        serializationObject.invertY = this._invertY;\r\n        serializationObject.samplingMode = this.samplingMode;\r\n        serializationObject._creationFlags = this._creationFlags;\r\n        serializationObject._useSRGBBuffer = this._useSRGBBuffer;\r\n        if (Texture._SerializeInternalTextureUniqueId) {\r\n            serializationObject.internalTextureUniqueId = this._texture?.uniqueId ?? undefined;\r\n        }\r\n        serializationObject.noMipmap = this._noMipmap;\r\n\r\n        this.name = savedName;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"Texture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Texture\";\r\n    }\r\n\r\n    /**\r\n     * Dispose the texture and release its associated resources.\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onLoadObservable.clear();\r\n\r\n        this._delayedOnLoad = null;\r\n        this._delayedOnError = null;\r\n        this._buffer = null;\r\n    }\r\n\r\n    /**\r\n     * Parse the JSON representation of a texture in order to recreate the texture in the given scene.\r\n     * @param parsedTexture Define the JSON representation of the texture\r\n     * @param scene Define the scene the parsed texture should be instantiated in\r\n     * @param rootUrl Define the root url of the parsing sequence in the case of relative dependencies\r\n     * @returns The parsed texture if successful\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): Nullable<BaseTexture> {\r\n        if (parsedTexture.customType) {\r\n            const customTexture = InstantiationTools.Instantiate(parsedTexture.customType);\r\n            // Update Sampling Mode\r\n            const parsedCustomTexture: any = customTexture.Parse(parsedTexture, scene, rootUrl);\r\n            if (parsedTexture.samplingMode && parsedCustomTexture.updateSamplingMode && parsedCustomTexture._samplingMode) {\r\n                if (parsedCustomTexture._samplingMode !== parsedTexture.samplingMode) {\r\n                    parsedCustomTexture.updateSamplingMode(parsedTexture.samplingMode);\r\n                }\r\n            }\r\n            return parsedCustomTexture;\r\n        }\r\n\r\n        if (parsedTexture.isCube && !parsedTexture.isRenderTarget) {\r\n            return Texture._CubeTextureParser(parsedTexture, scene, rootUrl);\r\n        }\r\n\r\n        const hasInternalTextureUniqueId = parsedTexture.internalTextureUniqueId !== undefined;\r\n\r\n        if (!parsedTexture.name && !parsedTexture.isRenderTarget && !hasInternalTextureUniqueId) {\r\n            return null;\r\n        }\r\n\r\n        let internalTexture: InternalTexture | undefined;\r\n\r\n        if (hasInternalTextureUniqueId) {\r\n            const cache = scene.getEngine().getLoadedTexturesCache();\r\n            for (const texture of cache) {\r\n                if (texture.uniqueId === parsedTexture.internalTextureUniqueId) {\r\n                    internalTexture = texture;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const onLoaded = (texture: Texture | null) => {\r\n            // Clear cache\r\n            if (texture && texture._texture) {\r\n                texture._texture._cachedWrapU = null;\r\n                texture._texture._cachedWrapV = null;\r\n                texture._texture._cachedWrapR = null;\r\n            }\r\n\r\n            // Update Sampling Mode\r\n            if (parsedTexture.samplingMode) {\r\n                const sampling: number = parsedTexture.samplingMode;\r\n                if (texture && texture.samplingMode !== sampling) {\r\n                    texture.updateSamplingMode(sampling);\r\n                }\r\n            }\r\n            // Animations\r\n            if (texture && parsedTexture.animations) {\r\n                for (let animationIndex = 0; animationIndex < parsedTexture.animations.length; animationIndex++) {\r\n                    const parsedAnimation = parsedTexture.animations[animationIndex];\r\n                    const internalClass = GetClass(\"BABYLON.Animation\");\r\n                    if (internalClass) {\r\n                        texture.animations.push(internalClass.Parse(parsedAnimation));\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (hasInternalTextureUniqueId && !internalTexture) {\r\n                texture?._texture?._setUniqueId(parsedTexture.internalTextureUniqueId);\r\n            }\r\n        };\r\n\r\n        const texture = SerializationHelper.Parse(\r\n            () => {\r\n                let generateMipMaps: boolean = true;\r\n                if (parsedTexture.noMipmap) {\r\n                    generateMipMaps = false;\r\n                }\r\n                if (parsedTexture.mirrorPlane) {\r\n                    const mirrorTexture = Texture._CreateMirror(parsedTexture.name, parsedTexture.renderTargetSize, scene, generateMipMaps);\r\n                    mirrorTexture._waitingRenderList = parsedTexture.renderList;\r\n                    mirrorTexture.mirrorPlane = Plane.FromArray(parsedTexture.mirrorPlane);\r\n                    onLoaded(mirrorTexture);\r\n                    return mirrorTexture;\r\n                } else if (parsedTexture.isRenderTarget) {\r\n                    let renderTargetTexture: Nullable<RenderTargetTexture> = null;\r\n                    if (parsedTexture.isCube) {\r\n                        // Search for an existing reflection probe (which contains a cube render target texture)\r\n                        if (scene.reflectionProbes) {\r\n                            for (let index = 0; index < scene.reflectionProbes.length; index++) {\r\n                                const probe = scene.reflectionProbes[index];\r\n                                if (probe.name === parsedTexture.name) {\r\n                                    return probe.cubeTexture;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        renderTargetTexture = Texture._CreateRenderTargetTexture(\r\n                            parsedTexture.name,\r\n                            parsedTexture.renderTargetSize,\r\n                            scene,\r\n                            generateMipMaps,\r\n                            parsedTexture._creationFlags ?? 0\r\n                        );\r\n                        renderTargetTexture._waitingRenderList = parsedTexture.renderList;\r\n                    }\r\n                    onLoaded(renderTargetTexture);\r\n                    return renderTargetTexture;\r\n                } else if (parsedTexture.isVideo) {\r\n                    const texture = Texture._CreateVideoTexture(\r\n                        rootUrl + (parsedTexture.url || parsedTexture.name),\r\n                        rootUrl + (parsedTexture.src || parsedTexture.url),\r\n                        scene,\r\n                        generateMipMaps,\r\n                        parsedTexture.invertY,\r\n                        parsedTexture.samplingMode,\r\n                        parsedTexture.settings || {}\r\n                    );\r\n                    onLoaded(texture);\r\n                    return texture;\r\n                } else {\r\n                    let texture: Texture;\r\n\r\n                    if (parsedTexture.base64String && !internalTexture) {\r\n                        // name and url are the same to ensure caching happens from the actual base64 string\r\n                        texture = Texture.CreateFromBase64String(\r\n                            parsedTexture.base64String,\r\n                            parsedTexture.base64String,\r\n                            scene,\r\n                            !generateMipMaps,\r\n                            parsedTexture.invertY,\r\n                            parsedTexture.samplingMode,\r\n                            () => {\r\n                                onLoaded(texture);\r\n                            },\r\n                            parsedTexture._creationFlags ?? 0,\r\n                            parsedTexture._useSRGBBuffer ?? false\r\n                        );\r\n\r\n                        // prettier name to fit with the loaded data\r\n                        texture.name = parsedTexture.name;\r\n                    } else {\r\n                        let url: string;\r\n                        if (parsedTexture.name && (parsedTexture.name.indexOf(\"://\") > 0 || parsedTexture.name.startsWith(\"data:\"))) {\r\n                            url = parsedTexture.name;\r\n                        } else {\r\n                            url = rootUrl + parsedTexture.name;\r\n                        }\r\n\r\n                        if (parsedTexture.url && (parsedTexture.url.startsWith(\"data:\") || Texture.UseSerializedUrlIfAny)) {\r\n                            url = parsedTexture.url;\r\n                        }\r\n\r\n                        const options: ITextureCreationOptions = {\r\n                            noMipmap: !generateMipMaps,\r\n                            invertY: parsedTexture.invertY,\r\n                            samplingMode: parsedTexture.samplingMode,\r\n                            onLoad: () => {\r\n                                onLoaded(texture);\r\n                            },\r\n                            internalTexture,\r\n                        };\r\n\r\n                        texture = new Texture(url, scene, options);\r\n                    }\r\n\r\n                    return texture;\r\n                }\r\n            },\r\n            parsedTexture,\r\n            scene\r\n        );\r\n\r\n        return texture;\r\n    }\r\n\r\n    /**\r\n     * Creates a texture from its base 64 representation.\r\n     * @param data Define the base64 payload without the data: prefix\r\n     * @param name Define the name of the texture in the scene useful fo caching purpose for instance\r\n     * @param scene Define the scene the texture should belong to\r\n     * @param noMipmapOrOptions defines if the texture will require mip maps or not or set of all options to create the texture\r\n     * @param invertY define if the texture needs to be inverted on the y axis during loading\r\n     * @param samplingMode define the sampling mode we want for the texture while fetching from it (Texture.NEAREST_SAMPLINGMODE...)\r\n     * @param onLoad define a callback triggered when the texture has been loaded\r\n     * @param onError define a callback triggered when an error occurred during the loading session\r\n     * @param format define the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     * @returns the created texture\r\n     */\r\n    public static CreateFromBase64String(\r\n        data: string,\r\n        name: string,\r\n        scene: Scene,\r\n        noMipmapOrOptions?: boolean | ITextureCreationOptions,\r\n        invertY?: boolean,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        onLoad: Nullable<() => void> = null,\r\n        onError: Nullable<() => void> = null,\r\n        format: number = Constants.TEXTUREFORMAT_RGBA,\r\n        creationFlags?: number\r\n    ): Texture {\r\n        return new Texture(\"data:\" + name, scene, noMipmapOrOptions, invertY, samplingMode, onLoad, onError, data, false, format, undefined, undefined, creationFlags);\r\n    }\r\n\r\n    /**\r\n     * Creates a texture from its data: representation. (data: will be added in case only the payload has been passed in)\r\n     * @param name Define the name of the texture in the scene useful fo caching purpose for instance\r\n     * @param buffer define the buffer to load the texture from in case the texture is loaded from a buffer representation\r\n     * @param scene Define the scene the texture should belong to\r\n     * @param deleteBuffer define if the buffer we are loading the texture from should be deleted after load\r\n     * @param noMipmapOrOptions defines if the texture will require mip maps or not or set of all options to create the texture\r\n     * @param invertY define if the texture needs to be inverted on the y axis during loading\r\n     * @param samplingMode define the sampling mode we want for the texture while fetching from it (Texture.NEAREST_SAMPLINGMODE...)\r\n     * @param onLoad define a callback triggered when the texture has been loaded\r\n     * @param onError define a callback triggered when an error occurred during the loading session\r\n     * @param format define the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     * @returns the created texture\r\n     */\r\n    public static LoadFromDataString(\r\n        name: string,\r\n        buffer: any,\r\n        scene: Scene,\r\n        deleteBuffer: boolean = false,\r\n        noMipmapOrOptions?: boolean | ITextureCreationOptions,\r\n        invertY: boolean = true,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        onLoad: Nullable<() => void> = null,\r\n        onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n        format: number = Constants.TEXTUREFORMAT_RGBA,\r\n        creationFlags?: number\r\n    ): Texture {\r\n        if (name.substr(0, 5) !== \"data:\") {\r\n            name = \"data:\" + name;\r\n        }\r\n\r\n        return new Texture(name, scene, noMipmapOrOptions, invertY, samplingMode, onLoad, onError, buffer, deleteBuffer, format, undefined, undefined, creationFlags);\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nRegisterClass(\"BABYLON.Texture\", Texture);\r\nSerializationHelper._TextureParser = Texture.Parse;\r\n", "import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { BaseTexture } from \"../../../Textures/baseTexture\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { Texture } from \"../../../Textures/texture\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport type { InputBlock } from \"../Input/inputBlock\";\r\n\r\nimport type { NodeMaterial } from \"../../nodeMaterial\";\r\n\r\n/**\r\n * Base block used as input for post process\r\n */\r\nexport class CurrentScreenBlock extends NodeMaterialBlock {\r\n    private _samplerName = \"textureSampler\";\r\n    private _linearDefineName: string;\r\n    private _gammaDefineName: string;\r\n    private _mainUVName: string;\r\n    private _tempTextureRead: string;\r\n\r\n    /**\r\n     * Gets or sets the texture associated with the node\r\n     */\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if content needs to be converted to gamma space\r\n     */\r\n    public convertToGammaSpace = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if content needs to be converted to linear space\r\n     */\r\n    public convertToLinearSpace = false;\r\n\r\n    /**\r\n     * Create a new CurrentScreenBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.VertexAndFragment);\r\n\r\n        this._isUnique = false;\r\n\r\n        this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false, NodeMaterialBlockTargets.VertexAndFragment);\r\n\r\n        this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this._inputs[0].addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Vector2 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4\r\n        );\r\n\r\n        this._inputs[0]._prioritizeVertex = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"CurrentScreenBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the uv input component\r\n     */\r\n    public get uv(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgba output component\r\n     */\r\n    public get rgba(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb output component\r\n     */\r\n    public get rgb(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the r output component\r\n     */\r\n    public get r(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the g output component\r\n     */\r\n    public get g(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the b output component\r\n     */\r\n    public get b(): NodeMaterialConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the a output component\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._outputs[5];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"textureSampler\");\r\n    }\r\n\r\n    public get target() {\r\n        if (!this.uv.isConnected) {\r\n            return NodeMaterialBlockTargets.VertexAndFragment;\r\n        }\r\n\r\n        if (this.uv.sourceBlock!.isInput) {\r\n            return NodeMaterialBlockTargets.VertexAndFragment;\r\n        }\r\n\r\n        return NodeMaterialBlockTargets.Fragment;\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        defines.setValue(this._linearDefineName, this.convertToGammaSpace, true);\r\n        defines.setValue(this._gammaDefineName, this.convertToLinearSpace, true);\r\n    }\r\n\r\n    public isReady() {\r\n        if (this.texture && !this.texture.isReadyOrNotBlocking()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _injectVertexCode(state: NodeMaterialBuildState) {\r\n        const uvInput = this.uv;\r\n\r\n        if (uvInput.connectedPoint!.ownerBlock.isInput) {\r\n            const uvInputOwnerBlock = uvInput.connectedPoint!.ownerBlock as InputBlock;\r\n\r\n            if (!uvInputOwnerBlock.isAttribute) {\r\n                state._emitUniformFromString(uvInput.associatedVariableName, \"vec2\");\r\n            }\r\n        }\r\n\r\n        this._mainUVName = \"vMain\" + uvInput.associatedVariableName;\r\n\r\n        state._emitVaryingFromString(this._mainUVName, \"vec2\");\r\n\r\n        state.compilationString += `${this._mainUVName} = ${uvInput.associatedVariableName}.xy;\\n`;\r\n\r\n        if (!this._outputs.some((o) => o.isConnectedInVertexShader)) {\r\n            return;\r\n        }\r\n\r\n        this._writeTextureRead(state, true);\r\n\r\n        for (const output of this._outputs) {\r\n            if (output.hasEndpoints) {\r\n                this._writeOutput(state, output, output.name, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _writeTextureRead(state: NodeMaterialBuildState, vertexMode = false) {\r\n        const uvInput = this.uv;\r\n\r\n        if (vertexMode) {\r\n            if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n                return;\r\n            }\r\n\r\n            state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${this._samplerName}, ${uvInput.associatedVariableName});\\n`;\r\n            return;\r\n        }\r\n\r\n        if (this.uv.ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${this._samplerName}, ${uvInput.associatedVariableName});\\n`;\r\n            return;\r\n        }\r\n\r\n        state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${this._samplerName}, ${this._mainUVName});\\n`;\r\n    }\r\n\r\n    private _writeOutput(state: NodeMaterialBuildState, output: NodeMaterialConnectionPoint, swizzle: string, vertexMode = false) {\r\n        if (vertexMode) {\r\n            if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n                return;\r\n            }\r\n\r\n            state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\n`;\r\n\r\n            return;\r\n        }\r\n\r\n        if (this.uv.ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\n`;\r\n            return;\r\n        }\r\n\r\n        state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\n`;\r\n\r\n        state.compilationString += `#ifdef ${this._linearDefineName}\\n`;\r\n        state.compilationString += `${output.associatedVariableName} = toGammaSpace(${output.associatedVariableName});\\n`;\r\n        state.compilationString += `#endif\\n`;\r\n\r\n        state.compilationString += `#ifdef ${this._gammaDefineName}\\n`;\r\n        state.compilationString += `${output.associatedVariableName} = toLinearSpace(${output.associatedVariableName});\\n`;\r\n        state.compilationString += `#endif\\n`;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        this._tempTextureRead = state._getFreeVariableName(\"tempTextureRead\");\r\n\r\n        if (state.sharedData.blockingBlocks.indexOf(this) < 0) {\r\n            state.sharedData.blockingBlocks.push(this);\r\n        }\r\n        if (state.sharedData.textureBlocks.indexOf(this) < 0) {\r\n            state.sharedData.textureBlocks.push(this);\r\n        }\r\n        if (state.sharedData.blocksWithDefines.indexOf(this) < 0) {\r\n            state.sharedData.blocksWithDefines.push(this);\r\n        }\r\n\r\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\r\n            // Vertex\r\n            state._emit2DSampler(this._samplerName);\r\n            this._injectVertexCode(state);\r\n            return;\r\n        }\r\n\r\n        // Fragment\r\n        if (!this._outputs.some((o) => o.isConnectedInFragmentShader)) {\r\n            return;\r\n        }\r\n\r\n        state._emit2DSampler(this._samplerName);\r\n\r\n        this._linearDefineName = state._getFreeDefineName(\"ISLINEAR\");\r\n        this._gammaDefineName = state._getFreeDefineName(\"ISGAMMA\");\r\n\r\n        const comments = `//${this.name}`;\r\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n\r\n        this._writeTextureRead(state);\r\n\r\n        for (const output of this._outputs) {\r\n            if (output.hasEndpoints) {\r\n                this._writeOutput(state, output, output.name);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.convertToGammaSpace = this.convertToGammaSpace;\r\n        serializationObject.convertToLinearSpace = this.convertToLinearSpace;\r\n        if (this.texture && !this.texture.isRenderTarget) {\r\n            serializationObject.texture = this.texture.serialize();\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.convertToGammaSpace = serializationObject.convertToGammaSpace;\r\n        this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\r\n\r\n        if (serializationObject.texture) {\r\n            rootUrl = serializationObject.texture.url.indexOf(\"data:\") === 0 ? \"\" : rootUrl;\r\n            this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl) as Texture;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.CurrentScreenBlock\", CurrentScreenBlock);\r\n", "import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport type { BaseTexture } from \"../../../Textures/baseTexture\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { Texture } from \"../../../Textures/texture\";\r\nimport type { Scene } from \"../../../../scene\";\r\n\r\nimport type { NodeMaterial } from \"../../nodeMaterial\";\r\n\r\n/**\r\n * Base block used for the particle texture\r\n */\r\nexport class ParticleTextureBlock extends NodeMaterialBlock {\r\n    private _samplerName = \"diffuseSampler\";\r\n    private _linearDefineName: string;\r\n    private _gammaDefineName: string;\r\n    private _tempTextureRead: string;\r\n\r\n    /**\r\n     * Gets or sets the texture associated with the node\r\n     */\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if content needs to be converted to gamma space\r\n     */\r\n    public convertToGammaSpace = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if content needs to be converted to linear space\r\n     */\r\n    public convertToLinearSpace = false;\r\n\r\n    /**\r\n     * Create a new ParticleTextureBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = false;\r\n\r\n        this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false, NodeMaterialBlockTargets.VertexAndFragment);\r\n\r\n        this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this._inputs[0].addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Vector2 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ParticleTextureBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the uv input component\r\n     */\r\n    public get uv(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgba output component\r\n     */\r\n    public get rgba(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb output component\r\n     */\r\n    public get rgb(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the r output component\r\n     */\r\n    public get r(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the g output component\r\n     */\r\n    public get g(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the b output component\r\n     */\r\n    public get b(): NodeMaterialConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the a output component\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._outputs[5];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"diffuseSampler\");\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial, additionalFilteringInfo: (node: NodeMaterialBlock) => boolean = () => true) {\r\n        if (!this.uv.isConnected) {\r\n            let uvInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"particle_uv\" && additionalFilteringInfo(b));\r\n\r\n            if (!uvInput) {\r\n                uvInput = new InputBlock(\"uv\");\r\n                uvInput.setAsAttribute(\"particle_uv\");\r\n            }\r\n            uvInput.output.connectTo(this.uv);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        defines.setValue(this._linearDefineName, this.convertToGammaSpace, true);\r\n        defines.setValue(this._gammaDefineName, this.convertToLinearSpace, true);\r\n    }\r\n\r\n    public isReady() {\r\n        if (this.texture && !this.texture.isReadyOrNotBlocking()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _writeOutput(state: NodeMaterialBuildState, output: NodeMaterialConnectionPoint, swizzle: string) {\r\n        state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\n`;\r\n\r\n        state.compilationString += `#ifdef ${this._linearDefineName}\\n`;\r\n        state.compilationString += `${output.associatedVariableName} = toGammaSpace(${output.associatedVariableName});\\n`;\r\n        state.compilationString += `#endif\\n`;\r\n\r\n        state.compilationString += `#ifdef ${this._gammaDefineName}\\n`;\r\n        state.compilationString += `${output.associatedVariableName} = toLinearSpace(${output.associatedVariableName});\\n`;\r\n        state.compilationString += `#endif\\n`;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            return;\r\n        }\r\n\r\n        this._tempTextureRead = state._getFreeVariableName(\"tempTextureRead\");\r\n\r\n        state._emit2DSampler(this._samplerName);\r\n\r\n        state.sharedData.blockingBlocks.push(this);\r\n        state.sharedData.textureBlocks.push(this);\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        this._linearDefineName = state._getFreeDefineName(\"ISLINEAR\");\r\n        this._gammaDefineName = state._getFreeDefineName(\"ISGAMMA\");\r\n\r\n        const comments = `//${this.name}`;\r\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n\r\n        state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${this._samplerName}, ${this.uv.associatedVariableName});\\n`;\r\n\r\n        for (const output of this._outputs) {\r\n            if (output.hasEndpoints) {\r\n                this._writeOutput(state, output, output.name);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.convertToGammaSpace = this.convertToGammaSpace;\r\n        serializationObject.convertToLinearSpace = this.convertToLinearSpace;\r\n        if (this.texture && !this.texture.isRenderTarget) {\r\n            serializationObject.texture = this.texture.serialize();\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.convertToGammaSpace = serializationObject.convertToGammaSpace;\r\n        this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\r\n\r\n        if (serializationObject.texture) {\r\n            rootUrl = serializationObject.texture.url.indexOf(\"data:\") === 0 ? \"\" : rootUrl;\r\n            this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl) as Texture;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ParticleTextureBlock\", ParticleTextureBlock);\r\n", "import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\n/**\r\n * Block used for the particle ramp gradient section\r\n */\r\nexport class ParticleRampGradientBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new ParticleRampGradientBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"rampColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ParticleRampGradientBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rampColor output component\r\n     */\r\n    public get rampColor(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"remapRanges\");\r\n        state._excludeVariableName(\"rampSampler\");\r\n        state._excludeVariableName(\"baseColor\");\r\n        state._excludeVariableName(\"alpha\");\r\n        state._excludeVariableName(\"remappedColorIndex\");\r\n        state._excludeVariableName(\"rampColor\");\r\n        state._excludeVariableName(\"finalAlpha\");\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            return;\r\n        }\r\n\r\n        state._emit2DSampler(\"rampSampler\");\r\n        state._emitVaryingFromString(\"remapRanges\", \"vec4\", \"RAMPGRADIENT\");\r\n\r\n        state.compilationString += `\r\n            #ifdef RAMPGRADIENT\r\n                vec4 baseColor = ${this.color.associatedVariableName};\r\n                float alpha = ${this.color.associatedVariableName}.a;\r\n\r\n                float remappedColorIndex = clamp((alpha - remapRanges.x) / remapRanges.y, 0.0, 1.0);\r\n\r\n                vec4 rampColor = texture2D(rampSampler, vec2(1.0 - remappedColorIndex, 0.));\r\n                baseColor.rgb *= rampColor.rgb;\r\n\r\n                // Remapped alpha\r\n                float finalAlpha = baseColor.a;\r\n                baseColor.a = clamp((alpha * rampColor.a - remapRanges.z) / remapRanges.w, 0.0, 1.0);\r\n\r\n                ${this._declareOutput(this.rampColor, state)} = baseColor;\r\n            #else\r\n                ${this._declareOutput(this.rampColor, state)} = ${this.color.associatedVariableName};\r\n            #endif\r\n        `;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ParticleRampGradientBlock\", ParticleRampGradientBlock);\r\n", "import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\n/**\r\n * Block used for the particle blend multiply section\r\n */\r\nexport class ParticleBlendMultiplyBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new ParticleBlendMultiplyBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"alphaTexture\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"alphaColor\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"blendColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ParticleBlendMultiplyBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the alphaTexture input component\r\n     */\r\n    public get alphaTexture(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the alphaColor input component\r\n     */\r\n    public get alphaColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the blendColor output component\r\n     */\r\n    public get blendColor(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"sourceAlpha\");\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            return;\r\n        }\r\n\r\n        state.compilationString += `\r\n            #ifdef BLENDMULTIPLYMODE\r\n                ${this._declareOutput(this.blendColor, state)};\r\n                float sourceAlpha = ${this.alphaColor.associatedVariableName} * ${this.alphaTexture.associatedVariableName};\r\n                ${this.blendColor.associatedVariableName}.rgb = ${this.color.associatedVariableName}.rgb * sourceAlpha + vec3(1.0) * (1.0 - sourceAlpha);\r\n                ${this.blendColor.associatedVariableName}.a = ${this.color.associatedVariableName}.a;\r\n            #else\r\n                ${this._declareOutput(this.blendColor, state)} = ${this.color.associatedVariableName};\r\n            #endif\r\n        `;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ParticleBlendMultiplyBlock\", ParticleBlendMultiplyBlock);\r\n", "import type { Nullable } from \"../types\";\r\nimport type { IEffectFallbacks } from \"./iEffectFallbacks\";\r\n\r\nimport type { Effect } from \"./effect\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\r\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\r\n */\r\nexport class EffectFallbacks implements IEffectFallbacks {\r\n    private _defines: { [key: string]: Array<String> } = {};\r\n\r\n    private _currentRank = 32;\r\n    private _maxRank = -1;\r\n\r\n    private _mesh: Nullable<AbstractMesh> = null;\r\n\r\n    /**\r\n     * Removes the fallback from the bound mesh.\r\n     */\r\n    public unBindMesh() {\r\n        this._mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Adds a fallback on the specified property.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param define The name of the define in the shader\r\n     */\r\n    public addFallback(rank: number, define: string): void {\r\n        if (!this._defines[rank]) {\r\n            if (rank < this._currentRank) {\r\n                this._currentRank = rank;\r\n            }\r\n\r\n            if (rank > this._maxRank) {\r\n                this._maxRank = rank;\r\n            }\r\n\r\n            this._defines[rank] = new Array<String>();\r\n        }\r\n\r\n        this._defines[rank].push(define);\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh to use CPU skinning when needing to fallback.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param mesh The mesh to use the fallbacks.\r\n     */\r\n    public addCPUSkinningFallback(rank: number, mesh: AbstractMesh) {\r\n        this._mesh = mesh;\r\n\r\n        if (rank < this._currentRank) {\r\n            this._currentRank = rank;\r\n        }\r\n        if (rank > this._maxRank) {\r\n            this._maxRank = rank;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks to see if more fallbacks are still available.\r\n     */\r\n    public get hasMoreFallbacks(): boolean {\r\n        return this._currentRank <= this._maxRank;\r\n    }\r\n\r\n    /**\r\n     * Removes the defines that should be removed when falling back.\r\n     * @param currentDefines defines the current define statements for the shader.\r\n     * @param effect defines the current effect we try to compile\r\n     * @returns The resulting defines with defines of the current rank removed.\r\n     */\r\n    public reduce(currentDefines: string, effect: Effect): string {\r\n        // First we try to switch to CPU skinning\r\n        if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\r\n            this._mesh.computeBonesUsingShaders = false;\r\n            currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\r\n            effect._bonesComputationForcedToCPU = true;\r\n\r\n            const scene = this._mesh.getScene();\r\n            for (let index = 0; index < scene.meshes.length; index++) {\r\n                const otherMesh = scene.meshes[index];\r\n\r\n                if (!otherMesh.material) {\r\n                    if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\r\n                        otherMesh.computeBonesUsingShaders = false;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (otherMesh.material.getEffect() === effect) {\r\n                    otherMesh.computeBonesUsingShaders = false;\r\n                } else if (otherMesh.subMeshes) {\r\n                    for (const subMesh of otherMesh.subMeshes) {\r\n                        const subMeshEffect = subMesh.effect;\r\n\r\n                        if (subMeshEffect === effect) {\r\n                            otherMesh.computeBonesUsingShaders = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            const currentFallbacks = this._defines[this._currentRank];\r\n            if (currentFallbacks) {\r\n                for (let index = 0; index < currentFallbacks.length; index++) {\r\n                    currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\r\n                }\r\n            }\r\n\r\n            this._currentRank++;\r\n        }\r\n\r\n        return currentDefines;\r\n    }\r\n}\r\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"postprocessVertexShader\";\nconst shader = `attribute vec2 position;uniform vec2 scale;varying vec2 vUV;const vec2 madd=vec2(0.5,0.5);\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_VERTEX_MAIN_BEGIN\nvUV=(position*madd+madd)*scale;gl_Position=vec4(position,0.0,1.0);\n#define CUSTOM_VERTEX_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const postprocessVertexShader = { name, shader };\n", "import type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { InternalTextureSource } from \"../Materials/Textures/internalTexture\";\r\nimport type { RenderTargetCreationOptions, TextureSize } from \"../Materials/Textures/textureCreationOptions\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Constants } from \"./constants\";\r\nimport type { ThinEngine } from \"./thinEngine\";\r\nimport type { IMultiRenderTargetOptions } from \"../Materials/Textures/multiRenderTarget\";\r\n\r\n/**\r\n * An interface enforcing the renderTarget accessor to used by render target textures.\r\n */\r\nexport interface IRenderTargetTexture {\r\n    /**\r\n     * Entry point to access the wrapper on a texture.\r\n     */\r\n    renderTarget: Nullable<RenderTargetWrapper>;\r\n}\r\n\r\n/**\r\n * Wrapper around a render target (either single or multi textures)\r\n */\r\nexport class RenderTargetWrapper {\r\n    protected _engine: ThinEngine;\r\n    private _size: TextureSize;\r\n    private _isCube: boolean;\r\n    private _isMulti: boolean;\r\n    private _textures: Nullable<InternalTexture[]> = null;\r\n    private _faceIndices: Nullable<number[]> = null;\r\n    private _layerIndices: Nullable<number[]> = null;\r\n    private _depthStencilTextureLabel?: string;\r\n    /** @internal */\r\n    public _samples = 1;\r\n\r\n    /** @internal */\r\n    public _attachments: Nullable<number[]> = null;\r\n    /** @internal */\r\n    public _generateStencilBuffer: boolean = false;\r\n    /** @internal */\r\n    public _generateDepthBuffer: boolean = false;\r\n\r\n    /** @internal */\r\n    public _depthStencilTexture: Nullable<InternalTexture>;\r\n    /** @internal */\r\n    public _depthStencilTextureWithStencil: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets the label of the render target wrapper (optional, for debugging purpose)\r\n     */\r\n    public label?: string;\r\n\r\n    /**\r\n     * Gets the depth/stencil texture (if created by a createDepthStencilTexture() call)\r\n     */\r\n    public get depthStencilTexture() {\r\n        return this._depthStencilTexture;\r\n    }\r\n\r\n    /**\r\n     * Indicates if the depth/stencil texture has a stencil aspect\r\n     */\r\n    public get depthStencilTextureWithStencil() {\r\n        return this._depthStencilTextureWithStencil;\r\n    }\r\n\r\n    /**\r\n     * Defines if the render target wrapper is for a cube texture or if false a 2d texture\r\n     */\r\n    public get isCube(): boolean {\r\n        return this._isCube;\r\n    }\r\n\r\n    /**\r\n     * Defines if the render target wrapper is for a single or multi target render wrapper\r\n     */\r\n    public get isMulti(): boolean {\r\n        return this._isMulti;\r\n    }\r\n\r\n    /**\r\n     * Defines if the render target wrapper is for a single or an array of textures\r\n     */\r\n    public get is2DArray(): boolean {\r\n        return this.layers > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the size of the render target wrapper (used for cubes, as width=height in this case)\r\n     */\r\n    public get size(): number {\r\n        return this.width;\r\n    }\r\n\r\n    /**\r\n     * Gets the width of the render target wrapper\r\n     */\r\n    public get width(): number {\r\n        return (<{ width: number; height: number }>this._size).width || <number>this._size;\r\n    }\r\n\r\n    /**\r\n     * Gets the height of the render target wrapper\r\n     */\r\n    public get height(): number {\r\n        return (<{ width: number; height: number }>this._size).height || <number>this._size;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of layers of the render target wrapper (only used if is2DArray is true and wrapper is not a multi render target)\r\n     */\r\n    public get layers(): number {\r\n        return (<{ width: number; height: number; layers?: number }>this._size).layers || 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the render texture. If this is a multi render target, gets the first texture\r\n     */\r\n    public get texture(): Nullable<InternalTexture> {\r\n        return this._textures?.[0] ?? null;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of render textures. If we are not in a multi render target, the list will be null (use the texture getter instead)\r\n     */\r\n    public get textures(): Nullable<InternalTexture[]> {\r\n        return this._textures;\r\n    }\r\n\r\n    /**\r\n     * Gets the face indices that correspond to the list of render textures. If we are not in a multi render target, the list will be null\r\n     */\r\n    public get faceIndices(): Nullable<number[]> {\r\n        return this._faceIndices;\r\n    }\r\n\r\n    /**\r\n     * Gets the layer indices that correspond to the list of render textures. If we are not in a multi render target, the list will be null\r\n     */\r\n    public get layerIndices(): Nullable<number[]> {\r\n        return this._layerIndices;\r\n    }\r\n\r\n    /**\r\n     * Gets the sample count of the render target\r\n     */\r\n    public get samples(): number {\r\n        return this._samples;\r\n    }\r\n\r\n    /**\r\n     * Sets the sample count of the render target\r\n     * @param value sample count\r\n     * @param initializeBuffers If set to true, the engine will make an initializing call to drawBuffers (only used when isMulti=true).\r\n     * @param force true to force calling the update sample count engine function even if the current sample count is equal to value\r\n     * @returns the sample count that has been set\r\n     */\r\n    public setSamples(value: number, initializeBuffers = true, force = false): number {\r\n        if (this.samples === value && !force) {\r\n            return value;\r\n        }\r\n\r\n        const result = this._isMulti\r\n            ? this._engine.updateMultipleRenderTargetTextureSampleCount(this, value, initializeBuffers)\r\n            : this._engine.updateRenderTargetTextureSampleCount(this, value);\r\n        this._samples = value;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Initializes the render target wrapper\r\n     * @param isMulti true if the wrapper is a multi render target\r\n     * @param isCube true if the wrapper should render to a cube texture\r\n     * @param size size of the render target (width/height/layers)\r\n     * @param engine engine used to create the render target\r\n     * @param label defines the label to use for the wrapper (for debugging purpose only)\r\n     */\r\n    constructor(isMulti: boolean, isCube: boolean, size: TextureSize, engine: ThinEngine, label?: string) {\r\n        this._isMulti = isMulti;\r\n        this._isCube = isCube;\r\n        this._size = size;\r\n        this._engine = engine;\r\n        this._depthStencilTexture = null;\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * Sets the render target texture(s)\r\n     * @param textures texture(s) to set\r\n     */\r\n    public setTextures(textures: Nullable<InternalTexture> | Nullable<InternalTexture[]>): void {\r\n        if (Array.isArray(textures)) {\r\n            this._textures = textures;\r\n        } else if (textures) {\r\n            this._textures = [textures];\r\n        } else {\r\n            this._textures = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a texture in the textures array\r\n     * @param texture The texture to set\r\n     * @param index The index in the textures array to set\r\n     * @param disposePrevious If this function should dispose the previous texture\r\n     */\r\n    public setTexture(texture: InternalTexture, index: number = 0, disposePrevious: boolean = true): void {\r\n        if (!this._textures) {\r\n            this._textures = [];\r\n        }\r\n        if (this._textures[index] === texture) {\r\n            return;\r\n        }\r\n\r\n        if (this._textures[index] && disposePrevious) {\r\n            this._textures[index].dispose();\r\n        }\r\n\r\n        this._textures[index] = texture;\r\n    }\r\n\r\n    /**\r\n     * Sets the layer and face indices of every render target texture bound to each color attachment\r\n     * @param layers The layers of each texture to be set\r\n     * @param faces The faces of each texture to be set\r\n     */\r\n    public setLayerAndFaceIndices(layers: number[], faces: number[]) {\r\n        this._layerIndices = layers;\r\n        this._faceIndices = faces;\r\n    }\r\n\r\n    /**\r\n     * Sets the layer and face indices of a texture in the textures array that should be bound to each color attachment\r\n     * @param index The index of the texture in the textures array to modify\r\n     * @param layer The layer of the texture to be set\r\n     * @param face The face of the texture to be set\r\n     */\r\n    public setLayerAndFaceIndex(index: number = 0, layer?: number, face?: number): void {\r\n        if (!this._layerIndices) {\r\n            this._layerIndices = [];\r\n        }\r\n        if (!this._faceIndices) {\r\n            this._faceIndices = [];\r\n        }\r\n\r\n        if (layer !== undefined && layer >= 0) {\r\n            this._layerIndices[index] = layer;\r\n        }\r\n        if (face !== undefined && face >= 0) {\r\n            this._faceIndices[index] = face;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates the depth/stencil texture\r\n     * @param comparisonFunction Comparison function to use for the texture\r\n     * @param bilinearFiltering true if bilinear filtering should be used when sampling the texture\r\n     * @param generateStencil true if the stencil aspect should also be created\r\n     * @param samples sample count to use when creating the texture\r\n     * @param format format of the depth texture\r\n     * @param label defines the label to use for the texture (for debugging purpose only)\r\n     * @returns the depth/stencil created texture\r\n     */\r\n    public createDepthStencilTexture(\r\n        comparisonFunction: number = 0,\r\n        bilinearFiltering: boolean = true,\r\n        generateStencil: boolean = false,\r\n        samples: number = 1,\r\n        format: number = Constants.TEXTUREFORMAT_DEPTH32_FLOAT,\r\n        label?: string\r\n    ): InternalTexture {\r\n        this._depthStencilTexture?.dispose();\r\n\r\n        this._depthStencilTextureWithStencil = generateStencil;\r\n        this._depthStencilTextureLabel = label;\r\n        this._depthStencilTexture = this._engine.createDepthStencilTexture(\r\n            this._size,\r\n            {\r\n                bilinearFiltering,\r\n                comparisonFunction,\r\n                generateStencil,\r\n                isCube: this._isCube,\r\n                samples,\r\n                depthTextureFormat: format,\r\n                label,\r\n            },\r\n            this\r\n        );\r\n\r\n        return this._depthStencilTexture;\r\n    }\r\n\r\n    /**\r\n     * Shares the depth buffer of this render target with another render target.\r\n     * @internal\r\n     * @param renderTarget Destination renderTarget\r\n     */\r\n    public _shareDepth(renderTarget: RenderTargetWrapper): void {\r\n        if (this._depthStencilTexture) {\r\n            if (renderTarget._depthStencilTexture) {\r\n                renderTarget._depthStencilTexture.dispose();\r\n            }\r\n\r\n            renderTarget._depthStencilTexture = this._depthStencilTexture;\r\n            this._depthStencilTexture.incrementReferences();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _swapAndDie(target: InternalTexture): void {\r\n        if (this.texture) {\r\n            this.texture._swapAndDie(target);\r\n        }\r\n        this._textures = null;\r\n        this.dispose(true);\r\n    }\r\n\r\n    protected _cloneRenderTargetWrapper(): Nullable<RenderTargetWrapper> {\r\n        let rtw: Nullable<RenderTargetWrapper> = null;\r\n\r\n        if (this._isMulti) {\r\n            const textureArray = this.textures;\r\n            if (textureArray && textureArray.length > 0) {\r\n                let generateDepthTexture = false;\r\n                let textureCount = textureArray.length;\r\n                let depthTextureFormat = -1;\r\n\r\n                const lastTextureSource = textureArray[textureArray.length - 1]._source;\r\n                if (lastTextureSource === InternalTextureSource.Depth || lastTextureSource === InternalTextureSource.DepthStencil) {\r\n                    generateDepthTexture = true;\r\n                    depthTextureFormat = textureArray[textureArray.length - 1].format;\r\n                    textureCount--;\r\n                }\r\n\r\n                const samplingModes: number[] = [];\r\n                const types: number[] = [];\r\n                const formats: number[] = [];\r\n                const targetTypes: number[] = [];\r\n                const faceIndex: number[] = [];\r\n                const layerIndex: number[] = [];\r\n                const layerCounts: number[] = [];\r\n                const internalTexture2Index: { [id: number]: number } = {};\r\n\r\n                for (let i = 0; i < textureCount; ++i) {\r\n                    const texture = textureArray[i];\r\n\r\n                    samplingModes.push(texture.samplingMode);\r\n                    types.push(texture.type);\r\n                    formats.push(texture.format);\r\n\r\n                    const index = internalTexture2Index[texture.uniqueId];\r\n                    if (index !== undefined) {\r\n                        targetTypes.push(-1);\r\n                        layerCounts.push(0);\r\n                    } else {\r\n                        internalTexture2Index[texture.uniqueId] = i;\r\n                        if (texture.is2DArray) {\r\n                            targetTypes.push(Constants.TEXTURE_2D_ARRAY);\r\n                            layerCounts.push(texture.depth);\r\n                        } else if (texture.isCube) {\r\n                            targetTypes.push(Constants.TEXTURE_CUBE_MAP);\r\n                            layerCounts.push(0);\r\n                        } /*else if (texture.isCubeArray) {\r\n                            targetTypes.push(Constants.TEXTURE_CUBE_MAP_ARRAY);\r\n                            layerCounts.push(texture.depth);\r\n                        }*/ else if (texture.is3D) {\r\n                            targetTypes.push(Constants.TEXTURE_3D);\r\n                            layerCounts.push(texture.depth);\r\n                        } else {\r\n                            targetTypes.push(Constants.TEXTURE_2D);\r\n                            layerCounts.push(0);\r\n                        }\r\n                    }\r\n\r\n                    if (this._faceIndices) {\r\n                        faceIndex.push(this._faceIndices[i] ?? 0);\r\n                    }\r\n                    if (this._layerIndices) {\r\n                        layerIndex.push(this._layerIndices[i] ?? 0);\r\n                    }\r\n                }\r\n\r\n                const optionsMRT: IMultiRenderTargetOptions = {\r\n                    samplingModes,\r\n                    generateMipMaps: textureArray[0].generateMipMaps,\r\n                    generateDepthBuffer: this._generateDepthBuffer,\r\n                    generateStencilBuffer: this._generateStencilBuffer,\r\n                    generateDepthTexture,\r\n                    depthTextureFormat,\r\n                    types,\r\n                    formats,\r\n                    textureCount,\r\n                    targetTypes,\r\n                    faceIndex,\r\n                    layerIndex,\r\n                    layerCounts,\r\n                    label: this.label,\r\n                };\r\n                const size = {\r\n                    width: this.width,\r\n                    height: this.height,\r\n                };\r\n\r\n                rtw = this._engine.createMultipleRenderTarget(size, optionsMRT);\r\n\r\n                for (let i = 0; i < textureCount; ++i) {\r\n                    if (targetTypes[i] !== -1) {\r\n                        continue;\r\n                    }\r\n                    const index = internalTexture2Index[textureArray[i].uniqueId];\r\n                    rtw.setTexture(rtw.textures![index], i);\r\n                }\r\n            }\r\n        } else {\r\n            const options: RenderTargetCreationOptions = {};\r\n\r\n            options.generateDepthBuffer = this._generateDepthBuffer;\r\n            options.generateMipMaps = this.texture?.generateMipMaps ?? false;\r\n            options.generateStencilBuffer = this._generateStencilBuffer;\r\n            options.samplingMode = this.texture?.samplingMode;\r\n            options.type = this.texture?.type;\r\n            options.format = this.texture?.format;\r\n            options.noColorAttachment = !this._textures;\r\n            options.label = this.label;\r\n\r\n            if (this.isCube) {\r\n                rtw = this._engine.createRenderTargetCubeTexture(this.width, options);\r\n            } else {\r\n                const size = {\r\n                    width: this.width,\r\n                    height: this.height,\r\n                    layers: this.is2DArray ? this.texture?.depth : undefined,\r\n                };\r\n\r\n                rtw = this._engine.createRenderTargetTexture(size, options);\r\n            }\r\n            if (rtw.texture) {\r\n                rtw.texture!.isReady = true;\r\n            }\r\n        }\r\n\r\n        return rtw;\r\n    }\r\n\r\n    protected _swapRenderTargetWrapper(target: RenderTargetWrapper): void {\r\n        if (this._textures && target._textures) {\r\n            for (let i = 0; i < this._textures.length; ++i) {\r\n                this._textures[i]._swapAndDie(target._textures[i], false);\r\n                target._textures[i].isReady = true;\r\n            }\r\n        }\r\n        if (this._depthStencilTexture && target._depthStencilTexture) {\r\n            this._depthStencilTexture._swapAndDie(target._depthStencilTexture);\r\n            target._depthStencilTexture.isReady = true;\r\n        }\r\n\r\n        this._textures = null;\r\n        this._depthStencilTexture = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        const rtw = this._cloneRenderTargetWrapper();\r\n        if (!rtw) {\r\n            return;\r\n        }\r\n\r\n        if (this._depthStencilTexture) {\r\n            const samplingMode = this._depthStencilTexture.samplingMode;\r\n            const format = this._depthStencilTexture.format;\r\n            const bilinear =\r\n                samplingMode === Constants.TEXTURE_BILINEAR_SAMPLINGMODE ||\r\n                samplingMode === Constants.TEXTURE_TRILINEAR_SAMPLINGMODE ||\r\n                samplingMode === Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST;\r\n\r\n            rtw.createDepthStencilTexture(\r\n                this._depthStencilTexture._comparisonFunction,\r\n                bilinear,\r\n                this._depthStencilTextureWithStencil,\r\n                this._depthStencilTexture.samples,\r\n                format,\r\n                this._depthStencilTextureLabel\r\n            );\r\n        }\r\n\r\n        if (this.samples > 1) {\r\n            rtw.setSamples(this.samples);\r\n        }\r\n\r\n        rtw._swapRenderTargetWrapper(this);\r\n        rtw.dispose();\r\n    }\r\n\r\n    /**\r\n     * Releases the internal render textures\r\n     */\r\n    public releaseTextures(): void {\r\n        if (this._textures) {\r\n            for (let i = 0; i < this._textures?.length ?? 0; ++i) {\r\n                this._textures[i].dispose();\r\n            }\r\n        }\r\n        this._textures = null;\r\n    }\r\n\r\n    /**\r\n     * Disposes the whole render target wrapper\r\n     * @param disposeOnlyFramebuffers true if only the frame buffers should be released (used for the WebGL engine). If false, all the textures will also be released\r\n     */\r\n    public dispose(disposeOnlyFramebuffers = false): void {\r\n        if (!disposeOnlyFramebuffers) {\r\n            this._depthStencilTexture?.dispose();\r\n            this._depthStencilTexture = null;\r\n            this.releaseTextures();\r\n        }\r\n\r\n        this._engine._releaseRenderTargetWrapper(this);\r\n    }\r\n}\r\n", "import type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport type { TextureSize } from \"../../Materials/Textures/textureCreationOptions\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Constants } from \"../constants\";\r\nimport type { Engine } from \"../engine\";\r\nimport { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport type { ThinEngine } from \"../thinEngine\";\r\n\r\n/** @internal */\r\nexport class WebGLRenderTargetWrapper extends RenderTargetWrapper {\r\n    private _context: WebGLRenderingContext;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _framebuffer: Nullable<WebGLFramebuffer> = null;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _depthStencilBuffer: Nullable<WebGLRenderbuffer> = null;\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public _MSAAFramebuffer: Nullable<WebGLFramebuffer> = null;\r\n\r\n    // Multiview\r\n    /**\r\n     * @internal\r\n     */\r\n    public _colorTextureArray: Nullable<WebGLTexture> = null;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _depthStencilTextureArray: Nullable<WebGLTexture> = null;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _disposeOnlyFramebuffers = false;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _currentLOD = 0;\r\n\r\n    constructor(isMulti: boolean, isCube: boolean, size: TextureSize, engine: ThinEngine, context: WebGLRenderingContext) {\r\n        super(isMulti, isCube, size, engine);\r\n\r\n        this._context = context;\r\n    }\r\n\r\n    protected _cloneRenderTargetWrapper(): Nullable<RenderTargetWrapper> {\r\n        let rtw: Nullable<RenderTargetWrapper> = null;\r\n\r\n        if (this._colorTextureArray && this._depthStencilTextureArray) {\r\n            rtw = (this._engine as Engine).createMultiviewRenderTargetTexture(this.width, this.height);\r\n            rtw.texture!.isReady = true;\r\n        } else {\r\n            rtw = super._cloneRenderTargetWrapper();\r\n        }\r\n\r\n        return rtw;\r\n    }\r\n\r\n    protected _swapRenderTargetWrapper(target: WebGLRenderTargetWrapper): void {\r\n        super._swapRenderTargetWrapper(target);\r\n\r\n        target._framebuffer = this._framebuffer;\r\n        target._depthStencilBuffer = this._depthStencilBuffer;\r\n        target._MSAAFramebuffer = this._MSAAFramebuffer;\r\n        target._colorTextureArray = this._colorTextureArray;\r\n        target._depthStencilTextureArray = this._depthStencilTextureArray;\r\n\r\n        this._framebuffer = this._depthStencilBuffer = this._MSAAFramebuffer = this._colorTextureArray = this._depthStencilTextureArray = null;\r\n    }\r\n\r\n    /**\r\n     * Creates the depth/stencil texture\r\n     * @param comparisonFunction Comparison function to use for the texture\r\n     * @param bilinearFiltering true if bilinear filtering should be used when sampling the texture\r\n     * @param generateStencil true if the stencil aspect should also be created\r\n     * @param samples sample count to use when creating the texture\r\n     * @param format format of the depth texture\r\n     * @param label defines the label to use for the texture (for debugging purpose only)\r\n     * @returns the depth/stencil created texture\r\n     */\r\n    public createDepthStencilTexture(\r\n        comparisonFunction: number = 0,\r\n        bilinearFiltering: boolean = true,\r\n        generateStencil: boolean = false,\r\n        samples: number = 1,\r\n        format: number = Constants.TEXTUREFORMAT_DEPTH32_FLOAT,\r\n        label?: string\r\n    ): InternalTexture {\r\n        if (this._depthStencilBuffer) {\r\n            // Dispose previous depth/stencil render buffers and clear the corresponding attachment.\r\n            // Next time this framebuffer is bound, the new depth/stencil texture will be attached.\r\n            const currentFrameBuffer = this._engine._currentFramebuffer;\r\n            const gl = this._context;\r\n\r\n            this._engine._bindUnboundFramebuffer(this._framebuffer);\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, null);\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);\r\n            this._engine._bindUnboundFramebuffer(currentFrameBuffer);\r\n            gl.deleteRenderbuffer(this._depthStencilBuffer);\r\n\r\n            this._depthStencilBuffer = null;\r\n        }\r\n\r\n        return super.createDepthStencilTexture(comparisonFunction, bilinearFiltering, generateStencil, samples, format, label);\r\n    }\r\n\r\n    /**\r\n     * Shares the depth buffer of this render target with another render target.\r\n     * @internal\r\n     * @param renderTarget Destination renderTarget\r\n     */\r\n    public _shareDepth(renderTarget: WebGLRenderTargetWrapper): void {\r\n        super._shareDepth(renderTarget);\r\n\r\n        const gl = this._context;\r\n        const depthbuffer = this._depthStencilBuffer;\r\n        const framebuffer = renderTarget._MSAAFramebuffer || renderTarget._framebuffer;\r\n\r\n        if (renderTarget._depthStencilBuffer && renderTarget._depthStencilBuffer !== depthbuffer) {\r\n            gl.deleteRenderbuffer(renderTarget._depthStencilBuffer);\r\n        }\r\n        renderTarget._depthStencilBuffer = depthbuffer;\r\n        const attachment = renderTarget._generateStencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\r\n        this._engine._bindUnboundFramebuffer(framebuffer);\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, depthbuffer);\r\n        this._engine._bindUnboundFramebuffer(null);\r\n    }\r\n\r\n    /**\r\n     * Binds a texture to this render target on a specific attachment\r\n     * @param texture The texture to bind to the framebuffer\r\n     * @param attachmentIndex Index of the attachment\r\n     * @param faceIndexOrLayer The face or layer of the texture to render to in case of cube texture or array texture\r\n     * @param lodLevel defines the lod level to bind to the frame buffer\r\n     */\r\n    private _bindTextureRenderTarget(texture: InternalTexture, attachmentIndex: number = 0, faceIndexOrLayer?: number, lodLevel: number = 0) {\r\n        if (!texture._hardwareTexture) {\r\n            return;\r\n        }\r\n\r\n        const framebuffer = this._framebuffer;\r\n\r\n        const currentFB = this._engine._currentFramebuffer;\r\n        this._engine._bindUnboundFramebuffer(framebuffer);\r\n\r\n        if (this._engine.webGLVersion > 1) {\r\n            const gl = this._context as WebGL2RenderingContext;\r\n\r\n            const attachment = (<any>gl)[\"COLOR_ATTACHMENT\" + attachmentIndex];\r\n            if (texture.is2DArray || texture.is3D) {\r\n                faceIndexOrLayer = faceIndexOrLayer ?? this.layerIndices?.[attachmentIndex] ?? 0;\r\n                gl.framebufferTextureLayer(gl.FRAMEBUFFER, attachment, texture._hardwareTexture.underlyingResource, lodLevel, faceIndexOrLayer);\r\n            } else if (texture.isCube) {\r\n                // if face index is not specified, try to query it from faceIndices\r\n                // default is face 0\r\n                faceIndexOrLayer = faceIndexOrLayer ?? this.faceIndices?.[attachmentIndex] ?? 0;\r\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndexOrLayer, texture._hardwareTexture.underlyingResource, lodLevel);\r\n            } else {\r\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture._hardwareTexture.underlyingResource, lodLevel);\r\n            }\r\n        } else {\r\n            // Default behavior (WebGL)\r\n            const gl = this._context;\r\n\r\n            const attachment = (<any>gl)[\"COLOR_ATTACHMENT\" + attachmentIndex + \"_WEBGL\"];\r\n            const target = faceIndexOrLayer !== undefined ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndexOrLayer : gl.TEXTURE_2D;\r\n\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, target, texture._hardwareTexture.underlyingResource, lodLevel);\r\n        }\r\n\r\n        this._engine._bindUnboundFramebuffer(currentFB);\r\n    }\r\n\r\n    /**\r\n     * Set a texture in the textures array\r\n     * @param texture the texture to set\r\n     * @param index the index in the textures array to set\r\n     * @param disposePrevious If this function should dispose the previous texture\r\n     */\r\n    public setTexture(texture: InternalTexture, index: number = 0, disposePrevious: boolean = true) {\r\n        super.setTexture(texture, index, disposePrevious);\r\n        this._bindTextureRenderTarget(texture, index);\r\n    }\r\n\r\n    /**\r\n     * Sets the layer and face indices of every render target texture\r\n     * @param layers The layer of the texture to be set (make negative to not modify)\r\n     * @param faces The face of the texture to be set (make negative to not modify)\r\n     */\r\n    public setLayerAndFaceIndices(layers: number[], faces: number[]) {\r\n        super.setLayerAndFaceIndices(layers, faces);\r\n\r\n        if (!this.textures || !this.layerIndices || !this.faceIndices) {\r\n            return;\r\n        }\r\n\r\n        // the length of this._attachments is the right one as it does not count the depth texture, in case we generated it\r\n        const textureCount = this._attachments?.length ?? this.textures.length;\r\n        for (let index = 0; index < textureCount; index++) {\r\n            const texture = this.textures[index];\r\n            if (!texture) {\r\n                // The target type was probably -1 at creation time and setTexture has not been called yet for this index\r\n                continue;\r\n            }\r\n            if (texture.is2DArray || texture.is3D) {\r\n                this._bindTextureRenderTarget(texture, index, this.layerIndices[index]);\r\n            } else if (texture.isCube) {\r\n                this._bindTextureRenderTarget(texture, index, this.faceIndices[index]);\r\n            } else {\r\n                this._bindTextureRenderTarget(texture, index);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the face and layer indices of a texture in the textures array\r\n     * @param index The index of the texture in the textures array to modify\r\n     * @param layer The layer of the texture to be set\r\n     * @param face The face of the texture to be set\r\n     */\r\n    public setLayerAndFaceIndex(index: number = 0, layer?: number, face?: number): void {\r\n        super.setLayerAndFaceIndex(index, layer, face);\r\n\r\n        if (!this.textures || !this.layerIndices || !this.faceIndices) {\r\n            return;\r\n        }\r\n\r\n        const texture = this.textures[index];\r\n        if (texture.is2DArray || texture.is3D) {\r\n            this._bindTextureRenderTarget(this.textures[index], index, this.layerIndices[index]);\r\n        } else if (texture.isCube) {\r\n            this._bindTextureRenderTarget(this.textures[index], index, this.faceIndices[index]);\r\n        }\r\n    }\r\n\r\n    public dispose(disposeOnlyFramebuffers = this._disposeOnlyFramebuffers): void {\r\n        const gl = this._context;\r\n\r\n        if (!disposeOnlyFramebuffers) {\r\n            if (this._colorTextureArray) {\r\n                this._context.deleteTexture(this._colorTextureArray);\r\n                this._colorTextureArray = null;\r\n            }\r\n            if (this._depthStencilTextureArray) {\r\n                this._context.deleteTexture(this._depthStencilTextureArray);\r\n                this._depthStencilTextureArray = null;\r\n            }\r\n        }\r\n\r\n        if (this._framebuffer) {\r\n            gl.deleteFramebuffer(this._framebuffer);\r\n            this._framebuffer = null;\r\n        }\r\n\r\n        if (this._depthStencilBuffer) {\r\n            gl.deleteRenderbuffer(this._depthStencilBuffer);\r\n            this._depthStencilBuffer = null;\r\n        }\r\n\r\n        if (this._MSAAFramebuffer) {\r\n            gl.deleteFramebuffer(this._MSAAFramebuffer);\r\n            this._MSAAFramebuffer = null;\r\n        }\r\n\r\n        super.dispose(disposeOnlyFramebuffers);\r\n    }\r\n}\r\n", "import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { RenderTargetCreationOptions, DepthTextureCreationOptions, TextureSize } from \"../../Materials/Textures/textureCreationOptions\";\r\nimport { ThinEngine } from \"../thinEngine\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport { WebGLRenderTargetWrapper } from \"../WebGL/webGLRenderTargetWrapper\";\r\nimport type { WebGLHardwareTexture } from \"../WebGL/webGLHardwareTexture\";\r\n\r\nimport { Constants } from \"../constants\";\r\n\r\n/**\r\n * Type used to define a texture size (either with a number or with a rect width and height)\r\n * @deprecated please use TextureSize instead\r\n */\r\nexport type RenderTargetTextureSize = TextureSize;\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Creates a new render target texture\r\n         * @param size defines the size of the texture\r\n         * @param options defines the options used to create the texture\r\n         * @returns a new render target wrapper ready to render texture\r\n         */\r\n        createRenderTargetTexture(size: TextureSize, options: boolean | RenderTargetCreationOptions): RenderTargetWrapper;\r\n\r\n        /**\r\n         * Creates a depth stencil texture.\r\n         * This is only available in WebGL 2 or with the depth texture extension available.\r\n         * @param size The size of face edge in the texture.\r\n         * @param options The options defining the texture.\r\n         * @param rtWrapper The render target wrapper for which the depth/stencil texture must be created\r\n         * @returns The texture\r\n         */\r\n        createDepthStencilTexture(size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture;\r\n\r\n        /**\r\n         * Updates the sample count of a render target texture\r\n         * @see https://doc.babylonjs.com/setup/support/webGL2#multisample-render-targets\r\n         * @param rtWrapper defines the render target wrapper to update\r\n         * @param samples defines the sample count to set\r\n         * @returns the effective sample count (could be 0 if multisample render targets are not supported)\r\n         */\r\n        updateRenderTargetTextureSampleCount(rtWrapper: Nullable<RenderTargetWrapper>, samples: number): number;\r\n\r\n        /** @internal */\r\n        _createDepthStencilTexture(size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture;\r\n\r\n        /** @internal */\r\n        _createHardwareRenderTargetWrapper(isMulti: boolean, isCube: boolean, size: TextureSize): RenderTargetWrapper;\r\n    }\r\n}\r\n\r\nThinEngine.prototype._createHardwareRenderTargetWrapper = function (isMulti: boolean, isCube: boolean, size: TextureSize): RenderTargetWrapper {\r\n    const rtWrapper = new WebGLRenderTargetWrapper(isMulti, isCube, size, this, this._gl);\r\n    this._renderTargetWrapperCache.push(rtWrapper);\r\n    return rtWrapper;\r\n};\r\n\r\nThinEngine.prototype.createRenderTargetTexture = function (this: ThinEngine, size: TextureSize, options: boolean | RenderTargetCreationOptions): RenderTargetWrapper {\r\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, false, size) as WebGLRenderTargetWrapper;\r\n\r\n    let generateDepthBuffer = true;\r\n    let generateStencilBuffer = false;\r\n    let noColorAttachment = false;\r\n    let colorAttachment: InternalTexture | undefined = undefined;\r\n    let samples = 1;\r\n    let label: string | undefined = undefined;\r\n    if (options !== undefined && typeof options === \"object\") {\r\n        generateDepthBuffer = options.generateDepthBuffer ?? true;\r\n        generateStencilBuffer = !!options.generateStencilBuffer;\r\n        noColorAttachment = !!options.noColorAttachment;\r\n        colorAttachment = options.colorAttachment;\r\n        samples = options.samples ?? 1;\r\n        label = options.label;\r\n    }\r\n\r\n    const texture = colorAttachment || (noColorAttachment ? null : this._createInternalTexture(size, options, true, InternalTextureSource.RenderTarget));\r\n    const width = (<{ width: number; height: number; layers?: number }>size).width || <number>size;\r\n    const height = (<{ width: number; height: number; layers?: number }>size).height || <number>size;\r\n\r\n    const currentFrameBuffer = this._currentFramebuffer;\r\n    const gl = this._gl;\r\n\r\n    // Create the framebuffer\r\n    const framebuffer = gl.createFramebuffer();\r\n    this._bindUnboundFramebuffer(framebuffer);\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(generateStencilBuffer, generateDepthBuffer, width, height);\r\n\r\n    // No need to rebind on every frame\r\n    if (texture && !texture.is2DArray) {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._hardwareTexture!.underlyingResource, 0);\r\n    }\r\n\r\n    this._bindUnboundFramebuffer(currentFrameBuffer);\r\n\r\n    rtWrapper.label = label ?? \"RenderTargetWrapper\";\r\n    rtWrapper._framebuffer = framebuffer;\r\n    rtWrapper._generateDepthBuffer = generateDepthBuffer;\r\n    rtWrapper._generateStencilBuffer = generateStencilBuffer;\r\n\r\n    rtWrapper.setTextures(texture);\r\n\r\n    this.updateRenderTargetTextureSampleCount(rtWrapper, samples);\r\n\r\n    return rtWrapper;\r\n};\r\n\r\nThinEngine.prototype.createDepthStencilTexture = function (size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture {\r\n    if (options.isCube) {\r\n        const width = (<{ width: number; height: number }>size).width || <number>size;\r\n        return this._createDepthStencilCubeTexture(width, options);\r\n    } else {\r\n        return this._createDepthStencilTexture(size, options, rtWrapper);\r\n    }\r\n};\r\n\r\nThinEngine.prototype._createDepthStencilTexture = function (size: TextureSize, options: DepthTextureCreationOptions): InternalTexture {\r\n    const gl = this._gl;\r\n    const layers = (<{ width: number; height: number; layers?: number }>size).layers || 0;\r\n    const target = layers !== 0 ? gl.TEXTURE_2D_ARRAY : gl.TEXTURE_2D;\r\n    const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\r\n    internalTexture.label = options.label;\r\n    if (!this._caps.depthTextureExtension) {\r\n        Logger.Error(\"Depth texture is not supported by your browser or hardware.\");\r\n        return internalTexture;\r\n    }\r\n\r\n    const internalOptions = {\r\n        bilinearFiltering: false,\r\n        comparisonFunction: 0,\r\n        generateStencil: false,\r\n        ...options,\r\n    };\r\n\r\n    this._bindTextureDirectly(target, internalTexture, true);\r\n\r\n    this._setupDepthStencilTexture(\r\n        internalTexture,\r\n        size,\r\n        internalOptions.generateStencil,\r\n        internalOptions.comparisonFunction === 0 ? false : internalOptions.bilinearFiltering,\r\n        internalOptions.comparisonFunction,\r\n        internalOptions.samples\r\n    );\r\n\r\n    if (internalOptions.depthTextureFormat !== undefined) {\r\n        if (\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH16 &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH24 &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH32_FLOAT &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8\r\n        ) {\r\n            Logger.Error(\"Depth texture format is not supported.\");\r\n            return internalTexture;\r\n        }\r\n        internalTexture.format = internalOptions.depthTextureFormat;\r\n    } else {\r\n        internalTexture.format = internalOptions.generateStencil ? Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 : Constants.TEXTUREFORMAT_DEPTH24;\r\n    }\r\n\r\n    const hasStencil =\r\n        internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 ||\r\n        internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 ||\r\n        internalTexture.format === Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8;\r\n\r\n    let type: GLenum = gl.UNSIGNED_INT;\r\n    if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH16) {\r\n        type = gl.UNSIGNED_SHORT;\r\n    } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 || internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8) {\r\n        type = gl.UNSIGNED_INT_24_8;\r\n    } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH32_FLOAT) {\r\n        type = gl.FLOAT;\r\n    } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8) {\r\n        type = gl.FLOAT_32_UNSIGNED_INT_24_8_REV;\r\n    }\r\n\r\n    const format: GLenum = hasStencil ? gl.DEPTH_STENCIL : gl.DEPTH_COMPONENT;\r\n    let internalFormat = format;\r\n    if (this.webGLVersion > 1) {\r\n        if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH16) {\r\n            internalFormat = gl.DEPTH_COMPONENT16;\r\n        } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24) {\r\n            internalFormat = gl.DEPTH_COMPONENT24;\r\n        } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 || internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8) {\r\n            internalFormat = gl.DEPTH24_STENCIL8;\r\n        } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH32_FLOAT) {\r\n            internalFormat = gl.DEPTH_COMPONENT32F;\r\n        } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8) {\r\n            internalFormat = gl.DEPTH32F_STENCIL8;\r\n        }\r\n    }\r\n\r\n    if (internalTexture.is2DArray) {\r\n        gl.texImage3D(target, 0, internalFormat, internalTexture.width, internalTexture.height, layers, 0, format, type, null);\r\n    } else {\r\n        gl.texImage2D(target, 0, internalFormat, internalTexture.width, internalTexture.height, 0, format, type, null);\r\n    }\r\n\r\n    this._bindTextureDirectly(target, null);\r\n\r\n    this._internalTexturesCache.push(internalTexture);\r\n\r\n    return internalTexture;\r\n};\r\n\r\nThinEngine.prototype.updateRenderTargetTextureSampleCount = function (rtWrapper: Nullable<WebGLRenderTargetWrapper>, samples: number): number {\r\n    if (this.webGLVersion < 2 || !rtWrapper || !rtWrapper.texture) {\r\n        return 1;\r\n    }\r\n\r\n    if (rtWrapper.samples === samples) {\r\n        return samples;\r\n    }\r\n\r\n    const gl = this._gl;\r\n\r\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\r\n\r\n    // Dispose previous render buffers\r\n    if (rtWrapper._depthStencilBuffer) {\r\n        gl.deleteRenderbuffer(rtWrapper._depthStencilBuffer);\r\n        rtWrapper._depthStencilBuffer = null;\r\n    }\r\n\r\n    if (rtWrapper._MSAAFramebuffer) {\r\n        gl.deleteFramebuffer(rtWrapper._MSAAFramebuffer);\r\n        rtWrapper._MSAAFramebuffer = null;\r\n    }\r\n\r\n    const hardwareTexture = rtWrapper.texture._hardwareTexture as WebGLHardwareTexture;\r\n    hardwareTexture.releaseMSAARenderBuffers();\r\n\r\n    if (samples > 1 && typeof gl.renderbufferStorageMultisample === \"function\") {\r\n        const framebuffer = gl.createFramebuffer();\r\n\r\n        if (!framebuffer) {\r\n            throw new Error(\"Unable to create multi sampled framebuffer\");\r\n        }\r\n\r\n        rtWrapper._MSAAFramebuffer = framebuffer;\r\n        this._bindUnboundFramebuffer(rtWrapper._MSAAFramebuffer);\r\n\r\n        const colorRenderbuffer = this._createRenderBuffer(\r\n            rtWrapper.texture.width,\r\n            rtWrapper.texture.height,\r\n            samples,\r\n            -1 /* not used */,\r\n            this._getRGBABufferInternalSizedFormat(rtWrapper.texture.type, rtWrapper.texture.format, rtWrapper.texture._useSRGBBuffer),\r\n            gl.COLOR_ATTACHMENT0,\r\n            false\r\n        );\r\n\r\n        if (!colorRenderbuffer) {\r\n            throw new Error(\"Unable to create multi sampled framebuffer\");\r\n        }\r\n\r\n        hardwareTexture.addMSAARenderBuffer(colorRenderbuffer);\r\n    } else {\r\n        this._bindUnboundFramebuffer(rtWrapper._framebuffer);\r\n    }\r\n\r\n    rtWrapper.texture.samples = samples;\r\n    rtWrapper._samples = samples;\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(\r\n        rtWrapper._generateStencilBuffer,\r\n        rtWrapper._generateDepthBuffer,\r\n        rtWrapper.texture.width,\r\n        rtWrapper.texture.height,\r\n        samples\r\n    );\r\n\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    return samples;\r\n};\r\n", "import type { Nullable } from \"../types\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Vector2 } from \"../Maths/math.vector\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { RenderTargetCreationOptions } from \"../Materials/Textures/textureCreationOptions\";\r\nimport \"../Shaders/postprocess.vertex\";\r\nimport type { IInspectable } from \"../Misc/iInspectable\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport type { Color4 } from \"../Maths/math.color\";\r\n\r\nimport \"../Engines/Extensions/engine.renderTarget\";\r\nimport type { NodeMaterial } from \"../Materials/Node/nodeMaterial\";\r\nimport { serialize, serializeAsColor4 } from \"../Misc/decorators\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { GetClass, RegisterClass } from \"../Misc/typeStore\";\r\nimport { DrawWrapper } from \"../Materials/drawWrapper\";\r\nimport type { AbstractScene } from \"../abstractScene\";\r\nimport type { RenderTargetWrapper } from \"../Engines/renderTargetWrapper\";\r\nimport { ShaderLanguage } from \"../Materials/shaderLanguage\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport type { Animation } from \"../Animations/animation\";\r\nimport type { PrePassRenderer } from \"../Rendering/prePassRenderer\";\r\nimport type { PrePassEffectConfiguration } from \"../Rendering/prePassEffectConfiguration\";\r\n\r\n/**\r\n * Allows for custom processing of the shader code used by a post process\r\n */\r\nexport type PostProcessCustomShaderCodeProcessing = {\r\n    /**\r\n     * If provided, will be called two times with the vertex and fragment code so that this code can be updated after the #include have been processed\r\n     */\r\n    processCodeAfterIncludes?: (postProcessName: string, shaderType: string, code: string) => string;\r\n    /**\r\n     * If provided, will be called two times with the vertex and fragment code so that this code can be updated before it is compiled by the GPU\r\n     */\r\n    processFinalCode?: (postProcessName: string, shaderType: string, code: string) => string;\r\n    /**\r\n     * If provided, will be called before creating the effect to collect additional custom bindings (defines, uniforms, samplers)\r\n     */\r\n    defineCustomBindings?: (postProcessName: string, defines: Nullable<string>, uniforms: string[], samplers: string[]) => Nullable<string>;\r\n    /**\r\n     * If provided, will be called when binding inputs to the shader code to allow the user to add custom bindings\r\n     */\r\n    bindCustomBindings?: (postProcessName: string, effect: Effect) => void;\r\n};\r\n\r\n/**\r\n * Options for the PostProcess constructor\r\n */\r\nexport type PostProcessOptions = {\r\n    /**\r\n     * The width of the texture created for this post process.\r\n     * This parameter (and height) is only used when passing a value for the 5th parameter (options) to the PostProcess constructor function.\r\n     * If you use a PostProcessOptions for the 3rd parameter of the constructor, size is used instead of width and height.\r\n     */\r\n    width?: number;\r\n    /**\r\n     * The height of the texture created for this post process.\r\n     * This parameter (and width) is only used when passing a value for the 5th parameter (options) to the PostProcess constructor function.\r\n     * If you use a PostProcessOptions for the 3rd parameter of the constructor, size is used instead of width and height.\r\n     */\r\n    height?: number;\r\n\r\n    /**\r\n     * The list of uniforms used in the shader (if any)\r\n     */\r\n    uniforms?: Nullable<string[]>;\r\n    /**\r\n     * The list of samplers used in the shader (if any)\r\n     */\r\n    samplers?: Nullable<string[]>;\r\n    /**\r\n     * The list of uniform buffers used in the shader (if any)\r\n     */\r\n    uniformBuffers?: Nullable<string[]>;\r\n    /**\r\n     * String of defines that will be set when running the fragment shader. (default: null)\r\n     */\r\n    defines?: Nullable<string>;\r\n    /**\r\n     * The size of the post process texture.\r\n     * It is either a ratio to downscale or upscale the texture create for this post process, or an object containing width and height values.\r\n     * Default: 1\r\n     */\r\n    size?: number | { width: number; height: number };\r\n    /**\r\n     * The camera that the post process will be attached to (default: null)\r\n     */\r\n    camera?: Nullable<Camera>;\r\n    /**\r\n     * The sampling mode to be used by the shader (default: Constants.TEXTURE_NEAREST_SAMPLINGMODE)\r\n     */\r\n    samplingMode?: number;\r\n    /**\r\n     * The engine to be used to render the post process (default: engine from scene)\r\n     */\r\n    engine?: Engine;\r\n    /**\r\n     * If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    reusable?: boolean;\r\n    /**\r\n     * Type of the texture created for this post process (default: Constants.TEXTURETYPE_UNSIGNED_INT)\r\n     */\r\n    textureType?: number;\r\n    /**\r\n     * The url of the vertex shader to be used. (default: \"postprocess\")\r\n     */\r\n    vertexUrl?: string;\r\n    /**\r\n     * The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined)\r\n     * See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n     */\r\n    indexParameters?: any;\r\n    /**\r\n     * If the shader should not be compiled immediately. (default: false)\r\n     */\r\n    blockCompilation?: boolean;\r\n    /**\r\n     * Format of the texture created for this post process (default: TEXTUREFORMAT_RGBA)\r\n     */\r\n    textureFormat?: number;\r\n    /**\r\n     * The shader language of the shader. (default: GLSL)\r\n     */\r\n    shaderLanguage?: ShaderLanguage;\r\n};\r\n\r\ntype TextureCache = { texture: RenderTargetWrapper; postProcessChannel: number; lastUsedRenderId: number };\r\n\r\n/**\r\n * PostProcess can be used to apply a shader to a texture after it has been rendered\r\n * See https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\r\n */\r\nexport class PostProcess {\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    private static _CustomShaderCodeProcessing: { [postProcessName: string]: PostProcessCustomShaderCodeProcessing } = {};\r\n\r\n    /**\r\n     * Registers a shader code processing with a post process name.\r\n     * @param postProcessName name of the post process. Use null for the fallback shader code processing. This is the shader code processing that will be used in case no specific shader code processing has been associated to a post process name\r\n     * @param customShaderCodeProcessing shader code processing to associate to the post process name\r\n     */\r\n    public static RegisterShaderCodeProcessing(postProcessName: Nullable<string>, customShaderCodeProcessing?: PostProcessCustomShaderCodeProcessing) {\r\n        if (!customShaderCodeProcessing) {\r\n            delete PostProcess._CustomShaderCodeProcessing[postProcessName ?? \"\"];\r\n            return;\r\n        }\r\n\r\n        PostProcess._CustomShaderCodeProcessing[postProcessName ?? \"\"] = customShaderCodeProcessing;\r\n    }\r\n\r\n    private static _GetShaderCodeProcessing(postProcessName: string) {\r\n        return PostProcess._CustomShaderCodeProcessing[postProcessName] ?? PostProcess._CustomShaderCodeProcessing[\"\"];\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the unique id of the post process\r\n     */\r\n    @serialize()\r\n    public uniqueId: number;\r\n\r\n    /** Name of the PostProcess. */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Width of the texture to apply the post process on\r\n     */\r\n    @serialize()\r\n    public width = -1;\r\n\r\n    /**\r\n     * Height of the texture to apply the post process on\r\n     */\r\n    @serialize()\r\n    public height = -1;\r\n\r\n    /**\r\n     * Gets the node material used to create this postprocess (null if the postprocess was manually created)\r\n     */\r\n    public nodeMaterialSource: Nullable<NodeMaterial> = null;\r\n\r\n    /**\r\n     * Internal, reference to the location where this postprocess was output to. (Typically the texture on the next postprocess in the chain)\r\n     * @internal\r\n     */\r\n    public _outputTexture: Nullable<RenderTargetWrapper> = null;\r\n    /**\r\n     * Sampling mode used by the shader\r\n     * See https://doc.babylonjs.com/classes/3.1/texture\r\n     */\r\n    @serialize()\r\n    public renderTargetSamplingMode: number;\r\n    /**\r\n     * Clear color to use when screen clearing\r\n     */\r\n    @serializeAsColor4()\r\n    public clearColor: Color4;\r\n    /**\r\n     * If the buffer needs to be cleared before applying the post process. (default: true)\r\n     * Should be set to false if shader will overwrite all previous pixels.\r\n     */\r\n    @serialize()\r\n    public autoClear = true;\r\n    /**\r\n     * If clearing the buffer should be forced in autoClear mode, even when alpha mode is enabled (default: false).\r\n     * By default, the buffer will only be cleared if alpha mode is disabled (and autoClear is true).\r\n     */\r\n    @serialize()\r\n    public forceAutoClearInAlphaMode = false;\r\n    /**\r\n     * Type of alpha mode to use when performing the post process (default: Engine.ALPHA_DISABLE)\r\n     */\r\n    @serialize()\r\n    public alphaMode = Constants.ALPHA_DISABLE;\r\n    /**\r\n     * Sets the setAlphaBlendConstants of the babylon engine\r\n     */\r\n    @serialize()\r\n    public alphaConstants: Color4;\r\n    /**\r\n     * Animations to be used for the post processing\r\n     */\r\n    public animations: Animation[] = [];\r\n\r\n    /**\r\n     * Enable Pixel Perfect mode where texture is not scaled to be power of 2.\r\n     * Can only be used on a single postprocess or on the last one of a chain. (default: false)\r\n     */\r\n    @serialize()\r\n    public enablePixelPerfectMode = false;\r\n\r\n    /**\r\n     * Force the postprocess to be applied without taking in account viewport\r\n     */\r\n    @serialize()\r\n    public forceFullscreenViewport = true;\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector#extensibility\r\n     */\r\n    public inspectableCustomProperties: IInspectable[];\r\n\r\n    /**\r\n     * Scale mode for the post process (default: Engine.SCALEMODE_FLOOR)\r\n     *\r\n     * | Value | Type                                | Description |\r\n     * | ----- | ----------------------------------- | ----------- |\r\n     * | 1     | SCALEMODE_FLOOR                     | [engine.scalemode_floor](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_floor) |\r\n     * | 2     | SCALEMODE_NEAREST                   | [engine.scalemode_nearest](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_nearest) |\r\n     * | 3     | SCALEMODE_CEILING                   | [engine.scalemode_ceiling](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_ceiling) |\r\n     *\r\n     */\r\n    @serialize()\r\n    public scaleMode = Constants.SCALEMODE_FLOOR;\r\n    /**\r\n     * Force textures to be a power of two (default: false)\r\n     */\r\n    @serialize()\r\n    public alwaysForcePOT = false;\r\n\r\n    @serialize(\"samples\")\r\n    private _samples = 1;\r\n\r\n    /**\r\n     * Number of sample textures (default: 1)\r\n     */\r\n    public get samples() {\r\n        return this._samples;\r\n    }\r\n\r\n    public set samples(n: number) {\r\n        this._samples = Math.min(n, this._engine.getCaps().maxMSAASamples);\r\n\r\n        this._textures.forEach((texture) => {\r\n            texture.setSamples(this._samples);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Modify the scale of the post process to be the same as the viewport (default: false)\r\n     */\r\n    @serialize()\r\n    public adaptScaleToCurrentViewport = false;\r\n\r\n    private _camera: Camera;\r\n    protected _scene: Scene;\r\n    private _engine: Engine;\r\n\r\n    private _options: number | { width: number; height: number };\r\n    private _reusable = false;\r\n    private _renderId = 0;\r\n    private _textureType: number;\r\n    private _textureFormat: number;\r\n    private _shaderLanguage: ShaderLanguage;\r\n\r\n    /**\r\n     * if externalTextureSamplerBinding is true, the \"apply\" method won't bind the textureSampler texture, it is expected to be done by the \"outside\" (by the onApplyObservable observer most probably).\r\n     * counter-productive in some cases because if the texture bound by \"apply\" is different from the currently texture bound, (the one set by the onApplyObservable observer, for eg) some\r\n     * internal structures (materialContext) will be dirtified, which may impact performances\r\n     */\r\n    public externalTextureSamplerBinding = false;\r\n\r\n    /**\r\n     * Smart array of input and output textures for the post process.\r\n     * @internal\r\n     */\r\n    public _textures = new SmartArray<RenderTargetWrapper>(2);\r\n    /**\r\n     * Smart array of input and output textures for the post process.\r\n     * @internal\r\n     */\r\n    private _textureCache: TextureCache[] = [];\r\n    /**\r\n     * The index in _textures that corresponds to the output texture.\r\n     * @internal\r\n     */\r\n    public _currentRenderTextureInd = 0;\r\n    private _drawWrapper: DrawWrapper;\r\n    private _samplers: string[];\r\n    private _fragmentUrl: string;\r\n    private _vertexUrl: string;\r\n    private _parameters: string[];\r\n    private _uniformBuffers: string[];\r\n    protected _postProcessDefines: Nullable<string>;\r\n    private _scaleRatio = new Vector2(1, 1);\r\n    protected _indexParameters: any;\r\n    private _shareOutputWithPostProcess: Nullable<PostProcess>;\r\n    private _texelSize = Vector2.Zero();\r\n\r\n    /** @internal */\r\n    public _forcedOutputTexture: Nullable<RenderTargetWrapper>;\r\n\r\n    /**\r\n     * Prepass configuration in case this post process needs a texture from prepass\r\n     * @internal\r\n     */\r\n    public _prePassEffectConfiguration: PrePassEffectConfiguration;\r\n\r\n    /**\r\n     * Returns the fragment url or shader name used in the post process.\r\n     * @returns the fragment url or name in the shader store.\r\n     */\r\n    public getEffectName(): string {\r\n        return this._fragmentUrl;\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * An event triggered when the postprocess is activated.\r\n     */\r\n    public onActivateObservable = new Observable<Camera>();\r\n\r\n    private _onActivateObserver: Nullable<Observer<Camera>>;\r\n    /**\r\n     * A function that is added to the onActivateObservable\r\n     */\r\n    public set onActivate(callback: Nullable<(camera: Camera) => void>) {\r\n        if (this._onActivateObserver) {\r\n            this.onActivateObservable.remove(this._onActivateObserver);\r\n        }\r\n        if (callback) {\r\n            this._onActivateObserver = this.onActivateObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the postprocess changes its size.\r\n     */\r\n    public onSizeChangedObservable = new Observable<PostProcess>();\r\n\r\n    private _onSizeChangedObserver: Nullable<Observer<PostProcess>>;\r\n    /**\r\n     * A function that is added to the onSizeChangedObservable\r\n     */\r\n    public set onSizeChanged(callback: (postProcess: PostProcess) => void) {\r\n        if (this._onSizeChangedObserver) {\r\n            this.onSizeChangedObservable.remove(this._onSizeChangedObserver);\r\n        }\r\n        this._onSizeChangedObserver = this.onSizeChangedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the postprocess applies its effect.\r\n     */\r\n    public onApplyObservable = new Observable<Effect>();\r\n\r\n    private _onApplyObserver: Nullable<Observer<Effect>>;\r\n    /**\r\n     * A function that is added to the onApplyObservable\r\n     */\r\n    public set onApply(callback: (effect: Effect) => void) {\r\n        if (this._onApplyObserver) {\r\n            this.onApplyObservable.remove(this._onApplyObserver);\r\n        }\r\n        this._onApplyObserver = this.onApplyObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered before rendering the postprocess\r\n     */\r\n    public onBeforeRenderObservable = new Observable<Effect>();\r\n\r\n    private _onBeforeRenderObserver: Nullable<Observer<Effect>>;\r\n    /**\r\n     * A function that is added to the onBeforeRenderObservable\r\n     */\r\n    public set onBeforeRender(callback: (effect: Effect) => void) {\r\n        if (this._onBeforeRenderObserver) {\r\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n        }\r\n        this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering the postprocess\r\n     */\r\n    public onAfterRenderObservable = new Observable<Effect>();\r\n\r\n    private _onAfterRenderObserver: Nullable<Observer<Effect>>;\r\n    /**\r\n     * A function that is added to the onAfterRenderObservable\r\n     */\r\n    public set onAfterRender(callback: (efect: Effect) => void) {\r\n        if (this._onAfterRenderObserver) {\r\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\r\n        }\r\n        this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * The input texture for this post process and the output texture of the previous post process. When added to a pipeline the previous post process will\r\n     * render it's output into this texture and this texture will be used as textureSampler in the fragment shader of this post process.\r\n     */\r\n    public get inputTexture(): RenderTargetWrapper {\r\n        return this._textures.data[this._currentRenderTextureInd];\r\n    }\r\n\r\n    public set inputTexture(value: RenderTargetWrapper) {\r\n        this._forcedOutputTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Since inputTexture should always be defined, if we previously manually set `inputTexture`,\r\n     * the only way to unset it is to use this function to restore its internal state\r\n     */\r\n    public restoreDefaultInputTexture() {\r\n        if (this._forcedOutputTexture) {\r\n            this._forcedOutputTexture = null;\r\n            this.markTextureDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the camera which post process is applied to.\r\n     * @returns The camera the post process is applied to.\r\n     */\r\n    public getCamera(): Camera {\r\n        return this._camera;\r\n    }\r\n\r\n    /**\r\n     * Gets the texel size of the postprocess.\r\n     * See https://en.wikipedia.org/wiki/Texel_(graphics)\r\n     */\r\n    public get texelSize(): Vector2 {\r\n        if (this._shareOutputWithPostProcess) {\r\n            return this._shareOutputWithPostProcess.texelSize;\r\n        }\r\n\r\n        if (this._forcedOutputTexture) {\r\n            this._texelSize.copyFromFloats(1.0 / this._forcedOutputTexture.width, 1.0 / this._forcedOutputTexture.height);\r\n        }\r\n\r\n        return this._texelSize;\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance PostProcess\r\n     * @param name The name of the PostProcess.\r\n     * @param fragmentUrl The url of the fragment shader to be used.\r\n     * @param options The options to be used when constructing the post process.\r\n     */\r\n    constructor(name: string, fragmentUrl: string, options?: PostProcessOptions);\r\n\r\n    /**\r\n     * Creates a new instance PostProcess\r\n     * @param name The name of the PostProcess.\r\n     * @param fragmentUrl The url of the fragment shader to be used.\r\n     * @param parameters Array of the names of uniform non-sampler2D variables that will be passed to the shader.\r\n     * @param samplers Array of the names of uniform sampler2D variables that will be passed to the shader.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param defines String of defines that will be set when running the fragment shader. (default: null)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param vertexUrl The url of the vertex shader to be used. (default: \"postprocess\")\r\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n     * @param blockCompilation If the shader should not be compiled immediatly. (default: false)\r\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\r\n     * @param shaderLanguage The shader language of the shader. (default: GLSL)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        fragmentUrl: string,\r\n        parameters: Nullable<string[]>,\r\n        samplers: Nullable<string[]>,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        defines?: Nullable<string>,\r\n        textureType?: number,\r\n        vertexUrl?: string,\r\n        indexParameters?: any,\r\n        blockCompilation?: boolean,\r\n        textureFormat?: number,\r\n        shaderLanguage?: ShaderLanguage\r\n    );\r\n\r\n    /** @internal */\r\n    constructor(\r\n        name: string,\r\n        fragmentUrl: string,\r\n        parameters?: Nullable<string[]> | PostProcessOptions,\r\n        samplers?: Nullable<string[]>,\r\n        _size?: number | PostProcessOptions,\r\n        camera?: Nullable<Camera>,\r\n        samplingMode: number = Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        defines: Nullable<string> = null,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        vertexUrl: string = \"postprocess\",\r\n        indexParameters?: any,\r\n        blockCompilation = false,\r\n        textureFormat = Constants.TEXTUREFORMAT_RGBA,\r\n        shaderLanguage = ShaderLanguage.GLSL\r\n    ) {\r\n        this.name = name;\r\n        let size: number | { width: number; height: number } = 1;\r\n        let uniformBuffers: Nullable<string[]> = null;\r\n        if (parameters && !Array.isArray(parameters)) {\r\n            const options = parameters;\r\n            parameters = options.uniforms ?? null;\r\n            samplers = options.samplers ?? null;\r\n            size = options.size ?? 1;\r\n            camera = options.camera ?? null;\r\n            samplingMode = options.samplingMode ?? Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n            engine = options.engine;\r\n            reusable = options.reusable;\r\n            defines = options.defines ?? null;\r\n            textureType = options.textureType ?? Constants.TEXTURETYPE_UNSIGNED_INT;\r\n            vertexUrl = options.vertexUrl ?? \"postprocess\";\r\n            indexParameters = options.indexParameters;\r\n            blockCompilation = options.blockCompilation ?? false;\r\n            textureFormat = options.textureFormat ?? Constants.TEXTUREFORMAT_RGBA;\r\n            shaderLanguage = options.shaderLanguage ?? ShaderLanguage.GLSL;\r\n            uniformBuffers = options.uniformBuffers ?? null;\r\n        } else if (_size) {\r\n            if (typeof _size === \"number\") {\r\n                size = _size;\r\n            } else {\r\n                size = { width: _size.width!, height: _size.height! };\r\n            }\r\n        }\r\n\r\n        if (camera != null) {\r\n            this._camera = camera;\r\n            this._scene = camera.getScene();\r\n            camera.attachPostProcess(this);\r\n            this._engine = this._scene.getEngine();\r\n\r\n            this._scene.postProcesses.push(this);\r\n            this.uniqueId = this._scene.getUniqueId();\r\n        } else if (engine) {\r\n            this._engine = engine;\r\n            this._engine.postProcesses.push(this);\r\n        }\r\n\r\n        this._options = size;\r\n        this.renderTargetSamplingMode = samplingMode ? samplingMode : Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        this._reusable = reusable || false;\r\n        this._textureType = textureType;\r\n        this._textureFormat = textureFormat;\r\n        this._shaderLanguage = shaderLanguage;\r\n\r\n        this._samplers = samplers || [];\r\n        this._samplers.push(\"textureSampler\");\r\n\r\n        this._fragmentUrl = fragmentUrl;\r\n        this._vertexUrl = vertexUrl;\r\n        this._parameters = parameters || [];\r\n\r\n        this._parameters.push(\"scale\");\r\n        this._uniformBuffers = uniformBuffers || [];\r\n\r\n        this._indexParameters = indexParameters;\r\n        this._drawWrapper = new DrawWrapper(this._engine);\r\n\r\n        if (!blockCompilation) {\r\n            this.updateEffect(defines);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"PostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"PostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Gets the engine which this post process belongs to.\r\n     * @returns The engine the post process was enabled with.\r\n     */\r\n    public getEngine(): Engine {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * The effect that is created when initializing the post process.\r\n     * @returns The created effect corresponding the postprocess.\r\n     */\r\n    public getEffect(): Effect {\r\n        return this._drawWrapper.effect!;\r\n    }\r\n\r\n    /**\r\n     * To avoid multiple redundant textures for multiple post process, the output the output texture for this post process can be shared with another.\r\n     * @param postProcess The post process to share the output with.\r\n     * @returns This post process.\r\n     */\r\n    public shareOutputWith(postProcess: PostProcess): PostProcess {\r\n        this._disposeTextures();\r\n\r\n        this._shareOutputWithPostProcess = postProcess;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reverses the effect of calling shareOutputWith and returns the post process back to its original state.\r\n     * This should be called if the post process that shares output with this post process is disabled/disposed.\r\n     */\r\n    public useOwnOutput() {\r\n        if (this._textures.length == 0) {\r\n            this._textures = new SmartArray<RenderTargetWrapper>(2);\r\n        }\r\n\r\n        this._shareOutputWithPostProcess = null;\r\n    }\r\n\r\n    /**\r\n     * Updates the effect with the current post process compile time values and recompiles the shader.\r\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\r\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\r\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\r\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n     * @param onCompiled Called when the shader has been compiled.\r\n     * @param onError Called if there is an error when compiling a shader.\r\n     * @param vertexUrl The url of the vertex shader to be used (default: the one given at construction time)\r\n     * @param fragmentUrl The url of the fragment shader to be used (default: the one given at construction time)\r\n     */\r\n    public updateEffect(\r\n        defines: Nullable<string> = null,\r\n        uniforms: Nullable<string[]> = null,\r\n        samplers: Nullable<string[]> = null,\r\n        indexParameters?: any,\r\n        onCompiled?: (effect: Effect) => void,\r\n        onError?: (effect: Effect, errors: string) => void,\r\n        vertexUrl?: string,\r\n        fragmentUrl?: string\r\n    ) {\r\n        const customShaderCodeProcessing = PostProcess._GetShaderCodeProcessing(this.name);\r\n        if (customShaderCodeProcessing?.defineCustomBindings) {\r\n            const newUniforms = uniforms?.slice() ?? [];\r\n            newUniforms.push(...this._parameters);\r\n\r\n            const newSamplers = samplers?.slice() ?? [];\r\n            newSamplers.push(...this._samplers);\r\n\r\n            defines = customShaderCodeProcessing.defineCustomBindings(this.name, defines, newUniforms, newSamplers);\r\n            uniforms = newUniforms;\r\n            samplers = newSamplers;\r\n        }\r\n        this._postProcessDefines = defines;\r\n        this._drawWrapper.effect = this._engine.createEffect(\r\n            { vertex: vertexUrl ?? this._vertexUrl, fragment: fragmentUrl ?? this._fragmentUrl },\r\n            {\r\n                attributes: [\"position\"],\r\n                uniformsNames: uniforms || this._parameters,\r\n                uniformBuffersNames: this._uniformBuffers,\r\n                samplers: samplers || this._samplers,\r\n                defines: defines !== null ? defines : \"\",\r\n                fallbacks: null,\r\n                onCompiled: onCompiled ?? null,\r\n                onError: onError ?? null,\r\n                indexParameters: indexParameters || this._indexParameters,\r\n                processCodeAfterIncludes: customShaderCodeProcessing?.processCodeAfterIncludes\r\n                    ? (shaderType: string, code: string) => customShaderCodeProcessing!.processCodeAfterIncludes!(this.name, shaderType, code)\r\n                    : null,\r\n                processFinalCode: customShaderCodeProcessing?.processFinalCode\r\n                    ? (shaderType: string, code: string) => customShaderCodeProcessing!.processFinalCode!(this.name, shaderType, code)\r\n                    : null,\r\n                shaderLanguage: this._shaderLanguage,\r\n            },\r\n            this._engine\r\n        );\r\n    }\r\n\r\n    /**\r\n     * The post process is reusable if it can be used multiple times within one frame.\r\n     * @returns If the post process is reusable\r\n     */\r\n    public isReusable(): boolean {\r\n        return this._reusable;\r\n    }\r\n\r\n    /** invalidate frameBuffer to hint the postprocess to create a depth buffer */\r\n    public markTextureDirty(): void {\r\n        this.width = -1;\r\n    }\r\n\r\n    private _createRenderTargetTexture(textureSize: { width: number; height: number }, textureOptions: RenderTargetCreationOptions, channel = 0) {\r\n        for (let i = 0; i < this._textureCache.length; i++) {\r\n            if (\r\n                this._textureCache[i].texture.width === textureSize.width &&\r\n                this._textureCache[i].texture.height === textureSize.height &&\r\n                this._textureCache[i].postProcessChannel === channel &&\r\n                this._textureCache[i].texture._generateDepthBuffer === textureOptions.generateDepthBuffer &&\r\n                this._textureCache[i].texture.samples === textureOptions.samples\r\n            ) {\r\n                return this._textureCache[i].texture;\r\n            }\r\n        }\r\n\r\n        const tex = this._engine.createRenderTargetTexture(textureSize, textureOptions);\r\n        this._textureCache.push({ texture: tex, postProcessChannel: channel, lastUsedRenderId: -1 });\r\n\r\n        return tex;\r\n    }\r\n\r\n    private _flushTextureCache() {\r\n        const currentRenderId = this._renderId;\r\n\r\n        for (let i = this._textureCache.length - 1; i >= 0; i--) {\r\n            if (currentRenderId - this._textureCache[i].lastUsedRenderId > 100) {\r\n                let currentlyUsed = false;\r\n                for (let j = 0; j < this._textures.length; j++) {\r\n                    if (this._textures.data[j] === this._textureCache[i].texture) {\r\n                        currentlyUsed = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!currentlyUsed) {\r\n                    this._textureCache[i].texture.dispose();\r\n                    this._textureCache.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resizes the post-process texture\r\n     * @param width Width of the texture\r\n     * @param height Height of the texture\r\n     * @param camera The camera this post-process is applied to. Pass null if the post-process is used outside the context of a camera post-process chain (default: null)\r\n     * @param needMipMaps True if mip maps need to be generated after render (default: false)\r\n     * @param forceDepthStencil True to force post-process texture creation with stencil depth and buffer (default: false)\r\n     */\r\n    public resize(width: number, height: number, camera: Nullable<Camera> = null, needMipMaps = false, forceDepthStencil = false) {\r\n        if (this._textures.length > 0) {\r\n            this._textures.reset();\r\n        }\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        let firstPP = null;\r\n        if (camera) {\r\n            for (let i = 0; i < camera._postProcesses.length; i++) {\r\n                if (camera._postProcesses[i] !== null) {\r\n                    firstPP = camera._postProcesses[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const textureSize = { width: this.width, height: this.height };\r\n        const textureOptions = {\r\n            generateMipMaps: needMipMaps,\r\n            generateDepthBuffer: forceDepthStencil || firstPP === this,\r\n            generateStencilBuffer: (forceDepthStencil || firstPP === this) && this._engine.isStencilEnable,\r\n            samplingMode: this.renderTargetSamplingMode,\r\n            type: this._textureType,\r\n            format: this._textureFormat,\r\n            samples: this._samples,\r\n            label: \"PostProcessRTT-\" + this.name,\r\n        };\r\n\r\n        this._textures.push(this._createRenderTargetTexture(textureSize, textureOptions, 0));\r\n\r\n        if (this._reusable) {\r\n            this._textures.push(this._createRenderTargetTexture(textureSize, textureOptions, 1));\r\n        }\r\n\r\n        this._texelSize.copyFromFloats(1.0 / this.width, 1.0 / this.height);\r\n\r\n        this.onSizeChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    private _getTarget() {\r\n        let target: RenderTargetWrapper;\r\n\r\n        if (this._shareOutputWithPostProcess) {\r\n            target = this._shareOutputWithPostProcess.inputTexture;\r\n        } else if (this._forcedOutputTexture) {\r\n            target = this._forcedOutputTexture;\r\n\r\n            this.width = this._forcedOutputTexture.width;\r\n            this.height = this._forcedOutputTexture.height;\r\n        } else {\r\n            target = this.inputTexture;\r\n\r\n            let cache;\r\n            for (let i = 0; i < this._textureCache.length; i++) {\r\n                if (this._textureCache[i].texture === target) {\r\n                    cache = this._textureCache[i];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (cache) {\r\n                cache.lastUsedRenderId = this._renderId;\r\n            }\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * Activates the post process by intializing the textures to be used when executed. Notifies onActivateObservable.\r\n     * When this post process is used in a pipeline, this is call will bind the input texture of this post process to the output of the previous.\r\n     * @param camera The camera that will be used in the post process. This camera will be used when calling onActivateObservable.\r\n     * @param sourceTexture The source texture to be inspected to get the width and height if not specified in the post process constructor. (default: null)\r\n     * @param forceDepthStencil If true, a depth and stencil buffer will be generated. (default: false)\r\n     * @returns The render target wrapper that was bound to be written to.\r\n     */\r\n    public activate(camera: Nullable<Camera>, sourceTexture: Nullable<InternalTexture> = null, forceDepthStencil?: boolean): RenderTargetWrapper {\r\n        camera = camera || this._camera;\r\n\r\n        const scene = camera.getScene();\r\n        const engine = scene.getEngine();\r\n        const maxSize = engine.getCaps().maxTextureSize;\r\n\r\n        const requiredWidth = ((sourceTexture ? sourceTexture.width : this._engine.getRenderWidth(true)) * <number>this._options) | 0;\r\n        const requiredHeight = ((sourceTexture ? sourceTexture.height : this._engine.getRenderHeight(true)) * <number>this._options) | 0;\r\n\r\n        let desiredWidth = (<PostProcessOptions>this._options).width || requiredWidth;\r\n        let desiredHeight = (<PostProcessOptions>this._options).height || requiredHeight;\r\n\r\n        const needMipMaps =\r\n            this.renderTargetSamplingMode !== Constants.TEXTURE_NEAREST_LINEAR &&\r\n            this.renderTargetSamplingMode !== Constants.TEXTURE_NEAREST_NEAREST &&\r\n            this.renderTargetSamplingMode !== Constants.TEXTURE_LINEAR_LINEAR;\r\n\r\n        let target: Nullable<RenderTargetWrapper> = null;\r\n\r\n        if (!this._shareOutputWithPostProcess && !this._forcedOutputTexture) {\r\n            if (this.adaptScaleToCurrentViewport) {\r\n                const currentViewport = engine.currentViewport;\r\n\r\n                if (currentViewport) {\r\n                    desiredWidth *= currentViewport.width;\r\n                    desiredHeight *= currentViewport.height;\r\n                }\r\n            }\r\n\r\n            if (needMipMaps || this.alwaysForcePOT) {\r\n                if (!(<PostProcessOptions>this._options).width) {\r\n                    desiredWidth = engine.needPOTTextures ? Engine.GetExponentOfTwo(desiredWidth, maxSize, this.scaleMode) : desiredWidth;\r\n                }\r\n\r\n                if (!(<PostProcessOptions>this._options).height) {\r\n                    desiredHeight = engine.needPOTTextures ? Engine.GetExponentOfTwo(desiredHeight, maxSize, this.scaleMode) : desiredHeight;\r\n                }\r\n            }\r\n\r\n            if (this.width !== desiredWidth || this.height !== desiredHeight || !(target = this._getTarget())) {\r\n                this.resize(desiredWidth, desiredHeight, camera, needMipMaps, forceDepthStencil);\r\n            }\r\n\r\n            this._textures.forEach((texture) => {\r\n                if (texture.samples !== this.samples) {\r\n                    this._engine.updateRenderTargetTextureSampleCount(texture, this.samples);\r\n                }\r\n            });\r\n\r\n            this._flushTextureCache();\r\n            this._renderId++;\r\n        }\r\n\r\n        if (!target) {\r\n            target = this._getTarget();\r\n        }\r\n\r\n        // Bind the input of this post process to be used as the output of the previous post process.\r\n        if (this.enablePixelPerfectMode) {\r\n            this._scaleRatio.copyFromFloats(requiredWidth / desiredWidth, requiredHeight / desiredHeight);\r\n            this._engine.bindFramebuffer(target, 0, requiredWidth, requiredHeight, this.forceFullscreenViewport);\r\n        } else {\r\n            this._scaleRatio.copyFromFloats(1, 1);\r\n            this._engine.bindFramebuffer(target, 0, undefined, undefined, this.forceFullscreenViewport);\r\n        }\r\n\r\n        this._engine._debugInsertMarker?.(`post process ${this.name} input`);\r\n\r\n        this.onActivateObservable.notifyObservers(camera);\r\n\r\n        // Clear\r\n        if (this.autoClear && (this.alphaMode === Constants.ALPHA_DISABLE || this.forceAutoClearInAlphaMode)) {\r\n            this._engine.clear(this.clearColor ? this.clearColor : scene.clearColor, scene._allowPostProcessClearColor, true, true);\r\n        }\r\n\r\n        if (this._reusable) {\r\n            this._currentRenderTextureInd = (this._currentRenderTextureInd + 1) % 2;\r\n        }\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * If the post process is supported.\r\n     */\r\n    public get isSupported(): boolean {\r\n        return this._drawWrapper.effect!.isSupported;\r\n    }\r\n\r\n    /**\r\n     * The aspect ratio of the output texture.\r\n     */\r\n    public get aspectRatio(): number {\r\n        if (this._shareOutputWithPostProcess) {\r\n            return this._shareOutputWithPostProcess.aspectRatio;\r\n        }\r\n\r\n        if (this._forcedOutputTexture) {\r\n            return this._forcedOutputTexture.width / this._forcedOutputTexture.height;\r\n        }\r\n        return this.width / this.height;\r\n    }\r\n\r\n    /**\r\n     * Get a value indicating if the post-process is ready to be used\r\n     * @returns true if the post-process is ready (shader is compiled)\r\n     */\r\n    public isReady(): boolean {\r\n        return this._drawWrapper.effect?.isReady() ?? false;\r\n    }\r\n\r\n    /**\r\n     * Binds all textures and uniforms to the shader, this will be run on every pass.\r\n     * @returns the effect corresponding to this post process. Null if not compiled or not ready.\r\n     */\r\n    public apply(): Nullable<Effect> {\r\n        // Check\r\n        if (!this._drawWrapper.effect?.isReady()) {\r\n            return null;\r\n        }\r\n\r\n        // States\r\n        this._engine.enableEffect(this._drawWrapper);\r\n        this._engine.setState(false);\r\n        this._engine.setDepthBuffer(false);\r\n        this._engine.setDepthWrite(false);\r\n\r\n        // Alpha\r\n        this._engine.setAlphaMode(this.alphaMode);\r\n        if (this.alphaConstants) {\r\n            this.getEngine().setAlphaConstants(this.alphaConstants.r, this.alphaConstants.g, this.alphaConstants.b, this.alphaConstants.a);\r\n        }\r\n\r\n        // Bind the output texture of the preivous post process as the input to this post process.\r\n        let source: RenderTargetWrapper;\r\n        if (this._shareOutputWithPostProcess) {\r\n            source = this._shareOutputWithPostProcess.inputTexture;\r\n        } else if (this._forcedOutputTexture) {\r\n            source = this._forcedOutputTexture;\r\n        } else {\r\n            source = this.inputTexture;\r\n        }\r\n\r\n        if (!this.externalTextureSamplerBinding) {\r\n            this._drawWrapper.effect._bindTexture(\"textureSampler\", source?.texture);\r\n        }\r\n\r\n        // Parameters\r\n        this._drawWrapper.effect.setVector2(\"scale\", this._scaleRatio);\r\n        this.onApplyObservable.notifyObservers(this._drawWrapper.effect);\r\n\r\n        PostProcess._GetShaderCodeProcessing(this.name)?.bindCustomBindings?.(this.name, this._drawWrapper.effect);\r\n\r\n        return this._drawWrapper.effect;\r\n    }\r\n\r\n    private _disposeTextures() {\r\n        if (this._shareOutputWithPostProcess || this._forcedOutputTexture) {\r\n            this._disposeTextureCache();\r\n            return;\r\n        }\r\n\r\n        this._disposeTextureCache();\r\n        this._textures.dispose();\r\n    }\r\n\r\n    private _disposeTextureCache() {\r\n        for (let i = this._textureCache.length - 1; i >= 0; i--) {\r\n            this._textureCache[i].texture.dispose();\r\n        }\r\n\r\n        this._textureCache.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the required values to the prepass renderer.\r\n     * @param prePassRenderer defines the prepass renderer to setup.\r\n     * @returns true if the pre pass is needed.\r\n     */\r\n    public setPrePassRenderer(prePassRenderer: PrePassRenderer): boolean {\r\n        if (this._prePassEffectConfiguration) {\r\n            this._prePassEffectConfiguration = prePassRenderer.addEffectConfiguration(this._prePassEffectConfiguration);\r\n            this._prePassEffectConfiguration.enabled = true;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the post process.\r\n     * @param camera The camera to dispose the post process on.\r\n     */\r\n    public dispose(camera?: Camera): void {\r\n        camera = camera || this._camera;\r\n\r\n        this._disposeTextures();\r\n\r\n        let index;\r\n        if (this._scene) {\r\n            index = this._scene.postProcesses.indexOf(this);\r\n            if (index !== -1) {\r\n                this._scene.postProcesses.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.postProcesses.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.postProcesses.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        index = this._engine.postProcesses.indexOf(this);\r\n        if (index !== -1) {\r\n            this._engine.postProcesses.splice(index, 1);\r\n        }\r\n\r\n        if (!camera) {\r\n            return;\r\n        }\r\n        camera.detachPostProcess(this);\r\n\r\n        index = camera._postProcesses.indexOf(this);\r\n        if (index === 0 && camera._postProcesses.length > 0) {\r\n            const firstPostProcess = this._camera._getFirstPostProcess();\r\n            if (firstPostProcess) {\r\n                firstPostProcess.markTextureDirty();\r\n            }\r\n        }\r\n\r\n        this.onActivateObservable.clear();\r\n        this.onAfterRenderObservable.clear();\r\n        this.onApplyObservable.clear();\r\n        this.onBeforeRenderObservable.clear();\r\n        this.onSizeChangedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Serializes the post process to a JSON object\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        const camera = this.getCamera() || (this._scene && this._scene.activeCamera);\r\n        serializationObject.customType = \"BABYLON.\" + this.getClassName();\r\n        serializationObject.cameraId = camera ? camera.id : null;\r\n        serializationObject.reusable = this._reusable;\r\n        serializationObject.textureType = this._textureType;\r\n        serializationObject.fragmentUrl = this._fragmentUrl;\r\n        serializationObject.parameters = this._parameters;\r\n        serializationObject.samplers = this._samplers;\r\n        serializationObject.options = this._options;\r\n        serializationObject.defines = this._postProcessDefines;\r\n        serializationObject.textureFormat = this._textureFormat;\r\n        serializationObject.vertexUrl = this._vertexUrl;\r\n        serializationObject.indexParameters = this._indexParameters;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Clones this post process\r\n     * @returns a new post process similar to this one\r\n     */\r\n    public clone(): Nullable<PostProcess> {\r\n        const serializationObject = this.serialize();\r\n        serializationObject._engine = this._engine;\r\n        serializationObject.cameraId = null;\r\n\r\n        const result = PostProcess.Parse(serializationObject, this._scene, \"\");\r\n\r\n        if (!result) {\r\n            return null;\r\n        }\r\n\r\n        result.onActivateObservable = this.onActivateObservable.clone();\r\n        result.onSizeChangedObservable = this.onSizeChangedObservable.clone();\r\n        result.onApplyObservable = this.onApplyObservable.clone();\r\n        result.onBeforeRenderObservable = this.onBeforeRenderObservable.clone();\r\n        result.onAfterRenderObservable = this.onAfterRenderObservable.clone();\r\n\r\n        result._prePassEffectConfiguration = this._prePassEffectConfiguration;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a material from parsed material data\r\n     * @param parsedPostProcess defines parsed post process data\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures\r\n     * @returns a new post process\r\n     */\r\n    public static Parse(parsedPostProcess: any, scene: Scene, rootUrl: string): Nullable<PostProcess> {\r\n        const postProcessType = GetClass(parsedPostProcess.customType);\r\n\r\n        if (!postProcessType || !postProcessType._Parse) {\r\n            return null;\r\n        }\r\n\r\n        const camera = scene ? scene.getCameraById(parsedPostProcess.cameraId) : null;\r\n        return postProcessType._Parse(parsedPostProcess, camera, scene, rootUrl);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<PostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new PostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.fragmentUrl,\r\n                    parsedPostProcess.parameters,\r\n                    parsedPostProcess.samplers,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    parsedPostProcess._engine,\r\n                    parsedPostProcess.reusable,\r\n                    parsedPostProcess.defines,\r\n                    parsedPostProcess.textureType,\r\n                    parsedPostProcess.vertexUrl,\r\n                    parsedPostProcess.indexParameters,\r\n                    false,\r\n                    parsedPostProcess.textureFormat\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PostProcess\", PostProcess);\r\n", "import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\n/**\r\n * Block used to create a Vector2/3/4 out of individual inputs (one for each component)\r\n */\r\nexport class VectorMergerBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the swizzle for x (meaning which component to affect to the output.x)\r\n     */\r\n    public xSwizzle: \"x\" | \"y\" | \"z\" | \"w\" = \"x\";\r\n    /**\r\n     * Gets or sets the swizzle for y (meaning which component to affect to the output.y)\r\n     */\r\n    public ySwizzle: \"x\" | \"y\" | \"z\" | \"w\" = \"y\";\r\n    /**\r\n     * Gets or sets the swizzle for z (meaning which component to affect to the output.z)\r\n     */\r\n    public zSwizzle: \"x\" | \"y\" | \"z\" | \"w\" = \"z\";\r\n    /**\r\n     * Gets or sets the swizzle for w (meaning which component to affect to the output.w)\r\n     */\r\n    public wSwizzle: \"x\" | \"y\" | \"z\" | \"w\" = \"w\";\r\n\r\n    /**\r\n     * Create a new VectorMergerBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"xyzw \", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"xyz \", NodeMaterialBlockConnectionPointTypes.Vector3, true);\r\n        this.registerInput(\"xy \", NodeMaterialBlockConnectionPointTypes.Vector2, true);\r\n        this.registerInput(\"zw \", NodeMaterialBlockConnectionPointTypes.Vector2, true);\r\n        this.registerInput(\"x\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"y\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"z\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"w\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n\r\n        this.registerOutput(\"xyzw\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n        this.registerOutput(\"xy\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerOutput(\"zw\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"VectorMergerBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the xyzw component (input)\r\n     */\r\n    public get xyzwIn(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the xyz component (input)\r\n     */\r\n    public get xyzIn(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the xy component (input)\r\n     */\r\n    public get xyIn(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the zw component (input)\r\n     */\r\n    public get zwIn(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the x component (input)\r\n     */\r\n    public get x(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the y component (input)\r\n     */\r\n    public get y(): NodeMaterialConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the z component (input)\r\n     */\r\n    public get z(): NodeMaterialConnectionPoint {\r\n        return this._inputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the w component (input)\r\n     */\r\n    public get w(): NodeMaterialConnectionPoint {\r\n        return this._inputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the xyzw component (output)\r\n     */\r\n    public get xyzw(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the xyz component (output)\r\n     */\r\n    public get xyzOut(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the xy component (output)\r\n     */\r\n    public get xyOut(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the zw component (output)\r\n     */\r\n    public get zwOut(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the xy component (output)\r\n     * @deprecated Please use xyOut instead.\r\n     */\r\n    public get xy(): NodeMaterialConnectionPoint {\r\n        return this.xyOut;\r\n    }\r\n\r\n    /**\r\n     * Gets the xyz component (output)\r\n     * @deprecated Please use xyzOut instead.\r\n     */\r\n    public get xyz(): NodeMaterialConnectionPoint {\r\n        return this.xyzOut;\r\n    }\r\n\r\n    protected _inputRename(name: string) {\r\n        if (name === \"xyzw \") {\r\n            return \"xyzwIn\";\r\n        }\r\n        if (name === \"xyz \") {\r\n            return \"xyzIn\";\r\n        }\r\n        if (name === \"xy \") {\r\n            return \"xyIn\";\r\n        }\r\n        if (name === \"zw \") {\r\n            return \"zwIn\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    private _buildSwizzle(len: number) {\r\n        const swizzle = this.xSwizzle + this.ySwizzle + this.zSwizzle + this.wSwizzle;\r\n\r\n        return \".\" + swizzle.substr(0, len);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const xInput = this.x;\r\n        const yInput = this.y;\r\n        const zInput = this.z;\r\n        const wInput = this.w;\r\n        const xyInput = this.xyIn;\r\n        const zwInput = this.zwIn;\r\n        const xyzInput = this.xyzIn;\r\n        const xyzwInput = this.xyzwIn;\r\n\r\n        const v4Output = this._outputs[0];\r\n        const v3Output = this._outputs[1];\r\n        const v2Output = this._outputs[2];\r\n        const v2CompOutput = this._outputs[3];\r\n\r\n        if (xyzwInput.isConnected) {\r\n            if (v4Output.hasEndpoints) {\r\n                state.compilationString += this._declareOutput(v4Output, state) + ` = ${xyzwInput.associatedVariableName}${this._buildSwizzle(4)};\\n`;\r\n            }\r\n\r\n            if (v3Output.hasEndpoints) {\r\n                state.compilationString += this._declareOutput(v3Output, state) + ` = ${xyzwInput.associatedVariableName}${this._buildSwizzle(3)};\\n`;\r\n            }\r\n\r\n            if (v2Output.hasEndpoints) {\r\n                state.compilationString += this._declareOutput(v2Output, state) + ` = ${xyzwInput.associatedVariableName}${this._buildSwizzle(2)};\\n`;\r\n            }\r\n        } else if (xyzInput.isConnected) {\r\n            if (v4Output.hasEndpoints) {\r\n                state.compilationString +=\r\n                    this._declareOutput(v4Output, state) +\r\n                    ` = vec4(${xyzInput.associatedVariableName}, ${wInput.isConnected ? this._writeVariable(wInput) : \"0.0\"})${this._buildSwizzle(4)};\\n`;\r\n            }\r\n\r\n            if (v3Output.hasEndpoints) {\r\n                state.compilationString += this._declareOutput(v3Output, state) + ` = ${xyzInput.associatedVariableName}${this._buildSwizzle(3)};\\n`;\r\n            }\r\n\r\n            if (v2Output.hasEndpoints) {\r\n                state.compilationString += this._declareOutput(v2Output, state) + ` = ${xyzInput.associatedVariableName}${this._buildSwizzle(2)};\\n`;\r\n            }\r\n        } else if (xyInput.isConnected) {\r\n            if (v4Output.hasEndpoints) {\r\n                if (zwInput.isConnected) {\r\n                    state.compilationString +=\r\n                        this._declareOutput(v4Output, state) + ` = vec4(${xyInput.associatedVariableName}, ${zwInput.associatedVariableName})${this._buildSwizzle(4)};\\n`;\r\n                } else {\r\n                    state.compilationString +=\r\n                        this._declareOutput(v4Output, state) +\r\n                        ` = vec4(${xyInput.associatedVariableName}, ${zInput.isConnected ? this._writeVariable(zInput) : \"0.0\"}, ${\r\n                            wInput.isConnected ? this._writeVariable(wInput) : \"0.0\"\r\n                        })${this._buildSwizzle(4)};\\n`;\r\n                }\r\n            }\r\n\r\n            if (v3Output.hasEndpoints) {\r\n                state.compilationString +=\r\n                    this._declareOutput(v3Output, state) +\r\n                    ` = vec3(${xyInput.associatedVariableName}, ${zInput.isConnected ? this._writeVariable(zInput) : \"0.0\"})${this._buildSwizzle(3)};\\n`;\r\n            }\r\n\r\n            if (v2Output.hasEndpoints) {\r\n                state.compilationString += this._declareOutput(v2Output, state) + ` = ${xyInput.associatedVariableName}${this._buildSwizzle(2)};\\n`;\r\n            }\r\n\r\n            if (v2CompOutput.hasEndpoints) {\r\n                if (zwInput.isConnected) {\r\n                    state.compilationString += this._declareOutput(v2CompOutput, state) + ` = ${zwInput.associatedVariableName}${this._buildSwizzle(2)};\\n`;\r\n                } else {\r\n                    state.compilationString +=\r\n                        this._declareOutput(v2CompOutput, state) +\r\n                        ` = vec2(${zInput.isConnected ? this._writeVariable(zInput) : \"0.0\"}, ${wInput.isConnected ? this._writeVariable(wInput) : \"0.0\"})${this._buildSwizzle(\r\n                            2\r\n                        )};\\n`;\r\n                }\r\n            }\r\n        } else {\r\n            if (v4Output.hasEndpoints) {\r\n                if (zwInput.isConnected) {\r\n                    state.compilationString +=\r\n                        this._declareOutput(v4Output, state) +\r\n                        ` = vec4(${xInput.isConnected ? this._writeVariable(xInput) : \"0.0\"}, ${yInput.isConnected ? this._writeVariable(yInput) : \"0.0\"}, ${\r\n                            zwInput.associatedVariableName\r\n                        })${this._buildSwizzle(4)};\\n`;\r\n                } else {\r\n                    state.compilationString +=\r\n                        this._declareOutput(v4Output, state) +\r\n                        ` = vec4(${xInput.isConnected ? this._writeVariable(xInput) : \"0.0\"}, ${yInput.isConnected ? this._writeVariable(yInput) : \"0.0\"}, ${\r\n                            zInput.isConnected ? this._writeVariable(zInput) : \"0.0\"\r\n                        }, ${wInput.isConnected ? this._writeVariable(wInput) : \"0.0\"})${this._buildSwizzle(4)};\\n`;\r\n                }\r\n            }\r\n\r\n            if (v3Output.hasEndpoints) {\r\n                state.compilationString +=\r\n                    this._declareOutput(v3Output, state) +\r\n                    ` = vec3(${xInput.isConnected ? this._writeVariable(xInput) : \"0.0\"}, ${yInput.isConnected ? this._writeVariable(yInput) : \"0.0\"}, ${\r\n                        zInput.isConnected ? this._writeVariable(zInput) : \"0.0\"\r\n                    })${this._buildSwizzle(3)};\\n`;\r\n            }\r\n\r\n            if (v2Output.hasEndpoints) {\r\n                state.compilationString +=\r\n                    this._declareOutput(v2Output, state) +\r\n                    ` = vec2(${xInput.isConnected ? this._writeVariable(xInput) : \"0.0\"}, ${yInput.isConnected ? this._writeVariable(yInput) : \"0.0\"})${this._buildSwizzle(2)};\\n`;\r\n            }\r\n\r\n            if (v2CompOutput.hasEndpoints) {\r\n                if (zwInput.isConnected) {\r\n                    state.compilationString += this._declareOutput(v2CompOutput, state) + ` = ${zwInput.associatedVariableName}${this._buildSwizzle(2)};\\n`;\r\n                } else {\r\n                    state.compilationString +=\r\n                        this._declareOutput(v2CompOutput, state) +\r\n                        ` = vec2(${zInput.isConnected ? this._writeVariable(zInput) : \"0.0\"}, ${wInput.isConnected ? this._writeVariable(wInput) : \"0.0\"})${this._buildSwizzle(\r\n                            2\r\n                        )};\\n`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.xSwizzle = this.xSwizzle;\r\n        serializationObject.ySwizzle = this.ySwizzle;\r\n        serializationObject.zSwizzle = this.zSwizzle;\r\n        serializationObject.wSwizzle = this.wSwizzle;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.xSwizzle = serializationObject.xSwizzle ?? \"x\";\r\n        this.ySwizzle = serializationObject.ySwizzle ?? \"y\";\r\n        this.zSwizzle = serializationObject.zSwizzle ?? \"z\";\r\n        this.wSwizzle = serializationObject.wSwizzle ?? \"w\";\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n        codeString += `${this._codeVariableName}.xSwizzle = \"${this.xSwizzle}\";\\n`;\r\n        codeString += `${this._codeVariableName}.ySwizzle = \"${this.ySwizzle}\";\\n`;\r\n        codeString += `${this._codeVariableName}.zSwizzle = \"${this.zSwizzle}\";\\n`;\r\n        codeString += `${this._codeVariableName}.wSwizzle = \"${this.wSwizzle}\";\\n`;\r\n\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.VectorMergerBlock\", VectorMergerBlock);\r\n", "import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { Vector2 } from \"../../../Maths/math.vector\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../../Decorators/nodeDecorator\";\r\n/**\r\n * Block used to remap a float from a range to a new one\r\n */\r\nexport class RemapBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the source range\r\n     */\r\n    @editableInPropertyPage(\"From\", PropertyTypeForEdition.Vector2)\r\n    public sourceRange = new Vector2(-1, 1);\r\n\r\n    /**\r\n     * Gets or sets the target range\r\n     */\r\n    @editableInPropertyPage(\"To\", PropertyTypeForEdition.Vector2)\r\n    public targetRange = new Vector2(0, 1);\r\n\r\n    /**\r\n     * Creates a new RemapBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"sourceMin\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"sourceMax\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"targetMin\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"targetMax\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"RemapBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the source min input component\r\n     */\r\n    public get sourceMin(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the source max input component\r\n     */\r\n    public get sourceMax(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the target min input component\r\n     */\r\n    public get targetMin(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the target max input component\r\n     */\r\n    public get targetMax(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n\r\n        const sourceMin = this.sourceMin.isConnected ? this.sourceMin.associatedVariableName : this._writeFloat(this.sourceRange.x);\r\n        const sourceMax = this.sourceMax.isConnected ? this.sourceMax.associatedVariableName : this._writeFloat(this.sourceRange.y);\r\n\r\n        const targetMin = this.targetMin.isConnected ? this.targetMin.associatedVariableName : this._writeFloat(this.targetRange.x);\r\n        const targetMax = this.targetMax.isConnected ? this.targetMax.associatedVariableName : this._writeFloat(this.targetRange.y);\r\n\r\n        state.compilationString +=\r\n            this._declareOutput(output, state) +\r\n            ` = ${targetMin} + (${this._inputs[0].associatedVariableName} - ${sourceMin}) * (${targetMax} - ${targetMin}) / (${sourceMax} - ${sourceMin});\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.sourceRange = new BABYLON.Vector2(${this.sourceRange.x}, ${this.sourceRange.y});\\n`;\r\n\r\n        codeString += `${this._codeVariableName}.targetRange = new BABYLON.Vector2(${this.targetRange.x}, ${this.targetRange.y});\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.sourceRange = this.sourceRange.asArray();\r\n        serializationObject.targetRange = this.targetRange.asArray();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.sourceRange = Vector2.FromArray(serializationObject.sourceRange);\r\n        this.targetRange = Vector2.FromArray(serializationObject.targetRange);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.RemapBlock\", RemapBlock);\r\n", "import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * Block used to multiply 2 values\r\n */\r\nexport class MultiplyBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new MultiplyBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n        this._linkConnectionTypes(0, 1, true);\r\n\r\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\r\n        this._inputs[1].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"MultiplyBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the left operand input component\r\n     */\r\n    public get left(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the right operand input component\r\n     */\r\n    public get right(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${this.left.associatedVariableName} * ${this.right.associatedVariableName};\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.MultiplyBlock\", MultiplyBlock);\r\n", "/**\r\n * Enum used to define the material modes\r\n */\r\nexport enum NodeMaterialModes {\r\n    /** Regular material */\r\n    Material = 0,\r\n    /** For post process */\r\n    PostProcess = 1,\r\n    /** For particle system */\r\n    Particle = 2,\r\n    /** For procedural texture */\r\n    ProceduralTexture = 3,\r\n}\r\n", "import { MaterialDefines } from \"./materialDefines\";\r\n/**\r\n * Interface to follow in your material defines to integrate easily the\r\n * Image processing functions.\r\n * @internal\r\n */\r\nexport interface IImageProcessingConfigurationDefines {\r\n    IMAGEPROCESSING: boolean;\r\n    VIGNETTE: boolean;\r\n    VIGNETTEBLENDMODEMULTIPLY: boolean;\r\n    VIGNETTEBLENDMODEOPAQUE: boolean;\r\n    TONEMAPPING: boolean;\r\n    TONEMAPPING_ACES: boolean;\r\n    CONTRAST: boolean;\r\n    EXPOSURE: boolean;\r\n    COLORCURVES: boolean;\r\n    COLORGRADING: boolean;\r\n    COLORGRADING3D: boolean;\r\n    SAMPLER3DGREENDEPTH: boolean;\r\n    SAMPLER3DBGRMAP: boolean;\r\n    DITHER: boolean;\r\n    IMAGEPROCESSINGPOSTPROCESS: boolean;\r\n    SKIPFINALCOLORCLAMP: boolean;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ImageProcessingConfigurationDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = false;\r\n    public TONEMAPPING_ACES = false;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public DITHER = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public EXPOSURE = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n", "/* eslint-disable import/no-internal-modules */\r\nimport type { Nullable } from \"../types\";\r\nimport { Vector2, Vector3 } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration\";\r\nimport { ImageProcessingConfigurationDefines } from \"../Materials/imageProcessingConfiguration.defines\";\r\nimport type { ColorGradient, FactorGradient, Color3Gradient, IValueGradient } from \"../Misc/gradients\";\r\nimport type { BoxParticleEmitter } from \"../Particles/EmitterTypes/boxParticleEmitter\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\n\r\nimport \"../Engines/Extensions/engine.dynamicBuffer\";\r\nimport type { IClipPlanesHolder } from \"../Misc/interfaces/iClipPlanesHolder\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport type { Animation } from \"../Animations/animation\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { ProceduralTexture } from \"../Materials/Textures/Procedurals/proceduralTexture\";\r\nimport type { RawTexture } from \"../Materials/Textures/rawTexture\";\r\nimport type { IParticleEmitterType } from \"./EmitterTypes/IParticleEmitterType\";\r\nimport type { PointParticleEmitter } from \"./EmitterTypes/pointParticleEmitter\";\r\nimport type { HemisphericParticleEmitter } from \"./EmitterTypes/hemisphericParticleEmitter\";\r\nimport type { SphereDirectedParticleEmitter, SphereParticleEmitter } from \"./EmitterTypes/sphereParticleEmitter\";\r\nimport type { CylinderDirectedParticleEmitter, CylinderParticleEmitter } from \"./EmitterTypes/cylinderParticleEmitter\";\r\nimport type { ConeParticleEmitter } from \"./EmitterTypes/coneParticleEmitter\";\r\n\r\n/**\r\n * This represents the base class for particle system in Babylon.\r\n * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\r\n * Particles can take different shapes while emitted like box, sphere, cone or you can write your custom function.\r\n * @example https://doc.babylonjs.com/features/featuresDeepDive/particles/particle_system/particle_system_intro\r\n */\r\nexport class BaseParticleSystem implements IClipPlanesHolder {\r\n    /**\r\n     * Source color is added to the destination color without alpha affecting the result\r\n     */\r\n    public static BLENDMODE_ONEONE = 0;\r\n    /**\r\n     * Blend current color and particle color using particle’s alpha\r\n     */\r\n    public static BLENDMODE_STANDARD = 1;\r\n    /**\r\n     * Add current color and particle color multiplied by particle’s alpha\r\n     */\r\n    public static BLENDMODE_ADD = 2;\r\n    /**\r\n     * Multiply current color with particle color\r\n     */\r\n    public static BLENDMODE_MULTIPLY = 3;\r\n\r\n    /**\r\n     * Multiply current color with particle color then add current color and particle color multiplied by particle’s alpha\r\n     */\r\n    public static BLENDMODE_MULTIPLYADD = 4;\r\n\r\n    /**\r\n     * List of animations used by the particle system.\r\n     */\r\n    public animations: Animation[] = [];\r\n\r\n    /**\r\n     * Gets or sets the unique id of the particle system\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * The id of the Particle system.\r\n     */\r\n    public id: string;\r\n\r\n    /**\r\n     * The friendly name of the Particle system.\r\n     */\r\n    public name: string;\r\n\r\n    /**\r\n     * Snippet ID if the particle system was created from the snippet server\r\n     */\r\n    public snippetId: string;\r\n\r\n    /**\r\n     * The rendering group used by the Particle system to chose when to render.\r\n     */\r\n    public renderingGroupId = 0;\r\n\r\n    /**\r\n     * The emitter represents the Mesh or position we are attaching the particle system to.\r\n     */\r\n    public emitter: Nullable<AbstractMesh | Vector3> = Vector3.Zero();\r\n\r\n    /**\r\n     * The maximum number of particles to emit per frame\r\n     */\r\n    public emitRate = 10;\r\n\r\n    /**\r\n     * If you want to launch only a few particles at once, that can be done, as well.\r\n     */\r\n    public manualEmitCount = -1;\r\n\r\n    /**\r\n     * The overall motion speed (0.01 is default update speed, faster updates = faster animation)\r\n     */\r\n    public updateSpeed = 0.01;\r\n\r\n    /**\r\n     * The amount of time the particle system is running (depends of the overall update speed).\r\n     */\r\n    public targetStopDuration = 0;\r\n\r\n    /**\r\n     * Specifies whether the particle system will be disposed once it reaches the end of the animation.\r\n     */\r\n    public disposeOnStop = false;\r\n\r\n    /**\r\n     * Minimum power of emitting particles.\r\n     */\r\n    public minEmitPower = 1;\r\n    /**\r\n     * Maximum power of emitting particles.\r\n     */\r\n    public maxEmitPower = 1;\r\n\r\n    /**\r\n     * Minimum life time of emitting particles.\r\n     */\r\n    public minLifeTime = 1;\r\n    /**\r\n     * Maximum life time of emitting particles.\r\n     */\r\n    public maxLifeTime = 1;\r\n\r\n    /**\r\n     * Minimum Size of emitting particles.\r\n     */\r\n    public minSize = 1;\r\n    /**\r\n     * Maximum Size of emitting particles.\r\n     */\r\n    public maxSize = 1;\r\n\r\n    /**\r\n     * Minimum scale of emitting particles on X axis.\r\n     */\r\n    public minScaleX = 1;\r\n    /**\r\n     * Maximum scale of emitting particles on X axis.\r\n     */\r\n    public maxScaleX = 1;\r\n\r\n    /**\r\n     * Minimum scale of emitting particles on Y axis.\r\n     */\r\n    public minScaleY = 1;\r\n    /**\r\n     * Maximum scale of emitting particles on Y axis.\r\n     */\r\n    public maxScaleY = 1;\r\n\r\n    /**\r\n     * Gets or sets the minimal initial rotation in radians.\r\n     */\r\n    public minInitialRotation = 0;\r\n    /**\r\n     * Gets or sets the maximal initial rotation in radians.\r\n     */\r\n    public maxInitialRotation = 0;\r\n\r\n    /**\r\n     * Minimum angular speed of emitting particles (Z-axis rotation for each particle).\r\n     */\r\n    public minAngularSpeed = 0;\r\n    /**\r\n     * Maximum angular speed of emitting particles (Z-axis rotation for each particle).\r\n     */\r\n    public maxAngularSpeed = 0;\r\n\r\n    /**\r\n     * The texture used to render each particle. (this can be a spritesheet)\r\n     */\r\n    public particleTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * The layer mask we are rendering the particles through.\r\n     */\r\n    public layerMask: number = 0x0fffffff;\r\n\r\n    /**\r\n     * This can help using your own shader to render the particle system.\r\n     * The according effect will be created\r\n     */\r\n    public customShader: any = null;\r\n\r\n    /**\r\n     * By default particle system starts as soon as they are created. This prevents the\r\n     * automatic start to happen and let you decide when to start emitting particles.\r\n     */\r\n    public preventAutoStart: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this particle system will allow fog to be rendered on it (false by default)\r\n     */\r\n    public applyFog = false;\r\n\r\n    /** @internal */\r\n    _wasDispatched = false;\r\n\r\n    protected _rootUrl = \"\";\r\n    private _noiseTexture: Nullable<ProceduralTexture>;\r\n\r\n    /**\r\n     * Gets or sets a texture used to add random noise to particle positions\r\n     */\r\n    public get noiseTexture(): Nullable<ProceduralTexture> {\r\n        return this._noiseTexture;\r\n    }\r\n\r\n    public set noiseTexture(value: Nullable<ProceduralTexture>) {\r\n        if (this._noiseTexture === value) {\r\n            return;\r\n        }\r\n\r\n        this._noiseTexture = value;\r\n        this._reset();\r\n    }\r\n\r\n    /** Gets or sets the strength to apply to the noise value (default is (10, 10, 10)) */\r\n    public noiseStrength = new Vector3(10, 10, 10);\r\n\r\n    /**\r\n     * Callback triggered when the particle animation is ending.\r\n     */\r\n    public onAnimationEnd: Nullable<() => void> = null;\r\n\r\n    /**\r\n     * Blend mode use to render the particle, it can be either ParticleSystem.BLENDMODE_ONEONE or ParticleSystem.BLENDMODE_STANDARD.\r\n     */\r\n    public blendMode = BaseParticleSystem.BLENDMODE_ONEONE;\r\n\r\n    /**\r\n     * Forces the particle to write their depth information to the depth buffer. This can help preventing other draw calls\r\n     * to override the particles.\r\n     */\r\n    public forceDepthWrite = false;\r\n\r\n    /** Gets or sets a value indicating how many cycles (or frames) must be executed before first rendering (this value has to be set before starting the system). Default is 0 */\r\n    public preWarmCycles = 0;\r\n\r\n    /** Gets or sets a value indicating the time step multiplier to use in pre-warm mode (default is 1) */\r\n    public preWarmStepOffset = 1;\r\n\r\n    /**\r\n     * If using a spritesheet (isAnimationSheetEnabled) defines the speed of the sprite loop (default is 1 meaning the animation will play once during the entire particle lifetime)\r\n     */\r\n    public spriteCellChangeSpeed = 1;\r\n    /**\r\n     * If using a spritesheet (isAnimationSheetEnabled) defines the first sprite cell to display\r\n     */\r\n    public startSpriteCellID = 0;\r\n    /**\r\n     * If using a spritesheet (isAnimationSheetEnabled) defines the last sprite cell to display\r\n     */\r\n    public endSpriteCellID = 0;\r\n    /**\r\n     * If using a spritesheet (isAnimationSheetEnabled), defines the sprite cell width to use\r\n     */\r\n    public spriteCellWidth = 0;\r\n    /**\r\n     * If using a spritesheet (isAnimationSheetEnabled), defines the sprite cell height to use\r\n     */\r\n    public spriteCellHeight = 0;\r\n    /**\r\n     * If using a spritesheet (isAnimationSheetEnabled), defines wether the sprite animation is looping\r\n     */\r\n    public spriteCellLoop = true;\r\n    /**\r\n     * This allows the system to random pick the start cell ID between startSpriteCellID and endSpriteCellID\r\n     */\r\n    public spriteRandomStartCell = false;\r\n\r\n    /** Gets or sets a Vector2 used to move the pivot (by default (0,0)) */\r\n    public translationPivot = new Vector2(0, 0);\r\n\r\n    /** @internal */\r\n    public _isAnimationSheetEnabled: boolean;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that hosted animations (in the system.animations array) must be started when system.start() is called\r\n     */\r\n    public beginAnimationOnStart = false;\r\n\r\n    /**\r\n     * Gets or sets the frame to start the animation from when beginAnimationOnStart is true\r\n     */\r\n    public beginAnimationFrom = 0;\r\n\r\n    /**\r\n     * Gets or sets the frame to end the animation on when beginAnimationOnStart is true\r\n     */\r\n    public beginAnimationTo = 60;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if animations must loop when beginAnimationOnStart is true\r\n     */\r\n    public beginAnimationLoop = false;\r\n\r\n    /**\r\n     * Gets or sets a world offset applied to all particles\r\n     */\r\n    public worldOffset = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 1\r\n     */\r\n    public clipPlane: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 2\r\n     */\r\n    public clipPlane2: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 3\r\n     */\r\n    public clipPlane3: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 4\r\n     */\r\n    public clipPlane4: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 5\r\n     */\r\n    public clipPlane5: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 6\r\n     */\r\n    public clipPlane6: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets whether an animation sprite sheet is enabled or not on the particle system\r\n     */\r\n    public get isAnimationSheetEnabled(): boolean {\r\n        return this._isAnimationSheetEnabled;\r\n    }\r\n\r\n    public set isAnimationSheetEnabled(value: boolean) {\r\n        if (this._isAnimationSheetEnabled == value) {\r\n            return;\r\n        }\r\n\r\n        this._isAnimationSheetEnabled = value;\r\n\r\n        this._reset();\r\n    }\r\n\r\n    private _useLogarithmicDepth: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean enabling the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    public get useLogarithmicDepth(): boolean {\r\n        return this._useLogarithmicDepth;\r\n    }\r\n\r\n    public set useLogarithmicDepth(value: boolean) {\r\n        this._useLogarithmicDepth = value && this.getScene()!.getEngine().getCaps().fragmentDepthSupported;\r\n    }\r\n\r\n    /**\r\n     * Get hosting scene\r\n     * @returns the scene\r\n     */\r\n    public getScene(): Nullable<Scene> {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * You can use gravity if you want to give an orientation to your particles.\r\n     */\r\n    public gravity = Vector3.Zero();\r\n\r\n    protected _colorGradients: Nullable<Array<ColorGradient>> = null;\r\n    protected _sizeGradients: Nullable<Array<FactorGradient>> = null;\r\n    protected _lifeTimeGradients: Nullable<Array<FactorGradient>> = null;\r\n    protected _angularSpeedGradients: Nullable<Array<FactorGradient>> = null;\r\n    protected _velocityGradients: Nullable<Array<FactorGradient>> = null;\r\n    protected _limitVelocityGradients: Nullable<Array<FactorGradient>> = null;\r\n    protected _dragGradients: Nullable<Array<FactorGradient>> = null;\r\n    protected _emitRateGradients: Nullable<Array<FactorGradient>> = null;\r\n    protected _startSizeGradients: Nullable<Array<FactorGradient>> = null;\r\n    protected _rampGradients: Nullable<Array<Color3Gradient>> = null;\r\n    protected _colorRemapGradients: Nullable<Array<FactorGradient>> = null;\r\n    protected _alphaRemapGradients: Nullable<Array<FactorGradient>> = null;\r\n\r\n    protected _hasTargetStopDurationDependantGradient() {\r\n        return (\r\n            (this._startSizeGradients && this._startSizeGradients.length > 0) ||\r\n            (this._emitRateGradients && this._emitRateGradients.length > 0) ||\r\n            (this._lifeTimeGradients && this._lifeTimeGradients.length > 0)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Defines the delay in milliseconds before starting the system (0 by default)\r\n     */\r\n    public startDelay = 0;\r\n\r\n    /**\r\n     * Gets the current list of drag gradients.\r\n     * You must use addDragGradient and removeDragGradient to update this list\r\n     * @returns the list of drag gradients\r\n     */\r\n    public getDragGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._dragGradients;\r\n    }\r\n\r\n    /** Gets or sets a value indicating the damping to apply if the limit velocity factor is reached */\r\n    public limitVelocityDamping = 0.4;\r\n\r\n    /**\r\n     * Gets the current list of limit velocity gradients.\r\n     * You must use addLimitVelocityGradient and removeLimitVelocityGradient to update this list\r\n     * @returns the list of limit velocity gradients\r\n     */\r\n    public getLimitVelocityGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._limitVelocityGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of color gradients.\r\n     * You must use addColorGradient and removeColorGradient to update this list\r\n     * @returns the list of color gradients\r\n     */\r\n    public getColorGradients(): Nullable<Array<ColorGradient>> {\r\n        return this._colorGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of size gradients.\r\n     * You must use addSizeGradient and removeSizeGradient to update this list\r\n     * @returns the list of size gradients\r\n     */\r\n    public getSizeGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._sizeGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of color remap gradients.\r\n     * You must use addColorRemapGradient and removeColorRemapGradient to update this list\r\n     * @returns the list of color remap gradients\r\n     */\r\n    public getColorRemapGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._colorRemapGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of alpha remap gradients.\r\n     * You must use addAlphaRemapGradient and removeAlphaRemapGradient to update this list\r\n     * @returns the list of alpha remap gradients\r\n     */\r\n    public getAlphaRemapGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._alphaRemapGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of life time gradients.\r\n     * You must use addLifeTimeGradient and removeLifeTimeGradient to update this list\r\n     * @returns the list of life time gradients\r\n     */\r\n    public getLifeTimeGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._lifeTimeGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of angular speed gradients.\r\n     * You must use addAngularSpeedGradient and removeAngularSpeedGradient to update this list\r\n     * @returns the list of angular speed gradients\r\n     */\r\n    public getAngularSpeedGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._angularSpeedGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of velocity gradients.\r\n     * You must use addVelocityGradient and removeVelocityGradient to update this list\r\n     * @returns the list of velocity gradients\r\n     */\r\n    public getVelocityGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._velocityGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of start size gradients.\r\n     * You must use addStartSizeGradient and removeStartSizeGradient to update this list\r\n     * @returns the list of start size gradients\r\n     */\r\n    public getStartSizeGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._startSizeGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of emit rate gradients.\r\n     * You must use addEmitRateGradient and removeEmitRateGradient to update this list\r\n     * @returns the list of emit rate gradients\r\n     */\r\n    public getEmitRateGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._emitRateGradients;\r\n    }\r\n\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     * This only works when particleEmitterTyps is a BoxParticleEmitter\r\n     */\r\n    public get direction1(): Vector3 {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).direction1) {\r\n            return (<BoxParticleEmitter>this.particleEmitterType).direction1;\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    public set direction1(value: Vector3) {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).direction1) {\r\n            (<BoxParticleEmitter>this.particleEmitterType).direction1 = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     * This only works when particleEmitterTyps is a BoxParticleEmitter\r\n     */\r\n    public get direction2(): Vector3 {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).direction2) {\r\n            return (<BoxParticleEmitter>this.particleEmitterType).direction2;\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    public set direction2(value: Vector3) {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).direction2) {\r\n            (<BoxParticleEmitter>this.particleEmitterType).direction2 = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Minimum box point around our emitter. Our emitter is the center of particles source, but if you want your particles to emit from more than one point, then you can tell it to do so.\r\n     * This only works when particleEmitterTyps is a BoxParticleEmitter\r\n     */\r\n    public get minEmitBox(): Vector3 {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).minEmitBox) {\r\n            return (<BoxParticleEmitter>this.particleEmitterType).minEmitBox;\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    public set minEmitBox(value: Vector3) {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).minEmitBox) {\r\n            (<BoxParticleEmitter>this.particleEmitterType).minEmitBox = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Maximum box point around our emitter. Our emitter is the center of particles source, but if you want your particles to emit from more than one point, then you can tell it to do so.\r\n     * This only works when particleEmitterTyps is a BoxParticleEmitter\r\n     */\r\n    public get maxEmitBox(): Vector3 {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).maxEmitBox) {\r\n            return (<BoxParticleEmitter>this.particleEmitterType).maxEmitBox;\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    public set maxEmitBox(value: Vector3) {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).maxEmitBox) {\r\n            (<BoxParticleEmitter>this.particleEmitterType).maxEmitBox = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Random color of each particle after it has been emitted, between color1 and color2 vectors\r\n     */\r\n    public color1 = new Color4(1.0, 1.0, 1.0, 1.0);\r\n    /**\r\n     * Random color of each particle after it has been emitted, between color1 and color2 vectors\r\n     */\r\n    public color2 = new Color4(1.0, 1.0, 1.0, 1.0);\r\n    /**\r\n     * Color the particle will have at the end of its lifetime\r\n     */\r\n    public colorDead = new Color4(0, 0, 0, 1.0);\r\n\r\n    /**\r\n     * An optional mask to filter some colors out of the texture, or filter a part of the alpha channel\r\n     */\r\n    public textureMask = new Color4(1.0, 1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * The particle emitter type defines the emitter used by the particle system.\r\n     * It can be for example box, sphere, or cone...\r\n     */\r\n    public particleEmitterType: IParticleEmitterType;\r\n\r\n    /** @internal */\r\n    public _isSubEmitter = false;\r\n\r\n    /** @internal */\r\n    public _billboardMode = Constants.PARTICLES_BILLBOARDMODE_ALL;\r\n    /**\r\n     * Gets or sets the billboard mode to use when isBillboardBased = true.\r\n     * Value can be: ParticleSystem.BILLBOARDMODE_ALL, ParticleSystem.BILLBOARDMODE_Y, ParticleSystem.BILLBOARDMODE_STRETCHED\r\n     */\r\n    public get billboardMode(): number {\r\n        return this._billboardMode;\r\n    }\r\n\r\n    public set billboardMode(value: number) {\r\n        if (this._billboardMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._billboardMode = value;\r\n        this._reset();\r\n    }\r\n\r\n    /** @internal */\r\n    public _isBillboardBased = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if the particles must be rendered as billboard or aligned with the direction\r\n     */\r\n    public get isBillboardBased(): boolean {\r\n        return this._isBillboardBased;\r\n    }\r\n\r\n    public set isBillboardBased(value: boolean) {\r\n        if (this._isBillboardBased === value) {\r\n            return;\r\n        }\r\n\r\n        this._isBillboardBased = value;\r\n        this._reset();\r\n    }\r\n\r\n    /**\r\n     * The scene the particle system belongs to.\r\n     */\r\n    protected _scene: Nullable<Scene>;\r\n\r\n    /**\r\n     * The engine the particle system belongs to.\r\n     */\r\n    protected _engine: ThinEngine;\r\n\r\n    /**\r\n     * Local cache of defines for image processing.\r\n     */\r\n    protected _imageProcessingConfigurationDefines = new ImageProcessingConfigurationDefines();\r\n\r\n    /**\r\n     * Default configuration related to image processing available in the standard Material.\r\n     */\r\n    protected _imageProcessingConfiguration: Nullable<ImageProcessingConfiguration>;\r\n\r\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\r\n    public get imageProcessingConfiguration(): Nullable<ImageProcessingConfiguration> {\r\n        return this._imageProcessingConfiguration;\r\n    }\r\n\r\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\r\n    public set imageProcessingConfiguration(value: Nullable<ImageProcessingConfiguration>) {\r\n        this._attachImageProcessingConfiguration(value);\r\n    }\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the Standard Material.\r\n     * @param configuration\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Pick the scene configuration if needed.\r\n        if (!configuration && this._scene) {\r\n            this._imageProcessingConfiguration = this._scene.imageProcessingConfiguration;\r\n        } else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    protected _reset() {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _removeGradientAndTexture(gradient: number, gradients: Nullable<IValueGradient[]>, texture: Nullable<RawTexture>): BaseParticleSystem {\r\n        if (!gradients) {\r\n            return this;\r\n        }\r\n\r\n        let index = 0;\r\n        for (const valueGradient of gradients) {\r\n            if (valueGradient.gradient === gradient) {\r\n                gradients.splice(index, 1);\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        if (texture) {\r\n            texture.dispose();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a particle system.\r\n     * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\r\n     * @param name The name of the particle system\r\n     */\r\n    public constructor(name: string) {\r\n        this.id = name;\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Creates a Point Emitter for the particle system (emits directly from the emitter position)\r\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the box\r\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the box\r\n     */\r\n    public createPointEmitter(direction1: Vector3, direction2: Vector3): PointParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Hemisphere Emitter for the particle system (emits along the hemisphere radius)\r\n     * @param radius The radius of the hemisphere to emit from\r\n     * @param radiusRange The range of the hemisphere to emit from [0-1] 0 Surface Only, 1 Entire Radius\r\n     */\r\n    public createHemisphericEmitter(radius = 1, radiusRange = 1): HemisphericParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Sphere Emitter for the particle system (emits along the sphere radius)\r\n     * @param radius The radius of the sphere to emit from\r\n     * @param radiusRange The range of the sphere to emit from [0-1] 0 Surface Only, 1 Entire Radius\r\n     */\r\n    public createSphereEmitter(radius = 1, radiusRange = 1): SphereParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Directed Sphere Emitter for the particle system (emits between direction1 and direction2)\r\n     * @param radius The radius of the sphere to emit from\r\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the sphere\r\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the sphere\r\n     */\r\n    public createDirectedSphereEmitter(radius = 1, direction1 = new Vector3(0, 1.0, 0), direction2 = new Vector3(0, 1.0, 0)): SphereDirectedParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Cylinder Emitter for the particle system (emits from the cylinder to the particle position)\r\n     * @param radius The radius of the emission cylinder\r\n     * @param height The height of the emission cylinder\r\n     * @param radiusRange The range of emission [0-1] 0 Surface only, 1 Entire Radius\r\n     * @param directionRandomizer How much to randomize the particle direction [0-1]\r\n     */\r\n    public createCylinderEmitter(radius = 1, height = 1, radiusRange = 1, directionRandomizer = 0): CylinderParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Directed Cylinder Emitter for the particle system (emits between direction1 and direction2)\r\n     * @param radius The radius of the cylinder to emit from\r\n     * @param height The height of the emission cylinder\r\n     * @param radiusRange the range of the emission cylinder [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the cylinder\r\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the cylinder\r\n     */\r\n    public createDirectedCylinderEmitter(\r\n        radius = 1,\r\n        height = 1,\r\n        radiusRange = 1,\r\n        direction1 = new Vector3(0, 1.0, 0),\r\n        direction2 = new Vector3(0, 1.0, 0)\r\n    ): CylinderDirectedParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Cone Emitter for the particle system (emits from the cone to the particle position)\r\n     * @param radius The radius of the cone to emit from\r\n     * @param angle The base angle of the cone\r\n     */\r\n    public createConeEmitter(radius = 1, angle = Math.PI / 4): ConeParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Box Emitter for the particle system. (emits between direction1 and direction2 from withing the box defined by minEmitBox and maxEmitBox)\r\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the box\r\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the box\r\n     * @param minEmitBox Particles are emitted from the box between minEmitBox and maxEmitBox\r\n     * @param maxEmitBox  Particles are emitted from the box between minEmitBox and maxEmitBox\r\n     */\r\n    public createBoxEmitter(direction1: Vector3, direction2: Vector3, minEmitBox: Vector3, maxEmitBox: Vector3): BoxParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n", "import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n\r\n/**\r\n * Block used to expand a Color3/4 into 4 outputs (one for each component)\r\n */\r\nexport class ColorSplitterBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new ColorSplitterBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, true);\r\n        this.registerInput(\"rgb \", NodeMaterialBlockConnectionPointTypes.Color3, true);\r\n\r\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3);\r\n        this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float);\r\n\r\n        this.inputsAreExclusive = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ColorSplitterBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the rgba component (input)\r\n     */\r\n    public get rgba(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb component (input)\r\n     */\r\n    public get rgbIn(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb component (output)\r\n     */\r\n    public get rgbOut(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the r component (output)\r\n     */\r\n    public get r(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the g component (output)\r\n     */\r\n    public get g(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n    /**\r\n     * Gets the b component (output)\r\n     */\r\n    public get b(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n    /**\r\n     * Gets the a component (output)\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    protected _inputRename(name: string) {\r\n        if (name === \"rgb \") {\r\n            return \"rgbIn\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    protected _outputRename(name: string) {\r\n        if (name === \"rgb\") {\r\n            return \"rgbOut\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const input = this.rgba.isConnected ? this.rgba : this.rgbIn;\r\n\r\n        if (!input.isConnected) {\r\n            return;\r\n        }\r\n\r\n        const rgbOutput = this._outputs[0];\r\n        const rOutput = this._outputs[1];\r\n        const gOutput = this._outputs[2];\r\n        const bOutput = this._outputs[3];\r\n        const aOutput = this._outputs[4];\r\n\r\n        if (rgbOutput.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(rgbOutput, state) + ` = ${input.associatedVariableName}.rgb;\\n`;\r\n        }\r\n        if (rOutput.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(rOutput, state) + ` = ${input.associatedVariableName}.r;\\n`;\r\n        }\r\n        if (gOutput.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(gOutput, state) + ` = ${input.associatedVariableName}.g;\\n`;\r\n        }\r\n        if (bOutput.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(bOutput, state) + ` = ${input.associatedVariableName}.b;\\n`;\r\n        }\r\n        if (aOutput.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(aOutput, state) + ` = ${input.associatedVariableName}.a;\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ColorSplitterBlock\", ColorSplitterBlock);\r\n", "import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { Constants } from \"../constants\";\r\nimport { ThinEngine } from \"../thinEngine\";\r\nimport type { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport type { WebGLRenderTargetWrapper } from \"../WebGL/webGLRenderTargetWrapper\";\r\nimport type { RenderTargetCreationOptions } from \"../../Materials/Textures/textureCreationOptions\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Creates a new render target cube wrapper\r\n         * @param size defines the size of the texture\r\n         * @param options defines the options used to create the texture\r\n         * @returns a new render target cube wrapper\r\n         */\r\n        createRenderTargetCubeTexture(size: number, options?: RenderTargetCreationOptions): RenderTargetWrapper;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createRenderTargetCubeTexture = function (size: number, options?: RenderTargetCreationOptions): RenderTargetWrapper {\r\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, true, size) as WebGLRenderTargetWrapper;\r\n\r\n    const fullOptions = {\r\n        generateMipMaps: true,\r\n        generateDepthBuffer: true,\r\n        generateStencilBuffer: false,\r\n        type: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        samplingMode: Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        format: Constants.TEXTUREFORMAT_RGBA,\r\n        ...options,\r\n    };\r\n    fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\r\n\r\n    if (fullOptions.type === Constants.TEXTURETYPE_FLOAT && !this._caps.textureFloatLinearFiltering) {\r\n        // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\r\n        fullOptions.samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    } else if (fullOptions.type === Constants.TEXTURETYPE_HALF_FLOAT && !this._caps.textureHalfFloatLinearFiltering) {\r\n        // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\r\n        fullOptions.samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    }\r\n    const gl = this._gl;\r\n\r\n    const texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n    const filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps);\r\n\r\n    if (fullOptions.type === Constants.TEXTURETYPE_FLOAT && !this._caps.textureFloat) {\r\n        fullOptions.type = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n        Logger.Warn(\"Float textures are not supported. Cube render target forced to TEXTURETYPE_UNESIGNED_BYTE type\");\r\n    }\r\n\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n    for (let face = 0; face < 6; face++) {\r\n        gl.texImage2D(\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\r\n            0,\r\n            this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format),\r\n            size,\r\n            size,\r\n            0,\r\n            this._getInternalFormat(fullOptions.format),\r\n            this._getWebGLTextureType(fullOptions.type),\r\n            null\r\n        );\r\n    }\r\n\r\n    // Create the framebuffer\r\n    const framebuffer = gl.createFramebuffer();\r\n    this._bindUnboundFramebuffer(framebuffer);\r\n\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer, fullOptions.generateDepthBuffer, size, size);\r\n\r\n    // MipMaps\r\n    if (fullOptions.generateMipMaps) {\r\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n    }\r\n\r\n    // Unbind\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    rtWrapper._framebuffer = framebuffer;\r\n    rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\r\n    rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer;\r\n\r\n    texture.width = size;\r\n    texture.height = size;\r\n    texture.isReady = true;\r\n    texture.isCube = true;\r\n    texture.samples = 1;\r\n    texture.generateMipMaps = fullOptions.generateMipMaps;\r\n    texture.samplingMode = fullOptions.samplingMode;\r\n    texture.type = fullOptions.type;\r\n    texture.format = fullOptions.format;\r\n\r\n    this._internalTexturesCache.push(texture);\r\n    rtWrapper.setTextures(texture);\r\n\r\n    return rtWrapper;\r\n};\r\n", "import type { Nullable } from \"../types\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Viewport } from \"../Maths/math.viewport\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Effect } from \"./effect\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { DrawWrapper } from \"./drawWrapper\";\r\nimport type { IRenderTargetTexture, RenderTargetWrapper } from \"../Engines/renderTargetWrapper\";\r\nimport type { ShaderLanguage } from \"./shaderLanguage\";\r\n\r\n// Prevents ES6 Crash if not imported.\r\nimport \"../Shaders/postprocess.vertex\";\r\n\r\n/**\r\n * Effect Render Options\r\n */\r\nexport interface IEffectRendererOptions {\r\n    /**\r\n     * Defines the vertices positions.\r\n     */\r\n    positions?: number[];\r\n    /**\r\n     * Defines the indices.\r\n     */\r\n    indices?: number[];\r\n}\r\n\r\n// Fullscreen quad buffers by default.\r\nconst defaultOptions = {\r\n    positions: [1, 1, -1, 1, -1, -1, 1, -1],\r\n    indices: [0, 1, 2, 0, 2, 3],\r\n};\r\n\r\n/**\r\n * Helper class to render one or more effects.\r\n * You can access the previous rendering in your shader by declaring a sampler named textureSampler\r\n */\r\nexport class EffectRenderer {\r\n    /**\r\n     * The engine the effect renderer has been created for.\r\n     */\r\n    public readonly engine: ThinEngine;\r\n\r\n    private _vertexBuffers: { [key: string]: VertexBuffer };\r\n    private _indexBuffer: DataBuffer;\r\n\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _onContextRestoredObserver: Nullable<Observer<ThinEngine>>;\r\n\r\n    private _savedStateDepthTest: boolean;\r\n    private _savedStateStencilTest: boolean;\r\n\r\n    /**\r\n     * Creates an effect renderer\r\n     * @param engine the engine to use for rendering\r\n     * @param options defines the options of the effect renderer\r\n     */\r\n    constructor(engine: ThinEngine, options: IEffectRendererOptions = defaultOptions) {\r\n        const positions = options.positions ?? defaultOptions.positions;\r\n        const indices = options.indices ?? defaultOptions.indices;\r\n\r\n        this.engine = engine;\r\n        this._vertexBuffers = {\r\n            [VertexBuffer.PositionKind]: new VertexBuffer(engine, positions, VertexBuffer.PositionKind, false, false, 2),\r\n        };\r\n        this._indexBuffer = engine.createIndexBuffer(indices);\r\n\r\n        this._onContextRestoredObserver = engine.onContextRestoredObservable.add(() => {\r\n            this._indexBuffer = engine.createIndexBuffer(indices);\r\n\r\n            for (const key in this._vertexBuffers) {\r\n                const vertexBuffer = this._vertexBuffers[key];\r\n                vertexBuffer._rebuild();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the current viewport in normalized coordinates 0-1\r\n     * @param viewport Defines the viewport to set (defaults to 0 0 1 1)\r\n     */\r\n    public setViewport(viewport = this._fullscreenViewport): void {\r\n        this.engine.setViewport(viewport);\r\n    }\r\n\r\n    /**\r\n     * Binds the embedded attributes buffer to the effect.\r\n     * @param effect Defines the effect to bind the attributes for\r\n     */\r\n    public bindBuffers(effect: Effect): void {\r\n        this.engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\r\n    }\r\n\r\n    /**\r\n     * Sets the current effect wrapper to use during draw.\r\n     * The effect needs to be ready before calling this api.\r\n     * This also sets the default full screen position attribute.\r\n     * @param effectWrapper Defines the effect to draw with\r\n     */\r\n    public applyEffectWrapper(effectWrapper: EffectWrapper): void {\r\n        this.engine.setState(true);\r\n        this.engine.depthCullingState.depthTest = false;\r\n        this.engine.stencilState.stencilTest = false;\r\n        this.engine.enableEffect(effectWrapper._drawWrapper);\r\n        this.bindBuffers(effectWrapper.effect);\r\n        effectWrapper.onApplyObservable.notifyObservers({});\r\n    }\r\n\r\n    /**\r\n     * Saves engine states\r\n     */\r\n    public saveStates(): void {\r\n        this._savedStateDepthTest = this.engine.depthCullingState.depthTest;\r\n        this._savedStateStencilTest = this.engine.stencilState.stencilTest;\r\n    }\r\n\r\n    /**\r\n     * Restores engine states\r\n     */\r\n    public restoreStates(): void {\r\n        this.engine.depthCullingState.depthTest = this._savedStateDepthTest;\r\n        this.engine.stencilState.stencilTest = this._savedStateStencilTest;\r\n    }\r\n\r\n    /**\r\n     * Draws a full screen quad.\r\n     */\r\n    public draw(): void {\r\n        this.engine.drawElementsType(Constants.MATERIAL_TriangleFillMode, 0, 6);\r\n    }\r\n\r\n    private _isRenderTargetTexture(texture: RenderTargetWrapper | IRenderTargetTexture): texture is IRenderTargetTexture {\r\n        return (texture as IRenderTargetTexture).renderTarget !== undefined;\r\n    }\r\n\r\n    /**\r\n     * renders one or more effects to a specified texture\r\n     * @param effectWrapper the effect to renderer\r\n     * @param outputTexture texture to draw to, if null it will render to the screen.\r\n     */\r\n    public render(effectWrapper: EffectWrapper, outputTexture: Nullable<RenderTargetWrapper | IRenderTargetTexture> = null) {\r\n        // Ensure effect is ready\r\n        if (!effectWrapper.effect.isReady()) {\r\n            return;\r\n        }\r\n\r\n        this.saveStates();\r\n\r\n        // Reset state\r\n        this.setViewport();\r\n\r\n        const out = outputTexture === null ? null : this._isRenderTargetTexture(outputTexture) ? outputTexture.renderTarget! : outputTexture;\r\n\r\n        if (out) {\r\n            this.engine.bindFramebuffer(out);\r\n        }\r\n\r\n        this.applyEffectWrapper(effectWrapper);\r\n\r\n        this.draw();\r\n\r\n        if (out) {\r\n            this.engine.unBindFramebuffer(out);\r\n        }\r\n\r\n        this.restoreStates();\r\n    }\r\n\r\n    /**\r\n     * Disposes of the effect renderer\r\n     */\r\n    dispose() {\r\n        const vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\r\n        if (vertexBuffer) {\r\n            vertexBuffer.dispose();\r\n            delete this._vertexBuffers[VertexBuffer.PositionKind];\r\n        }\r\n\r\n        if (this._indexBuffer) {\r\n            this.engine._releaseBuffer(this._indexBuffer);\r\n        }\r\n\r\n        if (this._onContextRestoredObserver) {\r\n            this.engine.onContextRestoredObservable.remove(this._onContextRestoredObserver);\r\n            this._onContextRestoredObserver = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Options to create an EffectWrapper\r\n */\r\ninterface EffectWrapperCreationOptions {\r\n    /**\r\n     * Engine to use to create the effect\r\n     */\r\n    engine: ThinEngine;\r\n    /**\r\n     * Fragment shader for the effect\r\n     */\r\n    fragmentShader: string;\r\n    /**\r\n     * Use the shader store instead of direct source code\r\n     */\r\n    useShaderStore?: boolean;\r\n    /**\r\n     * Vertex shader for the effect\r\n     */\r\n    vertexShader?: string;\r\n    /**\r\n     * Attributes to use in the shader\r\n     */\r\n    attributeNames?: Array<string>;\r\n    /**\r\n     * Uniforms to use in the shader\r\n     */\r\n    uniformNames?: Array<string>;\r\n    /**\r\n     * Texture sampler names to use in the shader\r\n     */\r\n    samplerNames?: Array<string>;\r\n    /**\r\n     * Defines to use in the shader\r\n     */\r\n    defines?: Array<string>;\r\n    /**\r\n     * Callback when effect is compiled\r\n     */\r\n    onCompiled?: Nullable<(effect: Effect) => void>;\r\n    /**\r\n     * The friendly name of the effect displayed in Spector.\r\n     */\r\n    name?: string;\r\n    /**\r\n     * The language the shader is written in (default: GLSL)\r\n     */\r\n    shaderLanguage?: ShaderLanguage;\r\n}\r\n\r\n/**\r\n * Wraps an effect to be used for rendering\r\n */\r\nexport class EffectWrapper {\r\n    /**\r\n     * Event that is fired right before the effect is drawn (should be used to update uniforms)\r\n     */\r\n    public onApplyObservable = new Observable<{}>();\r\n    /**\r\n     * The underlying effect\r\n     */\r\n    public get effect(): Effect {\r\n        return this._drawWrapper.effect!;\r\n    }\r\n\r\n    public set effect(effect: Effect) {\r\n        this._drawWrapper.effect = effect;\r\n    }\r\n\r\n    /** @internal */\r\n    public _drawWrapper: DrawWrapper;\r\n\r\n    private _onContextRestoredObserver: Nullable<Observer<ThinEngine>>;\r\n\r\n    /**\r\n     * Creates an effect to be renderer\r\n     * @param creationOptions options to create the effect\r\n     */\r\n    constructor(creationOptions: EffectWrapperCreationOptions) {\r\n        let effectCreationOptions: any;\r\n        const uniformNames = creationOptions.uniformNames || [];\r\n\r\n        if (creationOptions.vertexShader) {\r\n            effectCreationOptions = {\r\n                fragmentSource: creationOptions.fragmentShader,\r\n                vertexSource: creationOptions.vertexShader,\r\n                spectorName: creationOptions.name || \"effectWrapper\",\r\n            };\r\n        } else {\r\n            // Default scale to use in post process vertex shader.\r\n            uniformNames.push(\"scale\");\r\n\r\n            effectCreationOptions = {\r\n                fragmentSource: creationOptions.fragmentShader,\r\n                vertex: \"postprocess\",\r\n                spectorName: creationOptions.name || \"effectWrapper\",\r\n            };\r\n\r\n            // Sets the default scale to identity for the post process vertex shader.\r\n            this.onApplyObservable.add(() => {\r\n                this.effect.setFloat2(\"scale\", 1, 1);\r\n            });\r\n        }\r\n\r\n        const defines = creationOptions.defines ? creationOptions.defines.join(\"\\n\") : \"\";\r\n        this._drawWrapper = new DrawWrapper(creationOptions.engine);\r\n\r\n        if (creationOptions.useShaderStore) {\r\n            effectCreationOptions.fragment = effectCreationOptions.fragmentSource;\r\n            if (!effectCreationOptions.vertex) {\r\n                effectCreationOptions.vertex = effectCreationOptions.vertexSource;\r\n            }\r\n\r\n            delete effectCreationOptions.fragmentSource;\r\n            delete effectCreationOptions.vertexSource;\r\n\r\n            this.effect = creationOptions.engine.createEffect(\r\n                effectCreationOptions,\r\n                creationOptions.attributeNames || [\"position\"],\r\n                uniformNames,\r\n                creationOptions.samplerNames,\r\n                defines,\r\n                undefined,\r\n                creationOptions.onCompiled,\r\n                undefined,\r\n                undefined,\r\n                creationOptions.shaderLanguage\r\n            );\r\n        } else {\r\n            this.effect = new Effect(\r\n                effectCreationOptions,\r\n                creationOptions.attributeNames || [\"position\"],\r\n                uniformNames,\r\n                creationOptions.samplerNames,\r\n                creationOptions.engine,\r\n                defines,\r\n                undefined,\r\n                creationOptions.onCompiled,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                creationOptions.shaderLanguage\r\n            );\r\n\r\n            this._onContextRestoredObserver = creationOptions.engine.onContextRestoredObservable.add(() => {\r\n                this.effect._pipelineContext = null; // because _prepareEffect will try to dispose this pipeline before recreating it and that would lead to webgl errors\r\n                this.effect._prepareEffect();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of the effect wrapper\r\n     */\r\n    public dispose() {\r\n        if (this._onContextRestoredObserver) {\r\n            this.effect.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\r\n            this._onContextRestoredObserver = null;\r\n        }\r\n        this.effect.dispose();\r\n    }\r\n}\r\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"passPixelShader\";\nconst shader = `varying vec2 vUV;uniform sampler2D textureSampler;\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) \n{gl_FragColor=texture2D(textureSampler,vUV);}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const passPixelShader = { name, shader };\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { _WarnImport } from \"./devTools\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\nimport { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { EffectRenderer, EffectWrapper } from \"../Materials/effectRenderer\";\r\nimport { Tools } from \"./tools\";\r\nimport type { Nullable } from \"../types\";\r\n\r\nimport { passPixelShader } from \"../Shaders/pass.fragment\";\r\nimport { Scalar } from \"../Maths/math.scalar\";\r\n\r\ntype DumpToolsEngine = {\r\n    canvas: HTMLCanvasElement | OffscreenCanvas;\r\n    engine: ThinEngine;\r\n    renderer: EffectRenderer;\r\n    wrapper: EffectWrapper;\r\n};\r\n\r\n/**\r\n * Class containing a set of static utilities functions to dump data from a canvas\r\n */\r\nexport class DumpTools {\r\n    private static _DumpToolsEngine: Nullable<DumpToolsEngine>;\r\n\r\n    private static _CreateDumpRenderer(): DumpToolsEngine {\r\n        if (!DumpTools._DumpToolsEngine) {\r\n            let canvas: HTMLCanvasElement | OffscreenCanvas;\r\n            let engine: Nullable<ThinEngine> = null;\r\n            const options = {\r\n                preserveDrawingBuffer: true,\r\n                depth: false,\r\n                stencil: false,\r\n                alpha: true,\r\n                premultipliedAlpha: false,\r\n                antialias: false,\r\n                failIfMajorPerformanceCaveat: false,\r\n            };\r\n            try {\r\n                canvas = new OffscreenCanvas(100, 100); // will be resized later\r\n                engine = new ThinEngine(canvas, false, options);\r\n            } catch (e) {\r\n                // The browser either does not support OffscreenCanvas or WebGL context in OffscreenCanvas, fallback on a regular canvas\r\n                canvas = document.createElement(\"canvas\");\r\n                engine = new ThinEngine(canvas, false, options);\r\n            }\r\n            engine.getCaps().parallelShaderCompile = undefined;\r\n            const renderer = new EffectRenderer(engine);\r\n            const wrapper = new EffectWrapper({\r\n                engine,\r\n                name: passPixelShader.name,\r\n                fragmentShader: passPixelShader.shader,\r\n                samplerNames: [\"textureSampler\"],\r\n            });\r\n            DumpTools._DumpToolsEngine = {\r\n                canvas,\r\n                engine,\r\n                renderer,\r\n                wrapper,\r\n            };\r\n        }\r\n        return DumpTools._DumpToolsEngine!;\r\n    }\r\n\r\n    /**\r\n     * Dumps the current bound framebuffer\r\n     * @param width defines the rendering width\r\n     * @param height defines the rendering height\r\n     * @param engine defines the hosting engine\r\n     * @param successCallback defines the callback triggered once the data are available\r\n     * @param mimeType defines the mime type of the result\r\n     * @param fileName defines the filename to download. If present, the result will automatically be downloaded\r\n     * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\r\n     * @returns a void promise\r\n     */\r\n    public static async DumpFramebuffer(\r\n        width: number,\r\n        height: number,\r\n        engine: Engine,\r\n        successCallback?: (data: string) => void,\r\n        mimeType = \"image/png\",\r\n        fileName?: string,\r\n        quality?: number\r\n    ) {\r\n        // Read the contents of the framebuffer\r\n        const bufferView = await engine.readPixels(0, 0, width, height);\r\n\r\n        const data = new Uint8Array(bufferView.buffer);\r\n\r\n        DumpTools.DumpData(width, height, data, successCallback as (data: string | ArrayBuffer) => void, mimeType, fileName, true, undefined, quality);\r\n    }\r\n\r\n    /**\r\n     * Dumps an array buffer\r\n     * @param width defines the rendering width\r\n     * @param height defines the rendering height\r\n     * @param data the data array\r\n     * @param mimeType defines the mime type of the result\r\n     * @param fileName defines the filename to download. If present, the result will automatically be downloaded\r\n     * @param invertY true to invert the picture in the Y dimension\r\n     * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\r\n     * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\r\n     * @returns a promise that resolve to the final data\r\n     */\r\n    public static DumpDataAsync(\r\n        width: number,\r\n        height: number,\r\n        data: ArrayBufferView,\r\n        mimeType = \"image/png\",\r\n        fileName?: string,\r\n        invertY = false,\r\n        toArrayBuffer = false,\r\n        quality?: number\r\n    ): Promise<string | ArrayBuffer> {\r\n        return new Promise((resolve) => {\r\n            DumpTools.DumpData(width, height, data, (result) => resolve(result), mimeType, fileName, invertY, toArrayBuffer, quality);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dumps an array buffer\r\n     * @param width defines the rendering width\r\n     * @param height defines the rendering height\r\n     * @param data the data array\r\n     * @param successCallback defines the callback triggered once the data are available\r\n     * @param mimeType defines the mime type of the result\r\n     * @param fileName defines the filename to download. If present, the result will automatically be downloaded\r\n     * @param invertY true to invert the picture in the Y dimension\r\n     * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\r\n     * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\r\n     */\r\n    public static DumpData(\r\n        width: number,\r\n        height: number,\r\n        data: ArrayBufferView,\r\n        successCallback?: (data: string | ArrayBuffer) => void,\r\n        mimeType = \"image/png\",\r\n        fileName?: string,\r\n        invertY = false,\r\n        toArrayBuffer = false,\r\n        quality?: number\r\n    ) {\r\n        const renderer = DumpTools._CreateDumpRenderer();\r\n        renderer.engine.setSize(width, height, true);\r\n\r\n        // Convert if data are float32\r\n        if (data instanceof Float32Array) {\r\n            const data2 = new Uint8Array(data.length);\r\n            let n = data.length;\r\n            while (n--) {\r\n                const v = data[n];\r\n                data2[n] = Math.round(Scalar.Clamp(v) * 255);\r\n            }\r\n            data = data2;\r\n        }\r\n\r\n        // Create the image\r\n        const texture = renderer.engine.createRawTexture(data, width, height, Constants.TEXTUREFORMAT_RGBA, false, !invertY, Constants.TEXTURE_NEAREST_NEAREST);\r\n\r\n        renderer.renderer.setViewport();\r\n        renderer.renderer.applyEffectWrapper(renderer.wrapper);\r\n        renderer.wrapper.effect._bindTexture(\"textureSampler\", texture);\r\n        renderer.renderer.draw();\r\n\r\n        if (toArrayBuffer) {\r\n            Tools.ToBlob(\r\n                renderer.canvas,\r\n                (blob) => {\r\n                    const fileReader = new FileReader();\r\n                    fileReader.onload = (event: any) => {\r\n                        const arrayBuffer = event.target!.result as ArrayBuffer;\r\n                        if (successCallback) {\r\n                            successCallback(arrayBuffer);\r\n                        }\r\n                    };\r\n                    fileReader.readAsArrayBuffer(blob!);\r\n                },\r\n                mimeType,\r\n                quality\r\n            );\r\n        } else {\r\n            Tools.EncodeScreenshotCanvasData(renderer.canvas, successCallback, mimeType, fileName, quality);\r\n        }\r\n\r\n        texture.dispose();\r\n    }\r\n\r\n    /**\r\n     * Dispose the dump tools associated resources\r\n     */\r\n    public static Dispose() {\r\n        if (DumpTools._DumpToolsEngine) {\r\n            DumpTools._DumpToolsEngine.wrapper.dispose();\r\n            DumpTools._DumpToolsEngine.renderer.dispose();\r\n            DumpTools._DumpToolsEngine.engine.dispose();\r\n        }\r\n        DumpTools._DumpToolsEngine = null;\r\n    }\r\n}\r\n\r\n/**\r\n * This will be executed automatically for UMD and es5.\r\n * If esm dev wants the side effects to execute they will have to run it manually\r\n * Once we build native modules those need to be exported.\r\n * @internal\r\n */\r\nconst initSideEffects = () => {\r\n    // References the dependencies.\r\n    Tools.DumpData = DumpTools.DumpData;\r\n    Tools.DumpDataAsync = DumpTools.DumpDataAsync;\r\n    Tools.DumpFramebuffer = DumpTools.DumpFramebuffer;\r\n};\r\n\r\ninitSideEffects();\r\n", "import type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { SmartArray } from \"../../Misc/smartArray\";\r\nimport type { Nullable, Immutable } from \"../../types\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport type { Color4 } from \"../../Maths/math.color\";\r\nimport type { RenderTargetCreationOptions, TextureSize } from \"../../Materials/Textures/textureCreationOptions\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport { Texture } from \"../../Materials/Textures/texture\";\r\nimport { PostProcessManager } from \"../../PostProcesses/postProcessManager\";\r\nimport type { PostProcess } from \"../../PostProcesses/postProcess\";\r\nimport { RenderingManager } from \"../../Rendering/renderingManager\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { IRenderTargetTexture, RenderTargetWrapper } from \"../../Engines/renderTargetWrapper\";\r\n\r\nimport \"../../Engines/Extensions/engine.renderTarget\";\r\nimport \"../../Engines/Extensions/engine.renderTargetCube\";\r\nimport { Engine } from \"../../Engines/engine\";\r\nimport { _ObserveArray } from \"../../Misc/arrayTools\";\r\nimport { DumpTools } from \"../../Misc/dumpTools\";\r\n\r\nimport type { Material } from \"../material\";\r\n\r\n/**\r\n * Options for the RenderTargetTexture constructor\r\n */\r\nexport interface RenderTargetTextureOptions {\r\n    /** True (default: false) if mipmaps need to be generated after render */\r\n    generateMipMaps?: boolean;\r\n\r\n    /** True (default) to not change the aspect ratio of the scene in the RTT */\r\n    doNotChangeAspectRatio?: boolean;\r\n\r\n    /** The type of the buffer in the RTT (byte (default), half float, float...) */\r\n    type?: number;\r\n\r\n    /** True (default: false) if a cube texture needs to be created */\r\n    isCube?: boolean;\r\n\r\n    /** The sampling mode to be used with the render target (Trilinear (default), Linear, Nearest...) */\r\n    samplingMode?: number;\r\n\r\n    /** True (default) to generate a depth buffer */\r\n    generateDepthBuffer?: boolean;\r\n\r\n    /** True (default: false) to generate a stencil buffer */\r\n    generateStencilBuffer?: boolean;\r\n\r\n    /** True (default: false) if multiple textures need to be created (Draw Buffers) */\r\n    isMulti?: boolean;\r\n\r\n    /** The internal format of the buffer in the RTT (RED, RG, RGB, RGBA (default), ALPHA...) */\r\n    format?: number;\r\n\r\n    /** True (default: false) if the texture allocation should be delayed */\r\n    delayAllocation?: boolean;\r\n\r\n    /** Sample count to use when creating the RTT */\r\n    samples?: number;\r\n\r\n    /** specific flags to use when creating the texture (e.g., Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures) */\r\n    creationFlags?: number;\r\n\r\n    /** True (default: false) to indicate that no color target should be created. (e.g., if you only want to write to the depth buffer) */\r\n    noColorAttachment?: boolean;\r\n\r\n    /** Specifies the internal texture to use directly instead of creating one (ignores `noColorAttachment` flag when set) **/\r\n    colorAttachment?: InternalTexture;\r\n\r\n    /** True (default: false) to create a SRGB texture */\r\n    useSRGBBuffer?: boolean;\r\n\r\n    /** Defines the underlying texture texture space */\r\n    gammaSpace?: boolean;\r\n}\r\n\r\n/**\r\n * This Helps creating a texture that will be created from a camera in your scene.\r\n * It is basically a dynamic texture that could be used to create special effects for instance.\r\n * Actually, It is the base of lot of effects in the framework like post process, shadows, effect layers and rendering pipelines...\r\n */\r\nexport class RenderTargetTexture extends Texture implements IRenderTargetTexture {\r\n    /**\r\n     * The texture will only be rendered once which can be useful to improve performance if everything in your render is static for instance.\r\n     */\r\n    public static readonly REFRESHRATE_RENDER_ONCE: number = 0;\r\n    /**\r\n     * The texture will only be rendered rendered every frame and is recommended for dynamic contents.\r\n     */\r\n    public static readonly REFRESHRATE_RENDER_ONEVERYFRAME: number = 1;\r\n    /**\r\n     * The texture will be rendered every 2 frames which could be enough if your dynamic objects are not\r\n     * the central point of your effect and can save a lot of performances.\r\n     */\r\n    public static readonly REFRESHRATE_RENDER_ONEVERYTWOFRAMES: number = 2;\r\n\r\n    /**\r\n     * Use this predicate to dynamically define the list of mesh you want to render.\r\n     * If set, the renderList property will be overwritten.\r\n     */\r\n    public renderListPredicate: (AbstractMesh: AbstractMesh) => boolean;\r\n\r\n    private _renderList: Nullable<Array<AbstractMesh>>;\r\n    private _unObserveRenderList: Nullable<() => void> = null;\r\n\r\n    /**\r\n     * Use this list to define the list of mesh you want to render.\r\n     */\r\n    public get renderList(): Nullable<Array<AbstractMesh>> {\r\n        return this._renderList;\r\n    }\r\n\r\n    public set renderList(value: Nullable<Array<AbstractMesh>>) {\r\n        if (this._unObserveRenderList) {\r\n            this._unObserveRenderList();\r\n            this._unObserveRenderList = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._unObserveRenderList = _ObserveArray(value, this._renderListHasChanged);\r\n        }\r\n\r\n        this._renderList = value;\r\n    }\r\n\r\n    private _renderListHasChanged = (_functionName: String, previousLength: number) => {\r\n        const newLength = this._renderList ? this._renderList.length : 0;\r\n        if ((previousLength === 0 && newLength > 0) || newLength === 0) {\r\n            this.getScene()?.meshes.forEach((mesh) => {\r\n                mesh._markSubMeshesAsLightDirty();\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Use this function to overload the renderList array at rendering time.\r\n     * Return null to render with the current renderList, else return the list of meshes to use for rendering.\r\n     * For 2DArray RTT, layerOrFace is the index of the layer that is going to be rendered, else it is the faceIndex of\r\n     * the cube (if the RTT is a cube, else layerOrFace=0).\r\n     * The renderList passed to the function is the current render list (the one that will be used if the function returns null).\r\n     * The length of this list is passed through renderListLength: don't use renderList.length directly because the array can\r\n     * hold dummy elements!\r\n     */\r\n    public getCustomRenderList: (layerOrFace: number, renderList: Nullable<Immutable<Array<AbstractMesh>>>, renderListLength: number) => Nullable<Array<AbstractMesh>>;\r\n\r\n    /**\r\n     * Define if particles should be rendered in your texture.\r\n     */\r\n    public renderParticles = true;\r\n    /**\r\n     * Define if sprites should be rendered in your texture.\r\n     */\r\n    public renderSprites = false;\r\n\r\n    /**\r\n     * Force checking the layerMask property even if a custom list of meshes is provided (ie. if renderList is not undefined)\r\n     */\r\n    public forceLayerMaskCheck = false;\r\n\r\n    /**\r\n     * Define the camera used to render the texture.\r\n     */\r\n    public activeCamera: Nullable<Camera>;\r\n    /**\r\n     * Override the mesh isReady function with your own one.\r\n     */\r\n    public customIsReadyFunction: (mesh: AbstractMesh, refreshRate: number, preWarm?: boolean) => boolean;\r\n    /**\r\n     * Override the render function of the texture with your own one.\r\n     */\r\n    public customRenderFunction: (\r\n        opaqueSubMeshes: SmartArray<SubMesh>,\r\n        alphaTestSubMeshes: SmartArray<SubMesh>,\r\n        transparentSubMeshes: SmartArray<SubMesh>,\r\n        depthOnlySubMeshes: SmartArray<SubMesh>,\r\n        beforeTransparents?: () => void\r\n    ) => void;\r\n    /**\r\n     * Define if camera post processes should be use while rendering the texture.\r\n     */\r\n    public useCameraPostProcesses: boolean;\r\n    /**\r\n     * Define if the camera viewport should be respected while rendering the texture or if the render should be done to the entire texture.\r\n     */\r\n    public ignoreCameraViewport: boolean = false;\r\n\r\n    private _postProcessManager: Nullable<PostProcessManager>;\r\n\r\n    /**\r\n     * Post-processes for this render target\r\n     */\r\n    public get postProcesses() {\r\n        return this._postProcesses;\r\n    }\r\n    private _postProcesses: PostProcess[];\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n\r\n    private get _prePassEnabled() {\r\n        return !!this._prePassRenderTarget && this._prePassRenderTarget.enabled;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the texture is unbind.\r\n     */\r\n    public onBeforeBindObservable = new Observable<RenderTargetTexture>();\r\n\r\n    /**\r\n     * An event triggered when the texture is unbind.\r\n     */\r\n    public onAfterUnbindObservable = new Observable<RenderTargetTexture>();\r\n\r\n    private _onAfterUnbindObserver: Nullable<Observer<RenderTargetTexture>>;\r\n    /**\r\n     * Set a after unbind callback in the texture.\r\n     * This has been kept for backward compatibility and use of onAfterUnbindObservable is recommended.\r\n     */\r\n    public set onAfterUnbind(callback: () => void) {\r\n        if (this._onAfterUnbindObserver) {\r\n            this.onAfterUnbindObservable.remove(this._onAfterUnbindObserver);\r\n        }\r\n        this._onAfterUnbindObserver = this.onAfterUnbindObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered before rendering the texture\r\n     */\r\n    public onBeforeRenderObservable = new Observable<number>();\r\n\r\n    private _onBeforeRenderObserver: Nullable<Observer<number>>;\r\n    /**\r\n     * Set a before render callback in the texture.\r\n     * This has been kept for backward compatibility and use of onBeforeRenderObservable is recommended.\r\n     */\r\n    public set onBeforeRender(callback: (faceIndex: number) => void) {\r\n        if (this._onBeforeRenderObserver) {\r\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n        }\r\n        this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering the texture\r\n     */\r\n    public onAfterRenderObservable = new Observable<number>();\r\n\r\n    private _onAfterRenderObserver: Nullable<Observer<number>>;\r\n    /**\r\n     * Set a after render callback in the texture.\r\n     * This has been kept for backward compatibility and use of onAfterRenderObservable is recommended.\r\n     */\r\n    public set onAfterRender(callback: (faceIndex: number) => void) {\r\n        if (this._onAfterRenderObserver) {\r\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\r\n        }\r\n        this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered after the texture clear\r\n     */\r\n    public onClearObservable = new Observable<Engine>();\r\n\r\n    private _onClearObserver: Nullable<Observer<Engine>>;\r\n    /**\r\n     * Set a clear callback in the texture.\r\n     * This has been kept for backward compatibility and use of onClearObservable is recommended.\r\n     */\r\n    public set onClear(callback: (Engine: Engine) => void) {\r\n        if (this._onClearObserver) {\r\n            this.onClearObservable.remove(this._onClearObserver);\r\n        }\r\n        this._onClearObserver = this.onClearObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the texture is resized.\r\n     */\r\n    public onResizeObservable = new Observable<RenderTargetTexture>();\r\n\r\n    /**\r\n     * Define the clear color of the Render Target if it should be different from the scene.\r\n     */\r\n    public clearColor: Color4;\r\n    protected _size: TextureSize;\r\n    protected _initialSizeParameter: number | { width: number; height: number } | { ratio: number };\r\n    protected _sizeRatio: Nullable<number>;\r\n    /** @internal */\r\n    public _generateMipMaps: boolean;\r\n    /** @internal */\r\n    public _cleared = false;\r\n    /**\r\n     * Skip the initial clear of the rtt at the beginning of the frame render loop\r\n     */\r\n    public skipInitialClear = false;\r\n    protected _renderingManager: RenderingManager;\r\n    /** @internal */\r\n    public _waitingRenderList?: string[];\r\n    protected _doNotChangeAspectRatio: boolean;\r\n    protected _currentRefreshId = -1;\r\n    protected _refreshRate = 1;\r\n    protected _textureMatrix: Matrix;\r\n    protected _samples = 1;\r\n    protected _renderTargetOptions: RenderTargetCreationOptions;\r\n    private _canRescale = true;\r\n    protected _renderTarget: Nullable<RenderTargetWrapper> = null;\r\n    /**\r\n     * Current render pass id of the render target texture. Note it can change over the rendering as there's a separate id for each face of a cube / each layer of an array layer!\r\n     */\r\n    public renderPassId: number;\r\n    private _renderPassIds: number[];\r\n    /**\r\n     * Gets the render pass ids used by the render target texture. For a single render target the array length will be 1, for a cube texture it will be 6 and for\r\n     * a 2D texture array it will return an array of ids the size of the 2D texture array\r\n     */\r\n    public get renderPassIds(): readonly number[] {\r\n        return this._renderPassIds;\r\n    }\r\n\r\n    /**\r\n     * Gets the current value of the refreshId counter\r\n     */\r\n    public get currentRefreshId() {\r\n        return this._currentRefreshId;\r\n    }\r\n\r\n    /**\r\n     * Sets a specific material to be used to render a mesh/a list of meshes in this render target texture\r\n     * @param mesh mesh or array of meshes\r\n     * @param material material or array of materials to use for this render pass. If undefined is passed, no specific material will be used but the regular material instead (mesh.material). It's possible to provide an array of materials to use a different material for each rendering in the case of a cube texture (6 rendering) and a 2D texture array (as many rendering as the length of the array)\r\n     */\r\n    public setMaterialForRendering(mesh: AbstractMesh | AbstractMesh[], material?: Material | Material[]): void {\r\n        let meshes;\r\n        if (!Array.isArray(mesh)) {\r\n            meshes = [mesh];\r\n        } else {\r\n            meshes = mesh;\r\n        }\r\n        for (let j = 0; j < meshes.length; ++j) {\r\n            for (let i = 0; i < this._renderPassIds.length; ++i) {\r\n                meshes[j].setMaterialForRenderPass(this._renderPassIds[i], material !== undefined ? (Array.isArray(material) ? material[i] : material) : undefined);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isCubeData: boolean;\r\n\r\n    /**\r\n     * Define if the texture has multiple draw buffers or if false a single draw buffer.\r\n     */\r\n    public get isMulti(): boolean {\r\n        return this._renderTarget?.isMulti ?? false;\r\n    }\r\n\r\n    /**\r\n     * Gets render target creation options that were used.\r\n     */\r\n    public get renderTargetOptions(): RenderTargetCreationOptions {\r\n        return this._renderTargetOptions;\r\n    }\r\n\r\n    /**\r\n     * Gets the render target wrapper associated with this render target\r\n     */\r\n    public get renderTarget(): Nullable<RenderTargetWrapper> {\r\n        return this._renderTarget;\r\n    }\r\n\r\n    protected _onRatioRescale(): void {\r\n        if (this._sizeRatio) {\r\n            this.resize(this._initialSizeParameter);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the center of the bounding box associated with the texture (when in cube mode)\r\n     * It must define where the camera used to render the texture is set\r\n     */\r\n    public boundingBoxPosition = Vector3.Zero();\r\n\r\n    private _boundingBoxSize: Vector3;\r\n\r\n    /**\r\n     * Gets or sets the size of the bounding box associated with the texture (when in cube mode)\r\n     * When defined, the cubemap will switch to local mode\r\n     * @see https://community.arm.com/graphics/b/blog/posts/reflections-based-on-local-cubemaps-in-unity\r\n     * @example https://www.babylonjs-playground.com/#RNASML\r\n     */\r\n    public set boundingBoxSize(value: Vector3) {\r\n        if (this._boundingBoxSize && this._boundingBoxSize.equals(value)) {\r\n            return;\r\n        }\r\n        this._boundingBoxSize = value;\r\n        const scene = this.getScene();\r\n        if (scene) {\r\n            scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n        }\r\n    }\r\n    public get boundingBoxSize(): Vector3 {\r\n        return this._boundingBoxSize;\r\n    }\r\n\r\n    /**\r\n     * In case the RTT has been created with a depth texture, get the associated\r\n     * depth texture.\r\n     * Otherwise, return null.\r\n     */\r\n    public get depthStencilTexture(): Nullable<InternalTexture> {\r\n        return this._renderTarget?._depthStencilTexture ?? null;\r\n    }\r\n\r\n    /**\r\n     * Instantiate a render target texture. This is mainly used to render of screen the scene to for instance apply post process\r\n     * or used a shadow, depth texture...\r\n     * @param name The friendly name of the texture\r\n     * @param size The size of the RTT (number if square, or {width: number, height:number} or {ratio:} to define a ratio from the main scene)\r\n     * @param scene The scene the RTT belongs to. Default is the last created scene.\r\n     * @param options The options for creating the render target texture.\r\n     */\r\n    constructor(name: string, size: number | { width: number; height: number; layers?: number } | { ratio: number }, scene?: Nullable<Scene>, options?: RenderTargetTextureOptions);\r\n\r\n    /**\r\n     * Instantiate a render target texture. This is mainly used to render of screen the scene to for instance apply post process\r\n     * or used a shadow, depth texture...\r\n     * @param name The friendly name of the texture\r\n     * @param size The size of the RTT (number if square, or {width: number, height:number} or {ratio:} to define a ratio from the main scene)\r\n     * @param scene The scene the RTT belongs to. Default is the last created scene\r\n     * @param generateMipMaps True (default: false) if mipmaps need to be generated after render\r\n     * @param doNotChangeAspectRatio True (default) to not change the aspect ratio of the scene in the RTT\r\n     * @param type The type of the buffer in the RTT (byte (default), half float, float...)\r\n     * @param isCube True (default: false) if a cube texture needs to be created\r\n     * @param samplingMode The sampling mode to be used with the render target (Trilinear (default), Linear, Nearest...)\r\n     * @param generateDepthBuffer True (default) to generate a depth buffer\r\n     * @param generateStencilBuffer True (default: false) to generate a stencil buffer\r\n     * @param isMulti True (default: false) if multiple textures need to be created (Draw Buffers)\r\n     * @param format The internal format of the buffer in the RTT (RED, RG, RGB, RGBA (default), ALPHA...)\r\n     * @param delayAllocation True (default: false) if the texture allocation should be delayed\r\n     * @param samples Sample count to use when creating the RTT\r\n     * @param creationFlags specific flags to use when creating the texture (e.g., Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures)\r\n     * @param noColorAttachment True (default: false) to indicate that no color target should be created. (e.g., if you only want to write to the depth buffer)\r\n     * @param useSRGBBuffer True (default: false) to create a SRGB texture\r\n     */\r\n    constructor(\r\n        name: string,\r\n        size: number | { width: number; height: number; layers?: number } | { ratio: number },\r\n        scene?: Nullable<Scene>,\r\n        generateMipMaps?: boolean,\r\n        doNotChangeAspectRatio?: boolean,\r\n        type?: number,\r\n        isCube?: boolean,\r\n        samplingMode?: number,\r\n        generateDepthBuffer?: boolean,\r\n        generateStencilBuffer?: boolean,\r\n        isMulti?: boolean,\r\n        format?: number,\r\n        delayAllocation?: boolean,\r\n        samples?: number,\r\n        creationFlags?: number,\r\n        noColorAttachment?: boolean,\r\n        useSRGBBuffer?: boolean\r\n    );\r\n\r\n    /** @internal */\r\n    constructor(\r\n        name: string,\r\n        size: number | { width: number; height: number; layers?: number } | { ratio: number },\r\n        scene?: Nullable<Scene>,\r\n        generateMipMaps: boolean | RenderTargetTextureOptions = false,\r\n        doNotChangeAspectRatio: boolean = true,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        isCube = false,\r\n        samplingMode = Texture.TRILINEAR_SAMPLINGMODE,\r\n        generateDepthBuffer = true,\r\n        generateStencilBuffer = false,\r\n        isMulti = false,\r\n        format = Constants.TEXTUREFORMAT_RGBA,\r\n        delayAllocation = false,\r\n        samples?: number,\r\n        creationFlags?: number,\r\n        noColorAttachment = false,\r\n        useSRGBBuffer = false\r\n    ) {\r\n        let colorAttachment: InternalTexture | undefined = undefined;\r\n        let gammaSpace = true;\r\n        if (typeof generateMipMaps === \"object\") {\r\n            const options = generateMipMaps;\r\n            generateMipMaps = !!options.generateMipMaps;\r\n            doNotChangeAspectRatio = options.doNotChangeAspectRatio ?? true;\r\n            type = options.type ?? Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n            isCube = !!options.isCube;\r\n            samplingMode = options.samplingMode ?? Texture.TRILINEAR_SAMPLINGMODE;\r\n            generateDepthBuffer = options.generateDepthBuffer ?? true;\r\n            generateStencilBuffer = !!options.generateStencilBuffer;\r\n            isMulti = !!options.isMulti;\r\n            format = options.format ?? Constants.TEXTUREFORMAT_RGBA;\r\n            delayAllocation = !!options.delayAllocation;\r\n            samples = options.samples;\r\n            creationFlags = options.creationFlags;\r\n            noColorAttachment = !!options.noColorAttachment;\r\n            useSRGBBuffer = !!options.useSRGBBuffer;\r\n            colorAttachment = options.colorAttachment;\r\n            gammaSpace = options.gammaSpace ?? gammaSpace;\r\n        }\r\n\r\n        super(null, scene, !generateMipMaps, undefined, samplingMode, undefined, undefined, undefined, undefined, format);\r\n\r\n        scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        const engine = this.getScene()!.getEngine();\r\n\r\n        this._gammaSpace = gammaSpace;\r\n        this._coordinatesMode = Texture.PROJECTION_MODE;\r\n        this.renderList = [] as AbstractMesh[];\r\n        this.name = name;\r\n        this.isRenderTarget = true;\r\n        this._initialSizeParameter = size;\r\n        this._renderPassIds = [];\r\n        this._isCubeData = isCube;\r\n\r\n        this._processSizeParameter(size);\r\n\r\n        this.renderPassId = this._renderPassIds[0];\r\n\r\n        this._resizeObserver = engine.onResizeObservable.add(() => {});\r\n\r\n        this._generateMipMaps = generateMipMaps ? true : false;\r\n        this._doNotChangeAspectRatio = doNotChangeAspectRatio;\r\n\r\n        // Rendering groups\r\n        this._renderingManager = new RenderingManager(scene);\r\n        this._renderingManager._useSceneAutoClearSetup = true;\r\n\r\n        if (isMulti) {\r\n            return;\r\n        }\r\n\r\n        this._renderTargetOptions = {\r\n            generateMipMaps: generateMipMaps,\r\n            type: type,\r\n            format: this._format ?? undefined,\r\n            samplingMode: this.samplingMode,\r\n            generateDepthBuffer: generateDepthBuffer,\r\n            generateStencilBuffer: generateStencilBuffer,\r\n            samples,\r\n            creationFlags,\r\n            noColorAttachment: noColorAttachment,\r\n            useSRGBBuffer,\r\n            colorAttachment: colorAttachment,\r\n            label: this.name,\r\n        };\r\n\r\n        if (this.samplingMode === Texture.NEAREST_SAMPLINGMODE) {\r\n            this.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n            this.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        }\r\n\r\n        if (!delayAllocation) {\r\n            if (isCube) {\r\n                this._renderTarget = scene.getEngine().createRenderTargetCubeTexture(this.getRenderSize(), this._renderTargetOptions);\r\n                this.coordinatesMode = Texture.INVCUBIC_MODE;\r\n                this._textureMatrix = Matrix.Identity();\r\n            } else {\r\n                this._renderTarget = scene.getEngine().createRenderTargetTexture(this._size, this._renderTargetOptions);\r\n            }\r\n            this._texture = this._renderTarget.texture;\r\n            if (samples !== undefined) {\r\n                this.samples = samples;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a depth stencil texture.\r\n     * This is only available in WebGL 2 or with the depth texture extension available.\r\n     * @param comparisonFunction Specifies the comparison function to set on the texture. If 0 or undefined, the texture is not in comparison mode (default: 0)\r\n     * @param bilinearFiltering Specifies whether or not bilinear filtering is enable on the texture (default: true)\r\n     * @param generateStencil Specifies whether or not a stencil should be allocated in the texture (default: false)\r\n     * @param samples sample count of the depth/stencil texture (default: 1)\r\n     * @param format format of the depth texture (default: Constants.TEXTUREFORMAT_DEPTH32_FLOAT)\r\n     */\r\n    public createDepthStencilTexture(\r\n        comparisonFunction: number = 0,\r\n        bilinearFiltering: boolean = true,\r\n        generateStencil: boolean = false,\r\n        samples: number = 1,\r\n        format: number = Constants.TEXTUREFORMAT_DEPTH32_FLOAT\r\n    ): void {\r\n        this._renderTarget?.createDepthStencilTexture(comparisonFunction, bilinearFiltering, generateStencil, samples, format);\r\n    }\r\n\r\n    private _releaseRenderPassId(): void {\r\n        if (this._scene) {\r\n            const engine = this._scene.getEngine();\r\n            for (let i = 0; i < this._renderPassIds.length; ++i) {\r\n                engine.releaseRenderPassId(this._renderPassIds[i]);\r\n            }\r\n        }\r\n        this._renderPassIds = [];\r\n    }\r\n\r\n    private _createRenderPassId(): void {\r\n        this._releaseRenderPassId();\r\n\r\n        const engine = this._scene!.getEngine(); // scene can't be null in a RenderTargetTexture, see constructor\r\n        const numPasses = this._isCubeData ? 6 : this.getRenderLayers() || 1;\r\n\r\n        for (let i = 0; i < numPasses; ++i) {\r\n            this._renderPassIds[i] = engine.createRenderPassId(`RenderTargetTexture - ${this.name}#${i}`);\r\n        }\r\n    }\r\n\r\n    protected _processSizeParameter(size: number | { width: number; height: number } | { ratio: number }, createRenderPassIds = true): void {\r\n        if ((<{ ratio: number }>size).ratio) {\r\n            this._sizeRatio = (<{ ratio: number }>size).ratio;\r\n            const engine = this._getEngine()!;\r\n            this._size = {\r\n                width: this._bestReflectionRenderTargetDimension(engine.getRenderWidth(), this._sizeRatio),\r\n                height: this._bestReflectionRenderTargetDimension(engine.getRenderHeight(), this._sizeRatio),\r\n            };\r\n        } else {\r\n            this._size = <number | { width: number; height: number; layers?: number }>size;\r\n        }\r\n\r\n        if (createRenderPassIds) {\r\n            this._createRenderPassId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Define the number of samples to use in case of MSAA.\r\n     * It defaults to one meaning no MSAA has been enabled.\r\n     */\r\n    public get samples(): number {\r\n        return this._renderTarget?.samples ?? this._samples;\r\n    }\r\n\r\n    public set samples(value: number) {\r\n        if (this._renderTarget) {\r\n            this._samples = this._renderTarget.setSamples(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the refresh counter of the texture and start bak from scratch.\r\n     * Could be useful to regenerate the texture if it is setup to render only once.\r\n     */\r\n    public resetRefreshCounter(): void {\r\n        this._currentRefreshId = -1;\r\n    }\r\n\r\n    /**\r\n     * Define the refresh rate of the texture or the rendering frequency.\r\n     * Use 0 to render just once, 1 to render on every frame, 2 to render every two frames and so on...\r\n     */\r\n    public get refreshRate(): number {\r\n        return this._refreshRate;\r\n    }\r\n    public set refreshRate(value: number) {\r\n        this._refreshRate = value;\r\n        this.resetRefreshCounter();\r\n    }\r\n\r\n    /**\r\n     * Adds a post process to the render target rendering passes.\r\n     * @param postProcess define the post process to add\r\n     */\r\n    public addPostProcess(postProcess: PostProcess): void {\r\n        if (!this._postProcessManager) {\r\n            const scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n            this._postProcessManager = new PostProcessManager(scene);\r\n            this._postProcesses = new Array<PostProcess>();\r\n        }\r\n\r\n        this._postProcesses.push(postProcess);\r\n        this._postProcesses[0].autoClear = false;\r\n    }\r\n\r\n    /**\r\n     * Clear all the post processes attached to the render target\r\n     * @param dispose define if the cleared post processes should also be disposed (false by default)\r\n     */\r\n    public clearPostProcesses(dispose: boolean = false): void {\r\n        if (!this._postProcesses) {\r\n            return;\r\n        }\r\n\r\n        if (dispose) {\r\n            for (const postProcess of this._postProcesses) {\r\n                postProcess.dispose();\r\n            }\r\n        }\r\n\r\n        this._postProcesses = [];\r\n    }\r\n\r\n    /**\r\n     * Remove one of the post process from the list of attached post processes to the texture\r\n     * @param postProcess define the post process to remove from the list\r\n     */\r\n    public removePostProcess(postProcess: PostProcess): void {\r\n        if (!this._postProcesses) {\r\n            return;\r\n        }\r\n\r\n        const index = this._postProcesses.indexOf(postProcess);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        this._postProcesses.splice(index, 1);\r\n\r\n        if (this._postProcesses.length > 0) {\r\n            this._postProcesses[0].autoClear = false;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _shouldRender(): boolean {\r\n        if (this._currentRefreshId === -1) {\r\n            // At least render once\r\n            this._currentRefreshId = 1;\r\n            return true;\r\n        }\r\n\r\n        if (this.refreshRate === this._currentRefreshId) {\r\n            this._currentRefreshId = 1;\r\n            return true;\r\n        }\r\n\r\n        this._currentRefreshId++;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the actual render size of the texture.\r\n     * @returns the width of the render size\r\n     */\r\n    public getRenderSize(): number {\r\n        return this.getRenderWidth();\r\n    }\r\n\r\n    /**\r\n     * Gets the actual render width of the texture.\r\n     * @returns the width of the render size\r\n     */\r\n    public getRenderWidth(): number {\r\n        if ((<{ width: number; height: number }>this._size).width) {\r\n            return (<{ width: number; height: number }>this._size).width;\r\n        }\r\n\r\n        return <number>this._size;\r\n    }\r\n\r\n    /**\r\n     * Gets the actual render height of the texture.\r\n     * @returns the height of the render size\r\n     */\r\n    public getRenderHeight(): number {\r\n        if ((<{ width: number; height: number }>this._size).width) {\r\n            return (<{ width: number; height: number }>this._size).height;\r\n        }\r\n\r\n        return <number>this._size;\r\n    }\r\n\r\n    /**\r\n     * Gets the actual number of layers of the texture.\r\n     * @returns the number of layers\r\n     */\r\n    public getRenderLayers(): number {\r\n        const layers = (<{ width: number; height: number; layers?: number }>this._size).layers;\r\n        if (layers) {\r\n            return layers;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Don't allow this render target texture to rescale. Mainly used to prevent rescaling by the scene optimizer.\r\n     */\r\n    public disableRescaling() {\r\n        this._canRescale = false;\r\n    }\r\n\r\n    /**\r\n     * Get if the texture can be rescaled or not.\r\n     */\r\n    public get canRescale(): boolean {\r\n        return this._canRescale;\r\n    }\r\n\r\n    /**\r\n     * Resize the texture using a ratio.\r\n     * @param ratio the ratio to apply to the texture size in order to compute the new target size\r\n     */\r\n    public scale(ratio: number): void {\r\n        const newSize = Math.max(1, this.getRenderSize() * ratio);\r\n\r\n        this.resize(newSize);\r\n    }\r\n\r\n    /**\r\n     * Get the texture reflection matrix used to rotate/transform the reflection.\r\n     * @returns the reflection matrix\r\n     */\r\n    public getReflectionTextureMatrix(): Matrix {\r\n        if (this.isCube) {\r\n            return this._textureMatrix;\r\n        }\r\n\r\n        return super.getReflectionTextureMatrix();\r\n    }\r\n\r\n    /**\r\n     * Resize the texture to a new desired size.\r\n     * Be careful as it will recreate all the data in the new texture.\r\n     * @param size Define the new size. It can be:\r\n     *   - a number for squared texture,\r\n     *   - an object containing { width: number, height: number }\r\n     *   - or an object containing a ratio { ratio: number }\r\n     */\r\n    public resize(size: number | { width: number; height: number } | { ratio: number }): void {\r\n        const wasCube = this.isCube;\r\n\r\n        this._renderTarget?.dispose();\r\n        this._renderTarget = null;\r\n\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._processSizeParameter(size, false);\r\n\r\n        if (wasCube) {\r\n            this._renderTarget = scene.getEngine().createRenderTargetCubeTexture(this.getRenderSize(), this._renderTargetOptions);\r\n        } else {\r\n            this._renderTarget = scene.getEngine().createRenderTargetTexture(this._size, this._renderTargetOptions);\r\n        }\r\n        this._texture = this._renderTarget.texture;\r\n\r\n        if (this._renderTargetOptions.samples !== undefined) {\r\n            this.samples = this._renderTargetOptions.samples;\r\n        }\r\n\r\n        if (this.onResizeObservable.hasObservers()) {\r\n            this.onResizeObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    private _defaultRenderListPrepared: boolean;\r\n\r\n    /**\r\n     * Renders all the objects from the render list into the texture.\r\n     * @param useCameraPostProcess Define if camera post processes should be used during the rendering\r\n     * @param dumpForDebug Define if the rendering result should be dumped (copied) for debugging purpose\r\n     */\r\n    public render(useCameraPostProcess: boolean = false, dumpForDebug: boolean = false): void {\r\n        this._render(useCameraPostProcess, dumpForDebug);\r\n    }\r\n\r\n    /**\r\n     * This function will check if the render target texture can be rendered (textures are loaded, shaders are compiled)\r\n     * @returns true if all required resources are ready\r\n     */\r\n    public isReadyForRendering(): boolean {\r\n        return this._render(false, false, true);\r\n    }\r\n\r\n    private _render(useCameraPostProcess: boolean = false, dumpForDebug: boolean = false, checkReadiness: boolean = false): boolean {\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return checkReadiness;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        if (this.useCameraPostProcesses !== undefined) {\r\n            useCameraPostProcess = this.useCameraPostProcesses;\r\n        }\r\n\r\n        if (this._waitingRenderList) {\r\n            if (!this.renderListPredicate) {\r\n                this.renderList = [];\r\n                for (let index = 0; index < this._waitingRenderList.length; index++) {\r\n                    const id = this._waitingRenderList[index];\r\n                    const mesh = scene.getMeshById(id);\r\n                    if (mesh) {\r\n                        this.renderList.push(mesh);\r\n                    }\r\n                }\r\n            }\r\n            this._waitingRenderList = undefined;\r\n        }\r\n\r\n        // Is predicate defined?\r\n        if (this.renderListPredicate) {\r\n            if (this.renderList) {\r\n                this.renderList.length = 0; // Clear previous renderList\r\n            } else {\r\n                this.renderList = [];\r\n            }\r\n\r\n            const scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return checkReadiness;\r\n            }\r\n\r\n            const sceneMeshes = scene.meshes;\r\n\r\n            for (let index = 0; index < sceneMeshes.length; index++) {\r\n                const mesh = sceneMeshes[index];\r\n                if (this.renderListPredicate(mesh)) {\r\n                    this.renderList.push(mesh);\r\n                }\r\n            }\r\n        }\r\n\r\n        const currentRenderPassId = engine.currentRenderPassId;\r\n\r\n        this.onBeforeBindObservable.notifyObservers(this);\r\n\r\n        // Set custom projection.\r\n        // Needs to be before binding to prevent changing the aspect ratio.\r\n        const camera: Nullable<Camera> = this.activeCamera ?? scene.activeCamera;\r\n        const sceneCamera = scene.activeCamera;\r\n\r\n        if (camera) {\r\n            if (camera !== scene.activeCamera) {\r\n                scene.setTransformMatrix(camera.getViewMatrix(), camera.getProjectionMatrix(true));\r\n                scene.activeCamera = camera;\r\n            }\r\n            engine.setViewport(camera.rigParent ? camera.rigParent.viewport : camera.viewport, this.getRenderWidth(), this.getRenderHeight());\r\n        }\r\n\r\n        this._defaultRenderListPrepared = false;\r\n\r\n        let returnValue = checkReadiness;\r\n\r\n        if (!checkReadiness) {\r\n            if (this.is2DArray && !this.isMulti) {\r\n                for (let layer = 0; layer < this.getRenderLayers(); layer++) {\r\n                    this._renderToTarget(0, useCameraPostProcess, dumpForDebug, layer, camera);\r\n                    scene.incrementRenderId();\r\n                    scene.resetCachedMaterial();\r\n                }\r\n            } else if (this.isCube && !this.isMulti) {\r\n                for (let face = 0; face < 6; face++) {\r\n                    this._renderToTarget(face, useCameraPostProcess, dumpForDebug, undefined, camera);\r\n                    scene.incrementRenderId();\r\n                    scene.resetCachedMaterial();\r\n                }\r\n            } else {\r\n                this._renderToTarget(0, useCameraPostProcess, dumpForDebug, undefined, camera);\r\n            }\r\n        } else {\r\n            if (!scene.getViewMatrix()) {\r\n                // We probably didn't execute scene.render() yet, so make sure we have a view/projection matrix setup for the scene\r\n                scene.updateTransformMatrix();\r\n            }\r\n            const numLayers = this.is2DArray ? this.getRenderLayers() : this.isCube ? 6 : 1;\r\n            for (let layer = 0; layer < numLayers && returnValue; layer++) {\r\n                let currentRenderList: Nullable<Array<AbstractMesh>> = null;\r\n                const defaultRenderList = this.renderList ? this.renderList : scene.getActiveMeshes().data;\r\n                const defaultRenderListLength = this.renderList ? this.renderList.length : scene.getActiveMeshes().length;\r\n\r\n                engine.currentRenderPassId = this._renderPassIds[layer];\r\n\r\n                this.onBeforeRenderObservable.notifyObservers(layer);\r\n\r\n                if (this.getCustomRenderList) {\r\n                    currentRenderList = this.getCustomRenderList(layer, defaultRenderList, defaultRenderListLength);\r\n                }\r\n\r\n                if (!currentRenderList) {\r\n                    currentRenderList = defaultRenderList;\r\n                }\r\n\r\n                if (!this._doNotChangeAspectRatio) {\r\n                    scene.updateTransformMatrix(true);\r\n                }\r\n\r\n                for (let i = 0; i < currentRenderList.length && returnValue; ++i) {\r\n                    const mesh = currentRenderList[i];\r\n\r\n                    if (!mesh.isEnabled() || mesh.isBlocked || !mesh.isVisible || !mesh.subMeshes) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (this.customIsReadyFunction) {\r\n                        if (!this.customIsReadyFunction(mesh, this.refreshRate, checkReadiness)) {\r\n                            returnValue = false;\r\n                            continue;\r\n                        }\r\n                    } else if (!mesh.isReady(true)) {\r\n                        returnValue = false;\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                this.onAfterRenderObservable.notifyObservers(layer);\r\n\r\n                if (this.is2DArray || this.isCube) {\r\n                    scene.incrementRenderId();\r\n                    scene.resetCachedMaterial();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onAfterUnbindObservable.notifyObservers(this);\r\n\r\n        engine.currentRenderPassId = currentRenderPassId;\r\n\r\n        if (sceneCamera) {\r\n            scene.activeCamera = sceneCamera;\r\n            if (this.activeCamera && this.activeCamera !== scene.activeCamera) {\r\n                scene.setTransformMatrix(scene.activeCamera.getViewMatrix(), scene.activeCamera.getProjectionMatrix(true));\r\n            }\r\n            engine.setViewport(scene.activeCamera.viewport);\r\n        }\r\n\r\n        scene.resetCachedMaterial();\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    private _bestReflectionRenderTargetDimension(renderDimension: number, scale: number): number {\r\n        const minimum = 128;\r\n        const x = renderDimension * scale;\r\n        const curved = Engine.NearestPOT(x + (minimum * minimum) / (minimum + x));\r\n\r\n        // Ensure we don't exceed the render dimension (while staying POT)\r\n        return Math.min(Engine.FloorPOT(renderDimension), curved);\r\n    }\r\n\r\n    private _prepareRenderingManager(currentRenderList: Array<AbstractMesh>, currentRenderListLength: number, camera: Nullable<Camera>, checkLayerMask: boolean): void {\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._renderingManager.reset();\r\n\r\n        const sceneRenderId = scene.getRenderId();\r\n        for (let meshIndex = 0; meshIndex < currentRenderListLength; meshIndex++) {\r\n            const mesh = currentRenderList[meshIndex];\r\n\r\n            if (mesh && !mesh.isBlocked) {\r\n                if (this.customIsReadyFunction) {\r\n                    if (!this.customIsReadyFunction(mesh, this.refreshRate, false)) {\r\n                        this.resetRefreshCounter();\r\n                        continue;\r\n                    }\r\n                } else if (!mesh.isReady(this.refreshRate === 0)) {\r\n                    this.resetRefreshCounter();\r\n                    continue;\r\n                }\r\n\r\n                if (!mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate && scene.activeCamera) {\r\n                    mesh._internalAbstractMeshDataInfo._currentLOD = scene.customLODSelector\r\n                        ? scene.customLODSelector(mesh, this.activeCamera || scene.activeCamera)\r\n                        : mesh.getLOD(this.activeCamera || scene.activeCamera);\r\n                    mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = true;\r\n                }\r\n                if (!mesh._internalAbstractMeshDataInfo._currentLOD) {\r\n                    continue;\r\n                }\r\n\r\n                let meshToRender = mesh._internalAbstractMeshDataInfo._currentLOD;\r\n\r\n                meshToRender._preActivateForIntermediateRendering(sceneRenderId);\r\n\r\n                let isMasked;\r\n                if (checkLayerMask && camera) {\r\n                    isMasked = (mesh.layerMask & camera.layerMask) === 0;\r\n                } else {\r\n                    isMasked = false;\r\n                }\r\n\r\n                if (mesh.isEnabled() && mesh.isVisible && mesh.subMeshes && !isMasked) {\r\n                    if (meshToRender !== mesh) {\r\n                        meshToRender._activate(sceneRenderId, true);\r\n                    }\r\n                    if (mesh._activate(sceneRenderId, true) && mesh.subMeshes.length) {\r\n                        if (!mesh.isAnInstance) {\r\n                            meshToRender._internalAbstractMeshDataInfo._onlyForInstancesIntermediate = false;\r\n                        } else {\r\n                            if (mesh._internalAbstractMeshDataInfo._actAsRegularMesh) {\r\n                                meshToRender = mesh;\r\n                            }\r\n                        }\r\n                        meshToRender._internalAbstractMeshDataInfo._isActiveIntermediate = true;\r\n\r\n                        for (let subIndex = 0; subIndex < meshToRender.subMeshes.length; subIndex++) {\r\n                            const subMesh = meshToRender.subMeshes[subIndex];\r\n                            this._renderingManager.dispatch(subMesh, meshToRender);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let particleIndex = 0; particleIndex < scene.particleSystems.length; particleIndex++) {\r\n            const particleSystem = scene.particleSystems[particleIndex];\r\n\r\n            const emitter: any = particleSystem.emitter;\r\n\r\n            if (!particleSystem.isStarted() || !emitter || (emitter.position && !emitter.isEnabled())) {\r\n                continue;\r\n            }\r\n\r\n            this._renderingManager.dispatchParticles(particleSystem);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param faceIndex face index to bind to if this is a cubetexture\r\n     * @param layer defines the index of the texture to bind in the array\r\n     */\r\n    public _bindFrameBuffer(faceIndex: number = 0, layer = 0) {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n        if (this._renderTarget) {\r\n            engine.bindFramebuffer(this._renderTarget, this.isCube ? faceIndex : undefined, undefined, undefined, this.ignoreCameraViewport, 0, layer);\r\n        }\r\n    }\r\n\r\n    protected _unbindFrameBuffer(engine: Engine, faceIndex: number): void {\r\n        if (!this._renderTarget) {\r\n            return;\r\n        }\r\n        engine.unBindFramebuffer(this._renderTarget, this.isCube, () => {\r\n            this.onAfterRenderObservable.notifyObservers(faceIndex);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _prepareFrame(scene: Scene, faceIndex?: number, layer?: number, useCameraPostProcess?: boolean) {\r\n        if (this._postProcessManager) {\r\n            if (!this._prePassEnabled) {\r\n                this._postProcessManager._prepareFrame(this._texture, this._postProcesses);\r\n            }\r\n        } else if (!useCameraPostProcess || !scene.postProcessManager._prepareFrame(this._texture)) {\r\n            this._bindFrameBuffer(faceIndex, layer);\r\n        }\r\n    }\r\n\r\n    private _renderToTarget(faceIndex: number, useCameraPostProcess: boolean, dumpForDebug: boolean, layer = 0, camera: Nullable<Camera> = null): void {\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        engine._debugPushGroup?.(`render to face #${faceIndex} layer #${layer}`, 1);\r\n\r\n        // Bind\r\n        this._prepareFrame(scene, faceIndex, layer, useCameraPostProcess);\r\n\r\n        if (this.is2DArray) {\r\n            engine.currentRenderPassId = this._renderPassIds[layer];\r\n            this.onBeforeRenderObservable.notifyObservers(layer);\r\n        } else {\r\n            engine.currentRenderPassId = this._renderPassIds[faceIndex];\r\n            this.onBeforeRenderObservable.notifyObservers(faceIndex);\r\n        }\r\n\r\n        const fastPath = engine.snapshotRendering && engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST;\r\n\r\n        if (!fastPath) {\r\n            // Get the list of meshes to render\r\n            let currentRenderList: Nullable<Array<AbstractMesh>> = null;\r\n            const defaultRenderList = this.renderList ? this.renderList : scene.getActiveMeshes().data;\r\n            const defaultRenderListLength = this.renderList ? this.renderList.length : scene.getActiveMeshes().length;\r\n\r\n            if (this.getCustomRenderList) {\r\n                currentRenderList = this.getCustomRenderList(this.is2DArray ? layer : faceIndex, defaultRenderList, defaultRenderListLength);\r\n            }\r\n\r\n            if (!currentRenderList) {\r\n                // No custom render list provided, we prepare the rendering for the default list, but check\r\n                // first if we did not already performed the preparation before so as to avoid re-doing it several times\r\n                if (!this._defaultRenderListPrepared) {\r\n                    this._prepareRenderingManager(defaultRenderList, defaultRenderListLength, camera, !this.renderList || this.forceLayerMaskCheck);\r\n                    this._defaultRenderListPrepared = true;\r\n                }\r\n                currentRenderList = defaultRenderList;\r\n            } else {\r\n                // Prepare the rendering for the custom render list provided\r\n                this._prepareRenderingManager(currentRenderList, currentRenderList.length, camera, this.forceLayerMaskCheck);\r\n            }\r\n\r\n            // Before clear\r\n            for (const step of scene._beforeRenderTargetClearStage) {\r\n                step.action(this, faceIndex, layer);\r\n            }\r\n\r\n            // Clear\r\n            if (this.onClearObservable.hasObservers()) {\r\n                this.onClearObservable.notifyObservers(engine);\r\n            } else if (!this.skipInitialClear) {\r\n                engine.clear(this.clearColor || scene.clearColor, true, true, true);\r\n            }\r\n\r\n            if (!this._doNotChangeAspectRatio) {\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n\r\n            // Before Camera Draw\r\n            for (const step of scene._beforeRenderTargetDrawStage) {\r\n                step.action(this, faceIndex, layer);\r\n            }\r\n\r\n            // Render\r\n            this._renderingManager.render(this.customRenderFunction, currentRenderList, this.renderParticles, this.renderSprites);\r\n\r\n            // After Camera Draw\r\n            for (const step of scene._afterRenderTargetDrawStage) {\r\n                step.action(this, faceIndex, layer);\r\n            }\r\n\r\n            const saveGenerateMipMaps = this._texture?.generateMipMaps ?? false;\r\n\r\n            if (this._texture) {\r\n                this._texture.generateMipMaps = false; // if left true, the mipmaps will be generated (if this._texture.generateMipMaps = true) when the first post process binds its own RTT: by doing so it will unbind the current RTT,\r\n                // which will trigger a mipmap generation. We don't want this because it's a wasted work, we will do an unbind of the current RTT at the end of the process (see unbindFrameBuffer) which will\r\n                // trigger the generation of the final mipmaps\r\n            }\r\n\r\n            if (this._postProcessManager) {\r\n                this._postProcessManager._finalizeFrame(false, this._renderTarget ?? undefined, faceIndex, this._postProcesses, this.ignoreCameraViewport);\r\n            } else if (useCameraPostProcess) {\r\n                scene.postProcessManager._finalizeFrame(false, this._renderTarget ?? undefined, faceIndex);\r\n            }\r\n\r\n            for (const step of scene._afterRenderTargetPostProcessStage) {\r\n                step.action(this, faceIndex, layer);\r\n            }\r\n\r\n            if (this._texture) {\r\n                this._texture.generateMipMaps = saveGenerateMipMaps;\r\n            }\r\n\r\n            if (!this._doNotChangeAspectRatio) {\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n\r\n            // Dump ?\r\n            if (dumpForDebug) {\r\n                DumpTools.DumpFramebuffer(this.getRenderWidth(), this.getRenderHeight(), engine);\r\n            }\r\n        } else {\r\n            // Clear\r\n            if (this.onClearObservable.hasObservers()) {\r\n                this.onClearObservable.notifyObservers(engine);\r\n            } else {\r\n                if (!this.skipInitialClear) {\r\n                    engine.clear(this.clearColor || scene.clearColor, true, true, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Unbind\r\n        this._unbindFrameBuffer(engine, faceIndex);\r\n\r\n        if (this._texture && this.isCube && faceIndex === 5) {\r\n            engine.generateMipMapsForCubemap(this._texture);\r\n        }\r\n\r\n        engine._debugPopGroup?.(1);\r\n    }\r\n\r\n    /**\r\n     * Overrides the default sort function applied in the rendering group to prepare the meshes.\r\n     * This allowed control for front to back rendering or reversely depending of the special needs.\r\n     *\r\n     * @param renderingGroupId The rendering group id corresponding to its index\r\n     * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\r\n     * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\r\n     * @param transparentSortCompareFn The transparent queue comparison function use to sort.\r\n     */\r\n    public setRenderingOrder(\r\n        renderingGroupId: number,\r\n        opaqueSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        alphaTestSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        transparentSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null\r\n    ): void {\r\n        this._renderingManager.setRenderingOrder(renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn);\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\r\n     *\r\n     * @param renderingGroupId The rendering group id corresponding to its index\r\n     * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\r\n     */\r\n    public setRenderingAutoClearDepthStencil(renderingGroupId: number, autoClearDepthStencil: boolean): void {\r\n        this._renderingManager.setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil);\r\n        this._renderingManager._useSceneAutoClearSetup = false;\r\n    }\r\n\r\n    /**\r\n     * Clones the texture.\r\n     * @returns the cloned texture\r\n     */\r\n    public clone(): RenderTargetTexture {\r\n        const textureSize = this.getSize();\r\n        const newTexture = new RenderTargetTexture(\r\n            this.name,\r\n            textureSize,\r\n            this.getScene(),\r\n            this._renderTargetOptions.generateMipMaps,\r\n            this._doNotChangeAspectRatio,\r\n            this._renderTargetOptions.type,\r\n            this.isCube,\r\n            this._renderTargetOptions.samplingMode,\r\n            this._renderTargetOptions.generateDepthBuffer,\r\n            this._renderTargetOptions.generateStencilBuffer,\r\n            undefined,\r\n            this._renderTargetOptions.format,\r\n            undefined,\r\n            this._renderTargetOptions.samples\r\n        );\r\n\r\n        // Base texture\r\n        newTexture.hasAlpha = this.hasAlpha;\r\n        newTexture.level = this.level;\r\n\r\n        // RenderTarget Texture\r\n        newTexture.coordinatesMode = this.coordinatesMode;\r\n        if (this.renderList) {\r\n            newTexture.renderList = this.renderList.slice(0);\r\n        }\r\n\r\n        return newTexture;\r\n    }\r\n\r\n    /**\r\n     * Serialize the texture to a JSON representation we can easily use in the respective Parse function.\r\n     * @returns The JSON representation of the texture\r\n     */\r\n    public serialize(): any {\r\n        if (!this.name) {\r\n            return null;\r\n        }\r\n\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.renderTargetSize = this.getRenderSize();\r\n        serializationObject.renderList = [];\r\n\r\n        if (this.renderList) {\r\n            for (let index = 0; index < this.renderList.length; index++) {\r\n                serializationObject.renderList.push(this.renderList[index].id);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     *  This will remove the attached framebuffer objects. The texture will not be able to be used as render target anymore\r\n     */\r\n    public disposeFramebufferObjects(): void {\r\n        this._renderTarget?.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Release and destroy the underlying lower level texture aka internalTexture.\r\n     */\r\n    public releaseInternalTexture(): void {\r\n        this._renderTarget?.releaseTextures();\r\n        this._texture = null;\r\n    }\r\n\r\n    /**\r\n     * Dispose the texture and release its associated resources.\r\n     */\r\n    public dispose(): void {\r\n        this.onResizeObservable.clear();\r\n        this.onClearObservable.clear();\r\n        this.onAfterRenderObservable.clear();\r\n        this.onAfterUnbindObservable.clear();\r\n        this.onBeforeBindObservable.clear();\r\n        this.onBeforeRenderObservable.clear();\r\n\r\n        if (this._postProcessManager) {\r\n            this._postProcessManager.dispose();\r\n            this._postProcessManager = null;\r\n        }\r\n\r\n        if (this._prePassRenderTarget) {\r\n            this._prePassRenderTarget.dispose();\r\n        }\r\n\r\n        this._releaseRenderPassId();\r\n        this.clearPostProcesses(true);\r\n\r\n        if (this._resizeObserver) {\r\n            this.getScene()!.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n            this._resizeObserver = null;\r\n        }\r\n\r\n        this.renderList = null;\r\n\r\n        // Remove from custom render targets\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        let index = scene.customRenderTargets.indexOf(this);\r\n\r\n        if (index >= 0) {\r\n            scene.customRenderTargets.splice(index, 1);\r\n        }\r\n\r\n        for (const camera of scene.cameras) {\r\n            index = camera.customRenderTargets.indexOf(this);\r\n\r\n            if (index >= 0) {\r\n                camera.customRenderTargets.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        this._renderTarget?.dispose();\r\n        this._renderTarget = null;\r\n        this._texture = null;\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        if (this.refreshRate === RenderTargetTexture.REFRESHRATE_RENDER_ONCE) {\r\n            this.refreshRate = RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\r\n        }\r\n\r\n        if (this._postProcessManager) {\r\n            this._postProcessManager._rebuild();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear the info related to rendering groups preventing retention point in material dispose.\r\n     */\r\n    public freeRenderingGroups(): void {\r\n        if (this._renderingManager) {\r\n            this._renderingManager.freeRenderingGroups();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the number of views the corresponding to the texture (eg. a MultiviewRenderTarget will have > 1)\r\n     * @returns the view count\r\n     */\r\n    public getViewCount() {\r\n        return 1;\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nTexture._CreateRenderTargetTexture = (name: string, renderTargetSize: number, scene: Scene, generateMipMaps: boolean, creationFlags?: number) => {\r\n    return new RenderTargetTexture(name, renderTargetSize, scene, generateMipMaps);\r\n};\r\n", "import { Tools } from \"../../../Misc/tools\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport type { ISceneComponent } from \"../../../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../../../sceneComponent\";\r\n\r\nimport type { ProceduralTexture } from \"./proceduralTexture\";\r\n\r\ndeclare module \"../../../abstractScene\" {\r\n    export interface AbstractScene {\r\n        /**\r\n         * The list of procedural textures added to the scene\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/proceduralTextures\r\n         */\r\n        proceduralTextures: Array<ProceduralTexture>;\r\n    }\r\n}\r\n/**\r\n * Defines the Procedural Texture scene component responsible to manage any Procedural Texture\r\n * in a given scene.\r\n */\r\nexport class ProceduralTextureSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_PROCEDURALTEXTURE;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n        this.scene.proceduralTextures = [] as ProceduralTexture[];\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._beforeClearStage.registerStep(SceneComponentConstants.STEP_BEFORECLEAR_PROCEDURALTEXTURE, this, this._beforeClear);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do here.\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        // Nothing to do here.\r\n    }\r\n\r\n    private _beforeClear(): void {\r\n        if (this.scene.proceduralTexturesEnabled) {\r\n            Tools.StartPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\r\n            for (let proceduralIndex = 0; proceduralIndex < this.scene.proceduralTextures.length; proceduralIndex++) {\r\n                const proceduralTexture = this.scene.proceduralTextures[proceduralIndex];\r\n                if (proceduralTexture._shouldRender()) {\r\n                    proceduralTexture.render();\r\n                }\r\n            }\r\n            Tools.EndPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\r\n        }\r\n    }\r\n}\r\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"proceduralVertexShader\";\nconst shader = `attribute vec2 position;varying vec2 vPosition;varying vec2 vUV;const vec2 madd=vec2(0.5,0.5);\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_VERTEX_MAIN_BEGIN\nvPosition=position;vUV=position*madd+madd;gl_Position=vec4(position,0.0,1.0);\n#define CUSTOM_VERTEX_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const proceduralVertexShader = { name, shader };\n", "import { serialize } from \"../../../Misc/decorators\";\r\nimport { Observable } from \"../../../Misc/observable\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport type { Matrix, Vector3, Vector2 } from \"../../../Maths/math.vector\";\r\nimport type { Color4, Color3 } from \"../../../Maths/math.color\";\r\nimport type { Engine } from \"../../../Engines/engine\";\r\nimport { VertexBuffer } from \"../../../Buffers/buffer\";\r\nimport { SceneComponentConstants } from \"../../../sceneComponent\";\r\n\r\nimport { Material } from \"../../../Materials/material\";\r\nimport type { Effect } from \"../../../Materials/effect\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport type { RenderTargetTextureOptions } from \"../../../Materials/Textures/renderTargetTexture\";\r\nimport { RenderTargetTexture } from \"../../../Materials/Textures/renderTargetTexture\";\r\nimport { ProceduralTextureSceneComponent } from \"./proceduralTextureSceneComponent\";\r\n\r\nimport \"../../../Engines/Extensions/engine.renderTarget\";\r\nimport \"../../../Engines/Extensions/engine.renderTargetCube\";\r\nimport \"../../../Shaders/procedural.vertex\";\r\nimport type { DataBuffer } from \"../../../Buffers/dataBuffer\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { NodeMaterial } from \"../../Node/nodeMaterial\";\r\nimport type { TextureSize } from \"../../../Materials/Textures/textureCreationOptions\";\r\nimport { EngineStore } from \"../../../Engines/engineStore\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\nimport { DrawWrapper } from \"../../drawWrapper\";\r\nimport type { RenderTargetWrapper } from \"../../../Engines/renderTargetWrapper\";\r\n\r\n/**\r\n * Options to create a procedural texture\r\n */\r\nexport interface IProceduralTextureCreationOptions extends RenderTargetTextureOptions {\r\n    /**\r\n     * Defines a fallback texture in case there were issues to create the custom texture\r\n     */\r\n    fallbackTexture?: Nullable<Texture>;\r\n}\r\n\r\n/**\r\n * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes calmpler' images.\r\n * This is the base class of any Procedural texture and contains most of the shareable code.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/proceduralTextures\r\n */\r\nexport class ProceduralTexture extends Texture {\r\n    /**\r\n     * Define if the texture is enabled or not (disabled texture will not render)\r\n     */\r\n    @serialize()\r\n    public isEnabled = true;\r\n\r\n    /**\r\n     * Define if the texture must be cleared before rendering (default is true)\r\n     */\r\n    @serialize()\r\n    public autoClear = true;\r\n\r\n    /**\r\n     * Callback called when the texture is generated\r\n     */\r\n    public onGenerated: () => void;\r\n\r\n    /**\r\n     * Event raised when the texture is generated\r\n     */\r\n    public onGeneratedObservable = new Observable<ProceduralTexture>();\r\n\r\n    /**\r\n     * Event raised before the texture is generated\r\n     */\r\n    public onBeforeGenerationObservable = new Observable<ProceduralTexture>();\r\n\r\n    /**\r\n     * Gets or sets the node material used to create this texture (null if the texture was manually created)\r\n     */\r\n    public nodeMaterialSource: Nullable<NodeMaterial> = null;\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _generateMipMaps: boolean;\r\n\r\n    private _drawWrapper: DrawWrapper;\r\n\r\n    /** @internal */\r\n    public _textures: { [key: string]: Texture } = {};\r\n\r\n    /** @internal */\r\n    protected _fallbackTexture: Nullable<Texture>;\r\n\r\n    @serialize()\r\n    private _size: TextureSize;\r\n    private _textureType: number;\r\n    private _currentRefreshId = -1;\r\n    private _frameId = -1;\r\n    private _refreshRate = 1;\r\n    private _vertexBuffers: { [key: string]: Nullable<VertexBuffer> } = {};\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _uniforms = new Array<string>();\r\n    private _samplers = new Array<string>();\r\n    private _fragment: any;\r\n\r\n    private _floats: { [key: string]: number } = {};\r\n    private _ints: { [key: string]: number } = {};\r\n    private _floatsArrays: { [key: string]: number[] } = {};\r\n    private _colors3: { [key: string]: Color3 } = {};\r\n    private _colors4: { [key: string]: Color4 } = {};\r\n    private _vectors2: { [key: string]: Vector2 } = {};\r\n    private _vectors3: { [key: string]: Vector3 } = {};\r\n    private _matrices: { [key: string]: Matrix } = {};\r\n\r\n    private _fallbackTextureUsed = false;\r\n    private _fullEngine: Engine;\r\n\r\n    private _cachedDefines: Nullable<string> = null;\r\n\r\n    private _contentUpdateId = -1;\r\n    private _contentData: Nullable<Promise<ArrayBufferView>>;\r\n\r\n    private _rtWrapper: Nullable<RenderTargetWrapper> = null;\r\n    private _options: IProceduralTextureCreationOptions;\r\n\r\n    /**\r\n     * Instantiates a new procedural texture.\r\n     * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\r\n     * This is the base class of any Procedural texture and contains most of the shareable code.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/proceduralTextures\r\n     * @param name  Define the name of the texture\r\n     * @param size Define the size of the texture to create\r\n     * @param fragment Define the fragment shader to use to generate the texture or null if it is defined later:\r\n     *  * object: \\{ fragmentElement: \"fragmentShaderCode\" \\}, used with shader code in script tags\r\n     *  * object: \\{ fragmentSource: \"fragment shader code string\" \\}, the string contains the shader code\r\n     *  * string: the string contains a name \"XXX\" to lookup in Effect.ShadersStore[\"XXXFragmentShader\"]\r\n     * @param scene Define the scene the texture belongs to\r\n     * @param fallbackTexture Define a fallback texture in case there were issues to create the custom texture\r\n     * @param generateMipMaps Define if the texture should creates mip maps or not\r\n     * @param isCube Define if the texture is a cube texture or not (this will render each faces of the cube)\r\n     * @param textureType The FBO internal texture type\r\n     */\r\n    constructor(\r\n        name: string,\r\n        size: TextureSize,\r\n        fragment: any,\r\n        scene: Nullable<Scene>,\r\n        fallbackTexture: Nullable<Texture> | IProceduralTextureCreationOptions = null,\r\n        generateMipMaps = true,\r\n        isCube = false,\r\n        textureType = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ) {\r\n        super(null, scene, !generateMipMaps);\r\n\r\n        if (fallbackTexture !== null && !(fallbackTexture instanceof Texture)) {\r\n            this._options = fallbackTexture;\r\n            this._fallbackTexture = fallbackTexture.fallbackTexture ?? null;\r\n        } else {\r\n            this._options = {};\r\n            this._fallbackTexture = fallbackTexture;\r\n        }\r\n\r\n        scene = this.getScene() || EngineStore.LastCreatedScene!;\r\n        let component = scene._getComponent(SceneComponentConstants.NAME_PROCEDURALTEXTURE);\r\n        if (!component) {\r\n            component = new ProceduralTextureSceneComponent(scene);\r\n            scene._addComponent(component);\r\n        }\r\n        scene.proceduralTextures.push(this);\r\n\r\n        this._fullEngine = scene.getEngine();\r\n\r\n        this.name = name;\r\n        this.isRenderTarget = true;\r\n        this._size = size;\r\n        this._textureType = textureType;\r\n        this._generateMipMaps = generateMipMaps;\r\n        this._drawWrapper = new DrawWrapper(this._fullEngine);\r\n\r\n        this.setFragment(fragment);\r\n\r\n        const rtWrapper = this._createRtWrapper(isCube, size, generateMipMaps, textureType);\r\n        this._texture = rtWrapper.texture;\r\n\r\n        // VBO\r\n        const vertices = [];\r\n        vertices.push(1, 1);\r\n        vertices.push(-1, 1);\r\n        vertices.push(-1, -1);\r\n        vertices.push(1, -1);\r\n\r\n        this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(this._fullEngine, vertices, VertexBuffer.PositionKind, false, false, 2);\r\n\r\n        this._createIndexBuffer();\r\n    }\r\n\r\n    private _createRtWrapper(isCube: boolean, size: TextureSize, generateMipMaps: boolean, textureType: number) {\r\n        if (isCube) {\r\n            this._rtWrapper = this._fullEngine.createRenderTargetCubeTexture(size as number, {\r\n                generateMipMaps: generateMipMaps,\r\n                generateDepthBuffer: false,\r\n                generateStencilBuffer: false,\r\n                type: textureType,\r\n                ...this._options,\r\n            });\r\n            this.setFloat(\"face\", 0);\r\n        } else {\r\n            this._rtWrapper = this._fullEngine.createRenderTargetTexture(size, {\r\n                generateMipMaps: generateMipMaps,\r\n                generateDepthBuffer: false,\r\n                generateStencilBuffer: false,\r\n                type: textureType,\r\n                ...this._options,\r\n            });\r\n        }\r\n        return this._rtWrapper;\r\n    }\r\n\r\n    /**\r\n     * The effect that is created when initializing the post process.\r\n     * @returns The created effect corresponding the postprocess.\r\n     */\r\n    public getEffect(): Effect {\r\n        return this._drawWrapper.effect!;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setEffect(effect: Effect) {\r\n        this._drawWrapper.effect = effect;\r\n    }\r\n\r\n    /**\r\n     * Gets texture content (Use this function wisely as reading from a texture can be slow)\r\n     * @returns an ArrayBufferView promise (Uint8Array or Float32Array)\r\n     */\r\n    public getContent(): Nullable<Promise<ArrayBufferView>> {\r\n        if (this._contentData && this._frameId === this._contentUpdateId) {\r\n            return this._contentData;\r\n        }\r\n\r\n        if (this._contentData) {\r\n            this._contentData.then((buffer) => {\r\n                this._contentData = this.readPixels(0, 0, buffer);\r\n                this._contentUpdateId = this._frameId;\r\n            });\r\n        } else {\r\n            this._contentData = this.readPixels(0, 0);\r\n            this._contentUpdateId = this._frameId;\r\n        }\r\n\r\n        return this._contentData;\r\n    }\r\n\r\n    private _createIndexBuffer(): void {\r\n        const engine = this._fullEngine;\r\n\r\n        // Indices\r\n        const indices = [];\r\n        indices.push(0);\r\n        indices.push(1);\r\n        indices.push(2);\r\n\r\n        indices.push(0);\r\n        indices.push(2);\r\n        indices.push(3);\r\n\r\n        this._indexBuffer = engine.createIndexBuffer(indices);\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        const vb = this._vertexBuffers[VertexBuffer.PositionKind];\r\n\r\n        if (vb) {\r\n            vb._rebuild();\r\n        }\r\n\r\n        this._createIndexBuffer();\r\n\r\n        if (this.refreshRate === RenderTargetTexture.REFRESHRATE_RENDER_ONCE) {\r\n            this.refreshRate = RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the texture in order to recreate its associated resources.\r\n     * This can be called in case of context loss or if you change the shader code and need to regenerate the texture with the new code\r\n     */\r\n    public reset(): void {\r\n        this._drawWrapper.effect?.dispose();\r\n        this._drawWrapper.effect = null;\r\n        this._cachedDefines = null;\r\n    }\r\n\r\n    protected _getDefines(): string {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Executes a function when the texture will be ready to be drawn.\r\n     * @param func The callback to be used.\r\n     */\r\n    public executeWhenReady(func: (texture: ProceduralTexture) => void): void {\r\n        if (this.isReady()) {\r\n            func(this);\r\n            return;\r\n        }\r\n\r\n        const effect = this.getEffect();\r\n        if (effect) {\r\n            effect.executeWhenCompiled(() => {\r\n                func(this);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is the texture ready to be used ? (rendered at least once)\r\n     * @returns true if ready, otherwise, false.\r\n     */\r\n    public isReady(): boolean {\r\n        const engine = this._fullEngine;\r\n\r\n        if (this.nodeMaterialSource) {\r\n            return this._drawWrapper.effect!.isReady();\r\n        }\r\n\r\n        if (!this._fragment) {\r\n            return false;\r\n        }\r\n\r\n        if (this._fallbackTextureUsed) {\r\n            return true;\r\n        }\r\n\r\n        if (!this._texture) {\r\n            return false;\r\n        }\r\n\r\n        const defines = this._getDefines();\r\n        if (this._drawWrapper.effect && defines === this._cachedDefines && this._drawWrapper.effect.isReady()) {\r\n            return true;\r\n        }\r\n\r\n        const shaders = {\r\n            vertex: \"procedural\",\r\n            fragmentElement: this._fragment.fragmentElement,\r\n            fragmentSource: this._fragment.fragmentSource,\r\n            fragment: typeof this._fragment === \"string\" ? this._fragment : undefined,\r\n        };\r\n\r\n        if (this._cachedDefines !== defines) {\r\n            this._cachedDefines = defines;\r\n\r\n            this._drawWrapper.effect = engine.createEffect(shaders, [VertexBuffer.PositionKind], this._uniforms, this._samplers, defines, undefined, undefined, () => {\r\n                this._rtWrapper?.dispose();\r\n                this._rtWrapper = this._texture = null;\r\n\r\n                if (this._fallbackTexture) {\r\n                    this._texture = this._fallbackTexture._texture;\r\n\r\n                    if (this._texture) {\r\n                        this._texture.incrementReferences();\r\n                    }\r\n                }\r\n\r\n                this._fallbackTextureUsed = true;\r\n            });\r\n        }\r\n\r\n        return this._drawWrapper.effect!.isReady();\r\n    }\r\n\r\n    /**\r\n     * Resets the refresh counter of the texture and start bak from scratch.\r\n     * Could be useful to regenerate the texture if it is setup to render only once.\r\n     */\r\n    public resetRefreshCounter(): void {\r\n        this._currentRefreshId = -1;\r\n    }\r\n\r\n    /**\r\n     * Set the fragment shader to use in order to render the texture.\r\n     * @param fragment This can be set to a path (into the shader store) or to a json object containing a fragmentElement property.\r\n     */\r\n    public setFragment(fragment: any) {\r\n        this._fragment = fragment;\r\n    }\r\n\r\n    /**\r\n     * Define the refresh rate of the texture or the rendering frequency.\r\n     * Use 0 to render just once, 1 to render on every frame, 2 to render every two frames and so on...\r\n     */\r\n    @serialize()\r\n    public get refreshRate(): number {\r\n        return this._refreshRate;\r\n    }\r\n\r\n    public set refreshRate(value: number) {\r\n        this._refreshRate = value;\r\n        this.resetRefreshCounter();\r\n    }\r\n\r\n    /** @internal */\r\n    public _shouldRender(): boolean {\r\n        if (!this.isEnabled || !this.isReady() || !this._texture) {\r\n            if (this._texture) {\r\n                this._texture.isReady = false;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        if (this._fallbackTextureUsed) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentRefreshId === -1) {\r\n            // At least render once\r\n            this._currentRefreshId = 1;\r\n            this._frameId++;\r\n            return true;\r\n        }\r\n\r\n        if (this.refreshRate === this._currentRefreshId) {\r\n            this._currentRefreshId = 1;\r\n            this._frameId++;\r\n            return true;\r\n        }\r\n\r\n        this._currentRefreshId++;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get the size the texture is rendering at.\r\n     * @returns the size (on cube texture it is always squared)\r\n     */\r\n    public getRenderSize(): TextureSize {\r\n        return this._size;\r\n    }\r\n\r\n    /**\r\n     * Resize the texture to new value.\r\n     * @param size Define the new size the texture should have\r\n     * @param generateMipMaps Define whether the new texture should create mip maps\r\n     */\r\n    public resize(size: TextureSize, generateMipMaps: boolean): void {\r\n        if (this._fallbackTextureUsed || !this._rtWrapper || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        const isCube = this._texture.isCube;\r\n        this._rtWrapper.dispose();\r\n\r\n        const rtWrapper = this._createRtWrapper(isCube, size, generateMipMaps, this._textureType);\r\n        this._texture = rtWrapper.texture;\r\n\r\n        // Update properties\r\n        this._size = size;\r\n        this._generateMipMaps = generateMipMaps;\r\n    }\r\n\r\n    private _checkUniform(uniformName: string): void {\r\n        if (this._uniforms.indexOf(uniformName) === -1) {\r\n            this._uniforms.push(uniformName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a texture in the shader program used to render.\r\n     * @param name Define the name of the uniform samplers as defined in the shader\r\n     * @param texture Define the texture to bind to this sampler\r\n     * @returns the texture itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTexture(name: string, texture: Texture): ProceduralTexture {\r\n        if (this._samplers.indexOf(name) === -1) {\r\n            this._samplers.push(name);\r\n        }\r\n        this._textures[name] = texture;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a float in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the texture itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setFloat(name: string, value: number): ProceduralTexture {\r\n        this._checkUniform(name);\r\n        this._floats[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a int in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the texture itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setInt(name: string, value: number): ProceduralTexture {\r\n        this._checkUniform(name);\r\n        this._ints[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set an array of floats in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the texture itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setFloats(name: string, value: number[]): ProceduralTexture {\r\n        this._checkUniform(name);\r\n        this._floatsArrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 in the shader from a Color3.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the texture itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor3(name: string, value: Color3): ProceduralTexture {\r\n        this._checkUniform(name);\r\n        this._colors3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Color4.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the texture itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor4(name: string, value: Color4): ProceduralTexture {\r\n        this._checkUniform(name);\r\n        this._colors4[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec2 in the shader from a Vector2.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the texture itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector2(name: string, value: Vector2): ProceduralTexture {\r\n        this._checkUniform(name);\r\n        this._vectors2[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 in the shader from a Vector3.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the texture itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector3(name: string, value: Vector3): ProceduralTexture {\r\n        this._checkUniform(name);\r\n        this._vectors3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat4 in the shader from a MAtrix.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the texture itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix(name: string, value: Matrix): ProceduralTexture {\r\n        this._checkUniform(name);\r\n        this._matrices[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Render the texture to its associated render target.\r\n     * @param useCameraPostProcess Define if camera post process should be applied to the texture\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public render(useCameraPostProcess?: boolean): void {\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        const engine = this._fullEngine;\r\n\r\n        // Render\r\n        engine.enableEffect(this._drawWrapper);\r\n        this.onBeforeGenerationObservable.notifyObservers(this);\r\n        engine.setState(false);\r\n\r\n        if (!this.nodeMaterialSource) {\r\n            // Texture\r\n            for (const name in this._textures) {\r\n                this._drawWrapper.effect!.setTexture(name, this._textures[name]);\r\n            }\r\n\r\n            // Float\r\n            for (const name in this._ints) {\r\n                this._drawWrapper.effect!.setInt(name, this._ints[name]);\r\n            }\r\n\r\n            // Float\r\n            for (const name in this._floats) {\r\n                this._drawWrapper.effect!.setFloat(name, this._floats[name]);\r\n            }\r\n\r\n            // Floats\r\n            for (const name in this._floatsArrays) {\r\n                this._drawWrapper.effect!.setArray(name, this._floatsArrays[name]);\r\n            }\r\n\r\n            // Color3\r\n            for (const name in this._colors3) {\r\n                this._drawWrapper.effect!.setColor3(name, this._colors3[name]);\r\n            }\r\n\r\n            // Color4\r\n            for (const name in this._colors4) {\r\n                const color = this._colors4[name];\r\n                this._drawWrapper.effect!.setFloat4(name, color.r, color.g, color.b, color.a);\r\n            }\r\n\r\n            // Vector2\r\n            for (const name in this._vectors2) {\r\n                this._drawWrapper.effect!.setVector2(name, this._vectors2[name]);\r\n            }\r\n\r\n            // Vector3\r\n            for (const name in this._vectors3) {\r\n                this._drawWrapper.effect!.setVector3(name, this._vectors3[name]);\r\n            }\r\n\r\n            // Matrix\r\n            for (const name in this._matrices) {\r\n                this._drawWrapper.effect!.setMatrix(name, this._matrices[name]);\r\n            }\r\n        }\r\n\r\n        if (!this._texture || !this._rtWrapper) {\r\n            return;\r\n        }\r\n\r\n        engine._debugPushGroup?.(`procedural texture generation for ${this.name}`, 1);\r\n\r\n        const viewPort = engine.currentViewport;\r\n        if (this.isCube) {\r\n            for (let face = 0; face < 6; face++) {\r\n                engine.bindFramebuffer(this._rtWrapper, face, undefined, undefined, true);\r\n\r\n                // VBOs\r\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, this._drawWrapper.effect!);\r\n\r\n                this._drawWrapper.effect!.setFloat(\"face\", face);\r\n\r\n                // Clear\r\n                if (this.autoClear) {\r\n                    engine.clear(scene.clearColor, true, false, false);\r\n                }\r\n\r\n                // Draw order\r\n                engine.drawElementsType(Material.TriangleFillMode, 0, 6);\r\n            }\r\n        } else {\r\n            engine.bindFramebuffer(this._rtWrapper, 0, undefined, undefined, true);\r\n\r\n            // VBOs\r\n            engine.bindBuffers(this._vertexBuffers, this._indexBuffer, this._drawWrapper.effect!);\r\n\r\n            // Clear\r\n            if (this.autoClear) {\r\n                engine.clear(scene.clearColor, true, false, false);\r\n            }\r\n\r\n            // Draw order\r\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\r\n        }\r\n\r\n        // Unbind and restore viewport\r\n        engine.unBindFramebuffer(this._rtWrapper, this.isCube);\r\n        if (viewPort) {\r\n            engine.setViewport(viewPort);\r\n        }\r\n\r\n        // Mipmaps\r\n        if (this.isCube) {\r\n            engine.generateMipMapsForCubemap(this._texture);\r\n        }\r\n\r\n        engine._debugPopGroup?.(1);\r\n\r\n        if (this.onGenerated) {\r\n            this.onGenerated();\r\n        }\r\n\r\n        this.onGeneratedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Clone the texture.\r\n     * @returns the cloned texture\r\n     */\r\n    public clone(): ProceduralTexture {\r\n        const textureSize = this.getSize();\r\n        const newTexture = new ProceduralTexture(this.name, textureSize.width, this._fragment, <Scene>this.getScene(), this._fallbackTexture, this._generateMipMaps);\r\n\r\n        // Base texture\r\n        newTexture.hasAlpha = this.hasAlpha;\r\n        newTexture.level = this.level;\r\n\r\n        // RenderTarget Texture\r\n        newTexture.coordinatesMode = this.coordinatesMode;\r\n\r\n        return newTexture;\r\n    }\r\n\r\n    /**\r\n     * Dispose the texture and release its associated resources.\r\n     */\r\n    public dispose(): void {\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        const index = scene.proceduralTextures.indexOf(this);\r\n\r\n        if (index >= 0) {\r\n            scene.proceduralTextures.splice(index, 1);\r\n        }\r\n\r\n        const vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\r\n        if (vertexBuffer) {\r\n            vertexBuffer.dispose();\r\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\r\n        }\r\n\r\n        if (this._indexBuffer && this._fullEngine._releaseBuffer(this._indexBuffer)) {\r\n            this._indexBuffer = null;\r\n        }\r\n\r\n        this.onGeneratedObservable.clear();\r\n        this.onBeforeGenerationObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ProceduralTexture\", ProceduralTexture);\r\n", "import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\n/**\r\n * Operations supported by the Trigonometry block\r\n */\r\nexport enum TrigonometryBlockOperations {\r\n    /** Cos */\r\n    Cos,\r\n    /** Sin */\r\n    Sin,\r\n    /** Abs */\r\n    Abs,\r\n    /** Exp */\r\n    Exp,\r\n    /** Exp2 */\r\n    Exp2,\r\n    /** Round */\r\n    Round,\r\n    /** Floor */\r\n    Floor,\r\n    /** Ceiling */\r\n    Ceiling,\r\n    /** Square root */\r\n    Sqrt,\r\n    /** Log */\r\n    Log,\r\n    /** Tangent */\r\n    Tan,\r\n    /** Arc tangent */\r\n    ArcTan,\r\n    /** Arc cosinus */\r\n    ArcCos,\r\n    /** Arc sinus */\r\n    ArcSin,\r\n    /** Fraction */\r\n    Fract,\r\n    /** Sign */\r\n    Sign,\r\n    /** To radians (from degrees) */\r\n    Radians,\r\n    /** To degrees (from radians) */\r\n    Degrees,\r\n}\r\n\r\n/**\r\n * Block used to apply trigonometry operation to floats\r\n */\r\nexport class TrigonometryBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the operation applied by the block\r\n     */\r\n    public operation = TrigonometryBlockOperations.Cos;\r\n\r\n    /**\r\n     * Creates a new TrigonometryBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"TrigonometryBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n        let operation = \"\";\r\n\r\n        switch (this.operation) {\r\n            case TrigonometryBlockOperations.Cos: {\r\n                operation = \"cos\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Sin: {\r\n                operation = \"sin\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Abs: {\r\n                operation = \"abs\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Exp: {\r\n                operation = \"exp\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Exp2: {\r\n                operation = \"exp2\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Round: {\r\n                operation = \"round\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Floor: {\r\n                operation = \"floor\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Ceiling: {\r\n                operation = \"ceil\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Sqrt: {\r\n                operation = \"sqrt\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Log: {\r\n                operation = \"log\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Tan: {\r\n                operation = \"tan\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.ArcTan: {\r\n                operation = \"atan\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.ArcCos: {\r\n                operation = \"acos\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.ArcSin: {\r\n                operation = \"asin\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Fract: {\r\n                operation = \"fract\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Sign: {\r\n                operation = \"sign\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Radians: {\r\n                operation = \"radians\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Degrees: {\r\n                operation = \"degrees\";\r\n                break;\r\n            }\r\n        }\r\n\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${operation}(${this.input.associatedVariableName});\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.operation = this.operation;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.operation = serializationObject.operation;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString =\r\n            super._dumpPropertiesCode() + `${this._codeVariableName}.operation = BABYLON.TrigonometryBlockOperations.${TrigonometryBlockOperations[this.operation]};\\n`;\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.TrigonometryBlock\", TrigonometryBlock);\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { NodeMaterialBlock } from \"./nodeMaterialBlock\";\r\nimport { PushMaterial } from \"../pushMaterial\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Matrix, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../../Maths/math.color\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport { Engine } from \"../../Engines/engine\";\r\nimport { NodeMaterialBuildState } from \"./nodeMaterialBuildState\";\r\nimport type { IEffectCreationOptions } from \"../effect\";\r\nimport { Effect } from \"../effect\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { NodeMaterialBlockTargets } from \"./Enums/nodeMaterialBlockTargets\";\r\nimport { NodeMaterialBuildStateSharedData } from \"./nodeMaterialBuildStateSharedData\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport { MaterialDefines } from \"../../Materials/materialDefines\";\r\nimport type { NodeMaterialOptimizer } from \"./Optimizers/nodeMaterialOptimizer\";\r\nimport type { ImageProcessingConfiguration } from \"../imageProcessingConfiguration\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport { TransformBlock } from \"./Blocks/transformBlock\";\r\nimport { VertexOutputBlock } from \"./Blocks/Vertex/vertexOutputBlock\";\r\nimport { FragmentOutputBlock } from \"./Blocks/Fragment/fragmentOutputBlock\";\r\nimport { InputBlock } from \"./Blocks/Input/inputBlock\";\r\nimport { GetClass, RegisterClass } from \"../../Misc/typeStore\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { SerializationHelper } from \"../../Misc/decorators.serialization\";\r\nimport type { TextureBlock } from \"./Blocks/Dual/textureBlock\";\r\nimport type { ReflectionTextureBaseBlock } from \"./Blocks/Dual/reflectionTextureBaseBlock\";\r\nimport type { RefractionBlock } from \"./Blocks/PBR/refractionBlock\";\r\nimport { CurrentScreenBlock } from \"./Blocks/Dual/currentScreenBlock\";\r\nimport { ParticleTextureBlock } from \"./Blocks/Particle/particleTextureBlock\";\r\nimport { ParticleRampGradientBlock } from \"./Blocks/Particle/particleRampGradientBlock\";\r\nimport { ParticleBlendMultiplyBlock } from \"./Blocks/Particle/particleBlendMultiplyBlock\";\r\nimport { EffectFallbacks } from \"../effectFallbacks\";\r\nimport { WebRequest } from \"../../Misc/webRequest\";\r\nimport type { PostProcessOptions } from \"../../PostProcesses/postProcess\";\r\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport { VectorMergerBlock } from \"./Blocks/vectorMergerBlock\";\r\nimport { RemapBlock } from \"./Blocks/remapBlock\";\r\nimport { MultiplyBlock } from \"./Blocks/multiplyBlock\";\r\nimport { NodeMaterialModes } from \"./Enums/nodeMaterialModes\";\r\nimport { Texture } from \"../Textures/texture\";\r\nimport type { IParticleSystem } from \"../../Particles/IParticleSystem\";\r\nimport { BaseParticleSystem } from \"../../Particles/baseParticleSystem\";\r\nimport { ColorSplitterBlock } from \"./Blocks/colorSplitterBlock\";\r\nimport { TimingTools } from \"../../Misc/timingTools\";\r\nimport { ProceduralTexture } from \"../Textures/Procedurals/proceduralTexture\";\r\nimport { AnimatedInputBlockTypes } from \"./Blocks/Input/animatedInputBlockTypes\";\r\nimport { TrigonometryBlock, TrigonometryBlockOperations } from \"./Blocks/trigonometryBlock\";\r\nimport { NodeMaterialSystemValues } from \"./Enums/nodeMaterialSystemValues\";\r\nimport type { ImageSourceBlock } from \"./Blocks/Dual/imageSourceBlock\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\nimport type { Material } from \"../material\";\r\nimport type { TriPlanarBlock } from \"./Blocks/triPlanarBlock\";\r\nimport type { BiPlanarBlock } from \"./Blocks/biPlanarBlock\";\r\nimport type { PrePassRenderer } from \"../../Rendering/prePassRenderer\";\r\nimport type { PrePassTextureBlock } from \"./Blocks/Input/prePassTextureBlock\";\r\nimport type { PrePassOutputBlock } from \"./Blocks/Fragment/prePassOutputBlock\";\r\nimport type { NodeMaterialTeleportOutBlock } from \"./Blocks/Teleport/teleportOutBlock\";\r\nimport type { NodeMaterialTeleportInBlock } from \"./Blocks/Teleport/teleportInBlock\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { PrepareDefinesForCamera, PrepareDefinesForPrePass } from \"../materialHelper.functions\";\r\nimport type { IImageProcessingConfigurationDefines } from \"../imageProcessingConfiguration.defines\";\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n// declare NODEEDITOR namespace for compilation issue\r\ndeclare let NODEEDITOR: any;\r\ndeclare let BABYLON: any;\r\n\r\n/**\r\n * Interface used to configure the node material editor\r\n */\r\nexport interface INodeMaterialEditorOptions {\r\n    /** Define the URL to load node editor script from */\r\n    editorURL?: string;\r\n    /** Additional configuration for the NME */\r\n    nodeEditorConfig?: {\r\n        backgroundColor?: Color4;\r\n    };\r\n}\r\n\r\n/** @internal */\r\nexport class NodeMaterialDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    /** Normal */\r\n    public NORMAL = false;\r\n    /** Tangent */\r\n    public TANGENT = false;\r\n    /** Vertex color */\r\n    public VERTEXCOLOR_NME = false;\r\n    /**  Uv1 **/\r\n    public UV1 = false;\r\n    /** Uv2 **/\r\n    public UV2 = false;\r\n    /** Uv3 **/\r\n    public UV3 = false;\r\n    /** Uv4 **/\r\n    public UV4 = false;\r\n    /** Uv5 **/\r\n    public UV5 = false;\r\n    /** Uv6 **/\r\n    public UV6 = false;\r\n\r\n    /** Prepass **/\r\n    public PREPASS = false;\r\n    /** Prepass normal */\r\n    public PREPASS_NORMAL = false;\r\n    /** Prepass normal index */\r\n    public PREPASS_NORMAL_INDEX = -1;\r\n    /** Prepass position */\r\n    public PREPASS_POSITION = false;\r\n    /** Prepass position index */\r\n    public PREPASS_POSITION_INDEX = -1;\r\n    /** Prepass depth */\r\n    public PREPASS_DEPTH = false;\r\n    /** Prepass depth index */\r\n    public PREPASS_DEPTH_INDEX = -1;\r\n    /** Scene MRT count */\r\n    public SCENE_MRT_COUNT = 0;\r\n\r\n    /** BONES */\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    /** Bones per mesh */\r\n    public BonesPerMesh = 0;\r\n    /** Using texture for bone storage */\r\n    public BONETEXTURE = false;\r\n\r\n    /** MORPH TARGETS */\r\n    public MORPHTARGETS = false;\r\n    /** Morph target normal */\r\n    public MORPHTARGETS_NORMAL = false;\r\n    /** Morph target tangent */\r\n    public MORPHTARGETS_TANGENT = false;\r\n    /** Morph target uv */\r\n    public MORPHTARGETS_UV = false;\r\n    /** Number of morph influencers */\r\n    public NUM_MORPH_INFLUENCERS = 0;\r\n    /** Using a texture to store morph target data */\r\n    public MORPHTARGETS_TEXTURE = false;\r\n\r\n    /** IMAGE PROCESSING */\r\n    public IMAGEPROCESSING = false;\r\n    /** Vignette */\r\n    public VIGNETTE = false;\r\n    /** Multiply blend mode for vignette */\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    /** Opaque blend mode for vignette */\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    /** Tone mapping */\r\n    public TONEMAPPING = false;\r\n    /** ACES tone mapping mode */\r\n    public TONEMAPPING_ACES = false;\r\n    /** Contrast */\r\n    public CONTRAST = false;\r\n    /** Exposure */\r\n    public EXPOSURE = false;\r\n    /** Color curves */\r\n    public COLORCURVES = false;\r\n    /** Color grading */\r\n    public COLORGRADING = false;\r\n    /** 3D color grading */\r\n    public COLORGRADING3D = false;\r\n    /** Sampler green depth */\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    /** Sampler for BGR map */\r\n    public SAMPLER3DBGRMAP = false;\r\n    /** Dithering */\r\n    public DITHER = false;\r\n    /** Using post process for image processing */\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    /** Skip color clamp */\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    /** MISC. */\r\n    public BUMPDIRECTUV = 0;\r\n    /** Camera is orthographic */\r\n    public CAMERA_ORTHOGRAPHIC = false;\r\n    /** Camera is perspective */\r\n    public CAMERA_PERSPECTIVE = false;\r\n\r\n    /**\r\n     * Creates a new NodeMaterialDefines\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n\r\n    /**\r\n     * Set the value of a specific key\r\n     * @param name defines the name of the key to set\r\n     * @param value defines the value to set\r\n     * @param markAsUnprocessedIfDirty Flag to indicate to the cache that this value needs processing\r\n     */\r\n    public setValue(name: string, value: any, markAsUnprocessedIfDirty = false) {\r\n        if (this[name] === undefined) {\r\n            this._keys.push(name);\r\n        }\r\n\r\n        if (markAsUnprocessedIfDirty && this[name] !== value) {\r\n            this.markAsUnprocessed();\r\n        }\r\n\r\n        this[name] = value;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to configure NodeMaterial\r\n */\r\nexport interface INodeMaterialOptions {\r\n    /**\r\n     * Defines if blocks should emit comments\r\n     */\r\n    emitComments: boolean;\r\n}\r\n\r\n/**\r\n * Blocks that manage a texture\r\n */\r\nexport type NodeMaterialTextureBlocks =\r\n    | TextureBlock\r\n    | ReflectionTextureBaseBlock\r\n    | RefractionBlock\r\n    | CurrentScreenBlock\r\n    | ParticleTextureBlock\r\n    | ImageSourceBlock\r\n    | TriPlanarBlock\r\n    | BiPlanarBlock\r\n    | PrePassTextureBlock;\r\n\r\n/**\r\n * Class used to create a node based material built by assembling shader blocks\r\n */\r\nexport class NodeMaterial extends PushMaterial {\r\n    private static _BuildIdGenerator: number = 0;\r\n    private _options: INodeMaterialOptions;\r\n    private _vertexCompilationState: NodeMaterialBuildState;\r\n    private _fragmentCompilationState: NodeMaterialBuildState;\r\n    private _sharedData: NodeMaterialBuildStateSharedData;\r\n    private _buildId: number = NodeMaterial._BuildIdGenerator++;\r\n    private _buildWasSuccessful = false;\r\n    private _cachedWorldViewMatrix = new Matrix();\r\n    private _cachedWorldViewProjectionMatrix = new Matrix();\r\n    private _optimizers = new Array<NodeMaterialOptimizer>();\r\n    private _animationFrame = -1;\r\n\r\n    /** Define the Url to load node editor script */\r\n    public static EditorURL = `${Tools._DefaultCdnUrl}/v${Engine.Version}/nodeEditor/babylon.nodeEditor.js`;\r\n\r\n    /** Define the Url to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Gets or sets a boolean indicating that node materials should not deserialize textures from json / snippet content */\r\n    public static IgnoreTexturesAtLoadTime = false;\r\n\r\n    /**\r\n     * Checks if a block is a texture block\r\n     * @param block The block to check\r\n     * @returns True if the block is a texture block\r\n     */\r\n    public static _BlockIsTextureBlock(block: NodeMaterialBlock): block is NodeMaterialTextureBlocks {\r\n        return (\r\n            block.getClassName() === \"TextureBlock\" ||\r\n            block.getClassName() === \"ReflectionTextureBaseBlock\" ||\r\n            block.getClassName() === \"ReflectionTextureBlock\" ||\r\n            block.getClassName() === \"ReflectionBlock\" ||\r\n            block.getClassName() === \"RefractionBlock\" ||\r\n            block.getClassName() === \"CurrentScreenBlock\" ||\r\n            block.getClassName() === \"ParticleTextureBlock\" ||\r\n            block.getClassName() === \"ImageSourceBlock\" ||\r\n            block.getClassName() === \"TriPlanarBlock\" ||\r\n            block.getClassName() === \"BiPlanarBlock\" ||\r\n            block.getClassName() === \"PrePassTextureBlock\"\r\n        );\r\n    }\r\n\r\n    private BJSNODEMATERIALEDITOR = this._getGlobalNodeMaterialEditor();\r\n\r\n    /** Get the inspector from bundle or global\r\n     * @returns the global NME\r\n     */\r\n    private _getGlobalNodeMaterialEditor(): any {\r\n        // UMD Global name detection from Webpack Bundle UMD Name.\r\n        if (typeof NODEEDITOR !== \"undefined\") {\r\n            return NODEEDITOR;\r\n        }\r\n\r\n        // In case of module let's check the global emitted from the editor entry point.\r\n        if (typeof BABYLON !== \"undefined\" && typeof BABYLON.NodeEditor !== \"undefined\") {\r\n            return BABYLON;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Snippet ID if the material was created from the snippet server\r\n     */\r\n    public snippetId: string;\r\n\r\n    /**\r\n     * Gets or sets data used by visual editor\r\n     * @see https://nme.babylonjs.com\r\n     */\r\n    public editorData: any = null;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that alpha value must be ignored (This will turn alpha blending off even if an alpha value is produced by the material)\r\n     */\r\n    @serialize()\r\n    public ignoreAlpha = false;\r\n\r\n    /**\r\n     * Defines the maximum number of lights that can be used in the material\r\n     */\r\n    @serialize()\r\n    public maxSimultaneousLights = 4;\r\n\r\n    /**\r\n     * Observable raised when the material is built\r\n     */\r\n    public onBuildObservable = new Observable<NodeMaterial>();\r\n\r\n    /**\r\n     * Gets or sets the root nodes of the material vertex shader\r\n     */\r\n    public _vertexOutputNodes = new Array<NodeMaterialBlock>();\r\n\r\n    /**\r\n     * Gets or sets the root nodes of the material fragment (pixel) shader\r\n     */\r\n    public _fragmentOutputNodes = new Array<NodeMaterialBlock>();\r\n\r\n    /** Gets or sets options to control the node material overall behavior */\r\n    public get options() {\r\n        return this._options;\r\n    }\r\n\r\n    public set options(options: INodeMaterialOptions) {\r\n        this._options = options;\r\n    }\r\n\r\n    /**\r\n     * Default configuration related to image processing available in the standard Material.\r\n     */\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n\r\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\r\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\r\n        return this._imageProcessingConfiguration;\r\n    }\r\n\r\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\r\n    public set imageProcessingConfiguration(value: ImageProcessingConfiguration) {\r\n        this._attachImageProcessingConfiguration(value);\r\n\r\n        // Ensure the effect will be rebuilt.\r\n        this._markAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets an array of blocks that needs to be serialized even if they are not yet connected\r\n     */\r\n    public attachedBlocks: NodeMaterialBlock[] = [];\r\n\r\n    /**\r\n     * Specifies the mode of the node material\r\n     * @internal\r\n     */\r\n    @serialize(\"mode\")\r\n    public _mode: NodeMaterialModes = NodeMaterialModes.Material;\r\n\r\n    /**\r\n     * Gets or sets the mode property\r\n     */\r\n    public get mode(): NodeMaterialModes {\r\n        return this._mode;\r\n    }\r\n\r\n    public set mode(value: NodeMaterialModes) {\r\n        this._mode = value;\r\n    }\r\n\r\n    /** Gets or sets the unique identifier used to identified the effect associated with the material */\r\n    public get buildId() {\r\n        return this._buildId;\r\n    }\r\n\r\n    public set buildId(value: number) {\r\n        this._buildId = value;\r\n    }\r\n\r\n    /**\r\n     * A free comment about the material\r\n     */\r\n    @serialize(\"comment\")\r\n    public comment: string;\r\n\r\n    /**\r\n     * Create a new node based material\r\n     * @param name defines the material name\r\n     * @param scene defines the hosting scene\r\n     * @param options defines creation option\r\n     */\r\n    constructor(name: string, scene?: Scene, options: Partial<INodeMaterialOptions> = {}) {\r\n        super(name, scene || EngineStore.LastCreatedScene!);\r\n\r\n        this._options = {\r\n            emitComments: false,\r\n            ...options,\r\n        };\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"NodeMaterial\"\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"NodeMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>>;\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the Standard Material.\r\n     * @param configuration\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Detaches observer.\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        // Pick the scene configuration if needed.\r\n        if (!configuration) {\r\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\r\n        } else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n\r\n        // Attaches observer.\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._markAllSubMeshesAsImageProcessingDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a block by its name\r\n     * @param name defines the name of the block to retrieve\r\n     * @returns the required block or null if not found\r\n     */\r\n    public getBlockByName(name: string) {\r\n        let result = null;\r\n        for (const block of this.attachedBlocks) {\r\n            if (block.name === name) {\r\n                if (!result) {\r\n                    result = block;\r\n                } else {\r\n                    Tools.Warn(\"More than one block was found with the name `\" + name + \"`\");\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get a block using a predicate\r\n     * @param predicate defines the predicate used to find the good candidate\r\n     * @returns the required block or null if not found\r\n     */\r\n    public getBlockByPredicate(predicate: (block: NodeMaterialBlock) => boolean) {\r\n        for (const block of this.attachedBlocks) {\r\n            if (predicate(block)) {\r\n                return block;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get an input block using a predicate\r\n     * @param predicate defines the predicate used to find the good candidate\r\n     * @returns the required input block or null if not found\r\n     */\r\n    public getInputBlockByPredicate(predicate: (block: InputBlock) => boolean): Nullable<InputBlock> {\r\n        for (const block of this.attachedBlocks) {\r\n            if (block.isInput && predicate(block as InputBlock)) {\r\n                return block as InputBlock;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of input blocks attached to this material\r\n     * @returns an array of InputBlocks\r\n     */\r\n    public getInputBlocks() {\r\n        const blocks: InputBlock[] = [];\r\n        for (const block of this.attachedBlocks) {\r\n            if (block.isInput) {\r\n                blocks.push(block as InputBlock);\r\n            }\r\n        }\r\n\r\n        return blocks;\r\n    }\r\n\r\n    /**\r\n     * Adds a new optimizer to the list of optimizers\r\n     * @param optimizer defines the optimizers to add\r\n     * @returns the current material\r\n     */\r\n    public registerOptimizer(optimizer: NodeMaterialOptimizer) {\r\n        const index = this._optimizers.indexOf(optimizer);\r\n\r\n        if (index > -1) {\r\n            return;\r\n        }\r\n\r\n        this._optimizers.push(optimizer);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an optimizer from the list of optimizers\r\n     * @param optimizer defines the optimizers to remove\r\n     * @returns the current material\r\n     */\r\n    public unregisterOptimizer(optimizer: NodeMaterialOptimizer) {\r\n        const index = this._optimizers.indexOf(optimizer);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        this._optimizers.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a new block to the list of output nodes\r\n     * @param node defines the node to add\r\n     * @returns the current material\r\n     */\r\n    public addOutputNode(node: NodeMaterialBlock) {\r\n        if (node.target === null) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"This node is not meant to be an output node. You may want to explicitly set its target value.\";\r\n        }\r\n\r\n        if ((node.target & NodeMaterialBlockTargets.Vertex) !== 0) {\r\n            this._addVertexOutputNode(node);\r\n        }\r\n\r\n        if ((node.target & NodeMaterialBlockTargets.Fragment) !== 0) {\r\n            this._addFragmentOutputNode(node);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a block from the list of root nodes\r\n     * @param node defines the node to remove\r\n     * @returns the current material\r\n     */\r\n    public removeOutputNode(node: NodeMaterialBlock) {\r\n        if (node.target === null) {\r\n            return this;\r\n        }\r\n\r\n        if ((node.target & NodeMaterialBlockTargets.Vertex) !== 0) {\r\n            this._removeVertexOutputNode(node);\r\n        }\r\n\r\n        if ((node.target & NodeMaterialBlockTargets.Fragment) !== 0) {\r\n            this._removeFragmentOutputNode(node);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _addVertexOutputNode(node: NodeMaterialBlock) {\r\n        if (this._vertexOutputNodes.indexOf(node) !== -1) {\r\n            return;\r\n        }\r\n\r\n        node.target = NodeMaterialBlockTargets.Vertex;\r\n        this._vertexOutputNodes.push(node);\r\n\r\n        return this;\r\n    }\r\n\r\n    private _removeVertexOutputNode(node: NodeMaterialBlock) {\r\n        const index = this._vertexOutputNodes.indexOf(node);\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        this._vertexOutputNodes.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    private _addFragmentOutputNode(node: NodeMaterialBlock) {\r\n        if (this._fragmentOutputNodes.indexOf(node) !== -1) {\r\n            return;\r\n        }\r\n\r\n        node.target = NodeMaterialBlockTargets.Fragment;\r\n        this._fragmentOutputNodes.push(node);\r\n\r\n        return this;\r\n    }\r\n\r\n    private _removeFragmentOutputNode(node: NodeMaterialBlock) {\r\n        const index = this._fragmentOutputNodes.indexOf(node);\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        this._fragmentOutputNodes.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that alpha blending must be enabled no matter what alpha value or alpha channel of the FragmentBlock are\r\n     */\r\n    @serialize()\r\n    public forceAlphaBlending = false;\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        if (this.ignoreAlpha) {\r\n            return false;\r\n        }\r\n        return this.forceAlphaBlending || this.alpha < 1.0 || (this._sharedData && this._sharedData.hints.needAlphaBlending);\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        return this._sharedData && this._sharedData.hints.needAlphaTesting;\r\n    }\r\n\r\n    private _processInitializeOnLink(block: NodeMaterialBlock, state: NodeMaterialBuildState, nodesToProcessForOtherBuildState: NodeMaterialBlock[], autoConfigure = true) {\r\n        if (block.target === NodeMaterialBlockTargets.VertexAndFragment) {\r\n            nodesToProcessForOtherBuildState.push(block);\r\n        } else if (state.target === NodeMaterialBlockTargets.Fragment && block.target === NodeMaterialBlockTargets.Vertex && block._preparationId !== this._buildId) {\r\n            nodesToProcessForOtherBuildState.push(block);\r\n        }\r\n        this._initializeBlock(block, state, nodesToProcessForOtherBuildState, autoConfigure);\r\n    }\r\n\r\n    private _initializeBlock(node: NodeMaterialBlock, state: NodeMaterialBuildState, nodesToProcessForOtherBuildState: NodeMaterialBlock[], autoConfigure = true) {\r\n        node.initialize(state);\r\n        if (autoConfigure) {\r\n            node.autoConfigure(this);\r\n        }\r\n        node._preparationId = this._buildId;\r\n\r\n        if (this.attachedBlocks.indexOf(node) === -1) {\r\n            if (node.isUnique) {\r\n                const className = node.getClassName();\r\n\r\n                for (const other of this.attachedBlocks) {\r\n                    if (other.getClassName() === className) {\r\n                        // eslint-disable-next-line no-throw-literal\r\n                        throw `Cannot have multiple blocks of type ${className} in the same NodeMaterial`;\r\n                    }\r\n                }\r\n            }\r\n            this.attachedBlocks.push(node);\r\n        }\r\n\r\n        for (const input of node.inputs) {\r\n            input.associatedVariableName = \"\";\r\n\r\n            const connectedPoint = input.connectedPoint;\r\n            if (connectedPoint) {\r\n                const block = connectedPoint.ownerBlock;\r\n                if (block !== node) {\r\n                    this._processInitializeOnLink(block, state, nodesToProcessForOtherBuildState, autoConfigure);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Teleportation\r\n        if (node.isTeleportOut) {\r\n            const teleport = node as NodeMaterialTeleportOutBlock;\r\n            if (teleport.entryPoint) {\r\n                this._processInitializeOnLink(teleport.entryPoint, state, nodesToProcessForOtherBuildState, autoConfigure);\r\n            }\r\n        }\r\n\r\n        for (const output of node.outputs) {\r\n            output.associatedVariableName = \"\";\r\n        }\r\n    }\r\n\r\n    private _resetDualBlocks(node: NodeMaterialBlock, id: number) {\r\n        if (node.target === NodeMaterialBlockTargets.VertexAndFragment) {\r\n            node.buildId = id;\r\n        }\r\n\r\n        for (const inputs of node.inputs) {\r\n            const connectedPoint = inputs.connectedPoint;\r\n            if (connectedPoint) {\r\n                const block = connectedPoint.ownerBlock;\r\n                if (block !== node) {\r\n                    this._resetDualBlocks(block, id);\r\n                }\r\n            }\r\n        }\r\n\r\n        // If this is a teleport out, we need to reset the connected block\r\n        if (node.isTeleportOut) {\r\n            const teleportOut = node as NodeMaterialTeleportOutBlock;\r\n            if (teleportOut.entryPoint) {\r\n                this._resetDualBlocks(teleportOut.entryPoint, id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a block from the current node material\r\n     * @param block defines the block to remove\r\n     */\r\n    public removeBlock(block: NodeMaterialBlock) {\r\n        const attachedBlockIndex = this.attachedBlocks.indexOf(block);\r\n        if (attachedBlockIndex > -1) {\r\n            this.attachedBlocks.splice(attachedBlockIndex, 1);\r\n        }\r\n\r\n        if (block.isFinalMerger) {\r\n            this.removeOutputNode(block);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Build the material and generates the inner effect\r\n     * @param verbose defines if the build should log activity\r\n     * @param updateBuildId defines if the internal build Id should be updated (default is true)\r\n     * @param autoConfigure defines if the autoConfigure method should be called when initializing blocks (default is false)\r\n     */\r\n    public build(verbose: boolean = false, updateBuildId = true, autoConfigure = false) {\r\n        // First time?\r\n        if (!this._vertexCompilationState && !autoConfigure) {\r\n            autoConfigure = true;\r\n        }\r\n\r\n        this._buildWasSuccessful = false;\r\n        const engine = this.getScene().getEngine();\r\n\r\n        const allowEmptyVertexProgram = this._mode === NodeMaterialModes.Particle;\r\n\r\n        if (this._vertexOutputNodes.length === 0 && !allowEmptyVertexProgram) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"You must define at least one vertexOutputNode\";\r\n        }\r\n\r\n        if (this._fragmentOutputNodes.length === 0) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"You must define at least one fragmentOutputNode\";\r\n        }\r\n\r\n        // Compilation state\r\n        this._vertexCompilationState = new NodeMaterialBuildState();\r\n        this._vertexCompilationState.supportUniformBuffers = engine.supportsUniformBuffers;\r\n        this._vertexCompilationState.target = NodeMaterialBlockTargets.Vertex;\r\n        this._fragmentCompilationState = new NodeMaterialBuildState();\r\n        this._fragmentCompilationState.supportUniformBuffers = engine.supportsUniformBuffers;\r\n        this._fragmentCompilationState.target = NodeMaterialBlockTargets.Fragment;\r\n\r\n        // Shared data\r\n        this._sharedData = new NodeMaterialBuildStateSharedData();\r\n        this._sharedData.nodeMaterial = this;\r\n        this._sharedData.fragmentOutputNodes = this._fragmentOutputNodes;\r\n        this._vertexCompilationState.sharedData = this._sharedData;\r\n        this._fragmentCompilationState.sharedData = this._sharedData;\r\n        this._sharedData.buildId = this._buildId;\r\n        this._sharedData.emitComments = this._options.emitComments;\r\n        this._sharedData.verbose = verbose;\r\n        this._sharedData.scene = this.getScene();\r\n        this._sharedData.allowEmptyVertexProgram = allowEmptyVertexProgram;\r\n\r\n        // Initialize blocks\r\n        const vertexNodes: NodeMaterialBlock[] = [];\r\n        const fragmentNodes: NodeMaterialBlock[] = [];\r\n\r\n        for (const vertexOutputNode of this._vertexOutputNodes) {\r\n            vertexNodes.push(vertexOutputNode);\r\n            this._initializeBlock(vertexOutputNode, this._vertexCompilationState, fragmentNodes, autoConfigure);\r\n        }\r\n\r\n        for (const fragmentOutputNode of this._fragmentOutputNodes) {\r\n            fragmentNodes.push(fragmentOutputNode);\r\n            this._initializeBlock(fragmentOutputNode, this._fragmentCompilationState, vertexNodes, autoConfigure);\r\n        }\r\n\r\n        // Optimize\r\n        this.optimize();\r\n\r\n        // Vertex\r\n        for (const vertexOutputNode of vertexNodes) {\r\n            vertexOutputNode.build(this._vertexCompilationState, vertexNodes);\r\n        }\r\n\r\n        // Fragment\r\n        this._fragmentCompilationState.uniforms = this._vertexCompilationState.uniforms.slice(0);\r\n        this._fragmentCompilationState._uniformDeclaration = this._vertexCompilationState._uniformDeclaration;\r\n        this._fragmentCompilationState._constantDeclaration = this._vertexCompilationState._constantDeclaration;\r\n        this._fragmentCompilationState._vertexState = this._vertexCompilationState;\r\n\r\n        for (const fragmentOutputNode of fragmentNodes) {\r\n            this._resetDualBlocks(fragmentOutputNode, this._buildId - 1);\r\n        }\r\n\r\n        for (const fragmentOutputNode of fragmentNodes) {\r\n            fragmentOutputNode.build(this._fragmentCompilationState, fragmentNodes);\r\n        }\r\n\r\n        // Finalize\r\n        this._vertexCompilationState.finalize(this._vertexCompilationState);\r\n        this._fragmentCompilationState.finalize(this._fragmentCompilationState);\r\n\r\n        if (updateBuildId) {\r\n            this._buildId = NodeMaterial._BuildIdGenerator++;\r\n        }\r\n\r\n        // Errors\r\n        this._sharedData.emitErrors();\r\n\r\n        if (verbose) {\r\n            Logger.Log(\"Vertex shader:\");\r\n            Logger.Log(this._vertexCompilationState.compilationString);\r\n            Logger.Log(\"Fragment shader:\");\r\n            Logger.Log(this._fragmentCompilationState.compilationString);\r\n        }\r\n\r\n        this._buildWasSuccessful = true;\r\n        this.onBuildObservable.notifyObservers(this);\r\n\r\n        // Wipe defines\r\n        const meshes = this.getScene().meshes;\r\n        for (const mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n            for (const subMesh of mesh.subMeshes) {\r\n                if (subMesh.getMaterial() !== this) {\r\n                    continue;\r\n                }\r\n\r\n                if (!subMesh.materialDefines) {\r\n                    continue;\r\n                }\r\n\r\n                const defines = subMesh.materialDefines;\r\n                defines.markAllAsDirty();\r\n                defines.reset();\r\n            }\r\n        }\r\n\r\n        if (this.prePassTextureInputs.length) {\r\n            this.getScene().enablePrePassRenderer();\r\n        }\r\n        const prePassRenderer = this.getScene().prePassRenderer;\r\n        if (prePassRenderer) {\r\n            prePassRenderer.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs an otpimization phase to try to improve the shader code\r\n     */\r\n    public optimize() {\r\n        for (const optimizer of this._optimizers) {\r\n            optimizer.optimize(this._vertexOutputNodes, this._fragmentOutputNodes);\r\n        }\r\n    }\r\n\r\n    private _prepareDefinesForAttributes(mesh: AbstractMesh, defines: NodeMaterialDefines) {\r\n        const oldNormal = defines[\"NORMAL\"];\r\n        const oldTangent = defines[\"TANGENT\"];\r\n        const oldColor = defines[\"VERTEXCOLOR_NME\"];\r\n\r\n        defines[\"NORMAL\"] = mesh.isVerticesDataPresent(VertexBuffer.NormalKind);\r\n        defines[\"TANGENT\"] = mesh.isVerticesDataPresent(VertexBuffer.TangentKind);\r\n\r\n        const hasVertexColors = mesh.useVertexColors && mesh.isVerticesDataPresent(VertexBuffer.ColorKind);\r\n        defines[\"VERTEXCOLOR_NME\"] = hasVertexColors;\r\n\r\n        let uvChanged = false;\r\n        for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n            const oldUV = defines[\"UV\" + i];\r\n            defines[\"UV\" + i] = mesh.isVerticesDataPresent(`uv${i === 1 ? \"\" : i}`);\r\n            uvChanged = uvChanged || defines[\"UV\" + i] !== oldUV;\r\n        }\r\n\r\n        // PrePass\r\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\r\n        PrepareDefinesForPrePass(this.getScene(), defines, !oit);\r\n\r\n        if (oldNormal !== defines[\"NORMAL\"] || oldTangent !== defines[\"TANGENT\"] || oldColor !== defines[\"VERTEXCOLOR_NME\"] || uvChanged) {\r\n            defines.markAsAttributesDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public get isPrePassCapable(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Outputs written to the prepass\r\n     */\r\n    public get prePassTextureOutputs(): number[] {\r\n        const prePassOutputBlock = this.getBlockByPredicate((block) => block.getClassName() === \"PrePassOutputBlock\") as PrePassOutputBlock;\r\n        const result = [Constants.PREPASS_COLOR_TEXTURE_TYPE];\r\n        if (!prePassOutputBlock) {\r\n            return result;\r\n        }\r\n        // Cannot write to prepass if we alread read from prepass\r\n        if (this.prePassTextureInputs.length) {\r\n            return result;\r\n        }\r\n\r\n        if (prePassOutputBlock.viewDepth.isConnected) {\r\n            result.push(Constants.PREPASS_DEPTH_TEXTURE_TYPE);\r\n        }\r\n\r\n        if (prePassOutputBlock.viewNormal.isConnected) {\r\n            result.push(Constants.PREPASS_NORMAL_TEXTURE_TYPE);\r\n        }\r\n\r\n        if (prePassOutputBlock.worldPosition.isConnected) {\r\n            result.push(Constants.PREPASS_POSITION_TEXTURE_TYPE);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of prepass texture required\r\n     */\r\n    public get prePassTextureInputs(): number[] {\r\n        const prePassTextureBlocks = this.getAllTextureBlocks().filter((block) => block.getClassName() === \"PrePassTextureBlock\") as PrePassTextureBlock[];\r\n        const result = [] as number[];\r\n\r\n        for (const block of prePassTextureBlocks) {\r\n            if (block.position.isConnected && !result.includes(Constants.PREPASS_POSITION_TEXTURE_TYPE)) {\r\n                result.push(Constants.PREPASS_POSITION_TEXTURE_TYPE);\r\n            }\r\n            if (block.depth.isConnected && !result.includes(Constants.PREPASS_DEPTH_TEXTURE_TYPE)) {\r\n                result.push(Constants.PREPASS_DEPTH_TEXTURE_TYPE);\r\n            }\r\n            if (block.normal.isConnected && !result.includes(Constants.PREPASS_NORMAL_TEXTURE_TYPE)) {\r\n                result.push(Constants.PREPASS_NORMAL_TEXTURE_TYPE);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the required values to the prepass renderer.\r\n     * @param prePassRenderer defines the prepass renderer to set\r\n     * @returns true if the pre pass is needed\r\n     */\r\n    public setPrePassRenderer(prePassRenderer: PrePassRenderer): boolean {\r\n        const prePassTexturesRequired = this.prePassTextureInputs.concat(this.prePassTextureOutputs);\r\n\r\n        if (prePassRenderer && prePassTexturesRequired.length > 1) {\r\n            let cfg = prePassRenderer.getEffectConfiguration(\"nodeMaterial\");\r\n            if (!cfg) {\r\n                cfg = prePassRenderer.addEffectConfiguration({\r\n                    enabled: true,\r\n                    needsImageProcessing: false,\r\n                    name: \"nodeMaterial\",\r\n                    texturesRequired: [],\r\n                });\r\n            }\r\n            for (const prePassTexture of prePassTexturesRequired) {\r\n                if (!cfg.texturesRequired.includes(prePassTexture)) {\r\n                    cfg.texturesRequired.push(prePassTexture);\r\n                }\r\n            }\r\n            cfg.enabled = true;\r\n        }\r\n\r\n        // COLOR_TEXTURE is always required for prepass, length > 1 means\r\n        // we actually need to write to special prepass textures\r\n        return prePassTexturesRequired.length > 1;\r\n    }\r\n\r\n    /**\r\n     * Create a post process from the material\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\r\n     * @returns the post process created\r\n     */\r\n    public createPostProcess(\r\n        camera: Nullable<Camera>,\r\n        options: number | PostProcessOptions = 1,\r\n        samplingMode: number = Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        textureFormat = Constants.TEXTUREFORMAT_RGBA\r\n    ): Nullable<PostProcess> {\r\n        if (this.mode !== NodeMaterialModes.PostProcess) {\r\n            Logger.Log(\"Incompatible material mode\");\r\n            return null;\r\n        }\r\n        return this._createEffectForPostProcess(null, camera, options, samplingMode, engine, reusable, textureType, textureFormat);\r\n    }\r\n\r\n    /**\r\n     * Create the post process effect from the material\r\n     * @param postProcess The post process to create the effect for\r\n     */\r\n    public createEffectForPostProcess(postProcess: PostProcess) {\r\n        this._createEffectForPostProcess(postProcess);\r\n    }\r\n\r\n    private _createEffectForPostProcess(\r\n        postProcess: Nullable<PostProcess>,\r\n        camera?: Nullable<Camera>,\r\n        options: number | PostProcessOptions = 1,\r\n        samplingMode: number = Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        textureFormat = Constants.TEXTUREFORMAT_RGBA\r\n    ): PostProcess {\r\n        let tempName = this.name + this._buildId;\r\n\r\n        const defines = new NodeMaterialDefines();\r\n\r\n        const dummyMesh = new AbstractMesh(tempName + \"PostProcess\", this.getScene());\r\n\r\n        let buildId = this._buildId;\r\n\r\n        this._processDefines(dummyMesh, defines);\r\n\r\n        Effect.RegisterShader(tempName, this._fragmentCompilationState._builtCompilationString, this._vertexCompilationState._builtCompilationString);\r\n\r\n        if (!postProcess) {\r\n            postProcess = new PostProcess(\r\n                this.name + \"PostProcess\",\r\n                tempName,\r\n                this._fragmentCompilationState.uniforms,\r\n                this._fragmentCompilationState.samplers,\r\n                options,\r\n                camera!,\r\n                samplingMode,\r\n                engine,\r\n                reusable,\r\n                defines.toString(),\r\n                textureType,\r\n                tempName,\r\n                { maxSimultaneousLights: this.maxSimultaneousLights },\r\n                false,\r\n                textureFormat\r\n            );\r\n        } else {\r\n            postProcess.updateEffect(\r\n                defines.toString(),\r\n                this._fragmentCompilationState.uniforms,\r\n                this._fragmentCompilationState.samplers,\r\n                { maxSimultaneousLights: this.maxSimultaneousLights },\r\n                undefined,\r\n                undefined,\r\n                tempName,\r\n                tempName\r\n            );\r\n        }\r\n\r\n        postProcess.nodeMaterialSource = this;\r\n\r\n        postProcess.onApplyObservable.add((effect) => {\r\n            if (buildId !== this._buildId) {\r\n                delete Effect.ShadersStore[tempName + \"VertexShader\"];\r\n                delete Effect.ShadersStore[tempName + \"PixelShader\"];\r\n\r\n                tempName = this.name + this._buildId;\r\n\r\n                defines.markAllAsDirty();\r\n\r\n                buildId = this._buildId;\r\n            }\r\n\r\n            const result = this._processDefines(dummyMesh, defines);\r\n\r\n            if (result) {\r\n                Effect.RegisterShader(tempName, this._fragmentCompilationState._builtCompilationString, this._vertexCompilationState._builtCompilationString);\r\n\r\n                TimingTools.SetImmediate(() =>\r\n                    postProcess!.updateEffect(\r\n                        defines.toString(),\r\n                        this._fragmentCompilationState.uniforms,\r\n                        this._fragmentCompilationState.samplers,\r\n                        { maxSimultaneousLights: this.maxSimultaneousLights },\r\n                        undefined,\r\n                        undefined,\r\n                        tempName,\r\n                        tempName\r\n                    )\r\n                );\r\n            }\r\n\r\n            this._checkInternals(effect);\r\n        });\r\n\r\n        return postProcess;\r\n    }\r\n\r\n    /**\r\n     * Create a new procedural texture based on this node material\r\n     * @param size defines the size of the texture\r\n     * @param scene defines the hosting scene\r\n     * @returns the new procedural texture attached to this node material\r\n     */\r\n    public createProceduralTexture(size: number | { width: number; height: number; layers?: number }, scene: Scene): Nullable<ProceduralTexture> {\r\n        if (this.mode !== NodeMaterialModes.ProceduralTexture) {\r\n            Logger.Log(\"Incompatible material mode\");\r\n            return null;\r\n        }\r\n\r\n        let tempName = this.name + this._buildId;\r\n\r\n        const proceduralTexture = new ProceduralTexture(tempName, size, null, scene);\r\n\r\n        const dummyMesh = new AbstractMesh(tempName + \"Procedural\", this.getScene());\r\n        dummyMesh.reservedDataStore = {\r\n            hidden: true,\r\n        };\r\n\r\n        const defines = new NodeMaterialDefines();\r\n        const result = this._processDefines(dummyMesh, defines);\r\n        Effect.RegisterShader(tempName, this._fragmentCompilationState._builtCompilationString, this._vertexCompilationState._builtCompilationString);\r\n\r\n        let effect = this.getScene().getEngine().createEffect(\r\n            {\r\n                vertexElement: tempName,\r\n                fragmentElement: tempName,\r\n            },\r\n            [VertexBuffer.PositionKind],\r\n            this._fragmentCompilationState.uniforms,\r\n            this._fragmentCompilationState.samplers,\r\n            defines.toString(),\r\n            result?.fallbacks,\r\n            undefined\r\n        );\r\n\r\n        proceduralTexture.nodeMaterialSource = this;\r\n        proceduralTexture._setEffect(effect);\r\n\r\n        let buildId = this._buildId;\r\n        proceduralTexture.onBeforeGenerationObservable.add(() => {\r\n            if (buildId !== this._buildId) {\r\n                delete Effect.ShadersStore[tempName + \"VertexShader\"];\r\n                delete Effect.ShadersStore[tempName + \"PixelShader\"];\r\n\r\n                tempName = this.name + this._buildId;\r\n\r\n                defines.markAllAsDirty();\r\n\r\n                buildId = this._buildId;\r\n            }\r\n\r\n            const result = this._processDefines(dummyMesh, defines);\r\n\r\n            if (result) {\r\n                Effect.RegisterShader(tempName, this._fragmentCompilationState._builtCompilationString, this._vertexCompilationState._builtCompilationString);\r\n\r\n                TimingTools.SetImmediate(() => {\r\n                    effect = this.getScene().getEngine().createEffect(\r\n                        {\r\n                            vertexElement: tempName,\r\n                            fragmentElement: tempName,\r\n                        },\r\n                        [VertexBuffer.PositionKind],\r\n                        this._fragmentCompilationState.uniforms,\r\n                        this._fragmentCompilationState.samplers,\r\n                        defines.toString(),\r\n                        result?.fallbacks,\r\n                        undefined\r\n                    );\r\n\r\n                    proceduralTexture._setEffect(effect);\r\n                });\r\n            }\r\n\r\n            this._checkInternals(effect);\r\n        });\r\n\r\n        return proceduralTexture;\r\n    }\r\n\r\n    private _createEffectForParticles(\r\n        particleSystem: IParticleSystem,\r\n        blendMode: number,\r\n        onCompiled?: (effect: Effect) => void,\r\n        onError?: (effect: Effect, errors: string) => void,\r\n        effect?: Effect,\r\n        defines?: NodeMaterialDefines,\r\n        dummyMesh?: Nullable<AbstractMesh>,\r\n        particleSystemDefinesJoined = \"\"\r\n    ) {\r\n        let tempName = this.name + this._buildId + \"_\" + blendMode;\r\n\r\n        if (!defines) {\r\n            defines = new NodeMaterialDefines();\r\n        }\r\n\r\n        if (!dummyMesh) {\r\n            dummyMesh = this.getScene().getMeshByName(this.name + \"Particle\");\r\n            if (!dummyMesh) {\r\n                dummyMesh = new AbstractMesh(this.name + \"Particle\", this.getScene());\r\n                dummyMesh.reservedDataStore = {\r\n                    hidden: true,\r\n                };\r\n            }\r\n        }\r\n\r\n        let buildId = this._buildId;\r\n\r\n        const particleSystemDefines: Array<string> = [];\r\n        let join = particleSystemDefinesJoined;\r\n\r\n        if (!effect) {\r\n            const result = this._processDefines(dummyMesh, defines);\r\n\r\n            Effect.RegisterShader(tempName, this._fragmentCompilationState._builtCompilationString);\r\n\r\n            particleSystem.fillDefines(particleSystemDefines, blendMode);\r\n\r\n            join = particleSystemDefines.join(\"\\n\");\r\n\r\n            effect = this.getScene()\r\n                .getEngine()\r\n                .createEffectForParticles(\r\n                    tempName,\r\n                    this._fragmentCompilationState.uniforms,\r\n                    this._fragmentCompilationState.samplers,\r\n                    defines.toString() + \"\\n\" + join,\r\n                    result?.fallbacks,\r\n                    onCompiled,\r\n                    onError,\r\n                    particleSystem\r\n                );\r\n\r\n            particleSystem.setCustomEffect(effect, blendMode);\r\n        }\r\n\r\n        effect.onBindObservable.add((effect) => {\r\n            if (buildId !== this._buildId) {\r\n                delete Effect.ShadersStore[tempName + \"PixelShader\"];\r\n\r\n                tempName = this.name + this._buildId + \"_\" + blendMode;\r\n\r\n                defines!.markAllAsDirty();\r\n\r\n                buildId = this._buildId;\r\n            }\r\n\r\n            particleSystemDefines.length = 0;\r\n\r\n            particleSystem.fillDefines(particleSystemDefines, blendMode);\r\n\r\n            const particleSystemDefinesJoinedCurrent = particleSystemDefines.join(\"\\n\");\r\n\r\n            if (particleSystemDefinesJoinedCurrent !== join) {\r\n                defines!.markAllAsDirty();\r\n                join = particleSystemDefinesJoinedCurrent;\r\n            }\r\n\r\n            const result = this._processDefines(dummyMesh!, defines!);\r\n\r\n            if (result) {\r\n                Effect.RegisterShader(tempName, this._fragmentCompilationState._builtCompilationString);\r\n\r\n                effect = this.getScene()\r\n                    .getEngine()\r\n                    .createEffectForParticles(\r\n                        tempName,\r\n                        this._fragmentCompilationState.uniforms,\r\n                        this._fragmentCompilationState.samplers,\r\n                        defines!.toString() + \"\\n\" + join,\r\n                        result?.fallbacks,\r\n                        onCompiled,\r\n                        onError,\r\n                        particleSystem\r\n                    );\r\n                particleSystem.setCustomEffect(effect, blendMode);\r\n                this._createEffectForParticles(particleSystem, blendMode, onCompiled, onError, effect, defines, dummyMesh, particleSystemDefinesJoined); // add the effect.onBindObservable observer\r\n                return;\r\n            }\r\n\r\n            this._checkInternals(effect);\r\n        });\r\n    }\r\n\r\n    private _checkInternals(effect: Effect) {\r\n        // Animated blocks\r\n        if (this._sharedData.animatedInputs) {\r\n            const scene = this.getScene();\r\n\r\n            const frameId = scene.getFrameId();\r\n\r\n            if (this._animationFrame !== frameId) {\r\n                for (const input of this._sharedData.animatedInputs) {\r\n                    input.animate(scene);\r\n                }\r\n\r\n                this._animationFrame = frameId;\r\n            }\r\n        }\r\n\r\n        // Bindable blocks\r\n        for (const block of this._sharedData.bindableBlocks) {\r\n            block.bind(effect, this);\r\n        }\r\n\r\n        // Connection points\r\n        for (const inputBlock of this._sharedData.inputBlocks) {\r\n            inputBlock._transmit(effect, this.getScene(), this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the effect to be used as the custom effect for a particle system\r\n     * @param particleSystem Particle system to create the effect for\r\n     * @param onCompiled defines a function to call when the effect creation is successful\r\n     * @param onError defines a function to call when the effect creation has failed\r\n     */\r\n    public createEffectForParticles(particleSystem: IParticleSystem, onCompiled?: (effect: Effect) => void, onError?: (effect: Effect, errors: string) => void) {\r\n        if (this.mode !== NodeMaterialModes.Particle) {\r\n            Logger.Log(\"Incompatible material mode\");\r\n            return;\r\n        }\r\n\r\n        this._createEffectForParticles(particleSystem, BaseParticleSystem.BLENDMODE_ONEONE, onCompiled, onError);\r\n        this._createEffectForParticles(particleSystem, BaseParticleSystem.BLENDMODE_MULTIPLY, onCompiled, onError);\r\n    }\r\n\r\n    /**\r\n     * Use this material as the shadow depth wrapper of a target material\r\n     * @param targetMaterial defines the target material\r\n     */\r\n    public createAsShadowDepthWrapper(targetMaterial: Material) {\r\n        if (this.mode !== NodeMaterialModes.Material) {\r\n            Logger.Log(\"Incompatible material mode\");\r\n            return;\r\n        }\r\n\r\n        targetMaterial.shadowDepthWrapper = new BABYLON.ShadowDepthWrapper(this, this.getScene());\r\n    }\r\n\r\n    private _processDefines(\r\n        mesh: AbstractMesh,\r\n        defines: NodeMaterialDefines,\r\n        useInstances = false,\r\n        subMesh?: SubMesh\r\n    ): Nullable<{\r\n        lightDisposed: boolean;\r\n        uniformBuffers: string[];\r\n        mergedUniforms: string[];\r\n        mergedSamplers: string[];\r\n        fallbacks: EffectFallbacks;\r\n    }> {\r\n        let result = null;\r\n\r\n        // Global defines\r\n        const scene = this.getScene();\r\n        if (PrepareDefinesForCamera(scene, defines)) {\r\n            defines.markAsMiscDirty();\r\n        }\r\n\r\n        // Shared defines\r\n        this._sharedData.blocksWithDefines.forEach((b) => {\r\n            b.initializeDefines(mesh, this, defines, useInstances);\r\n        });\r\n\r\n        this._sharedData.blocksWithDefines.forEach((b) => {\r\n            b.prepareDefines(mesh, this, defines, useInstances, subMesh);\r\n        });\r\n\r\n        // Need to recompile?\r\n        if (defines.isDirty) {\r\n            const lightDisposed = defines._areLightsDisposed;\r\n            defines.markAsProcessed();\r\n\r\n            // Repeatable content generators\r\n            this._vertexCompilationState.compilationString = this._vertexCompilationState._builtCompilationString;\r\n            this._fragmentCompilationState.compilationString = this._fragmentCompilationState._builtCompilationString;\r\n\r\n            this._sharedData.repeatableContentBlocks.forEach((b) => {\r\n                b.replaceRepeatableContent(this._vertexCompilationState, this._fragmentCompilationState, mesh, defines);\r\n            });\r\n\r\n            // Uniforms\r\n            const uniformBuffers: string[] = [];\r\n            this._sharedData.dynamicUniformBlocks.forEach((b) => {\r\n                b.updateUniformsAndSamples(this._vertexCompilationState, this, defines, uniformBuffers);\r\n            });\r\n\r\n            const mergedUniforms = this._vertexCompilationState.uniforms;\r\n\r\n            this._fragmentCompilationState.uniforms.forEach((u) => {\r\n                const index = mergedUniforms.indexOf(u);\r\n\r\n                if (index === -1) {\r\n                    mergedUniforms.push(u);\r\n                }\r\n            });\r\n\r\n            // Samplers\r\n            const mergedSamplers = this._vertexCompilationState.samplers;\r\n\r\n            this._fragmentCompilationState.samplers.forEach((s) => {\r\n                const index = mergedSamplers.indexOf(s);\r\n\r\n                if (index === -1) {\r\n                    mergedSamplers.push(s);\r\n                }\r\n            });\r\n\r\n            const fallbacks = new EffectFallbacks();\r\n\r\n            this._sharedData.blocksWithFallbacks.forEach((b) => {\r\n                b.provideFallbacks(mesh, fallbacks);\r\n            });\r\n\r\n            result = {\r\n                lightDisposed,\r\n                uniformBuffers,\r\n                mergedUniforms,\r\n                mergedSamplers,\r\n                fallbacks,\r\n            };\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get if the submesh is ready to be used and all its information available.\r\n     * Child classes can use it to update shaders\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances: boolean = false): boolean {\r\n        if (!this._buildWasSuccessful) {\r\n            return false;\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        if (this._sharedData.animatedInputs) {\r\n            const frameId = scene.getFrameId();\r\n\r\n            if (this._animationFrame !== frameId) {\r\n                for (const input of this._sharedData.animatedInputs) {\r\n                    input.animate(scene);\r\n                }\r\n\r\n                this._animationFrame = frameId;\r\n            }\r\n        }\r\n\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (drawWrapper.effect && this.isFrozen) {\r\n            if (drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new NodeMaterialDefines();\r\n        }\r\n\r\n        const defines = <NodeMaterialDefines>subMesh.materialDefines;\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        this._prepareDefinesForAttributes(mesh, defines);\r\n\r\n        // Check if blocks are ready\r\n        if (this._sharedData.blockingBlocks.some((b) => !b.isReady(mesh, this, defines, useInstances))) {\r\n            return false;\r\n        }\r\n\r\n        const result = this._processDefines(mesh, defines, useInstances, subMesh);\r\n\r\n        if (result) {\r\n            const previousEffect = subMesh.effect;\r\n            // Compilation\r\n            const join = defines.toString();\r\n            let effect = engine.createEffect(\r\n                {\r\n                    vertex: \"nodeMaterial\" + this._buildId,\r\n                    fragment: \"nodeMaterial\" + this._buildId,\r\n                    vertexSource: this._vertexCompilationState.compilationString,\r\n                    fragmentSource: this._fragmentCompilationState.compilationString,\r\n                },\r\n                <IEffectCreationOptions>{\r\n                    attributes: this._vertexCompilationState.attributes,\r\n                    uniformsNames: result.mergedUniforms,\r\n                    uniformBuffersNames: result.uniformBuffers,\r\n                    samplers: result.mergedSamplers,\r\n                    defines: join,\r\n                    fallbacks: result.fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    multiTarget: defines.PREPASS,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS },\r\n                },\r\n                engine\r\n            );\r\n\r\n            if (effect) {\r\n                if (this._onEffectCreatedObservable) {\r\n                    onCreatedEffectParameters.effect = effect;\r\n                    onCreatedEffectParameters.subMesh = subMesh;\r\n                    this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n                }\r\n\r\n                // Use previous effect while new one is compiling\r\n                if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\r\n                    effect = previousEffect;\r\n                    defines.markAsUnprocessed();\r\n\r\n                    if (result.lightDisposed) {\r\n                        // re register in case it takes more than one frame.\r\n                        defines._areLightsDisposed = true;\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    scene.resetCachedMaterial();\r\n                    subMesh.setEffect(effect, defines, this._materialContext);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = true;\r\n        drawWrapper._wasPreviouslyUsingInstances = useInstances;\r\n\r\n        this._checkScenePerformancePriority();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get a string representing the shaders built by the current node graph\r\n     */\r\n    public get compiledShaders() {\r\n        return `// Vertex shader\\n${this._vertexCompilationState.compilationString}\\n\\n// Fragment shader\\n${this._fragmentCompilationState.compilationString}`;\r\n    }\r\n\r\n    /**\r\n     * Binds the world matrix to the material\r\n     * @param world defines the world transformation matrix\r\n     */\r\n    public bindOnlyWorldMatrix(world: Matrix): void {\r\n        const scene = this.getScene();\r\n\r\n        if (!this._activeEffect) {\r\n            return;\r\n        }\r\n\r\n        const hints = this._sharedData.hints;\r\n\r\n        if (hints.needWorldViewMatrix) {\r\n            world.multiplyToRef(scene.getViewMatrix(), this._cachedWorldViewMatrix);\r\n        }\r\n\r\n        if (hints.needWorldViewProjectionMatrix) {\r\n            world.multiplyToRef(scene.getTransformMatrix(), this._cachedWorldViewProjectionMatrix);\r\n        }\r\n\r\n        // Connection points\r\n        for (const inputBlock of this._sharedData.inputBlocks) {\r\n            inputBlock._transmitWorld(this._activeEffect, world, this._cachedWorldViewMatrix, this._cachedWorldViewProjectionMatrix);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to this material by preparing the effect and shader to draw\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n\r\n        const mustRebind = this._mustRebind(scene, effect, subMesh, mesh.visibility);\r\n        const sharedData = this._sharedData;\r\n\r\n        if (mustRebind) {\r\n            // Bindable blocks\r\n            for (const block of sharedData.bindableBlocks) {\r\n                block.bind(effect, this, mesh, subMesh);\r\n            }\r\n\r\n            for (const block of sharedData.forcedBindableBlocks) {\r\n                block.bind(effect, this, mesh, subMesh);\r\n            }\r\n\r\n            // Connection points\r\n            for (const inputBlock of sharedData.inputBlocks) {\r\n                inputBlock._transmit(effect, scene, this);\r\n            }\r\n        } else if (!this.isFrozen) {\r\n            for (const block of sharedData.forcedBindableBlocks) {\r\n                block.bind(effect, this, mesh, subMesh);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._sharedData) {\r\n            activeTextures.push(...this._sharedData.textureBlocks.filter((tb) => tb.texture).map((tb) => tb.texture!));\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of texture blocks\r\n     * Note that this method will only return blocks that are reachable from the final block(s) and only after the material has been built!\r\n     * @returns an array of texture blocks\r\n     */\r\n    public getTextureBlocks(): NodeMaterialTextureBlocks[] {\r\n        if (!this._sharedData) {\r\n            return [];\r\n        }\r\n\r\n        return this._sharedData.textureBlocks;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of all texture blocks\r\n     * Note that this method will scan all attachedBlocks and return blocks that are texture blocks\r\n     * @returns\r\n     */\r\n    public getAllTextureBlocks(): NodeMaterialTextureBlocks[] {\r\n        const textureBlocks: NodeMaterialTextureBlocks[] = [];\r\n\r\n        for (const block of this.attachedBlocks) {\r\n            if (NodeMaterial._BlockIsTextureBlock(block)) {\r\n                textureBlocks.push(block);\r\n            }\r\n        }\r\n\r\n        return textureBlocks;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (!this._sharedData) {\r\n            return false;\r\n        }\r\n\r\n        for (const t of this._sharedData.textureBlocks) {\r\n            if (t.texture === texture) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            for (const texture of this.getTextureBlocks()\r\n                .filter((tb) => tb.texture)\r\n                .map((tb) => tb.texture!)) {\r\n                texture.dispose();\r\n            }\r\n        }\r\n\r\n        for (const block of this.attachedBlocks) {\r\n            block.dispose();\r\n        }\r\n\r\n        this.attachedBlocks.length = 0;\r\n        (this._sharedData as any) = null;\r\n        (this._vertexCompilationState as any) = null;\r\n        (this._fragmentCompilationState as any) = null;\r\n\r\n        this.onBuildObservable.clear();\r\n\r\n        if (this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n            this._imageProcessingObserver = null;\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\r\n    }\r\n\r\n    /** Creates the node editor window.\r\n     * @param additionalConfig Define the configuration of the editor\r\n     */\r\n    private _createNodeEditor(additionalConfig?: any) {\r\n        const nodeEditorConfig: any = {\r\n            nodeMaterial: this,\r\n            ...additionalConfig,\r\n        };\r\n        this.BJSNODEMATERIALEDITOR.NodeEditor.Show(nodeEditorConfig);\r\n    }\r\n\r\n    /**\r\n     * Launch the node material editor\r\n     * @param config Define the configuration of the editor\r\n     * @returns a promise fulfilled when the node editor is visible\r\n     */\r\n    public edit(config?: INodeMaterialEditorOptions): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            this.BJSNODEMATERIALEDITOR = this.BJSNODEMATERIALEDITOR || this._getGlobalNodeMaterialEditor();\r\n            if (typeof this.BJSNODEMATERIALEDITOR == \"undefined\") {\r\n                const editorUrl = config && config.editorURL ? config.editorURL : NodeMaterial.EditorURL;\r\n\r\n                // Load editor and add it to the DOM\r\n                Tools.LoadBabylonScript(editorUrl, () => {\r\n                    this.BJSNODEMATERIALEDITOR = this.BJSNODEMATERIALEDITOR || this._getGlobalNodeMaterialEditor();\r\n                    this._createNodeEditor(config?.nodeEditorConfig);\r\n                    resolve();\r\n                });\r\n            } else {\r\n                // Otherwise creates the editor\r\n                this._createNodeEditor(config?.nodeEditorConfig);\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear the current material\r\n     */\r\n    public clear() {\r\n        this._vertexOutputNodes.length = 0;\r\n        this._fragmentOutputNodes.length = 0;\r\n        this.attachedBlocks.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Clear the current material and set it to a default state\r\n     */\r\n    public setToDefault() {\r\n        this.clear();\r\n\r\n        this.editorData = null;\r\n\r\n        const positionInput = new InputBlock(\"Position\");\r\n        positionInput.setAsAttribute(\"position\");\r\n\r\n        const worldInput = new InputBlock(\"World\");\r\n        worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\r\n\r\n        const worldPos = new TransformBlock(\"WorldPos\");\r\n        positionInput.connectTo(worldPos);\r\n        worldInput.connectTo(worldPos);\r\n\r\n        const viewProjectionInput = new InputBlock(\"ViewProjection\");\r\n        viewProjectionInput.setAsSystemValue(NodeMaterialSystemValues.ViewProjection);\r\n\r\n        const worldPosdMultipliedByViewProjection = new TransformBlock(\"WorldPos * ViewProjectionTransform\");\r\n        worldPos.connectTo(worldPosdMultipliedByViewProjection);\r\n        viewProjectionInput.connectTo(worldPosdMultipliedByViewProjection);\r\n\r\n        const vertexOutput = new VertexOutputBlock(\"VertexOutput\");\r\n        worldPosdMultipliedByViewProjection.connectTo(vertexOutput);\r\n\r\n        // Pixel\r\n        const pixelColor = new InputBlock(\"color\");\r\n        pixelColor.value = new Color4(0.8, 0.8, 0.8, 1);\r\n\r\n        const fragmentOutput = new FragmentOutputBlock(\"FragmentOutput\");\r\n        pixelColor.connectTo(fragmentOutput);\r\n\r\n        // Add to nodes\r\n        this.addOutputNode(vertexOutput);\r\n        this.addOutputNode(fragmentOutput);\r\n\r\n        this._mode = NodeMaterialModes.Material;\r\n    }\r\n\r\n    /**\r\n     * Clear the current material and set it to a default state for post process\r\n     */\r\n    public setToDefaultPostProcess() {\r\n        this.clear();\r\n\r\n        this.editorData = null;\r\n\r\n        const position = new InputBlock(\"Position\");\r\n        position.setAsAttribute(\"position2d\");\r\n\r\n        const const1 = new InputBlock(\"Constant1\");\r\n        const1.isConstant = true;\r\n        const1.value = 1;\r\n\r\n        const vmerger = new VectorMergerBlock(\"Position3D\");\r\n\r\n        position.connectTo(vmerger);\r\n        const1.connectTo(vmerger, { input: \"w\" });\r\n\r\n        const vertexOutput = new VertexOutputBlock(\"VertexOutput\");\r\n        vmerger.connectTo(vertexOutput);\r\n\r\n        // Pixel\r\n        const scale = new InputBlock(\"Scale\");\r\n        scale.visibleInInspector = true;\r\n        scale.value = new Vector2(1, 1);\r\n\r\n        const uv0 = new RemapBlock(\"uv0\");\r\n        position.connectTo(uv0);\r\n\r\n        const uv = new MultiplyBlock(\"UV scale\");\r\n        uv0.connectTo(uv);\r\n        scale.connectTo(uv);\r\n\r\n        const currentScreen = new CurrentScreenBlock(\"CurrentScreen\");\r\n        uv.connectTo(currentScreen);\r\n\r\n        currentScreen.texture = new Texture(\"https://assets.babylonjs.com/nme/currentScreenPostProcess.png\", this.getScene());\r\n\r\n        const fragmentOutput = new FragmentOutputBlock(\"FragmentOutput\");\r\n        currentScreen.connectTo(fragmentOutput, { output: \"rgba\" });\r\n\r\n        // Add to nodes\r\n        this.addOutputNode(vertexOutput);\r\n        this.addOutputNode(fragmentOutput);\r\n\r\n        this._mode = NodeMaterialModes.PostProcess;\r\n    }\r\n\r\n    /**\r\n     * Clear the current material and set it to a default state for procedural texture\r\n     */\r\n    public setToDefaultProceduralTexture() {\r\n        this.clear();\r\n\r\n        this.editorData = null;\r\n\r\n        const position = new InputBlock(\"Position\");\r\n        position.setAsAttribute(\"position2d\");\r\n\r\n        const const1 = new InputBlock(\"Constant1\");\r\n        const1.isConstant = true;\r\n        const1.value = 1;\r\n\r\n        const vmerger = new VectorMergerBlock(\"Position3D\");\r\n\r\n        position.connectTo(vmerger);\r\n        const1.connectTo(vmerger, { input: \"w\" });\r\n\r\n        const vertexOutput = new VertexOutputBlock(\"VertexOutput\");\r\n        vmerger.connectTo(vertexOutput);\r\n\r\n        // Pixel\r\n        const time = new InputBlock(\"Time\");\r\n        time.value = 0;\r\n        time.min = 0;\r\n        time.max = 0;\r\n        time.isBoolean = false;\r\n        time.matrixMode = 0;\r\n        time.animationType = AnimatedInputBlockTypes.Time;\r\n        time.isConstant = false;\r\n\r\n        const color = new InputBlock(\"Color3\");\r\n        color.value = new Color3(1, 1, 1);\r\n        color.isConstant = false;\r\n        const fragmentOutput = new FragmentOutputBlock(\"FragmentOutput\");\r\n\r\n        const vectorMerger = new VectorMergerBlock(\"VectorMerger\");\r\n        vectorMerger.visibleInInspector = false;\r\n\r\n        const cos = new TrigonometryBlock(\"Cos\");\r\n        cos.operation = TrigonometryBlockOperations.Cos;\r\n\r\n        position.connectTo(vectorMerger);\r\n        time.output.connectTo(cos.input);\r\n        cos.output.connectTo(vectorMerger.z);\r\n        vectorMerger.xyzOut.connectTo(fragmentOutput.rgb);\r\n\r\n        // Add to nodes\r\n        this.addOutputNode(vertexOutput);\r\n        this.addOutputNode(fragmentOutput);\r\n\r\n        this._mode = NodeMaterialModes.ProceduralTexture;\r\n    }\r\n\r\n    /**\r\n     * Clear the current material and set it to a default state for particle\r\n     */\r\n    public setToDefaultParticle() {\r\n        this.clear();\r\n\r\n        this.editorData = null;\r\n\r\n        // Pixel\r\n        const uv = new InputBlock(\"uv\");\r\n        uv.setAsAttribute(\"particle_uv\");\r\n\r\n        const texture = new ParticleTextureBlock(\"ParticleTexture\");\r\n        uv.connectTo(texture);\r\n\r\n        const color = new InputBlock(\"Color\");\r\n        color.setAsAttribute(\"particle_color\");\r\n\r\n        const multiply = new MultiplyBlock(\"Texture * Color\");\r\n        texture.connectTo(multiply);\r\n        color.connectTo(multiply);\r\n\r\n        const rampGradient = new ParticleRampGradientBlock(\"ParticleRampGradient\");\r\n        multiply.connectTo(rampGradient);\r\n\r\n        const cSplitter = new ColorSplitterBlock(\"ColorSplitter\");\r\n        color.connectTo(cSplitter);\r\n\r\n        const blendMultiply = new ParticleBlendMultiplyBlock(\"ParticleBlendMultiply\");\r\n        rampGradient.connectTo(blendMultiply);\r\n        texture.connectTo(blendMultiply, { output: \"a\" });\r\n        cSplitter.connectTo(blendMultiply, { output: \"a\" });\r\n\r\n        const fragmentOutput = new FragmentOutputBlock(\"FragmentOutput\");\r\n        blendMultiply.connectTo(fragmentOutput);\r\n\r\n        // Add to nodes\r\n        this.addOutputNode(fragmentOutput);\r\n\r\n        this._mode = NodeMaterialModes.Particle;\r\n    }\r\n\r\n    /**\r\n     * Loads the current Node Material from a url pointing to a file save by the Node Material Editor\r\n     * @deprecated Please use NodeMaterial.ParseFromFileAsync instead\r\n     * @param url defines the url to load from\r\n     * @param rootUrl defines the root URL for nested url in the node material\r\n     * @returns a promise that will fulfil when the material is fully loaded\r\n     */\r\n    public async loadAsync(url: string, rootUrl: string = \"\") {\r\n        return NodeMaterial.ParseFromFileAsync(\"\", url, this.getScene(), rootUrl, true, this);\r\n    }\r\n\r\n    private _gatherBlocks(rootNode: NodeMaterialBlock, list: NodeMaterialBlock[]) {\r\n        if (list.indexOf(rootNode) !== -1) {\r\n            return;\r\n        }\r\n        list.push(rootNode);\r\n\r\n        for (const input of rootNode.inputs) {\r\n            const connectedPoint = input.connectedPoint;\r\n            if (connectedPoint) {\r\n                const block = connectedPoint.ownerBlock;\r\n                if (block !== rootNode) {\r\n                    this._gatherBlocks(block, list);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Teleportation\r\n        if (rootNode.isTeleportOut) {\r\n            const block = rootNode as NodeMaterialTeleportOutBlock;\r\n            if (block.entryPoint) {\r\n                this._gatherBlocks(block.entryPoint, list);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate a string containing the code declaration required to create an equivalent of this material\r\n     * @returns a string\r\n     */\r\n    public generateCode() {\r\n        let alreadyDumped: NodeMaterialBlock[] = [];\r\n        const vertexBlocks: NodeMaterialBlock[] = [];\r\n        const uniqueNames: string[] = [\"const\", \"var\", \"let\"];\r\n        // Gets active blocks\r\n        for (const outputNode of this._vertexOutputNodes) {\r\n            this._gatherBlocks(outputNode, vertexBlocks);\r\n        }\r\n\r\n        const fragmentBlocks: NodeMaterialBlock[] = [];\r\n        for (const outputNode of this._fragmentOutputNodes) {\r\n            this._gatherBlocks(outputNode, fragmentBlocks);\r\n        }\r\n\r\n        // Generate vertex shader\r\n        let codeString = `var nodeMaterial = new BABYLON.NodeMaterial(\"${this.name || \"node material\"}\");\\n`;\r\n        codeString += `nodeMaterial.mode = BABYLON.NodeMaterialModes.${NodeMaterialModes[this.mode]};\\n`;\r\n        for (const node of vertexBlocks) {\r\n            if (node.isInput && alreadyDumped.indexOf(node) === -1) {\r\n                codeString += node._dumpCode(uniqueNames, alreadyDumped);\r\n            }\r\n        }\r\n\r\n        // Generate fragment shader\r\n        for (const node of fragmentBlocks) {\r\n            if (node.isInput && alreadyDumped.indexOf(node) === -1) {\r\n                codeString += node._dumpCode(uniqueNames, alreadyDumped);\r\n            }\r\n        }\r\n\r\n        // Connections\r\n        alreadyDumped = [];\r\n        codeString += \"\\n// Connections\\n\";\r\n        for (const node of this._vertexOutputNodes) {\r\n            codeString += node._dumpCodeForOutputConnections(alreadyDumped);\r\n        }\r\n        for (const node of this._fragmentOutputNodes) {\r\n            codeString += node._dumpCodeForOutputConnections(alreadyDumped);\r\n        }\r\n\r\n        // Output nodes\r\n        codeString += \"\\n// Output nodes\\n\";\r\n        for (const node of this._vertexOutputNodes) {\r\n            codeString += `nodeMaterial.addOutputNode(${node._codeVariableName});\\n`;\r\n        }\r\n\r\n        for (const node of this._fragmentOutputNodes) {\r\n            codeString += `nodeMaterial.addOutputNode(${node._codeVariableName});\\n`;\r\n        }\r\n\r\n        codeString += `nodeMaterial.build();\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this material in a JSON representation\r\n     * @param selectedBlocks defines an optional list of blocks to serialize\r\n     * @returns the serialized material object\r\n     */\r\n    public serialize(selectedBlocks?: NodeMaterialBlock[]): any {\r\n        const serializationObject = selectedBlocks ? {} : SerializationHelper.Serialize(this);\r\n        serializationObject.editorData = JSON.parse(JSON.stringify(this.editorData)); // Copy\r\n\r\n        let blocks: NodeMaterialBlock[] = [];\r\n\r\n        if (selectedBlocks) {\r\n            blocks = selectedBlocks;\r\n        } else {\r\n            serializationObject.customType = \"BABYLON.NodeMaterial\";\r\n            serializationObject.outputNodes = [];\r\n\r\n            // Outputs\r\n            for (const outputNode of this._vertexOutputNodes) {\r\n                this._gatherBlocks(outputNode, blocks);\r\n                serializationObject.outputNodes.push(outputNode.uniqueId);\r\n            }\r\n\r\n            for (const outputNode of this._fragmentOutputNodes) {\r\n                this._gatherBlocks(outputNode, blocks);\r\n\r\n                if (serializationObject.outputNodes.indexOf(outputNode.uniqueId) === -1) {\r\n                    serializationObject.outputNodes.push(outputNode.uniqueId);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Blocks\r\n        serializationObject.blocks = [];\r\n\r\n        for (const block of blocks) {\r\n            serializationObject.blocks.push(block.serialize());\r\n        }\r\n\r\n        if (!selectedBlocks) {\r\n            for (const block of this.attachedBlocks) {\r\n                if (blocks.indexOf(block) !== -1) {\r\n                    continue;\r\n                }\r\n                serializationObject.blocks.push(block.serialize());\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    private _restoreConnections(block: NodeMaterialBlock, source: any, map: { [key: number]: NodeMaterialBlock }) {\r\n        for (const outputPoint of block.outputs) {\r\n            for (const candidate of source.blocks) {\r\n                const target = map[candidate.id];\r\n\r\n                if (!target) {\r\n                    continue;\r\n                }\r\n\r\n                for (const input of candidate.inputs) {\r\n                    if (map[input.targetBlockId] === block && input.targetConnectionName === outputPoint.name) {\r\n                        const inputPoint = target.getInputByName(input.inputName);\r\n                        if (!inputPoint || inputPoint.isConnected) {\r\n                            continue;\r\n                        }\r\n\r\n                        outputPoint.connectTo(inputPoint, true);\r\n                        this._restoreConnections(target, source, map);\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear the current graph and load a new one from a serialization object\r\n     * @param source defines the JSON representation of the material\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @param merge defines whether or not the source must be merged or replace the current content\r\n     */\r\n    public parseSerializedObject(source: any, rootUrl: string = \"\", merge = false) {\r\n        if (!merge) {\r\n            this.clear();\r\n        }\r\n\r\n        const map: { [key: number]: NodeMaterialBlock } = {};\r\n\r\n        // Create blocks\r\n        for (const parsedBlock of source.blocks) {\r\n            const blockType = GetClass(parsedBlock.customType);\r\n            if (blockType) {\r\n                const block: NodeMaterialBlock = new blockType();\r\n                block._deserialize(parsedBlock, this.getScene(), rootUrl);\r\n                map[parsedBlock.id] = block;\r\n\r\n                this.attachedBlocks.push(block);\r\n            }\r\n        }\r\n\r\n        // Reconnect teleportation\r\n        for (const block of this.attachedBlocks) {\r\n            if (block.isTeleportOut) {\r\n                const teleportOut = block as NodeMaterialTeleportOutBlock;\r\n                const id = teleportOut._tempEntryPointUniqueId;\r\n                if (id) {\r\n                    const source = map[id] as NodeMaterialTeleportInBlock;\r\n                    source.attachToEndpoint(teleportOut);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Connections - Starts with input blocks only (except if in \"merge\" mode where we scan all blocks)\r\n        for (let blockIndex = 0; blockIndex < source.blocks.length; blockIndex++) {\r\n            const parsedBlock = source.blocks[blockIndex];\r\n            const block = map[parsedBlock.id];\r\n\r\n            if (!block) {\r\n                continue;\r\n            }\r\n\r\n            if (block.inputs.length && !merge) {\r\n                continue;\r\n            }\r\n            this._restoreConnections(block, source, map);\r\n        }\r\n\r\n        // Outputs\r\n        if (source.outputNodes) {\r\n            for (const outputNodeId of source.outputNodes) {\r\n                this.addOutputNode(map[outputNodeId]);\r\n            }\r\n        }\r\n\r\n        // UI related info\r\n        if (source.locations || (source.editorData && source.editorData.locations)) {\r\n            const locations: {\r\n                blockId: number;\r\n                x: number;\r\n                y: number;\r\n            }[] = source.locations || source.editorData.locations;\r\n\r\n            for (const location of locations) {\r\n                if (map[location.blockId]) {\r\n                    location.blockId = map[location.blockId].uniqueId;\r\n                }\r\n            }\r\n\r\n            if (merge && this.editorData && this.editorData.locations) {\r\n                locations.concat(this.editorData.locations);\r\n            }\r\n\r\n            if (source.locations) {\r\n                this.editorData = {\r\n                    locations: locations,\r\n                };\r\n            } else {\r\n                this.editorData = source.editorData;\r\n                this.editorData.locations = locations;\r\n            }\r\n\r\n            const blockMap: number[] = [];\r\n\r\n            for (const key in map) {\r\n                blockMap[key] = map[key].uniqueId;\r\n            }\r\n\r\n            this.editorData.map = blockMap;\r\n        }\r\n\r\n        this.comment = source.comment;\r\n\r\n        if (source.forceAlphaBlending !== undefined) {\r\n            this.forceAlphaBlending = source.forceAlphaBlending;\r\n        }\r\n\r\n        if (source.alphaMode !== undefined) {\r\n            this.alphaMode = source.alphaMode;\r\n        }\r\n\r\n        if (!merge) {\r\n            this._mode = source.mode ?? NodeMaterialModes.Material;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear the current graph and load a new one from a serialization object\r\n     * @param source defines the JSON representation of the material\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @param merge defines whether or not the source must be merged or replace the current content\r\n     * @deprecated Please use the parseSerializedObject method instead\r\n     */\r\n    public loadFromSerialization(source: any, rootUrl: string = \"\", merge = false) {\r\n        this.parseSerializedObject(source, rootUrl, merge);\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current material.\r\n     * @param name defines the name to use for the new material\r\n     * @param shareEffect defines if the clone material should share the same effect (default is false)\r\n     * @returns the cloned material\r\n     */\r\n    public clone(name: string, shareEffect: boolean = false): NodeMaterial {\r\n        const serializationObject = this.serialize();\r\n\r\n        const clone = SerializationHelper.Clone(() => new NodeMaterial(name, this.getScene(), this.options), this);\r\n        clone.id = name;\r\n        clone.name = name;\r\n\r\n        clone.parseSerializedObject(serializationObject);\r\n        clone._buildId = this._buildId;\r\n        clone.build(false, !shareEffect);\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Awaits for all the material textures to be ready before resolving the returned promise.\r\n     * @returns A promise that resolves when the textures are ready.\r\n     */\r\n    public whenTexturesReadyAsync(): Promise<void[]> {\r\n        // Ensures all textures are ready to render.\r\n        const textureReadyPromises: Promise<void>[] = [];\r\n        this.getActiveTextures().forEach((texture) => {\r\n            const internalTexture = texture.getInternalTexture();\r\n            if (internalTexture && !internalTexture.isReady) {\r\n                textureReadyPromises.push(\r\n                    new Promise((textureResolve, textureReject) => {\r\n                        internalTexture.onLoadedObservable.addOnce(() => {\r\n                            textureResolve();\r\n                        });\r\n                        internalTexture.onErrorObservable.addOnce((e) => {\r\n                            textureReject(e);\r\n                        });\r\n                    })\r\n                );\r\n            }\r\n        });\r\n\r\n        return Promise.all(textureReadyPromises);\r\n    }\r\n\r\n    /**\r\n     * Creates a node material from parsed material data\r\n     * @param source defines the JSON representation of the material\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a new node material\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string = \"\"): NodeMaterial {\r\n        const nodeMaterial = SerializationHelper.Parse(() => new NodeMaterial(source.name, scene), source, scene, rootUrl);\r\n\r\n        nodeMaterial.parseSerializedObject(source, rootUrl);\r\n        nodeMaterial.build();\r\n\r\n        return nodeMaterial;\r\n    }\r\n\r\n    /**\r\n     * Creates a node material from a snippet saved in a remote file\r\n     * @param name defines the name of the material to create\r\n     * @param url defines the url to load from\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL for nested url in the node material\r\n     * @param skipBuild defines whether to build the node material\r\n     * @param targetMaterial defines a material to use instead of creating a new one\r\n     * @returns a promise that will resolve to the new node material\r\n     */\r\n    public static async ParseFromFileAsync(\r\n        name: string,\r\n        url: string,\r\n        scene: Scene,\r\n        rootUrl: string = \"\",\r\n        skipBuild: boolean = false,\r\n        targetMaterial?: NodeMaterial\r\n    ): Promise<NodeMaterial> {\r\n        const material = targetMaterial ?? new NodeMaterial(name, scene);\r\n\r\n        const data = await scene._loadFileAsync(url);\r\n        const serializationObject = JSON.parse(data);\r\n        material.parseSerializedObject(serializationObject, rootUrl);\r\n        if (!skipBuild) {\r\n            material.build();\r\n        }\r\n        return material;\r\n    }\r\n\r\n    /**\r\n     * Creates a node material from a snippet saved by the node material editor\r\n     * @param snippetId defines the snippet to load\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @param nodeMaterial defines a node material to update (instead of creating a new one)\r\n     * @param skipBuild defines whether to build the node material\r\n     * @param waitForTextureReadyness defines whether to wait for texture readiness resolving the promise (default: false)\r\n     * @returns a promise that will resolve to the new node material\r\n     */\r\n    public static ParseFromSnippetAsync(\r\n        snippetId: string,\r\n        scene: Scene = EngineStore.LastCreatedScene!,\r\n        rootUrl: string = \"\",\r\n        nodeMaterial?: NodeMaterial,\r\n        skipBuild: boolean = false,\r\n        waitForTextureReadyness: boolean = false\r\n    ): Promise<NodeMaterial> {\r\n        if (snippetId === \"_BLANK\") {\r\n            return Promise.resolve(NodeMaterial.CreateDefault(\"blank\", scene));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n                        const serializationObject = JSON.parse(snippet.nodeMaterial);\r\n\r\n                        if (!nodeMaterial) {\r\n                            nodeMaterial = SerializationHelper.Parse(() => new NodeMaterial(snippetId, scene), serializationObject, scene, rootUrl);\r\n                            nodeMaterial.uniqueId = scene.getUniqueId();\r\n                        }\r\n\r\n                        nodeMaterial.parseSerializedObject(serializationObject);\r\n                        nodeMaterial.snippetId = snippetId;\r\n\r\n                        try {\r\n                            if (!skipBuild) {\r\n                                nodeMaterial.build();\r\n                            }\r\n                        } catch (err) {\r\n                            reject(err);\r\n                        }\r\n\r\n                        if (waitForTextureReadyness) {\r\n                            nodeMaterial\r\n                                .whenTexturesReadyAsync()\r\n                                .then(() => {\r\n                                    resolve(nodeMaterial!);\r\n                                })\r\n                                .catch((err) => {\r\n                                    reject(err);\r\n                                });\r\n                        } else {\r\n                            resolve(nodeMaterial);\r\n                        }\r\n                    } else {\r\n                        reject(\"Unable to load the snippet \" + snippetId);\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a new node material set to default basic configuration\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     * @returns a new NodeMaterial\r\n     */\r\n    public static CreateDefault(name: string, scene?: Scene) {\r\n        const newMaterial = new NodeMaterial(name, scene);\r\n\r\n        newMaterial.setToDefault();\r\n        newMaterial.build();\r\n\r\n        return newMaterial;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.NodeMaterial\", NodeMaterial);\r\n", "import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData of the IcoSphere\r\n * @param options an object used to set the following optional parameters for the IcoSphere, required but can be empty\r\n * * radius the radius of the IcoSphere, optional default 1\r\n * * radiusX allows stretching in the x direction, optional, default radius\r\n * * radiusY allows stretching in the y direction, optional, default radius\r\n * * radiusZ allows stretching in the z direction, optional, default radius\r\n * * flat when true creates a flat shaded mesh, optional, default true\r\n * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the IcoSphere\r\n */\r\nexport function CreateIcoSphereVertexData(options: {\r\n    radius?: number;\r\n    radiusX?: number;\r\n    radiusY?: number;\r\n    radiusZ?: number;\r\n    flat?: boolean;\r\n    subdivisions?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    const sideOrientation = options.sideOrientation || VertexData.DEFAULTSIDE;\r\n    const radius = options.radius || 1;\r\n    const flat = options.flat === undefined ? true : options.flat;\r\n    const subdivisions = (options.subdivisions || 4) | 0;\r\n    const radiusX = options.radiusX || radius;\r\n    const radiusY = options.radiusY || radius;\r\n    const radiusZ = options.radiusZ || radius;\r\n\r\n    const t = (1 + Math.sqrt(5)) / 2;\r\n\r\n    // 12 vertex x,y,z\r\n    const icoVertices = [\r\n        -1,\r\n        t,\r\n        -0,\r\n        1,\r\n        t,\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0, // v0-3\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0,\r\n        -1,\r\n        t,\r\n        0,\r\n        1,\r\n        t, // v4-7\r\n        t,\r\n        0,\r\n        1,\r\n        t,\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0,\r\n        -1, // v8-11\r\n    ];\r\n\r\n    // index of 3 vertex makes a face of icopshere\r\n    const ico_indices = [\r\n        0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 12, 22, 23, 1, 5, 20, 5, 11, 4, 23, 22, 13, 22, 18, 6, 7, 1, 8, 14, 21, 4, 14, 4, 2, 16, 13, 6, 15, 6, 19, 3, 8, 9, 4, 21, 5, 13, 17,\r\n        23, 6, 13, 22, 19, 6, 18, 9, 8, 1,\r\n    ];\r\n    // vertex for uv have aliased position, not for UV\r\n    const vertices_unalias_id = [\r\n        0,\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10,\r\n        11,\r\n        // vertex alias\r\n        0, // 12: 0 + 12\r\n        2, // 13: 2 + 11\r\n        3, // 14: 3 + 11\r\n        3, // 15: 3 + 12\r\n        3, // 16: 3 + 13\r\n        4, // 17: 4 + 13\r\n        7, // 18: 7 + 11\r\n        8, // 19: 8 + 11\r\n        9, // 20: 9 + 11\r\n        9, // 21: 9 + 12\r\n        10, // 22: A + 12\r\n        11, // 23: B + 12\r\n    ];\r\n\r\n    // uv as integer step (not pixels !)\r\n    const ico_vertexuv = [\r\n        5,\r\n        1,\r\n        3,\r\n        1,\r\n        6,\r\n        4,\r\n        0,\r\n        0, // v0-3\r\n        5,\r\n        3,\r\n        4,\r\n        2,\r\n        2,\r\n        2,\r\n        4,\r\n        0, // v4-7\r\n        2,\r\n        0,\r\n        1,\r\n        1,\r\n        6,\r\n        0,\r\n        6,\r\n        2, // v8-11\r\n        // vertex alias (for same vertex on different faces)\r\n        0,\r\n        4, // 12: 0 + 12\r\n        3,\r\n        3, // 13: 2 + 11\r\n        4,\r\n        4, // 14: 3 + 11\r\n        3,\r\n        1, // 15: 3 + 12\r\n        4,\r\n        2, // 16: 3 + 13\r\n        4,\r\n        4, // 17: 4 + 13\r\n        0,\r\n        2, // 18: 7 + 11\r\n        1,\r\n        1, // 19: 8 + 11\r\n        2,\r\n        2, // 20: 9 + 11\r\n        3,\r\n        3, // 21: 9 + 12\r\n        1,\r\n        3, // 22: A + 12\r\n        2,\r\n        4, // 23: B + 12\r\n    ];\r\n\r\n    // Vertices[0, 1, ...9, A, B] : position on UV plane\r\n    // '+' indicate duplicate position to be fixed (3,9:0,2,3,4,7,8,A,B)\r\n    // First island of uv mapping\r\n    // v = 4h          3+  2\r\n    // v = 3h        9+  4\r\n    // v = 2h      9+  5   B\r\n    // v = 1h    9   1   0\r\n    // v = 0h  3   8   7   A\r\n    //     u = 0 1 2 3 4 5 6  *a\r\n\r\n    // Second island of uv mapping\r\n    // v = 4h  0+  B+  4+\r\n    // v = 3h    A+  2+\r\n    // v = 2h  7+  6   3+\r\n    // v = 1h    8+  3+\r\n    // v = 0h\r\n    //     u = 0 1 2 3 4 5 6  *a\r\n\r\n    // Face layout on texture UV mapping\r\n    // ============\r\n    // \\ 4  /\\ 16 /   ======\r\n    //  \\  /  \\  /   /\\ 11 /\r\n    //   \\/ 7  \\/   /  \\  /\r\n    //    =======  / 10 \\/\r\n    //   /\\ 17 /\\  =======\r\n    //  /  \\  /  \\ \\ 15 /\\\r\n    // / 8  \\/ 12 \\ \\  /  \\\r\n    // ============  \\/ 6  \\\r\n    // \\ 18 /\\  ============\r\n    //  \\  /  \\ \\ 5  /\\ 0  /\r\n    //   \\/ 13 \\ \\  /  \\  /\r\n    //   =======  \\/ 1  \\/\r\n    //       =============\r\n    //      /\\ 19 /\\  2 /\\\r\n    //     /  \\  /  \\  /  \\\r\n    //    / 14 \\/ 9  \\/  3 \\\r\n    //   ===================\r\n\r\n    // uv step is u:1 or 0.5, v:cos(30)=sqrt(3)/2, ratio approx is 84/97\r\n    const ustep = 138 / 1024;\r\n    const vstep = 239 / 1024;\r\n    const uoffset = 60 / 1024;\r\n    const voffset = 26 / 1024;\r\n    // Second island should have margin, not to touch the first island\r\n    // avoid any borderline artefact in pixel rounding\r\n    const island_u_offset = -40 / 1024;\r\n    const island_v_offset = +20 / 1024;\r\n    // face is either island 0 or 1 :\r\n    // second island is for faces : [4, 7, 8, 12, 13, 16, 17, 18]\r\n    const island = [\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        1, //  0 - 4\r\n        0,\r\n        0,\r\n        1,\r\n        1,\r\n        0, //  5 - 9\r\n        0,\r\n        0,\r\n        1,\r\n        1,\r\n        0, //  10 - 14\r\n        0,\r\n        1,\r\n        1,\r\n        1,\r\n        0, //  15 - 19\r\n    ];\r\n\r\n    const indices: number[] = [];\r\n    const positions: number[] = [];\r\n    const normals: number[] = [];\r\n    const uvs: number[] = [];\r\n\r\n    let current_indice = 0;\r\n    // prepare array of 3 vector (empty) (to be worked in place, shared for each face)\r\n    const face_vertex_pos = new Array(3);\r\n    const face_vertex_uv = new Array(3);\r\n    let v012;\r\n    for (v012 = 0; v012 < 3; v012++) {\r\n        face_vertex_pos[v012] = Vector3.Zero();\r\n        face_vertex_uv[v012] = Vector2.Zero();\r\n    }\r\n    // create all with normals\r\n    for (let face = 0; face < 20; face++) {\r\n        // 3 vertex per face\r\n        for (v012 = 0; v012 < 3; v012++) {\r\n            // look up vertex 0,1,2 to its index in 0 to 11 (or 23 including alias)\r\n            const v_id = ico_indices[3 * face + v012];\r\n            // vertex have 3D position (x,y,z)\r\n            face_vertex_pos[v012].copyFromFloats(\r\n                icoVertices[3 * vertices_unalias_id[v_id]],\r\n                icoVertices[3 * vertices_unalias_id[v_id] + 1],\r\n                icoVertices[3 * vertices_unalias_id[v_id] + 2]\r\n            );\r\n            // Normalize to get normal\r\n            face_vertex_pos[v012].normalize();\r\n\r\n            // uv Coordinates from vertex ID\r\n            face_vertex_uv[v012].copyFromFloats(\r\n                ico_vertexuv[2 * v_id] * ustep + uoffset + island[face] * island_u_offset,\r\n                ico_vertexuv[2 * v_id + 1] * vstep + voffset + island[face] * island_v_offset\r\n            );\r\n        }\r\n\r\n        // Subdivide the face (interpolate pos, norm, uv)\r\n        // - pos is linear interpolation, then projected to sphere (converge polyhedron to sphere)\r\n        // - norm is linear interpolation of vertex corner normal\r\n        //   (to be checked if better to re-calc from face vertex, or if approximation is OK ??? )\r\n        // - uv is linear interpolation\r\n        //\r\n        // Topology is as below for sub-divide by 2\r\n        // vertex shown as v0,v1,v2\r\n        // interp index is i1 to progress in range [v0,v1[\r\n        // interp index is i2 to progress in range [v0,v2[\r\n        // face index as  (i1,i2)  for /\\  : (i1,i2),(i1+1,i2),(i1,i2+1)\r\n        //            and (i1,i2)' for \\/  : (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\r\n        //\r\n        //\r\n        //                    i2    v2\r\n        //                    ^    ^\r\n        //                   /    / \\\r\n        //                  /    /   \\\r\n        //                 /    /     \\\r\n        //                /    / (0,1) \\\r\n        //               /    #---------\\\r\n        //              /    / \\ (0,0)'/ \\\r\n        //             /    /   \\     /   \\\r\n        //            /    /     \\   /     \\\r\n        //           /    / (0,0) \\ / (1,0) \\\r\n        //          /    #---------#---------\\\r\n        //              v0                    v1\r\n        //\r\n        //              --------------------> i1\r\n        //\r\n        // interp of (i1,i2):\r\n        //  along i2 :  x0=lerp(v0,v2, i2/S) <---> x1=lerp(v1,v2, i2/S)\r\n        //  along i1 :  lerp(x0,x1, i1/(S-i2))\r\n        //\r\n        // centroid of triangle is needed to get help normal computation\r\n        //  (c1,c2) are used for centroid location\r\n\r\n        const interp_vertex = (i1: number, i2: number, c1: number, c2: number) => {\r\n            // vertex is interpolated from\r\n            //   - face_vertex_pos[0..2]\r\n            //   - face_vertex_uv[0..2]\r\n            const pos_x0 = Vector3.Lerp(face_vertex_pos[0], face_vertex_pos[2], i2 / subdivisions);\r\n            const pos_x1 = Vector3.Lerp(face_vertex_pos[1], face_vertex_pos[2], i2 / subdivisions);\r\n            const pos_interp = subdivisions === i2 ? face_vertex_pos[2] : Vector3.Lerp(pos_x0, pos_x1, i1 / (subdivisions - i2));\r\n            pos_interp.normalize();\r\n\r\n            let vertex_normal;\r\n            if (flat) {\r\n                // in flat mode, recalculate normal as face centroid normal\r\n                const centroid_x0 = Vector3.Lerp(face_vertex_pos[0], face_vertex_pos[2], c2 / subdivisions);\r\n                const centroid_x1 = Vector3.Lerp(face_vertex_pos[1], face_vertex_pos[2], c2 / subdivisions);\r\n                vertex_normal = Vector3.Lerp(centroid_x0, centroid_x1, c1 / (subdivisions - c2));\r\n            } else {\r\n                // in smooth mode, recalculate normal from each single vertex position\r\n                vertex_normal = new Vector3(pos_interp.x, pos_interp.y, pos_interp.z);\r\n            }\r\n            // Vertex normal need correction due to X,Y,Z radius scaling\r\n            vertex_normal.x /= radiusX;\r\n            vertex_normal.y /= radiusY;\r\n            vertex_normal.z /= radiusZ;\r\n            vertex_normal.normalize();\r\n\r\n            const uv_x0 = Vector2.Lerp(face_vertex_uv[0], face_vertex_uv[2], i2 / subdivisions);\r\n            const uv_x1 = Vector2.Lerp(face_vertex_uv[1], face_vertex_uv[2], i2 / subdivisions);\r\n            const uv_interp = subdivisions === i2 ? face_vertex_uv[2] : Vector2.Lerp(uv_x0, uv_x1, i1 / (subdivisions - i2));\r\n            positions.push(pos_interp.x * radiusX, pos_interp.y * radiusY, pos_interp.z * radiusZ);\r\n            normals.push(vertex_normal.x, vertex_normal.y, vertex_normal.z);\r\n            uvs.push(uv_interp.x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - uv_interp.y : uv_interp.y);\r\n            // push each vertex has member of a face\r\n            // Same vertex can belong to multiple face, it is pushed multiple time (duplicate vertex are present)\r\n            indices.push(current_indice);\r\n            current_indice++;\r\n        };\r\n\r\n        for (let i2 = 0; i2 < subdivisions; i2++) {\r\n            for (let i1 = 0; i1 + i2 < subdivisions; i1++) {\r\n                // face : (i1,i2)  for /\\  :\r\n                // interp for : (i1,i2),(i1+1,i2),(i1,i2+1)\r\n                interp_vertex(i1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                interp_vertex(i1 + 1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                interp_vertex(i1, i2 + 1, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                if (i1 + i2 + 1 < subdivisions) {\r\n                    // face : (i1,i2)' for \\/  :\r\n                    // interp for (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\r\n                    interp_vertex(i1 + 1, i2, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                    interp_vertex(i1 + 1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                    interp_vertex(i1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided\r\n * * The parameter `radius` sets the radius size (float) of the icosphere (default 1)\r\n * * You can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value of `radius`)\r\n * * The parameter `subdivisions` sets the number of subdivisions (positive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size\r\n * * The parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the icosahedron mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/polyhedra#icosphere\r\n */\r\nexport function CreateIcoSphere(\r\n    name: string,\r\n    options: {\r\n        radius?: number;\r\n        radiusX?: number;\r\n        radiusY?: number;\r\n        radiusZ?: number;\r\n        flat?: boolean;\r\n        subdivisions?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        updatable?: boolean;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const sphere = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    sphere._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateIcoSphereVertexData(options);\r\n\r\n    vertexData.applyToMesh(sphere, options.updatable);\r\n\r\n    return sphere;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const IcoSphereBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateIcoSphere,\r\n};\r\n\r\nVertexData.CreateIcoSphere = CreateIcoSphereVertexData;\r\n\r\nMesh.CreateIcoSphere = (name: string, options: { radius?: number; flat?: boolean; subdivisions?: number; sideOrientation?: number; updatable?: boolean }, scene: Scene): Mesh => {\r\n    return CreateIcoSphere(name, options, scene);\r\n};\r\n", "import { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { WebXRFeatureName, WebXRFeaturesManager } from \"../webXRFeaturesManager\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { WebXRInput } from \"../webXRInput\";\r\nimport type { WebXRInputSource } from \"../webXRInputSource\";\r\nimport { Matrix, Quaternion } from \"../../Maths/math.vector\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { PhysicsImpostor } from \"../../Physics/v1/physicsImpostor\";\r\n\r\nimport type { IDisposable, Scene } from \"../../scene\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { InstancedMesh } from \"../../Meshes/instancedMesh\";\r\nimport type { ISceneLoaderAsyncResult } from \"../../Loading/sceneLoader\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { NodeMaterial } from \"../../Materials/Node/nodeMaterial\";\r\nimport type { InputBlock } from \"../../Materials/Node/Blocks/Input/inputBlock\";\r\nimport { Material } from \"../../Materials/material\";\r\nimport { CreateIcoSphere } from \"../../Meshes/Builders/icoSphereBuilder\";\r\nimport { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { Axis } from \"../../Maths/math.axis\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { WebXRCompositionLayerWrapper } from \"./Layers/WebXRCompositionLayer\";\r\n\r\ndeclare const XRHand: XRHand;\r\n\r\n/**\r\n * Configuration interface for the hand tracking feature\r\n */\r\nexport interface IWebXRHandTrackingOptions {\r\n    /**\r\n     * The xrInput that will be used as source for new hands\r\n     */\r\n    xrInput: WebXRInput;\r\n\r\n    /**\r\n     * Configuration object for the joint meshes.\r\n     */\r\n    jointMeshes?: {\r\n        /**\r\n         * Should the meshes created be invisible (defaults to false).\r\n         */\r\n        invisible?: boolean;\r\n        /**\r\n         * A source mesh to be used to create instances. Defaults to an icosphere with two subdivisions and smooth lighting.\r\n         * This mesh will be the source for all other (25) meshes.\r\n         * It should have the general size of a single unit, as the instances will be scaled according to the provided radius.\r\n         */\r\n        sourceMesh?: Mesh;\r\n        /**\r\n         * This function will be called after a mesh was created for a specific joint.\r\n         * Using this function you can either manipulate the instance or return a new mesh.\r\n         * When returning a new mesh the instance created before will be disposed.\r\n         * @param meshInstance An instance of the original joint mesh being used for the joint.\r\n         * @param jointId The joint's index, see https://immersive-web.github.io/webxr-hand-input/#skeleton-joints-section for more info.\r\n         * @param hand Which hand (\"left\", \"right\") the joint will be on.\r\n         */\r\n        onHandJointMeshGenerated?: (meshInstance: InstancedMesh, jointId: number, hand: XRHandedness) => AbstractMesh | undefined;\r\n        /**\r\n         * Should the source mesh stay visible (defaults to false).\r\n         */\r\n        keepOriginalVisible?: boolean;\r\n        /**\r\n         * Should each instance have its own physics impostor\r\n         */\r\n        enablePhysics?: boolean;\r\n        /**\r\n         * If enabled, override default physics properties\r\n         */\r\n        physicsProps?: { friction?: number; restitution?: number; impostorType?: number };\r\n        /**\r\n         * Scale factor for all joint meshes (defaults to 1)\r\n         */\r\n        scaleFactor?: number;\r\n    };\r\n\r\n    /**\r\n     * Configuration object for the hand meshes.\r\n     */\r\n    handMeshes?: {\r\n        /**\r\n         * Should the default hand mesh be disabled. In this case, the spheres will be visible (unless set invisible).\r\n         */\r\n        disableDefaultMeshes?: boolean;\r\n        /**\r\n         * Rigged hand meshes that will be tracked to the user's hands. This will override the default hand mesh.\r\n         */\r\n        customMeshes?: {\r\n            right: AbstractMesh;\r\n            left: AbstractMesh;\r\n        };\r\n        /**\r\n         * Are the meshes prepared for a left-handed system. Default hand meshes are right-handed.\r\n         */\r\n        meshesUseLeftHandedCoordinates?: boolean;\r\n        /**\r\n         * If a hand mesh was provided, this array will define what axis will update which node. This will override the default hand mesh\r\n         */\r\n        customRigMappings?: {\r\n            right: XRHandMeshRigMapping;\r\n            left: XRHandMeshRigMapping;\r\n        };\r\n\r\n        /**\r\n         * Override the colors of the hand meshes.\r\n         */\r\n        customColors?: {\r\n            base?: Color3;\r\n            fresnel?: Color3;\r\n            fingerColor?: Color3;\r\n            tipFresnel?: Color3;\r\n        };\r\n\r\n        /**\r\n         * Define whether or not the hand meshes should be disposed on just invisible when the session ends.\r\n         * Not setting, or setting to false, will maintain the hand meshes in the scene after the session ends, which will allow q quicker re-entry into XR.\r\n         */\r\n        disposeOnSessionEnd?: boolean;\r\n    };\r\n}\r\n\r\n/**\r\n * Parts of the hands divided to writs and finger names\r\n */\r\nexport enum HandPart {\r\n    /**\r\n     * HandPart - Wrist\r\n     */\r\n    WRIST = \"wrist\",\r\n    /**\r\n     * HandPart - The thumb\r\n     */\r\n    THUMB = \"thumb\",\r\n    /**\r\n     * HandPart - Index finger\r\n     */\r\n    INDEX = \"index\",\r\n    /**\r\n     * HandPart - Middle finger\r\n     */\r\n    MIDDLE = \"middle\",\r\n    /**\r\n     * HandPart - Ring finger\r\n     */\r\n    RING = \"ring\",\r\n    /**\r\n     * HandPart - Little finger\r\n     */\r\n    LITTLE = \"little\",\r\n}\r\n\r\n/**\r\n * Joints of the hand as defined by the WebXR specification.\r\n * https://immersive-web.github.io/webxr-hand-input/#skeleton-joints-section\r\n */\r\nexport enum WebXRHandJoint {\r\n    /** Wrist */\r\n    WRIST = \"wrist\",\r\n\r\n    /** Thumb near wrist */\r\n    THUMB_METACARPAL = \"thumb-metacarpal\",\r\n    /** Thumb first knuckle */\r\n    THUMB_PHALANX_PROXIMAL = \"thumb-phalanx-proximal\",\r\n    /** Thumb second knuckle */\r\n    THUMB_PHALANX_DISTAL = \"thumb-phalanx-distal\",\r\n    /** Thumb tip */\r\n    THUMB_TIP = \"thumb-tip\",\r\n\r\n    /** Index finger near wrist */\r\n    INDEX_FINGER_METACARPAL = \"index-finger-metacarpal\",\r\n    /** Index finger first knuckle */\r\n    INDEX_FINGER_PHALANX_PROXIMAL = \"index-finger-phalanx-proximal\",\r\n    /** Index finger second knuckle */\r\n    INDEX_FINGER_PHALANX_INTERMEDIATE = \"index-finger-phalanx-intermediate\",\r\n    /** Index finger third knuckle */\r\n    INDEX_FINGER_PHALANX_DISTAL = \"index-finger-phalanx-distal\",\r\n    /** Index finger tip */\r\n    INDEX_FINGER_TIP = \"index-finger-tip\",\r\n\r\n    /** Middle finger near wrist */\r\n    MIDDLE_FINGER_METACARPAL = \"middle-finger-metacarpal\",\r\n    /** Middle finger first knuckle */\r\n    MIDDLE_FINGER_PHALANX_PROXIMAL = \"middle-finger-phalanx-proximal\",\r\n    /** Middle finger second knuckle */\r\n    MIDDLE_FINGER_PHALANX_INTERMEDIATE = \"middle-finger-phalanx-intermediate\",\r\n    /** Middle finger third knuckle */\r\n    MIDDLE_FINGER_PHALANX_DISTAL = \"middle-finger-phalanx-distal\",\r\n    /** Middle finger tip */\r\n    MIDDLE_FINGER_TIP = \"middle-finger-tip\",\r\n\r\n    /** Ring finger near wrist */\r\n    RING_FINGER_METACARPAL = \"ring-finger-metacarpal\",\r\n    /** Ring finger first knuckle */\r\n    RING_FINGER_PHALANX_PROXIMAL = \"ring-finger-phalanx-proximal\",\r\n    /** Ring finger second knuckle */\r\n    RING_FINGER_PHALANX_INTERMEDIATE = \"ring-finger-phalanx-intermediate\",\r\n    /** Ring finger third knuckle */\r\n    RING_FINGER_PHALANX_DISTAL = \"ring-finger-phalanx-distal\",\r\n    /** Ring finger tip */\r\n    RING_FINGER_TIP = \"ring-finger-tip\",\r\n\r\n    /** Pinky finger near wrist */\r\n    PINKY_FINGER_METACARPAL = \"pinky-finger-metacarpal\",\r\n    /** Pinky finger first knuckle */\r\n    PINKY_FINGER_PHALANX_PROXIMAL = \"pinky-finger-phalanx-proximal\",\r\n    /** Pinky finger second knuckle */\r\n    PINKY_FINGER_PHALANX_INTERMEDIATE = \"pinky-finger-phalanx-intermediate\",\r\n    /** Pinky finger third knuckle */\r\n    PINKY_FINGER_PHALANX_DISTAL = \"pinky-finger-phalanx-distal\",\r\n    /** Pinky finger tip */\r\n    PINKY_FINGER_TIP = \"pinky-finger-tip\",\r\n}\r\n\r\n/** A type encapsulating a dictionary mapping WebXR joints to bone names in a rigged hand mesh.  */\r\nexport type XRHandMeshRigMapping = { [webXRJointName in WebXRHandJoint]: string };\r\n\r\nconst handJointReferenceArray: WebXRHandJoint[] = [\r\n    WebXRHandJoint.WRIST,\r\n    WebXRHandJoint.THUMB_METACARPAL,\r\n    WebXRHandJoint.THUMB_PHALANX_PROXIMAL,\r\n    WebXRHandJoint.THUMB_PHALANX_DISTAL,\r\n    WebXRHandJoint.THUMB_TIP,\r\n    WebXRHandJoint.INDEX_FINGER_METACARPAL,\r\n    WebXRHandJoint.INDEX_FINGER_PHALANX_PROXIMAL,\r\n    WebXRHandJoint.INDEX_FINGER_PHALANX_INTERMEDIATE,\r\n    WebXRHandJoint.INDEX_FINGER_PHALANX_DISTAL,\r\n    WebXRHandJoint.INDEX_FINGER_TIP,\r\n    WebXRHandJoint.MIDDLE_FINGER_METACARPAL,\r\n    WebXRHandJoint.MIDDLE_FINGER_PHALANX_PROXIMAL,\r\n    WebXRHandJoint.MIDDLE_FINGER_PHALANX_INTERMEDIATE,\r\n    WebXRHandJoint.MIDDLE_FINGER_PHALANX_DISTAL,\r\n    WebXRHandJoint.MIDDLE_FINGER_TIP,\r\n    WebXRHandJoint.RING_FINGER_METACARPAL,\r\n    WebXRHandJoint.RING_FINGER_PHALANX_PROXIMAL,\r\n    WebXRHandJoint.RING_FINGER_PHALANX_INTERMEDIATE,\r\n    WebXRHandJoint.RING_FINGER_PHALANX_DISTAL,\r\n    WebXRHandJoint.RING_FINGER_TIP,\r\n    WebXRHandJoint.PINKY_FINGER_METACARPAL,\r\n    WebXRHandJoint.PINKY_FINGER_PHALANX_PROXIMAL,\r\n    WebXRHandJoint.PINKY_FINGER_PHALANX_INTERMEDIATE,\r\n    WebXRHandJoint.PINKY_FINGER_PHALANX_DISTAL,\r\n    WebXRHandJoint.PINKY_FINGER_TIP,\r\n];\r\n\r\nconst handPartsDefinition: { [key in HandPart]: WebXRHandJoint[] } = {\r\n    [HandPart.WRIST]: [WebXRHandJoint.WRIST],\r\n    [HandPart.THUMB]: [WebXRHandJoint.THUMB_METACARPAL, WebXRHandJoint.THUMB_PHALANX_PROXIMAL, WebXRHandJoint.THUMB_PHALANX_DISTAL, WebXRHandJoint.THUMB_TIP],\r\n    [HandPart.INDEX]: [\r\n        WebXRHandJoint.INDEX_FINGER_METACARPAL,\r\n        WebXRHandJoint.INDEX_FINGER_PHALANX_PROXIMAL,\r\n        WebXRHandJoint.INDEX_FINGER_PHALANX_INTERMEDIATE,\r\n        WebXRHandJoint.INDEX_FINGER_PHALANX_DISTAL,\r\n        WebXRHandJoint.INDEX_FINGER_TIP,\r\n    ],\r\n    [HandPart.MIDDLE]: [\r\n        WebXRHandJoint.MIDDLE_FINGER_METACARPAL,\r\n        WebXRHandJoint.MIDDLE_FINGER_PHALANX_PROXIMAL,\r\n        WebXRHandJoint.MIDDLE_FINGER_PHALANX_INTERMEDIATE,\r\n        WebXRHandJoint.MIDDLE_FINGER_PHALANX_DISTAL,\r\n        WebXRHandJoint.MIDDLE_FINGER_TIP,\r\n    ],\r\n    [HandPart.RING]: [\r\n        WebXRHandJoint.RING_FINGER_METACARPAL,\r\n        WebXRHandJoint.RING_FINGER_PHALANX_PROXIMAL,\r\n        WebXRHandJoint.RING_FINGER_PHALANX_INTERMEDIATE,\r\n        WebXRHandJoint.RING_FINGER_PHALANX_DISTAL,\r\n        WebXRHandJoint.RING_FINGER_TIP,\r\n    ],\r\n    [HandPart.LITTLE]: [\r\n        WebXRHandJoint.PINKY_FINGER_METACARPAL,\r\n        WebXRHandJoint.PINKY_FINGER_PHALANX_PROXIMAL,\r\n        WebXRHandJoint.PINKY_FINGER_PHALANX_INTERMEDIATE,\r\n        WebXRHandJoint.PINKY_FINGER_PHALANX_DISTAL,\r\n        WebXRHandJoint.PINKY_FINGER_TIP,\r\n    ],\r\n};\r\n\r\n/**\r\n * Representing a single hand (with its corresponding native XRHand object)\r\n */\r\nexport class WebXRHand implements IDisposable {\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Transform nodes that will directly receive the transforms from the WebXR matrix data.\r\n     */\r\n    private _jointTransforms = new Array<TransformNode>(handJointReferenceArray.length);\r\n\r\n    /**\r\n     * The float array that will directly receive the transform matrix data from WebXR.\r\n     */\r\n    private _jointTransformMatrices = new Float32Array(handJointReferenceArray.length * 16);\r\n\r\n    private _tempJointMatrix = new Matrix();\r\n\r\n    /**\r\n     * The float array that will directly receive the joint radii from WebXR.\r\n     */\r\n    private _jointRadii = new Float32Array(handJointReferenceArray.length);\r\n\r\n    /**\r\n     * Get the hand mesh.\r\n     */\r\n    public get handMesh(): Nullable<AbstractMesh> {\r\n        return this._handMesh;\r\n    }\r\n\r\n    /**\r\n     * Get meshes of part of the hand.\r\n     * @param part The part of hand to get.\r\n     * @returns An array of meshes that correlate to the hand part requested.\r\n     */\r\n    public getHandPartMeshes(part: HandPart): AbstractMesh[] {\r\n        return handPartsDefinition[part].map((name) => this._jointMeshes[handJointReferenceArray.indexOf(name)]!);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a mesh linked to a named joint in the hand.\r\n     * @param jointName The name of the joint.\r\n     * @returns An AbstractMesh whose position corresponds with the joint position.\r\n     */\r\n    public getJointMesh(jointName: WebXRHandJoint): AbstractMesh {\r\n        return this._jointMeshes[handJointReferenceArray.indexOf(jointName)!];\r\n    }\r\n\r\n    /**\r\n     * Construct a new hand object\r\n     * @param xrController The controller to which the hand correlates.\r\n     * @param _jointMeshes The meshes to be used to track the hand joints.\r\n     * @param _handMesh An optional hand mesh.\r\n     * @param rigMapping An optional rig mapping for the hand mesh.\r\n     *                   If not provided (but a hand mesh is provided),\r\n     *                   it will be assumed that the hand mesh's bones are named\r\n     *                   directly after the WebXR bone names.\r\n     * @param _leftHandedMeshes Are the hand meshes left-handed-system meshes\r\n     * @param _jointsInvisible Are the tracked joint meshes visible\r\n     * @param _jointScaleFactor Scale factor for all joint meshes\r\n     */\r\n    constructor(\r\n        /** The controller to which the hand correlates. */\r\n        public readonly xrController: WebXRInputSource,\r\n        private readonly _jointMeshes: AbstractMesh[],\r\n        private _handMesh: Nullable<AbstractMesh>,\r\n        /** An optional rig mapping for the hand mesh. If not provided (but a hand mesh is provided),\r\n         * it will be assumed that the hand mesh's bones are named directly after the WebXR bone names. */\r\n        readonly rigMapping: Nullable<XRHandMeshRigMapping>,\r\n        private readonly _leftHandedMeshes: boolean = false,\r\n        private readonly _jointsInvisible: boolean = false,\r\n        private readonly _jointScaleFactor: number = 1\r\n    ) {\r\n        this._scene = _jointMeshes[0].getScene();\r\n\r\n        // Initialize the joint transform quaternions and link the transforms to the bones.\r\n        for (let jointIdx = 0; jointIdx < this._jointTransforms.length; jointIdx++) {\r\n            const jointTransform = (this._jointTransforms[jointIdx] = new TransformNode(handJointReferenceArray[jointIdx], this._scene));\r\n            jointTransform.rotationQuaternion = new Quaternion();\r\n\r\n            // Set the rotation quaternion so we can use it later for tracking.\r\n            _jointMeshes[jointIdx].rotationQuaternion = new Quaternion();\r\n        }\r\n\r\n        if (_handMesh) {\r\n            // Note that this logic needs to happen after we initialize the joint tracking transform nodes.\r\n            this.setHandMesh(_handMesh, rigMapping);\r\n        }\r\n\r\n        // hide the motion controller, if available/loaded\r\n        if (this.xrController.motionController) {\r\n            if (this.xrController.motionController.rootMesh) {\r\n                this.xrController.motionController.rootMesh.dispose(false, true);\r\n            }\r\n        }\r\n\r\n        this.xrController.onMotionControllerInitObservable.add((motionController) => {\r\n            motionController._doNotLoadControllerMesh = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the current hand mesh to render for the WebXRHand.\r\n     * @param handMesh The rigged hand mesh that will be tracked to the user's hand.\r\n     * @param rigMapping The mapping from XRHandJoint to bone names to use with the mesh.\r\n     * @param _xrSessionManager The XRSessionManager used to initialize the hand mesh.\r\n     */\r\n    public setHandMesh(handMesh: AbstractMesh, rigMapping: Nullable<XRHandMeshRigMapping>, _xrSessionManager?: WebXRSessionManager) {\r\n        this._handMesh = handMesh;\r\n\r\n        // Avoid any strange frustum culling. We will manually control visibility via attach and detach.\r\n        handMesh.alwaysSelectAsActiveMesh = true;\r\n        handMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.alwaysSelectAsActiveMesh = true;\r\n        });\r\n\r\n        // Link the bones in the hand mesh to the transform nodes that will be bound to the WebXR tracked joints.\r\n        if (this._handMesh.skeleton) {\r\n            const handMeshSkeleton = this._handMesh.skeleton;\r\n            handJointReferenceArray.forEach((jointName, jointIdx) => {\r\n                const jointBoneIdx = handMeshSkeleton.getBoneIndexByName(rigMapping ? rigMapping[jointName] : jointName);\r\n                if (jointBoneIdx !== -1) {\r\n                    handMeshSkeleton.bones[jointBoneIdx].linkTransformNode(this._jointTransforms[jointIdx]);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update this hand from the latest xr frame.\r\n     * @param xrFrame The latest frame received from WebXR.\r\n     * @param referenceSpace The current viewer reference space.\r\n     */\r\n    public updateFromXRFrame(xrFrame: XRFrame, referenceSpace: XRReferenceSpace) {\r\n        const hand = this.xrController.inputSource.hand;\r\n        if (!hand) {\r\n            return;\r\n        }\r\n\r\n        // TODO: Modify webxr.d.ts to better match WebXR IDL so we don't need this any cast.\r\n        const anyHand: any = hand;\r\n        const jointSpaces: XRJointSpace[] = handJointReferenceArray.map((jointName) => anyHand[jointName] || hand.get(jointName));\r\n        let trackingSuccessful = false;\r\n\r\n        if (xrFrame.fillPoses && xrFrame.fillJointRadii) {\r\n            trackingSuccessful = xrFrame.fillPoses(jointSpaces, referenceSpace, this._jointTransformMatrices) && xrFrame.fillJointRadii(jointSpaces, this._jointRadii);\r\n        } else if (xrFrame.getJointPose) {\r\n            trackingSuccessful = true;\r\n            // Warning: This codepath is slow by comparison, only here for compat.\r\n            for (let jointIdx = 0; jointIdx < jointSpaces.length; jointIdx++) {\r\n                const jointPose = xrFrame.getJointPose(jointSpaces[jointIdx], referenceSpace);\r\n                if (jointPose) {\r\n                    this._jointTransformMatrices.set(jointPose.transform.matrix, jointIdx * 16);\r\n                    this._jointRadii[jointIdx] = jointPose.radius || 0.008;\r\n                } else {\r\n                    trackingSuccessful = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!trackingSuccessful) {\r\n            return;\r\n        }\r\n\r\n        handJointReferenceArray.forEach((_jointName, jointIdx) => {\r\n            const jointTransform = this._jointTransforms[jointIdx];\r\n            Matrix.FromArrayToRef(this._jointTransformMatrices, jointIdx * 16, this._tempJointMatrix);\r\n            this._tempJointMatrix.decompose(undefined, jointTransform.rotationQuaternion!, jointTransform.position);\r\n\r\n            // The radius we need to make the joint in order for it to roughly cover the joints of the user's real hand.\r\n            const scaledJointRadius = this._jointRadii[jointIdx] * this._jointScaleFactor;\r\n\r\n            const jointMesh = this._jointMeshes[jointIdx];\r\n            jointMesh.isVisible = !this._handMesh && !this._jointsInvisible;\r\n            jointMesh.position.copyFrom(jointTransform.position);\r\n            jointMesh.rotationQuaternion!.copyFrom(jointTransform.rotationQuaternion!);\r\n            jointMesh.scaling.setAll(scaledJointRadius);\r\n\r\n            // The WebXR data comes as right-handed, so we might need to do some conversions.\r\n            if (!this._scene.useRightHandedSystem) {\r\n                jointMesh.position.z *= -1;\r\n                jointMesh.rotationQuaternion!.z *= -1;\r\n                jointMesh.rotationQuaternion!.w *= -1;\r\n\r\n                if (this._leftHandedMeshes && this._handMesh) {\r\n                    jointTransform.position.z *= -1;\r\n                    jointTransform.rotationQuaternion!.z *= -1;\r\n                    jointTransform.rotationQuaternion!.w *= -1;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this._handMesh) {\r\n            this._handMesh.isVisible = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose this Hand object\r\n     * @param disposeMeshes Should the meshes be disposed as well\r\n     */\r\n    public dispose(disposeMeshes = false) {\r\n        if (this._handMesh) {\r\n            if (disposeMeshes) {\r\n                this._handMesh.skeleton?.dispose();\r\n                this._handMesh.dispose(false, true);\r\n            } else {\r\n                this._handMesh.isVisible = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * WebXR Hand Joint tracking feature, available for selected browsers and devices\r\n */\r\nexport class WebXRHandTracking extends WebXRAbstractFeature {\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.HAND_TRACKING;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n\r\n    /** The base URL for the default hand model. */\r\n    public static DEFAULT_HAND_MODEL_BASE_URL = \"https://assets.babylonjs.com/meshes/HandMeshes/\";\r\n    /** The filename to use for the default right hand model. */\r\n    public static DEFAULT_HAND_MODEL_RIGHT_FILENAME = \"r_hand_rhs.glb\";\r\n    /** The filename to use for the default left hand model. */\r\n    public static DEFAULT_HAND_MODEL_LEFT_FILENAME = \"l_hand_rhs.glb\";\r\n    /** The URL pointing to the default hand model NodeMaterial shader. */\r\n    public static DEFAULT_HAND_MODEL_SHADER_URL = \"https://assets.babylonjs.com/meshes/HandMeshes/handsShader.json\";\r\n\r\n    // We want to use lightweight models, diameter will initially be 1 but scaled to the values returned from WebXR.\r\n    private static readonly _ICOSPHERE_PARAMS = { radius: 0.5, flat: false, subdivisions: 2 };\r\n\r\n    private static _RightHandGLB: Nullable<ISceneLoaderAsyncResult> = null;\r\n    private static _LeftHandGLB: Nullable<ISceneLoaderAsyncResult> = null;\r\n\r\n    private static _GenerateTrackedJointMeshes(featureOptions: IWebXRHandTrackingOptions): { left: AbstractMesh[]; right: AbstractMesh[] } {\r\n        const meshes: { [handedness: string]: AbstractMesh[] } = {};\r\n        [\"left\" as XRHandedness, \"right\" as XRHandedness].map((handedness) => {\r\n            const trackedMeshes = [];\r\n            const originalMesh = featureOptions.jointMeshes?.sourceMesh || CreateIcoSphere(\"jointParent\", WebXRHandTracking._ICOSPHERE_PARAMS);\r\n            originalMesh.isVisible = !!featureOptions.jointMeshes?.keepOriginalVisible;\r\n            for (let i = 0; i < handJointReferenceArray.length; ++i) {\r\n                let newInstance: AbstractMesh = originalMesh.createInstance(`${handedness}-handJoint-${i}`);\r\n                if (featureOptions.jointMeshes?.onHandJointMeshGenerated) {\r\n                    const returnedMesh = featureOptions.jointMeshes.onHandJointMeshGenerated(newInstance as InstancedMesh, i, handedness);\r\n                    if (returnedMesh) {\r\n                        if (returnedMesh !== newInstance) {\r\n                            newInstance.dispose();\r\n                            newInstance = returnedMesh;\r\n                        }\r\n                    }\r\n                }\r\n                newInstance.isPickable = false;\r\n                if (featureOptions.jointMeshes?.enablePhysics) {\r\n                    const props = featureOptions.jointMeshes?.physicsProps || {};\r\n                    // downscale the instances so that physics will be initialized correctly\r\n                    newInstance.scaling.setAll(0.02);\r\n                    const type = props.impostorType !== undefined ? props.impostorType : PhysicsImpostor.SphereImpostor;\r\n                    newInstance.physicsImpostor = new PhysicsImpostor(newInstance, type, { mass: 0, ...props });\r\n                }\r\n                newInstance.rotationQuaternion = new Quaternion();\r\n                newInstance.isVisible = false;\r\n                trackedMeshes.push(newInstance);\r\n            }\r\n\r\n            meshes[handedness] = trackedMeshes;\r\n        });\r\n        return { left: meshes.left, right: meshes.right };\r\n    }\r\n\r\n    private static _GenerateDefaultHandMeshesAsync(\r\n        scene: Scene,\r\n        xrSessionManager: WebXRSessionManager,\r\n        options?: IWebXRHandTrackingOptions\r\n    ): Promise<{ left: AbstractMesh; right: AbstractMesh }> {\r\n        // eslint-disable-next-line no-async-promise-executor\r\n        return new Promise(async (resolve) => {\r\n            const riggedMeshes: { [handedness: string]: AbstractMesh } = {};\r\n            // check the cache, defensive\r\n            if (WebXRHandTracking._RightHandGLB?.meshes[1]?.isDisposed()) {\r\n                WebXRHandTracking._RightHandGLB = null;\r\n            }\r\n            if (WebXRHandTracking._LeftHandGLB?.meshes[1]?.isDisposed()) {\r\n                WebXRHandTracking._LeftHandGLB = null;\r\n            }\r\n\r\n            const handsDefined = !!(WebXRHandTracking._RightHandGLB && WebXRHandTracking._LeftHandGLB);\r\n            // load them in parallel\r\n            const handGLBs = await Promise.all([\r\n                WebXRHandTracking._RightHandGLB ||\r\n                    SceneLoader.ImportMeshAsync(\"\", WebXRHandTracking.DEFAULT_HAND_MODEL_BASE_URL, WebXRHandTracking.DEFAULT_HAND_MODEL_RIGHT_FILENAME, scene),\r\n                WebXRHandTracking._LeftHandGLB ||\r\n                    SceneLoader.ImportMeshAsync(\"\", WebXRHandTracking.DEFAULT_HAND_MODEL_BASE_URL, WebXRHandTracking.DEFAULT_HAND_MODEL_LEFT_FILENAME, scene),\r\n            ]);\r\n            WebXRHandTracking._RightHandGLB = handGLBs[0];\r\n            WebXRHandTracking._LeftHandGLB = handGLBs[1];\r\n\r\n            const handShader = await NodeMaterial.ParseFromFileAsync(\"handShader\", WebXRHandTracking.DEFAULT_HAND_MODEL_SHADER_URL, scene);\r\n\r\n            // depth prepass and alpha mode\r\n            handShader.needDepthPrePass = true;\r\n            handShader.transparencyMode = Material.MATERIAL_ALPHABLEND;\r\n            handShader.alphaMode = Constants.ALPHA_COMBINE;\r\n\r\n            // build node materials\r\n            handShader.build(false);\r\n\r\n            // shader\r\n            const handColors = {\r\n                base: Color3.FromInts(116, 63, 203),\r\n                fresnel: Color3.FromInts(149, 102, 229),\r\n                fingerColor: Color3.FromInts(177, 130, 255),\r\n                tipFresnel: Color3.FromInts(220, 200, 255),\r\n                ...options?.handMeshes?.customColors,\r\n            };\r\n\r\n            const handNodes = {\r\n                base: handShader.getBlockByName(\"baseColor\") as InputBlock,\r\n                fresnel: handShader.getBlockByName(\"fresnelColor\") as InputBlock,\r\n                fingerColor: handShader.getBlockByName(\"fingerColor\") as InputBlock,\r\n                tipFresnel: handShader.getBlockByName(\"tipFresnelColor\") as InputBlock,\r\n            };\r\n\r\n            handNodes.base.value = handColors.base;\r\n            handNodes.fresnel.value = handColors.fresnel;\r\n            handNodes.fingerColor.value = handColors.fingerColor;\r\n            handNodes.tipFresnel.value = handColors.tipFresnel;\r\n            const isMultiview = (xrSessionManager._getBaseLayerWrapper() as WebXRCompositionLayerWrapper)?.isMultiview;\r\n            [\"left\", \"right\"].forEach((handedness) => {\r\n                const handGLB = handedness == \"left\" ? WebXRHandTracking._LeftHandGLB : WebXRHandTracking._RightHandGLB;\r\n                if (!handGLB) {\r\n                    // this should never happen!\r\n                    throw new Error(\"Could not load hand model\");\r\n                }\r\n                const handMesh = handGLB.meshes[1];\r\n                handMesh._internalAbstractMeshDataInfo._computeBonesUsingShaders = true;\r\n                // if in multiview do not use the material\r\n                if (!isMultiview) {\r\n                    handMesh.material = handShader.clone(`${handedness}HandShaderClone`, true);\r\n                }\r\n                handMesh.isVisible = false;\r\n\r\n                riggedMeshes[handedness] = handMesh;\r\n\r\n                // single change for left handed systems\r\n                if (!handsDefined && !scene.useRightHandedSystem) {\r\n                    handGLB.meshes[1].rotate(Axis.Y, Math.PI);\r\n                }\r\n            });\r\n\r\n            handShader.dispose();\r\n            resolve({ left: riggedMeshes.left, right: riggedMeshes.right });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates a mapping from XRHandJoint to bone name for the default hand mesh.\r\n     * @param handedness The handedness being mapped for.\r\n     * @returns A mapping from XRHandJoint to bone name.\r\n     */\r\n    private static _GenerateDefaultHandMeshRigMapping(handedness: XRHandedness): XRHandMeshRigMapping {\r\n        const H = handedness == \"right\" ? \"R\" : \"L\";\r\n        return {\r\n            [WebXRHandJoint.WRIST]: `wrist_${H}`,\r\n            [WebXRHandJoint.THUMB_METACARPAL]: `thumb_metacarpal_${H}`,\r\n            [WebXRHandJoint.THUMB_PHALANX_PROXIMAL]: `thumb_proxPhalanx_${H}`,\r\n            [WebXRHandJoint.THUMB_PHALANX_DISTAL]: `thumb_distPhalanx_${H}`,\r\n            [WebXRHandJoint.THUMB_TIP]: `thumb_tip_${H}`,\r\n            [WebXRHandJoint.INDEX_FINGER_METACARPAL]: `index_metacarpal_${H}`,\r\n            [WebXRHandJoint.INDEX_FINGER_PHALANX_PROXIMAL]: `index_proxPhalanx_${H}`,\r\n            [WebXRHandJoint.INDEX_FINGER_PHALANX_INTERMEDIATE]: `index_intPhalanx_${H}`,\r\n            [WebXRHandJoint.INDEX_FINGER_PHALANX_DISTAL]: `index_distPhalanx_${H}`,\r\n            [WebXRHandJoint.INDEX_FINGER_TIP]: `index_tip_${H}`,\r\n            [WebXRHandJoint.MIDDLE_FINGER_METACARPAL]: `middle_metacarpal_${H}`,\r\n            [WebXRHandJoint.MIDDLE_FINGER_PHALANX_PROXIMAL]: `middle_proxPhalanx_${H}`,\r\n            [WebXRHandJoint.MIDDLE_FINGER_PHALANX_INTERMEDIATE]: `middle_intPhalanx_${H}`,\r\n            [WebXRHandJoint.MIDDLE_FINGER_PHALANX_DISTAL]: `middle_distPhalanx_${H}`,\r\n            [WebXRHandJoint.MIDDLE_FINGER_TIP]: `middle_tip_${H}`,\r\n            [WebXRHandJoint.RING_FINGER_METACARPAL]: `ring_metacarpal_${H}`,\r\n            [WebXRHandJoint.RING_FINGER_PHALANX_PROXIMAL]: `ring_proxPhalanx_${H}`,\r\n            [WebXRHandJoint.RING_FINGER_PHALANX_INTERMEDIATE]: `ring_intPhalanx_${H}`,\r\n            [WebXRHandJoint.RING_FINGER_PHALANX_DISTAL]: `ring_distPhalanx_${H}`,\r\n            [WebXRHandJoint.RING_FINGER_TIP]: `ring_tip_${H}`,\r\n            [WebXRHandJoint.PINKY_FINGER_METACARPAL]: `little_metacarpal_${H}`,\r\n            [WebXRHandJoint.PINKY_FINGER_PHALANX_PROXIMAL]: `little_proxPhalanx_${H}`,\r\n            [WebXRHandJoint.PINKY_FINGER_PHALANX_INTERMEDIATE]: `little_intPhalanx_${H}`,\r\n            [WebXRHandJoint.PINKY_FINGER_PHALANX_DISTAL]: `little_distPhalanx_${H}`,\r\n            [WebXRHandJoint.PINKY_FINGER_TIP]: `little_tip_${H}`,\r\n        };\r\n    }\r\n\r\n    private _attachedHands: {\r\n        [uniqueId: string]: WebXRHand;\r\n    } = {};\r\n\r\n    private _trackingHands: {\r\n        left: Nullable<WebXRHand>;\r\n        right: Nullable<WebXRHand>;\r\n    } = { left: null, right: null };\r\n\r\n    private _handResources: {\r\n        jointMeshes: Nullable<{ left: AbstractMesh[]; right: AbstractMesh[] }>;\r\n        handMeshes: Nullable<{ left: AbstractMesh; right: AbstractMesh }>;\r\n        rigMappings: Nullable<{ left: XRHandMeshRigMapping; right: XRHandMeshRigMapping }>;\r\n    } = { jointMeshes: null, handMeshes: null, rigMappings: null };\r\n\r\n    private _worldScaleObserver?: Nullable<Observer<{ previousScaleFactor: number; newScaleFactor: number }>> = null;\r\n\r\n    /**\r\n     * This observable will notify registered observers when a new hand object was added and initialized\r\n     */\r\n    public onHandAddedObservable: Observable<WebXRHand> = new Observable();\r\n    /**\r\n     * This observable will notify its observers right before the hand object is disposed\r\n     */\r\n    public onHandRemovedObservable: Observable<WebXRHand> = new Observable();\r\n\r\n    /**\r\n     * Check if the needed objects are defined.\r\n     * This does not mean that the feature is enabled, but that the objects needed are well defined.\r\n     * @returns true if the needed objects for this feature are defined\r\n     */\r\n    public isCompatible(): boolean {\r\n        return typeof XRHand !== \"undefined\";\r\n    }\r\n\r\n    /**\r\n     * Get the hand object according to the controller id\r\n     * @param controllerId the controller id to which we want to get the hand\r\n     * @returns null if not found or the WebXRHand object if found\r\n     */\r\n    public getHandByControllerId(controllerId: string): Nullable<WebXRHand> {\r\n        return this._attachedHands[controllerId];\r\n    }\r\n\r\n    /**\r\n     * Get a hand object according to the requested handedness\r\n     * @param handedness the handedness to request\r\n     * @returns null if not found or the WebXRHand object if found\r\n     */\r\n    public getHandByHandedness(handedness: XRHandedness): Nullable<WebXRHand> {\r\n        if (handedness == \"none\") {\r\n            return null;\r\n        }\r\n        return this._trackingHands[handedness];\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of the XR hand tracking feature.\r\n     * @param _xrSessionManager An instance of WebXRSessionManager.\r\n     * @param options Options to use when constructing this feature.\r\n     */\r\n    constructor(\r\n        _xrSessionManager: WebXRSessionManager,\r\n        /** Options to use when constructing this feature. */\r\n        public readonly options: IWebXRHandTrackingOptions\r\n    ) {\r\n        super(_xrSessionManager);\r\n        this.xrNativeFeatureName = \"hand-tracking\";\r\n\r\n        // Support legacy versions of the options object by copying over joint mesh properties\r\n        const anyOptions = options as any;\r\n        const anyJointMeshOptions = anyOptions.jointMeshes;\r\n        if (anyJointMeshOptions) {\r\n            if (typeof anyJointMeshOptions.disableDefaultHandMesh !== \"undefined\") {\r\n                options.handMeshes = options.handMeshes || {};\r\n                options.handMeshes.disableDefaultMeshes = anyJointMeshOptions.disableDefaultHandMesh;\r\n            }\r\n            if (typeof anyJointMeshOptions.handMeshes !== \"undefined\") {\r\n                options.handMeshes = options.handMeshes || {};\r\n                options.handMeshes.customMeshes = anyJointMeshOptions.handMeshes;\r\n            }\r\n            if (typeof anyJointMeshOptions.leftHandedSystemMeshes !== \"undefined\") {\r\n                options.handMeshes = options.handMeshes || {};\r\n                options.handMeshes.meshesUseLeftHandedCoordinates = anyJointMeshOptions.leftHandedSystemMeshes;\r\n            }\r\n            if (typeof anyJointMeshOptions.rigMapping !== \"undefined\") {\r\n                options.handMeshes = options.handMeshes || {};\r\n                const leftRigMapping = {};\r\n                const rightRigMapping = {};\r\n                [\r\n                    [anyJointMeshOptions.rigMapping.left, leftRigMapping],\r\n                    [anyJointMeshOptions.rigMapping.right, rightRigMapping],\r\n                ].forEach((rigMappingTuple) => {\r\n                    const legacyRigMapping = rigMappingTuple[0] as string[];\r\n                    const rigMapping = rigMappingTuple[1] as XRHandMeshRigMapping;\r\n                    legacyRigMapping.forEach((modelJointName, index) => {\r\n                        rigMapping[handJointReferenceArray[index]] = modelJointName;\r\n                    });\r\n                });\r\n                options.handMeshes.customRigMappings = {\r\n                    left: leftRigMapping as XRHandMeshRigMapping,\r\n                    right: rightRigMapping as XRHandMeshRigMapping,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach this feature.\r\n     * Will usually be called by the features manager.\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public attach(): boolean {\r\n        if (!super.attach()) {\r\n            return false;\r\n        }\r\n\r\n        this._handResources = {\r\n            jointMeshes: WebXRHandTracking._GenerateTrackedJointMeshes(this.options),\r\n            handMeshes: this.options.handMeshes?.customMeshes || null,\r\n            rigMappings: this.options.handMeshes?.customRigMappings || null,\r\n        };\r\n\r\n        // If they didn't supply custom meshes and are not disabling the default meshes...\r\n        if (!this.options.handMeshes?.customMeshes && !this.options.handMeshes?.disableDefaultMeshes) {\r\n            WebXRHandTracking._GenerateDefaultHandMeshesAsync(EngineStore.LastCreatedScene!, this._xrSessionManager, this.options).then((defaultHandMeshes) => {\r\n                this._handResources.handMeshes = defaultHandMeshes;\r\n                this._handResources.rigMappings = {\r\n                    left: WebXRHandTracking._GenerateDefaultHandMeshRigMapping(\"left\"),\r\n                    right: WebXRHandTracking._GenerateDefaultHandMeshRigMapping(\"right\"),\r\n                };\r\n\r\n                // Apply meshes to existing hands if already tracking.\r\n                this._trackingHands.left?.setHandMesh(this._handResources.handMeshes.left, this._handResources.rigMappings.left, this._xrSessionManager);\r\n                this._trackingHands.right?.setHandMesh(this._handResources.handMeshes.right, this._handResources.rigMappings.right, this._xrSessionManager);\r\n                this._handResources.handMeshes.left.scaling.setAll(this._xrSessionManager.worldScalingFactor);\r\n                this._handResources.handMeshes.right.scaling.setAll(this._xrSessionManager.worldScalingFactor);\r\n            });\r\n            this._worldScaleObserver = this._xrSessionManager.onWorldScaleFactorChangedObservable.add((scalingFactors) => {\r\n                if (this._handResources.handMeshes) {\r\n                    this._handResources.handMeshes.left.scaling.scaleInPlace(scalingFactors.newScaleFactor / scalingFactors.previousScaleFactor);\r\n                    this._handResources.handMeshes.right.scaling.scaleInPlace(scalingFactors.newScaleFactor / scalingFactors.previousScaleFactor);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.options.xrInput.controllers.forEach(this._attachHand);\r\n        this._addNewAttachObserver(this.options.xrInput.onControllerAddedObservable, this._attachHand);\r\n        this._addNewAttachObserver(this.options.xrInput.onControllerRemovedObservable, this._detachHand);\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _onXRFrame(_xrFrame: XRFrame): void {\r\n        this._trackingHands.left?.updateFromXRFrame(_xrFrame, this._xrSessionManager.referenceSpace);\r\n        this._trackingHands.right?.updateFromXRFrame(_xrFrame, this._xrSessionManager.referenceSpace);\r\n    }\r\n\r\n    private _attachHand = (xrController: WebXRInputSource) => {\r\n        if (!xrController.inputSource.hand || xrController.inputSource.handedness == \"none\" || !this._handResources.jointMeshes) {\r\n            return;\r\n        }\r\n\r\n        const handedness = xrController.inputSource.handedness;\r\n        const webxrHand = new WebXRHand(\r\n            xrController,\r\n            this._handResources.jointMeshes[handedness],\r\n            this._handResources.handMeshes && this._handResources.handMeshes[handedness],\r\n            this._handResources.rigMappings && this._handResources.rigMappings[handedness],\r\n            this.options.handMeshes?.meshesUseLeftHandedCoordinates,\r\n            this.options.jointMeshes?.invisible,\r\n            this.options.jointMeshes?.scaleFactor\r\n        );\r\n\r\n        this._attachedHands[xrController.uniqueId] = webxrHand;\r\n        this._trackingHands[handedness] = webxrHand;\r\n\r\n        this.onHandAddedObservable.notifyObservers(webxrHand);\r\n    };\r\n\r\n    private _detachHandById(controllerId: string, disposeMesh?: boolean) {\r\n        const hand = this.getHandByControllerId(controllerId);\r\n        if (hand) {\r\n            const handedness = hand.xrController.inputSource.handedness == \"left\" ? \"left\" : \"right\";\r\n            if (this._trackingHands[handedness]?.xrController.uniqueId === controllerId) {\r\n                this._trackingHands[handedness] = null;\r\n            }\r\n            this.onHandRemovedObservable.notifyObservers(hand);\r\n            hand.dispose(disposeMesh);\r\n            delete this._attachedHands[controllerId];\r\n        }\r\n    }\r\n\r\n    private _detachHand = (xrController: WebXRInputSource) => {\r\n        this._detachHandById(xrController.uniqueId);\r\n    };\r\n\r\n    /**\r\n     * Detach this feature.\r\n     * Will usually be called by the features manager.\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public detach(): boolean {\r\n        if (!super.detach()) {\r\n            return false;\r\n        }\r\n\r\n        Object.keys(this._attachedHands).forEach((uniqueId) => this._detachHandById(uniqueId, this.options.handMeshes?.disposeOnSessionEnd));\r\n        if (this.options.handMeshes?.disposeOnSessionEnd) {\r\n            if (this._handResources.jointMeshes) {\r\n                this._handResources.jointMeshes.left.forEach((trackedMesh) => trackedMesh.dispose());\r\n                this._handResources.jointMeshes.right.forEach((trackedMesh) => trackedMesh.dispose());\r\n            }\r\n        }\r\n\r\n        // remove world scale observer\r\n        if (this._worldScaleObserver) {\r\n            this._xrSessionManager.onWorldScaleFactorChangedObservable.remove(this._worldScaleObserver);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached.\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n        this.onHandAddedObservable.clear();\r\n        this.onHandRemovedObservable.clear();\r\n\r\n        if (this._handResources.handMeshes && !this.options.handMeshes?.customMeshes) {\r\n            // this will dispose the cached meshes\r\n            this._handResources.handMeshes.left.dispose();\r\n            this._handResources.handMeshes.right.dispose();\r\n            // remove the cached meshes\r\n            WebXRHandTracking._RightHandGLB = null;\r\n            WebXRHandTracking._LeftHandGLB = null;\r\n        }\r\n\r\n        if (this._handResources.jointMeshes) {\r\n            this._handResources.jointMeshes.left.forEach((trackedMesh) => trackedMesh.dispose());\r\n            this._handResources.jointMeshes.right.forEach((trackedMesh) => trackedMesh.dispose());\r\n        }\r\n    }\r\n}\r\n\r\n//register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRHandTracking.Name,\r\n    (xrSessionManager, options) => {\r\n        return () => new WebXRHandTracking(xrSessionManager, options);\r\n    },\r\n    WebXRHandTracking.Version,\r\n    false\r\n);\r\n"],
  "mappings": "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D;IACA;IACA,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,CAAC;IACD;IACA;IACA,CAAC;IACD;IACA;;;AAIJ,QAAM,cAAc;IAChB;IAAG;IAAI;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAI;IAAG;IAAG;IAAI;IAAG;IAAI;IAAG;IAAI;IAAI;IAAI;IAAI;IAAI;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAG;IAAI;IAAG;IAAG;IAAI;IAAI;IAAG;IAAI;IAAG;IAAI;IAAG;IAAG;IAAG;IAAG;IAAI;IAAG;IAAI;IACxK;IAAI;IAAG;IAAI;IAAI;IAAI;IAAG;IAAI;IAAG;IAAG;;AAGpC,QAAM,sBAAsB;IACxB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;AAIJ,QAAM,eAAe;IACjB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;AA0CJ,QAAM,QAAQ,MAAM;AACpB,QAAM,QAAQ,MAAM;AACpB,QAAM,UAAU,KAAK;AACrB,QAAM,UAAU,KAAK;AAGrB,QAAM,kBAAkB,MAAM;AAC9B,QAAM,kBAAkB,KAAM;AAG9B,QAAM,SAAS;IACX;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;AAGJ,QAAM,UAAoB,CAAA;AAC1B,QAAM,YAAsB,CAAA;AAC5B,QAAM,UAAoB,CAAA;AAC1B,QAAM,MAAgB,CAAA;AAEtB,MAAI,iBAAiB;AAErB,QAAM,kBAAkB,IAAI,MAAM,CAAC;AACnC,QAAM,iBAAiB,IAAI,MAAM,CAAC;AAClC,MAAI;AACJ,OAAK,OAAO,GAAG,OAAO,GAAG,QAAQ;AAC7B,oBAAgB,IAAI,IAAI,QAAQ,KAAI;AACpC,mBAAe,IAAI,IAAI,QAAQ,KAAI;;AAGvC,WAAS,OAAO,GAAG,OAAO,IAAI,QAAQ;AAElC,SAAK,OAAO,GAAG,OAAO,GAAG,QAAQ;AAE7B,YAAM,OAAO,YAAY,IAAI,OAAO,IAAI;AAExC,sBAAgB,IAAI,EAAE,eAClB,YAAY,IAAI,oBAAoB,IAAI,CAAC,GACzC,YAAY,IAAI,oBAAoB,IAAI,IAAI,CAAC,GAC7C,YAAY,IAAI,oBAAoB,IAAI,IAAI,CAAC,CAAC;AAGlD,sBAAgB,IAAI,EAAE,UAAS;AAG/B,qBAAe,IAAI,EAAE,eACjB,aAAa,IAAI,IAAI,IAAI,QAAQ,UAAU,OAAO,IAAI,IAAI,iBAC1D,aAAa,IAAI,OAAO,CAAC,IAAI,QAAQ,UAAU,OAAO,IAAI,IAAI,eAAe;;AAyCrF,UAAM,gBAAgB,CAAC,IAAY,IAAY,IAAY,OAAc;AAIrE,YAAM,SAAS,QAAQ,KAAK,gBAAgB,CAAC,GAAG,gBAAgB,CAAC,GAAG,KAAK,YAAY;AACrF,YAAM,SAAS,QAAQ,KAAK,gBAAgB,CAAC,GAAG,gBAAgB,CAAC,GAAG,KAAK,YAAY;AACrF,YAAM,aAAa,iBAAiB,KAAK,gBAAgB,CAAC,IAAI,QAAQ,KAAK,QAAQ,QAAQ,MAAM,eAAe,GAAG;AACnH,iBAAW,UAAS;AAEpB,UAAI;AACJ,UAAI,MAAM;AAEN,cAAM,cAAc,QAAQ,KAAK,gBAAgB,CAAC,GAAG,gBAAgB,CAAC,GAAG,KAAK,YAAY;AAC1F,cAAM,cAAc,QAAQ,KAAK,gBAAgB,CAAC,GAAG,gBAAgB,CAAC,GAAG,KAAK,YAAY;AAC1F,wBAAgB,QAAQ,KAAK,aAAa,aAAa,MAAM,eAAe,GAAG;aAC5E;AAEH,wBAAgB,IAAI,QAAQ,WAAW,GAAG,WAAW,GAAG,WAAW,CAAC;;AAGxE,oBAAc,KAAK;AACnB,oBAAc,KAAK;AACnB,oBAAc,KAAK;AACnB,oBAAc,UAAS;AAEvB,YAAM,QAAQ,QAAQ,KAAK,eAAe,CAAC,GAAG,eAAe,CAAC,GAAG,KAAK,YAAY;AAClF,YAAM,QAAQ,QAAQ,KAAK,eAAe,CAAC,GAAG,eAAe,CAAC,GAAG,KAAK,YAAY;AAClF,YAAM,YAAY,iBAAiB,KAAK,eAAe,CAAC,IAAI,QAAQ,KAAK,OAAO,OAAO,MAAM,eAAe,GAAG;AAC/G,gBAAU,KAAK,WAAW,IAAI,SAAS,WAAW,IAAI,SAAS,WAAW,IAAI,OAAO;AACrF,cAAQ,KAAK,cAAc,GAAG,cAAc,GAAG,cAAc,CAAC;AAC9D,UAAI,KAAK,UAAU,GAAG,qBAAqB,4BAA4B,IAAM,UAAU,IAAI,UAAU,CAAC;AAGtG,cAAQ,KAAK,cAAc;AAC3B;IACJ;AAEA,aAAS,KAAK,GAAG,KAAK,cAAc,MAAM;AACtC,eAAS,KAAK,GAAG,KAAK,KAAK,cAAc,MAAM;AAG3C,sBAAc,IAAI,IAAI,KAAK,IAAM,GAAG,KAAK,IAAM,CAAC;AAChD,sBAAc,KAAK,GAAG,IAAI,KAAK,IAAM,GAAG,KAAK,IAAM,CAAC;AACpD,sBAAc,IAAI,KAAK,GAAG,KAAK,IAAM,GAAG,KAAK,IAAM,CAAC;AACpD,YAAI,KAAK,KAAK,IAAI,cAAc;AAG5B,wBAAc,KAAK,GAAG,IAAI,KAAK,IAAM,GAAG,KAAK,IAAM,CAAC;AACpD,wBAAc,KAAK,GAAG,KAAK,GAAG,KAAK,IAAM,GAAG,KAAK,IAAM,CAAC;AACxD,wBAAc,IAAI,KAAK,GAAG,KAAK,IAAM,GAAG,KAAK,IAAM,CAAC;;;;;AAOpE,aAAW,cAAc,iBAAiB,WAAW,SAAS,SAAS,KAAK,QAAQ,UAAU,QAAQ,OAAO;AAG7G,QAAM,aAAa,IAAI,WAAU;AACjC,aAAW,UAAU;AACrB,aAAW,YAAY;AACvB,aAAW,UAAU;AACrB,aAAW,MAAM;AACjB,SAAO;AACX;AAiBM,SAAU,gBACZI,OACA,UAWI,CAAA,GACJ,QAAyB,MAAI;AAE7B,QAAM,SAAS,IAAI,KAAKA,OAAM,KAAK;AAEnC,UAAQ,kBAAkB,KAAK,2BAA2B,QAAQ,eAAe;AACjF,SAAO,kCAAkC,QAAQ;AAEjD,QAAM,aAAa,0BAA0B,OAAO;AAEpD,aAAW,YAAY,QAAQ,QAAQ,SAAS;AAEhD,SAAO;AACX;AAraA,IA0aa;AA1ab;;;AACA;AACA;AAEA;AAsaO,IAAM,mBAAmB;;MAE5B;;AAGJ,eAAW,kBAAkB;AAE7B,SAAK,kBAAkB,CAACA,OAAc,SAAoH,UAAsB;AAC5K,aAAO,gBAAgBA,OAAM,SAAS,KAAK;IAC/C;;;;;ACrbA,IAgIY,UA+BA,gBA6DN,yBA4BA,qBAoCO,WAsNA;AAlfb;;;AAEA;AAKA;AAEA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAwGA,KAAA,SAAYC,WAAQ;AAIhB,MAAAA,UAAA,OAAA,IAAA;AAIA,MAAAA,UAAA,OAAA,IAAA;AAIA,MAAAA,UAAA,OAAA,IAAA;AAIA,MAAAA,UAAA,QAAA,IAAA;AAIA,MAAAA,UAAA,MAAA,IAAA;AAIA,MAAAA,UAAA,QAAA,IAAA;IACJ,GAzBY,aAAA,WAAQ,CAAA,EAAA;AA+BpB,KAAA,SAAYC,iBAAc;AAEtB,MAAAA,gBAAA,OAAA,IAAA;AAGA,MAAAA,gBAAA,kBAAA,IAAA;AAEA,MAAAA,gBAAA,wBAAA,IAAA;AAEA,MAAAA,gBAAA,sBAAA,IAAA;AAEA,MAAAA,gBAAA,WAAA,IAAA;AAGA,MAAAA,gBAAA,yBAAA,IAAA;AAEA,MAAAA,gBAAA,+BAAA,IAAA;AAEA,MAAAA,gBAAA,mCAAA,IAAA;AAEA,MAAAA,gBAAA,6BAAA,IAAA;AAEA,MAAAA,gBAAA,kBAAA,IAAA;AAGA,MAAAA,gBAAA,0BAAA,IAAA;AAEA,MAAAA,gBAAA,gCAAA,IAAA;AAEA,MAAAA,gBAAA,oCAAA,IAAA;AAEA,MAAAA,gBAAA,8BAAA,IAAA;AAEA,MAAAA,gBAAA,mBAAA,IAAA;AAGA,MAAAA,gBAAA,wBAAA,IAAA;AAEA,MAAAA,gBAAA,8BAAA,IAAA;AAEA,MAAAA,gBAAA,kCAAA,IAAA;AAEA,MAAAA,gBAAA,4BAAA,IAAA;AAEA,MAAAA,gBAAA,iBAAA,IAAA;AAGA,MAAAA,gBAAA,yBAAA,IAAA;AAEA,MAAAA,gBAAA,+BAAA,IAAA;AAEA,MAAAA,gBAAA,mCAAA,IAAA;AAEA,MAAAA,gBAAA,6BAAA,IAAA;AAEA,MAAAA,gBAAA,kBAAA,IAAA;IACJ,GAxDY,mBAAA,iBAAc,CAAA,EAAA;AA6D1B,IAAM,0BAA4C;MAC9C,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;MACf,eAAe;;AAGnB,IAAM,sBAA+D;MACjE,CAAC,SAAS,KAAK,GAAG,CAAC,eAAe,KAAK;MACvC,CAAC,SAAS,KAAK,GAAG,CAAC,eAAe,kBAAkB,eAAe,wBAAwB,eAAe,sBAAsB,eAAe,SAAS;MACxJ,CAAC,SAAS,KAAK,GAAG;QACd,eAAe;QACf,eAAe;QACf,eAAe;QACf,eAAe;QACf,eAAe;;MAEnB,CAAC,SAAS,MAAM,GAAG;QACf,eAAe;QACf,eAAe;QACf,eAAe;QACf,eAAe;QACf,eAAe;;MAEnB,CAAC,SAAS,IAAI,GAAG;QACb,eAAe;QACf,eAAe;QACf,eAAe;QACf,eAAe;QACf,eAAe;;MAEnB,CAAC,SAAS,MAAM,GAAG;QACf,eAAe;QACf,eAAe;QACf,eAAe;QACf,eAAe;QACf,eAAe;;;AAOjB,IAAO,YAAP,MAAgB;;;;MAuBlB,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;;;;;;MAOO,kBAAkB,MAAc;AACnC,eAAO,oBAAoB,IAAI,EAAE,IAAI,CAACC,UAAS,KAAK,aAAa,wBAAwB,QAAQA,KAAI,CAAC,CAAE;MAC5G;;;;;;MAOO,aAAa,WAAyB;AACzC,eAAO,KAAK,aAAa,wBAAwB,QAAQ,SAAS,CAAE;MACxE;;;;;;;;;;;;;;MAeA,YAEoB,cACC,cACT,WAGC,YACQ,oBAA6B,OAC7B,mBAA4B,OAC5B,oBAA4B,GAAC;AAR9B,aAAA,eAAA;AACC,aAAA,eAAA;AACT,aAAA,YAAA;AAGC,aAAA,aAAA;AACQ,aAAA,oBAAA;AACA,aAAA,mBAAA;AACA,aAAA,oBAAA;AA9Db,aAAA,mBAAmB,IAAI,MAAqB,wBAAwB,MAAM;AAK1E,aAAA,0BAA0B,IAAI,aAAa,wBAAwB,SAAS,EAAE;AAE9E,aAAA,mBAAmB,IAAI,OAAM;AAK7B,aAAA,cAAc,IAAI,aAAa,wBAAwB,MAAM;AAoDjE,aAAK,SAAS,aAAa,CAAC,EAAE,SAAQ;AAGtC,iBAAS,WAAW,GAAG,WAAW,KAAK,iBAAiB,QAAQ,YAAY;AACxE,gBAAM,iBAAkB,KAAK,iBAAiB,QAAQ,IAAI,IAAI,cAAc,wBAAwB,QAAQ,GAAG,KAAK,MAAM;AAC1H,yBAAe,qBAAqB,IAAI,WAAU;AAGlD,uBAAa,QAAQ,EAAE,qBAAqB,IAAI,WAAU;;AAG9D,YAAI,WAAW;AAEX,eAAK,YAAY,WAAW,UAAU;;AAI1C,YAAI,KAAK,aAAa,kBAAkB;AACpC,cAAI,KAAK,aAAa,iBAAiB,UAAU;AAC7C,iBAAK,aAAa,iBAAiB,SAAS,QAAQ,OAAO,IAAI;;;AAIvE,aAAK,aAAa,iCAAiC,IAAI,CAAC,qBAAoB;AACxE,2BAAiB,2BAA2B;QAChD,CAAC;MACL;;;;;;;MAQO,YAAY,UAAwB,YAA4C,mBAAuC;AAC1H,aAAK,YAAY;AAGjB,iBAAS,2BAA2B;AACpC,iBAAS,eAAc,EAAG,QAAQ,CAAC,SAAQ;AACvC,eAAK,2BAA2B;QACpC,CAAC;AAGD,YAAI,KAAK,UAAU,UAAU;AACzB,gBAAM,mBAAmB,KAAK,UAAU;AACxC,kCAAwB,QAAQ,CAAC,WAAW,aAAY;AACpD,kBAAM,eAAe,iBAAiB,mBAAmB,aAAa,WAAW,SAAS,IAAI,SAAS;AACvG,gBAAI,iBAAiB,IAAI;AACrB,+BAAiB,MAAM,YAAY,EAAE,kBAAkB,KAAK,iBAAiB,QAAQ,CAAC;;UAE9F,CAAC;;MAET;;;;;;MAOO,kBAAkB,SAAkB,gBAAgC;AACvE,cAAM,OAAO,KAAK,aAAa,YAAY;AAC3C,YAAI,CAAC,MAAM;AACP;;AAIJ,cAAM,UAAe;AACrB,cAAM,cAA8B,wBAAwB,IAAI,CAAC,cAAc,QAAQ,SAAS,KAAK,KAAK,IAAI,SAAS,CAAC;AACxH,YAAI,qBAAqB;AAEzB,YAAI,QAAQ,aAAa,QAAQ,gBAAgB;AAC7C,+BAAqB,QAAQ,UAAU,aAAa,gBAAgB,KAAK,uBAAuB,KAAK,QAAQ,eAAe,aAAa,KAAK,WAAW;mBAClJ,QAAQ,cAAc;AAC7B,+BAAqB;AAErB,mBAAS,WAAW,GAAG,WAAW,YAAY,QAAQ,YAAY;AAC9D,kBAAM,YAAY,QAAQ,aAAa,YAAY,QAAQ,GAAG,cAAc;AAC5E,gBAAI,WAAW;AACX,mBAAK,wBAAwB,IAAI,UAAU,UAAU,QAAQ,WAAW,EAAE;AAC1E,mBAAK,YAAY,QAAQ,IAAI,UAAU,UAAU;mBAC9C;AACH,mCAAqB;AACrB;;;;AAKZ,YAAI,CAAC,oBAAoB;AACrB;;AAGJ,gCAAwB,QAAQ,CAAC,YAAY,aAAY;AACrD,gBAAM,iBAAiB,KAAK,iBAAiB,QAAQ;AACrD,iBAAO,eAAe,KAAK,yBAAyB,WAAW,IAAI,KAAK,gBAAgB;AACxF,eAAK,iBAAiB,UAAU,QAAW,eAAe,oBAAqB,eAAe,QAAQ;AAGtG,gBAAM,oBAAoB,KAAK,YAAY,QAAQ,IAAI,KAAK;AAE5D,gBAAM,YAAY,KAAK,aAAa,QAAQ;AAC5C,oBAAU,YAAY,CAAC,KAAK,aAAa,CAAC,KAAK;AAC/C,oBAAU,SAAS,SAAS,eAAe,QAAQ;AACnD,oBAAU,mBAAoB,SAAS,eAAe,kBAAmB;AACzE,oBAAU,QAAQ,OAAO,iBAAiB;AAG1C,cAAI,CAAC,KAAK,OAAO,sBAAsB;AACnC,sBAAU,SAAS,KAAK;AACxB,sBAAU,mBAAoB,KAAK;AACnC,sBAAU,mBAAoB,KAAK;AAEnC,gBAAI,KAAK,qBAAqB,KAAK,WAAW;AAC1C,6BAAe,SAAS,KAAK;AAC7B,6BAAe,mBAAoB,KAAK;AACxC,6BAAe,mBAAoB,KAAK;;;QAGpD,CAAC;AAED,YAAI,KAAK,WAAW;AAChB,eAAK,UAAU,YAAY;;MAEnC;;;;;MAMO,QAAQ,gBAAgB,OAAK;AAnexC;AAoeQ,YAAI,KAAK,WAAW;AAChB,cAAI,eAAe;AACf,uBAAK,UAAU,aAAf,mBAAyB;AACzB,iBAAK,UAAU,QAAQ,OAAO,IAAI;iBAC/B;AACH,iBAAK,UAAU,YAAY;;;MAGvC;;AAME,IAAO,oBAAP,MAAO,2BAA0B,qBAAoB;MA2B/C,OAAO,4BAA4B,gBAAyC;AAChF,cAAM,SAAmD,CAAA;AACzD,SAAC,QAAwB,OAAuB,EAAE,IAAI,CAAC,eAAc;AA/gB7E;AAghBY,gBAAM,gBAAgB,CAAA;AACtB,gBAAM,iBAAe,oBAAe,gBAAf,mBAA4B,eAAc,gBAAgB,eAAe,mBAAkB,iBAAiB;AACjI,uBAAa,YAAY,CAAC,GAAC,oBAAe,gBAAf,mBAA4B;AACvD,mBAAS,IAAI,GAAG,IAAI,wBAAwB,QAAQ,EAAE,GAAG;AACrD,gBAAI,cAA4B,aAAa,eAAe,GAAG,UAAU,cAAc,CAAC,EAAE;AAC1F,iBAAI,oBAAe,gBAAf,mBAA4B,0BAA0B;AACtD,oBAAM,eAAe,eAAe,YAAY,yBAAyB,aAA8B,GAAG,UAAU;AACpH,kBAAI,cAAc;AACd,oBAAI,iBAAiB,aAAa;AAC9B,8BAAY,QAAO;AACnB,gCAAc;;;;AAI1B,wBAAY,aAAa;AACzB,iBAAI,oBAAe,gBAAf,mBAA4B,eAAe;AAC3C,oBAAM,UAAQ,oBAAe,gBAAf,mBAA4B,iBAAgB,CAAA;AAE1D,0BAAY,QAAQ,OAAO,IAAI;AAC/B,oBAAM,OAAO,MAAM,iBAAiB,SAAY,MAAM,eAAe,gBAAgB;AACrF,0BAAY,kBAAkB,IAAI,gBAAgB,aAAa,MAAM,EAAE,MAAM,GAAG,GAAG,MAAK,CAAE;;AAE9F,wBAAY,qBAAqB,IAAI,WAAU;AAC/C,wBAAY,YAAY;AACxB,0BAAc,KAAK,WAAW;;AAGlC,iBAAO,UAAU,IAAI;QACzB,CAAC;AACD,eAAO,EAAE,MAAM,OAAO,MAAM,OAAO,OAAO,MAAK;MACnD;MAEQ,OAAO,gCACX,OACA,kBACA,SAAmC;AAGnC,eAAO,IAAI,QAAQ,OAAO,YAAW;AAtjB7C;AAujBY,gBAAM,eAAuD,CAAA;AAE7D,eAAI,8BAAkB,kBAAlB,mBAAiC,OAAO,OAAxC,mBAA4C,cAAc;AAC1D,+BAAkB,gBAAgB;;AAEtC,eAAI,8BAAkB,iBAAlB,mBAAgC,OAAO,OAAvC,mBAA2C,cAAc;AACzD,+BAAkB,eAAe;;AAGrC,gBAAM,eAAe,CAAC,EAAE,mBAAkB,iBAAiB,mBAAkB;AAE7E,gBAAM,WAAW,MAAM,QAAQ,IAAI;YAC/B,mBAAkB,iBACd,YAAY,gBAAgB,IAAI,mBAAkB,6BAA6B,mBAAkB,mCAAmC,KAAK;YAC7I,mBAAkB,gBACd,YAAY,gBAAgB,IAAI,mBAAkB,6BAA6B,mBAAkB,kCAAkC,KAAK;WAC/I;AACD,6BAAkB,gBAAgB,SAAS,CAAC;AAC5C,6BAAkB,eAAe,SAAS,CAAC;AAE3C,gBAAM,aAAa,MAAM,aAAa,mBAAmB,cAAc,mBAAkB,+BAA+B,KAAK;AAG7H,qBAAW,mBAAmB;AAC9B,qBAAW,mBAAmB,SAAS;AACvC,qBAAW,YAAY;AAGvB,qBAAW,MAAM,KAAK;AAGtB,gBAAM,aAAa;YACf,MAAM,OAAO,SAAS,KAAK,IAAI,GAAG;YAClC,SAAS,OAAO,SAAS,KAAK,KAAK,GAAG;YACtC,aAAa,OAAO,SAAS,KAAK,KAAK,GAAG;YAC1C,YAAY,OAAO,SAAS,KAAK,KAAK,GAAG;YACzC,IAAG,wCAAS,eAAT,mBAAqB;;AAG5B,gBAAM,YAAY;YACd,MAAM,WAAW,eAAe,WAAW;YAC3C,SAAS,WAAW,eAAe,cAAc;YACjD,aAAa,WAAW,eAAe,aAAa;YACpD,YAAY,WAAW,eAAe,iBAAiB;;AAG3D,oBAAU,KAAK,QAAQ,WAAW;AAClC,oBAAU,QAAQ,QAAQ,WAAW;AACrC,oBAAU,YAAY,QAAQ,WAAW;AACzC,oBAAU,WAAW,QAAQ,WAAW;AACxC,gBAAM,eAAe,sBAAiB,qBAAoB,MAArC,mBAA0E;AAC/F,WAAC,QAAQ,OAAO,EAAE,QAAQ,CAAC,eAAc;AACrC,kBAAM,UAAU,cAAc,SAAS,mBAAkB,eAAe,mBAAkB;AAC1F,gBAAI,CAAC,SAAS;AAEV,oBAAM,IAAI,MAAM,2BAA2B;;AAE/C,kBAAM,WAAW,QAAQ,OAAO,CAAC;AACjC,qBAAS,8BAA8B,4BAA4B;AAEnE,gBAAI,CAAC,aAAa;AACd,uBAAS,WAAW,WAAW,MAAM,GAAG,UAAU,mBAAmB,IAAI;;AAE7E,qBAAS,YAAY;AAErB,yBAAa,UAAU,IAAI;AAG3B,gBAAI,CAAC,gBAAgB,CAAC,MAAM,sBAAsB;AAC9C,sBAAQ,OAAO,CAAC,EAAE,OAAO,KAAK,GAAG,KAAK,EAAE;;UAEhD,CAAC;AAED,qBAAW,QAAO;AAClB,kBAAQ,EAAE,MAAM,aAAa,MAAM,OAAO,aAAa,MAAK,CAAE;QAClE,CAAC;MACL;;;;;;MAOQ,OAAO,mCAAmC,YAAwB;AACtE,cAAM,IAAI,cAAc,UAAU,MAAM;AACxC,eAAO;UACH,CAAC,eAAe,KAAK,GAAG,SAAS,CAAC;UAClC,CAAC,eAAe,gBAAgB,GAAG,oBAAoB,CAAC;UACxD,CAAC,eAAe,sBAAsB,GAAG,qBAAqB,CAAC;UAC/D,CAAC,eAAe,oBAAoB,GAAG,qBAAqB,CAAC;UAC7D,CAAC,eAAe,SAAS,GAAG,aAAa,CAAC;UAC1C,CAAC,eAAe,uBAAuB,GAAG,oBAAoB,CAAC;UAC/D,CAAC,eAAe,6BAA6B,GAAG,qBAAqB,CAAC;UACtE,CAAC,eAAe,iCAAiC,GAAG,oBAAoB,CAAC;UACzE,CAAC,eAAe,2BAA2B,GAAG,qBAAqB,CAAC;UACpE,CAAC,eAAe,gBAAgB,GAAG,aAAa,CAAC;UACjD,CAAC,eAAe,wBAAwB,GAAG,qBAAqB,CAAC;UACjE,CAAC,eAAe,8BAA8B,GAAG,sBAAsB,CAAC;UACxE,CAAC,eAAe,kCAAkC,GAAG,qBAAqB,CAAC;UAC3E,CAAC,eAAe,4BAA4B,GAAG,sBAAsB,CAAC;UACtE,CAAC,eAAe,iBAAiB,GAAG,cAAc,CAAC;UACnD,CAAC,eAAe,sBAAsB,GAAG,mBAAmB,CAAC;UAC7D,CAAC,eAAe,4BAA4B,GAAG,oBAAoB,CAAC;UACpE,CAAC,eAAe,gCAAgC,GAAG,mBAAmB,CAAC;UACvE,CAAC,eAAe,0BAA0B,GAAG,oBAAoB,CAAC;UAClE,CAAC,eAAe,eAAe,GAAG,YAAY,CAAC;UAC/C,CAAC,eAAe,uBAAuB,GAAG,qBAAqB,CAAC;UAChE,CAAC,eAAe,6BAA6B,GAAG,sBAAsB,CAAC;UACvE,CAAC,eAAe,iCAAiC,GAAG,qBAAqB,CAAC;UAC1E,CAAC,eAAe,2BAA2B,GAAG,sBAAsB,CAAC;UACrE,CAAC,eAAe,gBAAgB,GAAG,cAAc,CAAC;;MAE1D;;;;;;MAiCO,eAAY;AACf,eAAO,OAAO,WAAW;MAC7B;;;;;;MAOO,sBAAsB,cAAoB;AAC7C,eAAO,KAAK,eAAe,YAAY;MAC3C;;;;;;MAOO,oBAAoB,YAAwB;AAC/C,YAAI,cAAc,QAAQ;AACtB,iBAAO;;AAEX,eAAO,KAAK,eAAe,UAAU;MACzC;;;;;;MAOA,YACI,mBAEgB,SAAkC;AAElD,cAAM,iBAAiB;AAFP,aAAA,UAAA;AAhEZ,aAAA,iBAEJ,CAAA;AAEI,aAAA,iBAGJ,EAAE,MAAM,MAAM,OAAO,KAAI;AAErB,aAAA,iBAIJ,EAAE,aAAa,MAAM,YAAY,MAAM,aAAa,KAAI;AAEpD,aAAA,sBAAoG;AAKrG,aAAA,wBAA+C,IAAI,WAAU;AAI7D,aAAA,0BAAiD,IAAI,WAAU;AAuI9D,aAAA,cAAc,CAAC,iBAAkC;AAx0B7D;AAy0BQ,cAAI,CAAC,aAAa,YAAY,QAAQ,aAAa,YAAY,cAAc,UAAU,CAAC,KAAK,eAAe,aAAa;AACrH;;AAGJ,gBAAM,aAAa,aAAa,YAAY;AAC5C,gBAAM,YAAY,IAAI,UAClB,cACA,KAAK,eAAe,YAAY,UAAU,GAC1C,KAAK,eAAe,cAAc,KAAK,eAAe,WAAW,UAAU,GAC3E,KAAK,eAAe,eAAe,KAAK,eAAe,YAAY,UAAU,IAC7E,UAAK,QAAQ,eAAb,mBAAyB,iCACzB,UAAK,QAAQ,gBAAb,mBAA0B,YAC1B,UAAK,QAAQ,gBAAb,mBAA0B,WAAW;AAGzC,eAAK,eAAe,aAAa,QAAQ,IAAI;AAC7C,eAAK,eAAe,UAAU,IAAI;AAElC,eAAK,sBAAsB,gBAAgB,SAAS;QACxD;AAeQ,aAAA,cAAc,CAAC,iBAAkC;AACrD,eAAK,gBAAgB,aAAa,QAAQ;QAC9C;AAjII,aAAK,sBAAsB;AAG3B,cAAM,aAAa;AACnB,cAAM,sBAAsB,WAAW;AACvC,YAAI,qBAAqB;AACrB,cAAI,OAAO,oBAAoB,2BAA2B,aAAa;AACnE,oBAAQ,aAAa,QAAQ,cAAc,CAAA;AAC3C,oBAAQ,WAAW,uBAAuB,oBAAoB;;AAElE,cAAI,OAAO,oBAAoB,eAAe,aAAa;AACvD,oBAAQ,aAAa,QAAQ,cAAc,CAAA;AAC3C,oBAAQ,WAAW,eAAe,oBAAoB;;AAE1D,cAAI,OAAO,oBAAoB,2BAA2B,aAAa;AACnE,oBAAQ,aAAa,QAAQ,cAAc,CAAA;AAC3C,oBAAQ,WAAW,iCAAiC,oBAAoB;;AAE5E,cAAI,OAAO,oBAAoB,eAAe,aAAa;AACvD,oBAAQ,aAAa,QAAQ,cAAc,CAAA;AAC3C,kBAAM,iBAAiB,CAAA;AACvB,kBAAM,kBAAkB,CAAA;AACxB;cACI,CAAC,oBAAoB,WAAW,MAAM,cAAc;cACpD,CAAC,oBAAoB,WAAW,OAAO,eAAe;cACxD,QAAQ,CAAC,oBAAmB;AAC1B,oBAAM,mBAAmB,gBAAgB,CAAC;AAC1C,oBAAM,aAAa,gBAAgB,CAAC;AACpC,+BAAiB,QAAQ,CAAC,gBAAgB,UAAS;AAC/C,2BAAW,wBAAwB,KAAK,CAAC,IAAI;cACjD,CAAC;YACL,CAAC;AACD,oBAAQ,WAAW,oBAAoB;cACnC,MAAM;cACN,OAAO;;;;MAIvB;;;;;;;MAQO,SAAM;AA1xBjB;AA2xBQ,YAAI,CAAC,MAAM,OAAM,GAAI;AACjB,iBAAO;;AAGX,aAAK,iBAAiB;UAClB,aAAa,mBAAkB,4BAA4B,KAAK,OAAO;UACvE,cAAY,UAAK,QAAQ,eAAb,mBAAyB,iBAAgB;UACrD,eAAa,UAAK,QAAQ,eAAb,mBAAyB,sBAAqB;;AAI/D,YAAI,GAAC,UAAK,QAAQ,eAAb,mBAAyB,iBAAgB,GAAC,UAAK,QAAQ,eAAb,mBAAyB,uBAAsB;AAC1F,6BAAkB,gCAAgC,YAAY,kBAAmB,KAAK,mBAAmB,KAAK,OAAO,EAAE,KAAK,CAAC,sBAAqB;AAvyB9J,gBAAAC,KAAAC;AAwyBgB,iBAAK,eAAe,aAAa;AACjC,iBAAK,eAAe,cAAc;cAC9B,MAAM,mBAAkB,mCAAmC,MAAM;cACjE,OAAO,mBAAkB,mCAAmC,OAAO;;AAIvE,aAAAD,MAAA,KAAK,eAAe,SAApB,gBAAAA,IAA0B,YAAY,KAAK,eAAe,WAAW,MAAM,KAAK,eAAe,YAAY,MAAM,KAAK;AACtH,aAAAC,MAAA,KAAK,eAAe,UAApB,gBAAAA,IAA2B,YAAY,KAAK,eAAe,WAAW,OAAO,KAAK,eAAe,YAAY,OAAO,KAAK;AACzH,iBAAK,eAAe,WAAW,KAAK,QAAQ,OAAO,KAAK,kBAAkB,kBAAkB;AAC5F,iBAAK,eAAe,WAAW,MAAM,QAAQ,OAAO,KAAK,kBAAkB,kBAAkB;UACjG,CAAC;AACD,eAAK,sBAAsB,KAAK,kBAAkB,oCAAoC,IAAI,CAAC,mBAAkB;AACzG,gBAAI,KAAK,eAAe,YAAY;AAChC,mBAAK,eAAe,WAAW,KAAK,QAAQ,aAAa,eAAe,iBAAiB,eAAe,mBAAmB;AAC3H,mBAAK,eAAe,WAAW,MAAM,QAAQ,aAAa,eAAe,iBAAiB,eAAe,mBAAmB;;UAEpI,CAAC;;AAGL,aAAK,QAAQ,QAAQ,YAAY,QAAQ,KAAK,WAAW;AACzD,aAAK,sBAAsB,KAAK,QAAQ,QAAQ,6BAA6B,KAAK,WAAW;AAC7F,aAAK,sBAAsB,KAAK,QAAQ,QAAQ,+BAA+B,KAAK,WAAW;AAE/F,eAAO;MACX;MAEU,WAAW,UAAiB;AAn0B1C;AAo0BQ,mBAAK,eAAe,SAApB,mBAA0B,kBAAkB,UAAU,KAAK,kBAAkB;AAC7E,mBAAK,eAAe,UAApB,mBAA2B,kBAAkB,UAAU,KAAK,kBAAkB;MAClF;MAwBQ,gBAAgB,cAAsB,aAAqB;AA91BvE;AA+1BQ,cAAM,OAAO,KAAK,sBAAsB,YAAY;AACpD,YAAI,MAAM;AACN,gBAAM,aAAa,KAAK,aAAa,YAAY,cAAc,SAAS,SAAS;AACjF,gBAAI,UAAK,eAAe,UAAU,MAA9B,mBAAiC,aAAa,cAAa,cAAc;AACzE,iBAAK,eAAe,UAAU,IAAI;;AAEtC,eAAK,wBAAwB,gBAAgB,IAAI;AACjD,eAAK,QAAQ,WAAW;AACxB,iBAAO,KAAK,eAAe,YAAY;;MAE/C;;;;;;;MAYO,SAAM;AAr3BjB;AAs3BQ,YAAI,CAAC,MAAM,OAAM,GAAI;AACjB,iBAAO;;AAGX,eAAO,KAAK,KAAK,cAAc,EAAE,QAAQ,CAAC,aAAU;AA13B5D,cAAAD;AA03B+D,sBAAK,gBAAgB,WAAUA,MAAA,KAAK,QAAQ,eAAb,gBAAAA,IAAyB,mBAAmB;SAAC;AACnI,aAAI,UAAK,QAAQ,eAAb,mBAAyB,qBAAqB;AAC9C,cAAI,KAAK,eAAe,aAAa;AACjC,iBAAK,eAAe,YAAY,KAAK,QAAQ,CAAC,gBAAgB,YAAY,QAAO,CAAE;AACnF,iBAAK,eAAe,YAAY,MAAM,QAAQ,CAAC,gBAAgB,YAAY,QAAO,CAAE;;;AAK5F,YAAI,KAAK,qBAAqB;AAC1B,eAAK,kBAAkB,oCAAoC,OAAO,KAAK,mBAAmB;;AAG9F,eAAO;MACX;;;;MAKO,UAAO;AA74BlB;AA84BQ,cAAM,QAAO;AACb,aAAK,sBAAsB,MAAK;AAChC,aAAK,wBAAwB,MAAK;AAElC,YAAI,KAAK,eAAe,cAAc,GAAC,UAAK,QAAQ,eAAb,mBAAyB,eAAc;AAE1E,eAAK,eAAe,WAAW,KAAK,QAAO;AAC3C,eAAK,eAAe,WAAW,MAAM,QAAO;AAE5C,6BAAkB,gBAAgB;AAClC,6BAAkB,eAAe;;AAGrC,YAAI,KAAK,eAAe,aAAa;AACjC,eAAK,eAAe,YAAY,KAAK,QAAQ,CAAC,gBAAgB,YAAY,QAAO,CAAE;AACnF,eAAK,eAAe,YAAY,MAAM,QAAQ,CAAC,gBAAgB,YAAY,QAAO,CAAE;;MAE5F;;AAzauB,sBAAA,OAAO,iBAAiB;AAMxB,sBAAA,UAAU;AAGnB,sBAAA,8BAA8B;AAE9B,sBAAA,oCAAoC;AAEpC,sBAAA,mCAAmC;AAEnC,sBAAA,gCAAgC;AAGtB,sBAAA,oBAAoB,EAAE,QAAQ,KAAK,MAAM,OAAO,cAAc,EAAC;AAExE,sBAAA,gBAAmD;AACnD,sBAAA,eAAkD;AAwZrE,yBAAqB,gBACjB,kBAAkB,MAClB,CAAC,kBAAkB,YAAW;AAC1B,aAAO,MAAM,IAAI,kBAAkB,kBAAkB,OAAO;IAChE,GACA,kBAAkB,SAClB,KAAK;;;",
  "names": ["name", "_a", "transform", "name", "Space", "Coordinate", "name", "translation", "name", "index", "name", "i", "index", "MaterialPluginEvent", "name", "name", "index", "name", "subMesh", "data", "vertexData", "SceneLoaderAnimationGroupLoadingMode", "name", "request", "scene", "name", "NodeMaterialBlockConnectionPointTypes", "NodeMaterialBlockTargets", "name", "name", "NodeMaterialConnectionPointCompatibilityStates", "NodeMaterialConnectionPointDirection", "name", "name", "name", "name", "PropertyTypeForEdition", "name", "NodeMaterialBlockConnectionPointMode", "NodeMaterialSystemValues", "Orientation", "AnimatedInputBlockTypes", "name", "index", "name", "texture", "name", "name", "name", "name", "name", "index", "name", "name", "name", "NodeMaterialModes", "name", "name", "name", "shader", "name", "scene", "name", "shader", "name", "TrigonometryBlockOperations", "name", "name", "result", "effect", "source", "name", "HandPart", "WebXRHandJoint", "name", "_a", "_b"]
}
