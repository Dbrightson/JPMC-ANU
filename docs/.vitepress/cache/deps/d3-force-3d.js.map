{
  "version": 3,
  "sources": ["../../../node_modules/d3-force-3d/src/center.js", "../../../node_modules/d3-binarytree/src/add.js", "../../../node_modules/d3-binarytree/src/cover.js", "../../../node_modules/d3-binarytree/src/data.js", "../../../node_modules/d3-binarytree/src/extent.js", "../../../node_modules/d3-binarytree/src/half.js", "../../../node_modules/d3-binarytree/src/find.js", "../../../node_modules/d3-binarytree/src/remove.js", "../../../node_modules/d3-binarytree/src/root.js", "../../../node_modules/d3-binarytree/src/size.js", "../../../node_modules/d3-binarytree/src/visit.js", "../../../node_modules/d3-binarytree/src/visitAfter.js", "../../../node_modules/d3-binarytree/src/x.js", "../../../node_modules/d3-binarytree/src/binarytree.js", "../../../node_modules/d3-octree/src/add.js", "../../../node_modules/d3-octree/src/cover.js", "../../../node_modules/d3-octree/src/data.js", "../../../node_modules/d3-octree/src/extent.js", "../../../node_modules/d3-octree/src/octant.js", "../../../node_modules/d3-octree/src/find.js", "../../../node_modules/d3-octree/src/remove.js", "../../../node_modules/d3-octree/src/root.js", "../../../node_modules/d3-octree/src/size.js", "../../../node_modules/d3-octree/src/visit.js", "../../../node_modules/d3-octree/src/visitAfter.js", "../../../node_modules/d3-octree/src/x.js", "../../../node_modules/d3-octree/src/y.js", "../../../node_modules/d3-octree/src/z.js", "../../../node_modules/d3-octree/src/octree.js", "../../../node_modules/d3-force-3d/src/constant.js", "../../../node_modules/d3-force-3d/src/jiggle.js", "../../../node_modules/d3-force-3d/src/collide.js", "../../../node_modules/d3-force-3d/src/link.js", "../../../node_modules/d3-force-3d/src/lcg.js", "../../../node_modules/d3-force-3d/src/simulation.js", "../../../node_modules/d3-force-3d/src/manyBody.js", "../../../node_modules/d3-force-3d/src/radial.js", "../../../node_modules/d3-force-3d/src/x.js", "../../../node_modules/d3-force-3d/src/y.js", "../../../node_modules/d3-force-3d/src/z.js"],
  "sourcesContent": ["export default function(x, y, z) {\n  var nodes, strength = 1;\n\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n  if (z == null) z = 0;\n\n  function force() {\n    var i,\n        n = nodes.length,\n        node,\n        sx = 0,\n        sy = 0,\n        sz = 0;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], sx += node.x || 0, sy += node.y || 0, sz += node.z || 0;\n    }\n\n    for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, sz = (sz / n - z) * strength, i = 0; i < n; ++i) {\n      node = nodes[i];\n      if (sx) { node.x -= sx }\n      if (sy) { node.y -= sy; }\n      if (sz) { node.z -= sz; }\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.z = function(_) {\n    return arguments.length ? (z = +_, force) : z;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  return force;\n}\n", "export default function(d) {\n  const x = +this._x.call(null, d);\n  return add(this.cover(x), x, d);\n}\n\nfunction add(tree, x, d) {\n  if (isNaN(x)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      x1 = tree._x1,\n      xm,\n      xp,\n      right,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (parent = node, !(node = node[i = +right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  if (x === xp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(2) : tree._root = new Array(2);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n  } while ((i = +right) === (j = +(xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  if (!Array.isArray(data)) data = Array.from(data);\n  const n = data.length;\n  const xz = new Float64Array(n);\n  let x0 = Infinity,\n      x1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (let i = 0, x; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, data[i]))) continue;\n    xz[i] = x;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n  }\n\n  // If there were no (valid) points, abort.\n  if (x0 > x1) return this;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0).cover(x1);\n\n  // Add the new points.\n  for (let i = 0; i < n; ++i) {\n    add(this, xz[i], data[i]);\n  }\n\n  return this;\n}\n", "export default function(x) {\n  if (isNaN(x = +x)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      x1 = this._x1;\n\n  // If the binarytree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing half boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var z = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1) {\n      i = +(x < x0);\n      parent = new Array(2), parent[i] = node, node = parent, z *= 2;\n      switch (i) {\n        case 0: x1 = x0 + z; break;\n        case 1: x0 = x1 - z; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._x1 = x1;\n  return this;\n}\n", "export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n", "export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0]).cover(+_[1][0])\n      : isNaN(this._x0) ? undefined : [[this._x0], [this._x1]];\n}\n", "export default function(node, x0, x1) {\n  this.node = node;\n  this.x0 = x0;\n  this.x1 = x1;\n}\n", "import Half from \"./half.js\";\n\nexport default function(x, radius) {\n  var data,\n      x0 = this._x0,\n      x1,\n      x2,\n      x3 = this._x1,\n      halves = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) halves.push(new Half(node, x0, x3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius;\n    x3 = x + radius;\n  }\n\n  while (q = halves.pop()) {\n\n    // Stop searching if this half can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (x2 = q.x1) < x0) continue;\n\n    // Bisect the current half.\n    if (node.length) {\n      var xm = (x1 + x2) / 2;\n\n      halves.push(\n        new Half(node[1], xm, x2),\n        new Half(node[0], x1, xm)\n      );\n\n      // Visit the closest half first.\n      if (i = +(x >= xm)) {\n        q = halves[halves.length - 1];\n        halves[halves.length - 1] = halves[halves.length - 1 - i];\n        halves[halves.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var d = Math.abs(x - +this._x.call(null, node.data));\n      if (d < radius) {\n        radius = d;\n        x0 = x - d;\n        x3 = x + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n", "export default function(d) {\n  if (isNaN(x = +this._x.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      x1 = this._x1,\n      x,\n      xm,\n      right,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (!(parent = node, node = node[i = +right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 1]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1])\n      && node === (parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n", "export default function() {\n  return this._root;\n}\n", "export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n", "import Half from \"./half.js\";\n\nexport default function(callback) {\n  var halves = [], q, node = this._root, child, x0, x1;\n  if (node) halves.push(new Half(node, this._x0, this._x1));\n  while (q = halves.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, x1 = q.x1) && node.length) {\n      var xm = (x0 + x1) / 2;\n      if (child = node[1]) halves.push(new Half(child, xm, x1));\n      if (child = node[0]) halves.push(new Half(child, x0, xm));\n    }\n  }\n  return this;\n}\n", "import Half from \"./half.js\";\n\nexport default function(callback) {\n  var halves = [], next = [], q;\n  if (this._root) halves.push(new Half(this._root, this._x0, this._x1));\n  while (q = halves.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, x1 = q.x1, xm = (x0 + x1) / 2;\n      if (child = node[0]) halves.push(new Half(child, x0, xm));\n      if (child = node[1]) halves.push(new Half(child, xm, x1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.x1);\n  }\n  return this;\n}\n", "export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n", "import tree_add, {addAll as tree_addAll} from \"./add.js\";\nimport tree_cover from \"./cover.js\";\nimport tree_data from \"./data.js\";\nimport tree_extent from \"./extent.js\";\nimport tree_find from \"./find.js\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove.js\";\nimport tree_root from \"./root.js\";\nimport tree_size from \"./size.js\";\nimport tree_visit from \"./visit.js\";\nimport tree_visitAfter from \"./visitAfter.js\";\nimport tree_x, {defaultX} from \"./x.js\";\n\nexport default function binarytree(nodes, x) {\n  var tree = new Binarytree(x == null ? defaultX : x, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Binarytree(x, x0, x1) {\n  this._x = x;\n  this._x0 = x0;\n  this._x1 = x1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = binarytree.prototype = Binarytree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Binarytree(this._x, this._x0, this._x1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(2)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 2; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(2)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;", "export default function(d) {\n  const x = +this._x.call(null, d),\n      y = +this._y.call(null, d),\n      z = +this._z.call(null, d);\n  return add(this.cover(x, y, z), x, y, z, d);\n}\n\nfunction add(tree, x, y, z, d) {\n  if (isNaN(x) || isNaN(y) || isNaN(z)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      y0 = tree._y0,\n      z0 = tree._z0,\n      x1 = tree._x1,\n      y1 = tree._y1,\n      z1 = tree._z1,\n      xm,\n      ym,\n      zm,\n      xp,\n      yp,\n      zp,\n      right,\n      bottom,\n      deep,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm; else z1 = zm;\n    if (parent = node, !(node = node[i = deep << 2 | bottom << 1 | right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  yp = +tree._y.call(null, node.data);\n  zp = +tree._z.call(null, node.data);\n  if (x === xp && y === yp && z === zp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(8) : tree._root = new Array(8);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm; else z1 = zm;\n  } while ((i = deep << 2 | bottom << 1 | right) === (j = (zp >= zm) << 2 | (yp >= ym) << 1 | (xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  if (!Array.isArray(data)) data = Array.from(data);\n  const n = data.length;\n  const xz = new Float64Array(n);\n  const yz = new Float64Array(n);\n  const zz = new Float64Array(n);\n  let x0 = Infinity,\n      y0 = Infinity,\n      z0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity,\n      z1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (let i = 0, d, x, y, z; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d)) || isNaN(z = +this._z.call(null, d))) continue;\n    xz[i] = x;\n    yz[i] = y;\n    zz[i] = z;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n    if (z < z0) z0 = z;\n    if (z > z1) z1 = z;\n  }\n\n  // If there were no (valid) points, abort.\n  if (x0 > x1 || y0 > y1 || z0 > z1) return this;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0, y0, z0).cover(x1, y1, z1);\n\n  // Add the new points.\n  for (let i = 0; i < n; ++i) {\n    add(this, xz[i], yz[i], zz[i], data[i]);\n  }\n\n  return this;\n}\n", "export default function(x, y, z) {\n  if (isNaN(x = +x) || isNaN(y = +y) || isNaN(z = +z)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1 = this._x1,\n      y1 = this._y1,\n      z1 = this._z1;\n\n  // If the octree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing octant boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n    z1 = (z0 = Math.floor(z)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var t = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1 || z0 > z || z >= z1) {\n      i = (z < z0) << 2 | (y < y0) << 1 | (x < x0);\n      parent = new Array(8), parent[i] = node, node = parent, t *= 2;\n      switch (i) {\n        case 0: x1 = x0 + t, y1 = y0 + t, z1 = z0 + t; break;\n        case 1: x0 = x1 - t, y1 = y0 + t, z1 = z0 + t; break;\n        case 2: x1 = x0 + t, y0 = y1 - t, z1 = z0 + t; break;\n        case 3: x0 = x1 - t, y0 = y1 - t, z1 = z0 + t; break;\n        case 4: x1 = x0 + t, y1 = y0 + t, z0 = z1 - t; break;\n        case 5: x0 = x1 - t, y1 = y0 + t, z0 = z1 - t; break;\n        case 6: x1 = x0 + t, y0 = y1 - t, z0 = z1 - t; break;\n        case 7: x0 = x1 - t, y0 = y1 - t, z0 = z1 - t; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._z0 = z0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._z1 = z1;\n  return this;\n}\n", "export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n", "export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0], +_[0][1], +_[0][2]).cover(+_[1][0], +_[1][1], +_[1][2])\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0, this._z0], [this._x1, this._y1, this._z1]];\n}\n", "export default function(node, x0, y0, z0, x1, y1, z1) {\n  this.node = node;\n  this.x0 = x0;\n  this.y0 = y0;\n  this.z0 = z0;\n  this.x1 = x1;\n  this.y1 = y1;\n  this.z1 = z1;\n}\n", "import Octant from \"./octant.js\";\n\nexport default function(x, y, z, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1,\n      y1,\n      z1,\n      x2,\n      y2,\n      z2,\n      x3 = this._x1,\n      y3 = this._y1,\n      z3 = this._z1,\n      octs = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) octs.push(new Octant(node, x0, y0, z0, x3, y3, z3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius, y0 = y - radius, z0 = z - radius;\n    x3 = x + radius, y3 = y + radius, z3 = z + radius;\n    radius *= radius;\n  }\n\n  while (q = octs.pop()) {\n\n    // Stop searching if this octant can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (y1 = q.y0) > y3\n        || (z1 = q.z0) > z3\n        || (x2 = q.x1) < x0\n        || (y2 = q.y1) < y0\n        || (z2 = q.z1) < z0) continue;\n\n    // Bisect the current octant.\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2,\n          zm = (z1 + z2) / 2;\n\n      octs.push(\n        new Octant(node[7], xm, ym, zm, x2, y2, z2),\n        new Octant(node[6], x1, ym, zm, xm, y2, z2),\n        new Octant(node[5], xm, y1, zm, x2, ym, z2),\n        new Octant(node[4], x1, y1, zm, xm, ym, z2),\n        new Octant(node[3], xm, ym, z1, x2, y2, zm),\n        new Octant(node[2], x1, ym, z1, xm, y2, zm),\n        new Octant(node[1], xm, y1, z1, x2, ym, zm),\n        new Octant(node[0], x1, y1, z1, xm, ym, zm)\n      );\n\n      // Visit the closest octant first.\n      if (i = (z >= zm) << 2 | (y >= ym) << 1 | (x >= xm)) {\n        q = octs[octs.length - 1];\n        octs[octs.length - 1] = octs[octs.length - 1 - i];\n        octs[octs.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var dx = x - +this._x.call(null, node.data),\n          dy = y - +this._y.call(null, node.data),\n          dz = z - +this._z.call(null, node.data),\n          d2 = dx * dx + dy * dy + dz * dz;\n      if (d2 < radius) {\n        var d = Math.sqrt(radius = d2);\n        x0 = x - d, y0 = y - d, z0 = z - d;\n        x3 = x + d, y3 = y + d, z3 = z + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n", "export default function(d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d)) || isNaN(z = +this._z.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1 = this._x1,\n      y1 = this._y1,\n      z1 = this._z1,\n      x,\n      y,\n      z,\n      xm,\n      ym,\n      zm,\n      right,\n      bottom,\n      deep,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm; else z1 = zm;\n    if (!(parent = node, node = node[i = deep << 2 | bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 7] || parent[(i + 2) & 7] || parent[(i + 3) & 7] || parent[(i + 4) & 7] || parent[(i + 5) & 7] || parent[(i + 6) & 7] || parent[(i + 7) & 7]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3] || parent[4] || parent[5] || parent[6] || parent[7])\n      && node === (parent[7] || parent[6] || parent[5] || parent[4] || parent[3] || parent[2] || parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n", "export default function() {\n  return this._root;\n}\n", "export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n", "import Octant from \"./octant.js\";\n\nexport default function(callback) {\n  var octs = [], q, node = this._root, child, x0, y0, z0, x1, y1, z1;\n  if (node) octs.push(new Octant(node, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));\n  while (q = octs.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1) && node.length) {\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;\n      if (child = node[7]) octs.push(new Octant(child, xm, ym, zm, x1, y1, z1));\n      if (child = node[6]) octs.push(new Octant(child, x0, ym, zm, xm, y1, z1));\n      if (child = node[5]) octs.push(new Octant(child, xm, y0, zm, x1, ym, z1));\n      if (child = node[4]) octs.push(new Octant(child, x0, y0, zm, xm, ym, z1));\n      if (child = node[3]) octs.push(new Octant(child, xm, ym, z0, x1, y1, zm));\n      if (child = node[2]) octs.push(new Octant(child, x0, ym, z0, xm, y1, zm));\n      if (child = node[1]) octs.push(new Octant(child, xm, y0, z0, x1, ym, zm));\n      if (child = node[0]) octs.push(new Octant(child, x0, y0, z0, xm, ym, zm));\n    }\n  }\n  return this;\n}\n", "import Octant from \"./octant.js\";\n\nexport default function(callback) {\n  var octs = [], next = [], q;\n  if (this._root) octs.push(new Octant(this._root, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));\n  while (q = octs.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;\n      if (child = node[0]) octs.push(new Octant(child, x0, y0, z0, xm, ym, zm));\n      if (child = node[1]) octs.push(new Octant(child, xm, y0, z0, x1, ym, zm));\n      if (child = node[2]) octs.push(new Octant(child, x0, ym, z0, xm, y1, zm));\n      if (child = node[3]) octs.push(new Octant(child, xm, ym, z0, x1, y1, zm));\n      if (child = node[4]) octs.push(new Octant(child, x0, y0, zm, xm, ym, z1));\n      if (child = node[5]) octs.push(new Octant(child, xm, y0, zm, x1, ym, z1));\n      if (child = node[6]) octs.push(new Octant(child, x0, ym, zm, xm, y1, z1));\n      if (child = node[7]) octs.push(new Octant(child, xm, ym, zm, x1, y1, z1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.y0, q.z0, q.x1, q.y1, q.z1);\n  }\n  return this;\n}\n", "export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n", "export function defaultY(d) {\n  return d[1];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._y = _, this) : this._y;\n}\n", "export function defaultZ(d) {\n  return d[2];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._z = _, this) : this._z;\n}\n", "import tree_add, {addAll as tree_addAll} from \"./add.js\";\nimport tree_cover from \"./cover.js\";\nimport tree_data from \"./data.js\";\nimport tree_extent from \"./extent.js\";\nimport tree_find from \"./find.js\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove.js\";\nimport tree_root from \"./root.js\";\nimport tree_size from \"./size.js\";\nimport tree_visit from \"./visit.js\";\nimport tree_visitAfter from \"./visitAfter.js\";\nimport tree_x, {defaultX} from \"./x.js\";\nimport tree_y, {defaultY} from \"./y.js\";\nimport tree_z, {defaultZ} from \"./z.js\";\n\nexport default function octree(nodes, x, y, z) {\n  var tree = new Octree(x == null ? defaultX : x, y == null ? defaultY : y, z == null ? defaultZ : z, NaN, NaN, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Octree(x, y, z, x0, y0, z0, x1, y1, z1) {\n  this._x = x;\n  this._y = y;\n  this._z = z;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._z0 = z0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._z1 = z1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = octree.prototype = Octree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Octree(this._x, this._y, this._z, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(8)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 8; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(8)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\ntreeProto.z = tree_z;\n", "export default function(x) {\n  return function() {\n    return x;\n  };\n}\n", "export default function(random) {\n  return (random() - 0.5) * 1e-6;\n}\n", "import {binarytree} from \"d3-binarytree\";\nimport {quadtree} from \"d3-quadtree\";\nimport {octree} from \"d3-octree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nfunction z(d) {\n  return d.z + d.vz;\n}\n\nexport default function(radius) {\n  var nodes,\n      nDim,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        zi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree =\n          (nDim === 1 ? binarytree(nodes, x)\n          :(nDim === 2 ? quadtree(nodes, x, y)\n          :(nDim === 3 ? octree(nodes, x, y, z)\n          :null\n      ))).visitAfter(prepare);\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        if (nDim > 1) { yi = node.y + node.vy; }\n        if (nDim > 2) { zi = node.z + node.vz; }\n        tree.visit(apply);\n      }\n    }\n\n    function apply(treeNode, arg1, arg2, arg3, arg4, arg5, arg6) {\n      var args = [arg1, arg2, arg3, arg4, arg5, arg6];\n      var x0 = args[0],\n          y0 = args[1],\n          z0 = args[2],\n          x1 = args[nDim],\n          y1 = args[nDim+1],\n          z1 = args[nDim+2];\n\n      var data = treeNode.data, rj = treeNode.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = (nDim > 1 ? yi - data.y - data.vy : 0),\n              z = (nDim > 2 ? zi - data.z - data.vz : 0),\n              l = x * x + y * y + z * z;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(random), l += x * x;\n            if (nDim > 1 && y === 0) y = jiggle(random), l += y * y;\n            if (nDim > 2 && z === 0) z = jiggle(random), l += z * z;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            if (nDim > 1) { node.vy += (y *= l) * r; }\n            if (nDim > 2) { node.vz += (z *= l) * r; }\n\n            data.vx -= x * (r = 1 - r);\n            if (nDim > 1) { data.vy -= y * r; }\n            if (nDim > 2) { data.vz -= z * r; }\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r\n          || (nDim > 1 && (y0 > yi + r || y1 < yi - r))\n          || (nDim > 2 && (z0 > zi + r || z1 < zi - r));\n    }\n  }\n\n  function prepare(treeNode) {\n    if (treeNode.data) return treeNode.r = radii[treeNode.data.index];\n    for (var i = treeNode.r = 0; i < Math.pow(2, nDim); ++i) {\n      if (treeNode[i] && treeNode[i].r > treeNode.r) {\n        treeNode.r = treeNode[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(_nodes, ...args) {\n    nodes = _nodes;\n    random = args.find(arg => typeof arg === 'function') || Math.random;\n    nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n", "import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      nDim,\n      count,\n      bias,\n      random,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x = 0, y = 0, z = 0, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        if (nDim > 1) { y = target.y + target.vy - source.y - source.vy || jiggle(random); }\n        if (nDim > 2) { z = target.z + target.vz - source.z - source.vz || jiggle(random); }\n        l = Math.sqrt(x * x + y * y + z * z);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l, z *= l;\n\n        target.vx -= x * (b = bias[i]);\n        if (nDim > 1) { target.vy -= y * b; }\n        if (nDim > 2) { target.vz -= z * b; }\n\n        source.vx += x * (b = 1 - b);\n        if (nDim > 1) { source.vy += y * b; }\n        if (nDim > 2) { source.vz += z * b; }\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_nodes, ...args) {\n    nodes = _nodes;\n    random = args.find(arg => typeof arg === 'function') || Math.random;\n    nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n", "// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst a = 1664525;\nconst c = 1013904223;\nconst m = 4294967296; // 2^32\n\nexport default function() {\n  let s = 1;\n  return () => (s = (a * s + c) % m) / m;\n}\n", "import {dispatch} from \"d3-dispatch\";\nimport {timer} from \"d3-timer\";\nimport lcg from \"./lcg.js\";\n\nvar MAX_DIMENSIONS = 3;\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nexport function z(d) {\n  return d.z;\n}\n\nvar initialRadius = 10,\n    initialAngleRoll = Math.PI * (3 - Math.sqrt(5)), // Golden ratio angle\n    initialAngleYaw = Math.PI * 20 / (9 + Math.sqrt(221)); // Markov irrational number\n\nexport default function(nodes, numDimensions) {\n  numDimensions = numDimensions || 2;\n\n  var nDim = Math.min(MAX_DIMENSIONS, Math.max(1, Math.round(numDimensions))),\n      simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = new Map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\"),\n      random = lcg();\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i, n = nodes.length, node;\n\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.forEach(function (force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (nDim > 1) {\n          if (node.fy == null) node.y += node.vy *= velocityDecay;\n          else node.y = node.fy, node.vy = 0;\n        }\n        if (nDim > 2) {\n          if (node.fz == null) node.z += node.vz *= velocityDecay;\n          else node.z = node.fz, node.vz = 0;\n        }\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n      if (node.fz != null) node.z = node.fz;\n      if (isNaN(node.x) || (nDim > 1 && isNaN(node.y)) || (nDim > 2 && isNaN(node.z))) {\n        var radius = initialRadius * (nDim > 2 ? Math.cbrt(0.5 + i) : (nDim > 1 ? Math.sqrt(0.5 + i) : i)),\n          rollAngle = i * initialAngleRoll,\n          yawAngle = i * initialAngleYaw;\n\n        if (nDim === 1) {\n          node.x = radius;\n        } else if (nDim === 2) {\n          node.x = radius * Math.cos(rollAngle);\n          node.y = radius * Math.sin(rollAngle);\n        } else { // 3 dimensions: use spherical distribution along 2 irrational number angles\n          node.x = radius * Math.sin(rollAngle) * Math.cos(yawAngle);\n          node.y = radius * Math.cos(rollAngle);\n          node.z = radius * Math.sin(rollAngle) * Math.sin(yawAngle);\n        }\n      }\n      if (isNaN(node.vx) || (nDim > 1 && isNaN(node.vy)) || (nDim > 2 && isNaN(node.vz))) {\n        node.vx = 0;\n        if (nDim > 1) { node.vy = 0; }\n        if (nDim > 2) { node.vz = 0; }\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes, random, nDim);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    numDimensions: function(_) {\n      return arguments.length\n          ? (nDim = Math.min(MAX_DIMENSIONS, Math.max(1, Math.round(_))), forces.forEach(initializeForce), simulation)\n          : nDim;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    randomSource: function(_) {\n      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function() {\n      var args = Array.prototype.slice.call(arguments);\n      var x = args.shift() || 0,\n          y = (nDim > 1 ? args.shift() : null) || 0,\n          z = (nDim > 2 ? args.shift() : null) || 0,\n          radius = args.shift() || Infinity;\n\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          dz,\n          d2,\n          node,\n          closest;\n\n      radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - (node.y || 0);\n        dz = z - (node.z ||0);\n        d2 = dx * dx + dy * dy + dz * dz;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n", "import {binarytree} from \"d3-binarytree\";\nimport {quadtree} from \"d3-quadtree\";\nimport {octree} from \"d3-octree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport {x, y, z} from \"./simulation.js\";\n\nexport default function() {\n  var nodes,\n      nDim,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i,\n        n = nodes.length,\n        tree =\n            (nDim === 1 ? binarytree(nodes, x)\n            :(nDim === 2 ? quadtree(nodes, x, y)\n            :(nDim === 3 ? octree(nodes, x, y, z)\n            :null\n        ))).visitAfter(accumulate);\n\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    strengths = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(treeNode) {\n    var strength = 0, q, c, weight = 0, x, y, z, i;\n    var numChildren = treeNode.length;\n\n    // For internal nodes, accumulate forces from children.\n    if (numChildren) {\n      for (x = y = z = i = 0; i < numChildren; ++i) {\n        if ((q = treeNode[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * (q.x || 0), y += c * (q.y || 0), z += c * (q.z || 0);\n        }\n      }\n      strength *= Math.sqrt(4 / numChildren); // scale accumulated strength according to number of dimensions\n\n      treeNode.x = x / weight;\n      if (nDim > 1) { treeNode.y = y / weight; }\n      if (nDim > 2) { treeNode.z = z / weight; }\n    }\n\n    // For leaf nodes, accumulate forces from coincident nodes.\n    else {\n      q = treeNode;\n      q.x = q.data.x;\n      if (nDim > 1) { q.y = q.data.y; }\n      if (nDim > 2) { q.z = q.data.z; }\n      do strength += strengths[q.data.index];\n      while (q = q.next);\n    }\n\n    treeNode.value = strength;\n  }\n\n  function apply(treeNode, x1, arg1, arg2, arg3) {\n    if (!treeNode.value) return true;\n    var x2 = [arg1, arg2, arg3][nDim-1];\n\n    var x = treeNode.x - node.x,\n        y = (nDim > 1 ? treeNode.y - node.y : 0),\n        z = (nDim > 2 ? treeNode.z - node.z : 0),\n        w = x2 - x1,\n        l = x * x + y * y + z * z;\n\n    // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (nDim > 1 && y === 0) y = jiggle(random), l += y * y;\n        if (nDim > 2 && z === 0) z = jiggle(random), l += z * z;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * treeNode.value * alpha / l;\n        if (nDim > 1) { node.vy += y * treeNode.value * alpha / l; }\n        if (nDim > 2) { node.vz += z * treeNode.value * alpha / l; }\n      }\n      return true;\n    }\n\n    // Otherwise, process points directly.\n    else if (treeNode.length || l >= distanceMax2) return;\n\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (treeNode.data !== node || treeNode.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (nDim > 1 && y === 0) y = jiggle(random), l += y * y;\n      if (nDim > 2 && z === 0) z = jiggle(random), l += z * z;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (treeNode.data !== node) {\n      w = strengths[treeNode.data.index] * alpha / l;\n      node.vx += x * w;\n      if (nDim > 1) { node.vy += y * w; }\n      if (nDim > 2) { node.vz += z * w; }\n    } while (treeNode = treeNode.next);\n  }\n\n  force.initialize = function(_nodes, ...args) {\n    nodes = _nodes;\n    random = args.find(arg => typeof arg === 'function') || Math.random;\n    nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function(_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function(_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function(_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}\n", "import constant from \"./constant.js\";\n\nexport default function(radius, x, y, z) {\n  var nodes,\n      nDim,\n      strength = constant(0.1),\n      strengths,\n      radiuses;\n\n  if (typeof radius !== \"function\") radius = constant(+radius);\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n  if (z == null) z = 0;\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length; i < n; ++i) {\n      var node = nodes[i],\n          dx = node.x - x || 1e-6,\n          dy = (node.y || 0) - y || 1e-6,\n          dz = (node.z || 0) - z || 1e-6,\n          r = Math.sqrt(dx * dx + dy * dy + dz * dz),\n          k = (radiuses[i] - r) * strengths[i] * alpha / r;\n      node.vx += dx * k;\n      if (nDim>1) { node.vy += dy * k; }\n      if (nDim>2) { node.vz += dz * k; }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    radiuses = new Array(n);\n    for (i = 0; i < n; ++i) {\n      radiuses[i] = +radius(nodes[i], i, nodes);\n      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(initNodes, ...args) {\n    nodes = initNodes;\n    nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.z = function(_) {\n    return arguments.length ? (z = +_, force) : z;\n  };\n\n  return force;\n}\n", "import constant from \"./constant.js\";\n\nexport default function(x) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      xz;\n\n  if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    xz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n  };\n\n  return force;\n}\n", "import constant from \"./constant.js\";\n\nexport default function(y) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      yz;\n\n  if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    yz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n  };\n\n  return force;\n}\n", "import constant from \"./constant.js\";\n\nexport default function(z) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      zz;\n\n  if (typeof z !== \"function\") z = constant(z == null ? 0 : +z);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vz += (zz[i] - node.z) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    zz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(zz[i] = +z(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.z = function(_) {\n    return arguments.length ? (z = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : z;\n  };\n\n  return force;\n}\n"],
  "mappings": ";;;;;;;;AAAe,SAAR,eAAiBA,IAAGC,IAAGC,IAAG;AAC/B,MAAI,OAAO,WAAW;AAEtB,MAAIF,MAAK;AAAM,IAAAA,KAAI;AACnB,MAAIC,MAAK;AAAM,IAAAA,KAAI;AACnB,MAAIC,MAAK;AAAM,IAAAA,KAAI;AAEnB,WAAS,QAAQ;AACf,QAAI,GACA,IAAI,MAAM,QACV,MACA,KAAK,GACL,KAAK,GACL,KAAK;AAET,SAAK,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACtB,aAAO,MAAM,CAAC,GAAG,MAAM,KAAK,KAAK,GAAG,MAAM,KAAK,KAAK,GAAG,MAAM,KAAK,KAAK;AAAA,IACzE;AAEA,SAAK,MAAM,KAAK,IAAIF,MAAK,UAAU,MAAM,KAAK,IAAIC,MAAK,UAAU,MAAM,KAAK,IAAIC,MAAK,UAAU,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAChH,aAAO,MAAM,CAAC;AACd,UAAI,IAAI;AAAE,aAAK,KAAK;AAAA,MAAG;AACvB,UAAI,IAAI;AAAE,aAAK,KAAK;AAAA,MAAI;AACxB,UAAI,IAAI;AAAE,aAAK,KAAK;AAAA,MAAI;AAAA,IAC1B;AAAA,EACF;AAEA,QAAM,aAAa,SAAS,GAAG;AAC7B,YAAQ;AAAA,EACV;AAEA,QAAM,IAAI,SAAS,GAAG;AACpB,WAAO,UAAU,UAAUF,KAAI,CAAC,GAAG,SAASA;AAAA,EAC9C;AAEA,QAAM,IAAI,SAAS,GAAG;AACpB,WAAO,UAAU,UAAUC,KAAI,CAAC,GAAG,SAASA;AAAA,EAC9C;AAEA,QAAM,IAAI,SAAS,GAAG;AACpB,WAAO,UAAU,UAAUC,KAAI,CAAC,GAAG,SAASA;AAAA,EAC9C;AAEA,QAAM,WAAW,SAAS,GAAG;AAC3B,WAAO,UAAU,UAAU,WAAW,CAAC,GAAG,SAAS;AAAA,EACrD;AAEA,SAAO;AACT;;;AChDe,SAAR,YAAiB,GAAG;AACzB,QAAMC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC;AAC/B,SAAO,IAAI,KAAK,MAAMA,EAAC,GAAGA,IAAG,CAAC;AAChC;AAEA,SAAS,IAAI,MAAMA,IAAG,GAAG;AACvB,MAAI,MAAMA,EAAC;AAAG,WAAO;AAErB,MAAI,QACA,OAAO,KAAK,OACZ,OAAO,EAAC,MAAM,EAAC,GACf,KAAK,KAAK,KACV,KAAK,KAAK,KACV,IACA,IACA,OACA,GACA;AAGJ,MAAI,CAAC;AAAM,WAAO,KAAK,QAAQ,MAAM;AAGrC,SAAO,KAAK,QAAQ;AAClB,QAAI,QAAQA,OAAM,MAAM,KAAK,MAAM;AAAI,WAAK;AAAA;AAAS,WAAK;AAC1D,QAAI,SAAS,MAAM,EAAE,OAAO,KAAK,IAAI,CAAC,KAAK;AAAI,aAAO,OAAO,CAAC,IAAI,MAAM;AAAA,EAC1E;AAGA,OAAK,CAAC,KAAK,GAAG,KAAK,MAAM,KAAK,IAAI;AAClC,MAAIA,OAAM;AAAI,WAAO,KAAK,OAAO,MAAM,SAAS,OAAO,CAAC,IAAI,OAAO,KAAK,QAAQ,MAAM;AAGtF,KAAG;AACD,aAAS,SAAS,OAAO,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,MAAM,CAAC;AACrE,QAAI,QAAQA,OAAM,MAAM,KAAK,MAAM;AAAI,WAAK;AAAA;AAAS,WAAK;AAAA,EAC5D,UAAU,IAAI,CAAC,YAAY,IAAI,EAAE,MAAM;AACvC,SAAO,OAAO,CAAC,IAAI,MAAM,OAAO,CAAC,IAAI,MAAM;AAC7C;AAEO,SAAS,OAAO,MAAM;AAC3B,MAAI,CAAC,MAAM,QAAQ,IAAI;AAAG,WAAO,MAAM,KAAK,IAAI;AAChD,QAAM,IAAI,KAAK;AACf,QAAM,KAAK,IAAI,aAAa,CAAC;AAC7B,MAAI,KAAK,UACL,KAAK;AAGT,WAAS,IAAI,GAAGA,IAAG,IAAI,GAAG,EAAE,GAAG;AAC7B,QAAI,MAAMA,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,KAAK,CAAC,CAAC,CAAC;AAAG;AAC7C,OAAG,CAAC,IAAIA;AACR,QAAIA,KAAI;AAAI,WAAKA;AACjB,QAAIA,KAAI;AAAI,WAAKA;AAAA,EACnB;AAGA,MAAI,KAAK;AAAI,WAAO;AAGpB,OAAK,MAAM,EAAE,EAAE,MAAM,EAAE;AAGvB,WAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,QAAI,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AAAA,EAC1B;AAEA,SAAO;AACT;;;ACnEe,SAAR,cAAiBC,IAAG;AACzB,MAAI,MAAMA,KAAI,CAACA,EAAC;AAAG,WAAO;AAE1B,MAAI,KAAK,KAAK,KACV,KAAK,KAAK;AAKd,MAAI,MAAM,EAAE,GAAG;AACb,UAAM,KAAK,KAAK,MAAMA,EAAC,KAAK;AAAA,EAC9B,OAGK;AACH,QAAIC,KAAI,KAAK,MAAM,GACf,OAAO,KAAK,OACZ,QACA;AAEJ,WAAO,KAAKD,MAAKA,MAAK,IAAI;AACxB,UAAI,EAAEA,KAAI;AACV,eAAS,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,IAAI,MAAM,OAAO,QAAQC,MAAK;AAC7D,cAAQ,GAAG;AAAA,QACT,KAAK;AAAG,eAAK,KAAKA;AAAG;AAAA,QACrB,KAAK;AAAG,eAAK,KAAKA;AAAG;AAAA,MACvB;AAAA,IACF;AAEA,QAAI,KAAK,SAAS,KAAK,MAAM;AAAQ,WAAK,QAAQ;AAAA,EACpD;AAEA,OAAK,MAAM;AACX,OAAK,MAAM;AACX,SAAO;AACT;;;ACnCe,SAAR,eAAmB;AACxB,MAAI,OAAO,CAAC;AACZ,OAAK,MAAM,SAAS,MAAM;AACxB,QAAI,CAAC,KAAK;AAAQ;AAAG,aAAK,KAAK,KAAK,IAAI;AAAA,aAAU,OAAO,KAAK;AAAA,EAChE,CAAC;AACD,SAAO;AACT;;;ACNe,SAAR,eAAiB,GAAG;AACzB,SAAO,UAAU,SACX,KAAK,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IACnC,MAAM,KAAK,GAAG,IAAI,SAAY,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC;AAC7D;;;ACJe,SAAR,aAAiB,MAAM,IAAI,IAAI;AACpC,OAAK,OAAO;AACZ,OAAK,KAAK;AACV,OAAK,KAAK;AACZ;;;ACFe,SAAR,aAAiBC,IAAG,QAAQ;AACjC,MAAI,MACA,KAAK,KAAK,KACV,IACAC,KACAC,MAAK,KAAK,KACV,SAAS,CAAC,GACV,OAAO,KAAK,OACZ,GACA;AAEJ,MAAI;AAAM,WAAO,KAAK,IAAI,aAAK,MAAM,IAAIA,GAAE,CAAC;AAC5C,MAAI,UAAU;AAAM,aAAS;AAAA,OACxB;AACH,SAAKF,KAAI;AACT,IAAAE,MAAKF,KAAI;AAAA,EACX;AAEA,SAAO,IAAI,OAAO,IAAI,GAAG;AAGvB,QAAI,EAAE,OAAO,EAAE,UACP,KAAK,EAAE,MAAME,QACbD,MAAK,EAAE,MAAM;AAAI;AAGzB,QAAI,KAAK,QAAQ;AACf,UAAI,MAAM,KAAKA,OAAM;AAErB,aAAO;AAAA,QACL,IAAI,aAAK,KAAK,CAAC,GAAG,IAAIA,GAAE;AAAA,QACxB,IAAI,aAAK,KAAK,CAAC,GAAG,IAAI,EAAE;AAAA,MAC1B;AAGA,UAAI,IAAI,EAAED,MAAK,KAAK;AAClB,YAAI,OAAO,OAAO,SAAS,CAAC;AAC5B,eAAO,OAAO,SAAS,CAAC,IAAI,OAAO,OAAO,SAAS,IAAI,CAAC;AACxD,eAAO,OAAO,SAAS,IAAI,CAAC,IAAI;AAAA,MAClC;AAAA,IACF,OAGK;AACH,UAAI,IAAI,KAAK,IAAIA,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,KAAK,IAAI,CAAC;AACnD,UAAI,IAAI,QAAQ;AACd,iBAAS;AACT,aAAKA,KAAI;AACT,QAAAE,MAAKF,KAAI;AACT,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;;;ACzDe,SAAR,eAAiB,GAAG;AACzB,MAAI,MAAMG,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC,CAAC;AAAG,WAAO;AAE9C,MAAI,QACA,OAAO,KAAK,OACZ,UACA,UACA,MACA,KAAK,KAAK,KACV,KAAK,KAAK,KACVA,IACA,IACA,OACA,GACA;AAGJ,MAAI,CAAC;AAAM,WAAO;AAIlB,MAAI,KAAK;AAAQ,WAAO,MAAM;AAC5B,UAAI,QAAQA,OAAM,MAAM,KAAK,MAAM;AAAI,aAAK;AAAA;AAAS,aAAK;AAC1D,UAAI,EAAE,SAAS,MAAM,OAAO,KAAK,IAAI,CAAC,KAAK;AAAI,eAAO;AACtD,UAAI,CAAC,KAAK;AAAQ;AAClB,UAAI,OAAQ,IAAI,IAAK,CAAC;AAAG,mBAAW,QAAQ,IAAI;AAAA,IAClD;AAGA,SAAO,KAAK,SAAS;AAAG,QAAI,EAAE,WAAW,MAAM,OAAO,KAAK;AAAO,aAAO;AACzE,MAAI,OAAO,KAAK;AAAM,WAAO,KAAK;AAGlC,MAAI;AAAU,WAAQ,OAAO,SAAS,OAAO,OAAO,OAAO,SAAS,MAAO;AAG3E,MAAI,CAAC;AAAQ,WAAO,KAAK,QAAQ,MAAM;AAGvC,SAAO,OAAO,CAAC,IAAI,OAAO,OAAO,OAAO,CAAC;AAGzC,OAAK,OAAO,OAAO,CAAC,KAAK,OAAO,CAAC,MAC1B,UAAU,OAAO,CAAC,KAAK,OAAO,CAAC,MAC/B,CAAC,KAAK,QAAQ;AACnB,QAAI;AAAU,eAAS,CAAC,IAAI;AAAA;AACvB,WAAK,QAAQ;AAAA,EACpB;AAEA,SAAO;AACT;AAEO,SAAS,UAAU,MAAM;AAC9B,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,EAAE;AAAG,SAAK,OAAO,KAAK,CAAC,CAAC;AAChE,SAAO;AACT;;;ACvDe,SAAR,eAAmB;AACxB,SAAO,KAAK;AACd;;;ACFe,SAAR,eAAmB;AACxB,MAAI,OAAO;AACX,OAAK,MAAM,SAAS,MAAM;AACxB,QAAI,CAAC,KAAK;AAAQ;AAAG,UAAE;AAAA,aAAa,OAAO,KAAK;AAAA,EAClD,CAAC;AACD,SAAO;AACT;;;ACJe,SAAR,cAAiB,UAAU;AAChC,MAAI,SAAS,CAAC,GAAG,GAAG,OAAO,KAAK,OAAO,OAAO,IAAI;AAClD,MAAI;AAAM,WAAO,KAAK,IAAI,aAAK,MAAM,KAAK,KAAK,KAAK,GAAG,CAAC;AACxD,SAAO,IAAI,OAAO,IAAI,GAAG;AACvB,QAAI,CAAC,SAAS,OAAO,EAAE,MAAM,KAAK,EAAE,IAAI,KAAK,EAAE,EAAE,KAAK,KAAK,QAAQ;AACjE,UAAI,MAAM,KAAK,MAAM;AACrB,UAAI,QAAQ,KAAK,CAAC;AAAG,eAAO,KAAK,IAAI,aAAK,OAAO,IAAI,EAAE,CAAC;AACxD,UAAI,QAAQ,KAAK,CAAC;AAAG,eAAO,KAAK,IAAI,aAAK,OAAO,IAAI,EAAE,CAAC;AAAA,IAC1D;AAAA,EACF;AACA,SAAO;AACT;;;ACXe,SAAR,mBAAiB,UAAU;AAChC,MAAI,SAAS,CAAC,GAAG,OAAO,CAAC,GAAG;AAC5B,MAAI,KAAK;AAAO,WAAO,KAAK,IAAI,aAAK,KAAK,OAAO,KAAK,KAAK,KAAK,GAAG,CAAC;AACpE,SAAO,IAAI,OAAO,IAAI,GAAG;AACvB,QAAI,OAAO,EAAE;AACb,QAAI,KAAK,QAAQ;AACf,UAAI,OAAO,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,MAAM,KAAK,MAAM;AAClD,UAAI,QAAQ,KAAK,CAAC;AAAG,eAAO,KAAK,IAAI,aAAK,OAAO,IAAI,EAAE,CAAC;AACxD,UAAI,QAAQ,KAAK,CAAC;AAAG,eAAO,KAAK,IAAI,aAAK,OAAO,IAAI,EAAE,CAAC;AAAA,IAC1D;AACA,SAAK,KAAK,CAAC;AAAA,EACb;AACA,SAAO,IAAI,KAAK,IAAI,GAAG;AACrB,aAAS,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;AAAA,EAC7B;AACA,SAAO;AACT;;;AClBO,SAAS,SAAS,GAAG;AAC1B,SAAO,EAAE,CAAC;AACZ;AAEe,SAAR,UAAiB,GAAG;AACzB,SAAO,UAAU,UAAU,KAAK,KAAK,GAAG,QAAQ,KAAK;AACvD;;;ACMe,SAAR,WAA4B,OAAOC,IAAG;AAC3C,MAAI,OAAO,IAAI,WAAWA,MAAK,OAAO,WAAWA,IAAG,KAAK,GAAG;AAC5D,SAAO,SAAS,OAAO,OAAO,KAAK,OAAO,KAAK;AACjD;AAEA,SAAS,WAAWA,IAAG,IAAI,IAAI;AAC7B,OAAK,KAAKA;AACV,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,QAAQ;AACf;AAEA,SAAS,UAAU,MAAM;AACvB,MAAI,OAAO,EAAC,MAAM,KAAK,KAAI,GAAG,OAAO;AACrC,SAAO,OAAO,KAAK;AAAM,WAAO,KAAK,OAAO,EAAC,MAAM,KAAK,KAAI;AAC5D,SAAO;AACT;AAEA,IAAI,YAAY,WAAW,YAAY,WAAW;AAElD,UAAU,OAAO,WAAW;AAC1B,MAAI,OAAO,IAAI,WAAW,KAAK,IAAI,KAAK,KAAK,KAAK,GAAG,GACjD,OAAO,KAAK,OACZ,OACA;AAEJ,MAAI,CAAC;AAAM,WAAO;AAElB,MAAI,CAAC,KAAK;AAAQ,WAAO,KAAK,QAAQ,UAAU,IAAI,GAAG;AAEvD,UAAQ,CAAC,EAAC,QAAQ,MAAM,QAAQ,KAAK,QAAQ,IAAI,MAAM,CAAC,EAAC,CAAC;AAC1D,SAAO,OAAO,MAAM,IAAI,GAAG;AACzB,aAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,UAAI,QAAQ,KAAK,OAAO,CAAC,GAAG;AAC1B,YAAI,MAAM;AAAQ,gBAAM,KAAK,EAAC,QAAQ,OAAO,QAAQ,KAAK,OAAO,CAAC,IAAI,IAAI,MAAM,CAAC,EAAC,CAAC;AAAA;AAC9E,eAAK,OAAO,CAAC,IAAI,UAAU,KAAK;AAAA,MACvC;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEA,UAAU,MAAM;AAChB,UAAU,SAAS;AACnB,UAAU,QAAQ;AAClB,UAAU,OAAO;AACjB,UAAU,SAAS;AACnB,UAAU,OAAO;AACjB,UAAU,SAAS;AACnB,UAAU,YAAY;AACtB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,QAAQ;AAClB,UAAU,aAAa;AACvB,UAAU,IAAI;;;ACnEC,SAARC,aAAiB,GAAG;AACzB,QAAMC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC,GAC3BC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC,GACzBC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC;AAC7B,SAAOC,KAAI,KAAK,MAAMH,IAAGC,IAAGC,EAAC,GAAGF,IAAGC,IAAGC,IAAG,CAAC;AAC5C;AAEA,SAASC,KAAI,MAAMH,IAAGC,IAAGC,IAAG,GAAG;AAC7B,MAAI,MAAMF,EAAC,KAAK,MAAMC,EAAC,KAAK,MAAMC,EAAC;AAAG,WAAO;AAE7C,MAAI,QACA,OAAO,KAAK,OACZ,OAAO,EAAC,MAAM,EAAC,GACf,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,IACA,IACA,IACA,IACA,IACA,IACA,OACA,QACA,MACA,GACA;AAGJ,MAAI,CAAC;AAAM,WAAO,KAAK,QAAQ,MAAM;AAGrC,SAAO,KAAK,QAAQ;AAClB,QAAI,QAAQF,OAAM,MAAM,KAAK,MAAM;AAAI,WAAK;AAAA;AAAS,WAAK;AAC1D,QAAI,SAASC,OAAM,MAAM,KAAK,MAAM;AAAI,WAAK;AAAA;AAAS,WAAK;AAC3D,QAAI,OAAOC,OAAM,MAAM,KAAK,MAAM;AAAI,WAAK;AAAA;AAAS,WAAK;AACzD,QAAI,SAAS,MAAM,EAAE,OAAO,KAAK,IAAI,QAAQ,IAAI,UAAU,IAAI,KAAK;AAAI,aAAO,OAAO,CAAC,IAAI,MAAM;AAAA,EACnG;AAGA,OAAK,CAAC,KAAK,GAAG,KAAK,MAAM,KAAK,IAAI;AAClC,OAAK,CAAC,KAAK,GAAG,KAAK,MAAM,KAAK,IAAI;AAClC,OAAK,CAAC,KAAK,GAAG,KAAK,MAAM,KAAK,IAAI;AAClC,MAAIF,OAAM,MAAMC,OAAM,MAAMC,OAAM;AAAI,WAAO,KAAK,OAAO,MAAM,SAAS,OAAO,CAAC,IAAI,OAAO,KAAK,QAAQ,MAAM;AAG9G,KAAG;AACD,aAAS,SAAS,OAAO,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,MAAM,CAAC;AACrE,QAAI,QAAQF,OAAM,MAAM,KAAK,MAAM;AAAI,WAAK;AAAA;AAAS,WAAK;AAC1D,QAAI,SAASC,OAAM,MAAM,KAAK,MAAM;AAAI,WAAK;AAAA;AAAS,WAAK;AAC3D,QAAI,OAAOC,OAAM,MAAM,KAAK,MAAM;AAAI,WAAK;AAAA;AAAS,WAAK;AAAA,EAC3D,UAAU,IAAI,QAAQ,IAAI,UAAU,IAAI,YAAY,KAAK,MAAM,OAAO,KAAK,MAAM,OAAO,IAAK,MAAM;AACnG,SAAO,OAAO,CAAC,IAAI,MAAM,OAAO,CAAC,IAAI,MAAM;AAC7C;AAEO,SAASE,QAAO,MAAM;AAC3B,MAAI,CAAC,MAAM,QAAQ,IAAI;AAAG,WAAO,MAAM,KAAK,IAAI;AAChD,QAAM,IAAI,KAAK;AACf,QAAM,KAAK,IAAI,aAAa,CAAC;AAC7B,QAAM,KAAK,IAAI,aAAa,CAAC;AAC7B,QAAM,KAAK,IAAI,aAAa,CAAC;AAC7B,MAAI,KAAK,UACL,KAAK,UACL,KAAK,UACL,KAAK,WACL,KAAK,WACL,KAAK;AAGT,WAAS,IAAI,GAAG,GAAGJ,IAAGC,IAAGC,IAAG,IAAI,GAAG,EAAE,GAAG;AACtC,QAAI,MAAMF,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,MAAMC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC,CAAC,KAAK,MAAMC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC,CAAC;AAAG;AAC3H,OAAG,CAAC,IAAIF;AACR,OAAG,CAAC,IAAIC;AACR,OAAG,CAAC,IAAIC;AACR,QAAIF,KAAI;AAAI,WAAKA;AACjB,QAAIA,KAAI;AAAI,WAAKA;AACjB,QAAIC,KAAI;AAAI,WAAKA;AACjB,QAAIA,KAAI;AAAI,WAAKA;AACjB,QAAIC,KAAI;AAAI,WAAKA;AACjB,QAAIA,KAAI;AAAI,WAAKA;AAAA,EACnB;AAGA,MAAI,KAAK,MAAM,KAAK,MAAM,KAAK;AAAI,WAAO;AAG1C,OAAK,MAAM,IAAI,IAAI,EAAE,EAAE,MAAM,IAAI,IAAI,EAAE;AAGvC,WAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,IAAAC,KAAI,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AAAA,EACxC;AAEA,SAAO;AACT;;;ACjGe,SAARE,eAAiBC,IAAGC,IAAGC,IAAG;AAC/B,MAAI,MAAMF,KAAI,CAACA,EAAC,KAAK,MAAMC,KAAI,CAACA,EAAC,KAAK,MAAMC,KAAI,CAACA,EAAC;AAAG,WAAO;AAE5D,MAAI,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK;AAKd,MAAI,MAAM,EAAE,GAAG;AACb,UAAM,KAAK,KAAK,MAAMF,EAAC,KAAK;AAC5B,UAAM,KAAK,KAAK,MAAMC,EAAC,KAAK;AAC5B,UAAM,KAAK,KAAK,MAAMC,EAAC,KAAK;AAAA,EAC9B,OAGK;AACH,QAAI,IAAI,KAAK,MAAM,GACf,OAAO,KAAK,OACZ,QACA;AAEJ,WAAO,KAAKF,MAAKA,MAAK,MAAM,KAAKC,MAAKA,MAAK,MAAM,KAAKC,MAAKA,MAAK,IAAI;AAClE,WAAKA,KAAI,OAAO,KAAKD,KAAI,OAAO,IAAKD,KAAI;AACzC,eAAS,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,IAAI,MAAM,OAAO,QAAQ,KAAK;AAC7D,cAAQ,GAAG;AAAA,QACT,KAAK;AAAG,eAAK,KAAK,GAAG,KAAK,KAAK,GAAG,KAAK,KAAK;AAAG;AAAA,QAC/C,KAAK;AAAG,eAAK,KAAK,GAAG,KAAK,KAAK,GAAG,KAAK,KAAK;AAAG;AAAA,QAC/C,KAAK;AAAG,eAAK,KAAK,GAAG,KAAK,KAAK,GAAG,KAAK,KAAK;AAAG;AAAA,QAC/C,KAAK;AAAG,eAAK,KAAK,GAAG,KAAK,KAAK,GAAG,KAAK,KAAK;AAAG;AAAA,QAC/C,KAAK;AAAG,eAAK,KAAK,GAAG,KAAK,KAAK,GAAG,KAAK,KAAK;AAAG;AAAA,QAC/C,KAAK;AAAG,eAAK,KAAK,GAAG,KAAK,KAAK,GAAG,KAAK,KAAK;AAAG;AAAA,QAC/C,KAAK;AAAG,eAAK,KAAK,GAAG,KAAK,KAAK,GAAG,KAAK,KAAK;AAAG;AAAA,QAC/C,KAAK;AAAG,eAAK,KAAK,GAAG,KAAK,KAAK,GAAG,KAAK,KAAK;AAAG;AAAA,MACjD;AAAA,IACF;AAEA,QAAI,KAAK,SAAS,KAAK,MAAM;AAAQ,WAAK,QAAQ;AAAA,EACpD;AAEA,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,MAAM;AACX,SAAO;AACT;;;ACnDe,SAARG,gBAAmB;AACxB,MAAI,OAAO,CAAC;AACZ,OAAK,MAAM,SAAS,MAAM;AACxB,QAAI,CAAC,KAAK;AAAQ;AAAG,aAAK,KAAK,KAAK,IAAI;AAAA,aAAU,OAAO,KAAK;AAAA,EAChE,CAAC;AACD,SAAO;AACT;;;ACNe,SAARC,gBAAiB,GAAG;AACzB,SAAO,UAAU,SACX,KAAK,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAC3E,MAAM,KAAK,GAAG,IAAI,SAAY,CAAC,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,GAAG,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,CAAC;AACrG;;;ACJe,SAAR,eAAiB,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACpD,OAAK,OAAO;AACZ,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AACZ;;;ACNe,SAARC,cAAiBC,IAAGC,IAAGC,IAAG,QAAQ;AACvC,MAAI,MACA,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,IACA,IACA,IACAC,KACAC,KACAC,KACAC,MAAK,KAAK,KACVC,MAAK,KAAK,KACVC,MAAK,KAAK,KACV,OAAO,CAAC,GACR,OAAO,KAAK,OACZ,GACA;AAEJ,MAAI;AAAM,SAAK,KAAK,IAAI,eAAO,MAAM,IAAI,IAAI,IAAIF,KAAIC,KAAIC,GAAE,CAAC;AAC5D,MAAI,UAAU;AAAM,aAAS;AAAA,OACxB;AACH,SAAKR,KAAI,QAAQ,KAAKC,KAAI,QAAQ,KAAKC,KAAI;AAC3C,IAAAI,MAAKN,KAAI,QAAQO,MAAKN,KAAI,QAAQO,MAAKN,KAAI;AAC3C,cAAU;AAAA,EACZ;AAEA,SAAO,IAAI,KAAK,IAAI,GAAG;AAGrB,QAAI,EAAE,OAAO,EAAE,UACP,KAAK,EAAE,MAAMI,QACb,KAAK,EAAE,MAAMC,QACb,KAAK,EAAE,MAAMC,QACbL,MAAK,EAAE,MAAM,OACbC,MAAK,EAAE,MAAM,OACbC,MAAK,EAAE,MAAM;AAAI;AAGzB,QAAI,KAAK,QAAQ;AACf,UAAI,MAAM,KAAKF,OAAM,GACjB,MAAM,KAAKC,OAAM,GACjB,MAAM,KAAKC,OAAM;AAErB,WAAK;AAAA,QACH,IAAI,eAAO,KAAK,CAAC,GAAG,IAAI,IAAI,IAAIF,KAAIC,KAAIC,GAAE;AAAA,QAC1C,IAAI,eAAO,KAAK,CAAC,GAAG,IAAI,IAAI,IAAI,IAAID,KAAIC,GAAE;AAAA,QAC1C,IAAI,eAAO,KAAK,CAAC,GAAG,IAAI,IAAI,IAAIF,KAAI,IAAIE,GAAE;AAAA,QAC1C,IAAI,eAAO,KAAK,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,IAAIA,GAAE;AAAA,QAC1C,IAAI,eAAO,KAAK,CAAC,GAAG,IAAI,IAAI,IAAIF,KAAIC,KAAI,EAAE;AAAA,QAC1C,IAAI,eAAO,KAAK,CAAC,GAAG,IAAI,IAAI,IAAI,IAAIA,KAAI,EAAE;AAAA,QAC1C,IAAI,eAAO,KAAK,CAAC,GAAG,IAAI,IAAI,IAAID,KAAI,IAAI,EAAE;AAAA,QAC1C,IAAI,eAAO,KAAK,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MAC5C;AAGA,UAAI,KAAKD,MAAK,OAAO,KAAKD,MAAK,OAAO,IAAKD,MAAK,IAAK;AACnD,YAAI,KAAK,KAAK,SAAS,CAAC;AACxB,aAAK,KAAK,SAAS,CAAC,IAAI,KAAK,KAAK,SAAS,IAAI,CAAC;AAChD,aAAK,KAAK,SAAS,IAAI,CAAC,IAAI;AAAA,MAC9B;AAAA,IACF,OAGK;AACH,UAAI,KAAKA,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,KAAK,IAAI,GACtC,KAAKC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,KAAK,IAAI,GACtC,KAAKC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,KAAK,IAAI,GACtC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,UAAI,KAAK,QAAQ;AACf,YAAI,IAAI,KAAK,KAAK,SAAS,EAAE;AAC7B,aAAKF,KAAI,GAAG,KAAKC,KAAI,GAAG,KAAKC,KAAI;AACjC,QAAAI,MAAKN,KAAI,GAAGO,MAAKN,KAAI,GAAGO,MAAKN,KAAI;AACjC,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;;;ACjFe,SAARO,gBAAiB,GAAG;AACzB,MAAI,MAAMC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC,CAAC,KAAK,MAAMC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC,CAAC,KAAK,MAAMC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC,CAAC;AAAG,WAAO;AAExH,MAAI,QACA,OAAO,KAAK,OACZ,UACA,UACA,MACA,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACVF,IACAC,IACAC,IACA,IACA,IACA,IACA,OACA,QACA,MACA,GACA;AAGJ,MAAI,CAAC;AAAM,WAAO;AAIlB,MAAI,KAAK;AAAQ,WAAO,MAAM;AAC5B,UAAI,QAAQF,OAAM,MAAM,KAAK,MAAM;AAAI,aAAK;AAAA;AAAS,aAAK;AAC1D,UAAI,SAASC,OAAM,MAAM,KAAK,MAAM;AAAI,aAAK;AAAA;AAAS,aAAK;AAC3D,UAAI,OAAOC,OAAM,MAAM,KAAK,MAAM;AAAI,aAAK;AAAA;AAAS,aAAK;AACzD,UAAI,EAAE,SAAS,MAAM,OAAO,KAAK,IAAI,QAAQ,IAAI,UAAU,IAAI,KAAK;AAAI,eAAO;AAC/E,UAAI,CAAC,KAAK;AAAQ;AAClB,UAAI,OAAQ,IAAI,IAAK,CAAC,KAAK,OAAQ,IAAI,IAAK,CAAC,KAAK,OAAQ,IAAI,IAAK,CAAC,KAAK,OAAQ,IAAI,IAAK,CAAC,KAAK,OAAQ,IAAI,IAAK,CAAC,KAAK,OAAQ,IAAI,IAAK,CAAC,KAAK,OAAQ,IAAI,IAAK,CAAC;AAAG,mBAAW,QAAQ,IAAI;AAAA,IAC5L;AAGA,SAAO,KAAK,SAAS;AAAG,QAAI,EAAE,WAAW,MAAM,OAAO,KAAK;AAAO,aAAO;AACzE,MAAI,OAAO,KAAK;AAAM,WAAO,KAAK;AAGlC,MAAI;AAAU,WAAQ,OAAO,SAAS,OAAO,OAAO,OAAO,SAAS,MAAO;AAG3E,MAAI,CAAC;AAAQ,WAAO,KAAK,QAAQ,MAAM;AAGvC,SAAO,OAAO,CAAC,IAAI,OAAO,OAAO,OAAO,CAAC;AAGzC,OAAK,OAAO,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,MACxG,UAAU,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,MAC7G,CAAC,KAAK,QAAQ;AACnB,QAAI;AAAU,eAAS,CAAC,IAAI;AAAA;AACvB,WAAK,QAAQ;AAAA,EACpB;AAEA,SAAO;AACT;AAEO,SAASC,WAAU,MAAM;AAC9B,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,EAAE;AAAG,SAAK,OAAO,KAAK,CAAC,CAAC;AAChE,SAAO;AACT;;;ACnEe,SAARC,gBAAmB;AACxB,SAAO,KAAK;AACd;;;ACFe,SAARC,gBAAmB;AACxB,MAAI,OAAO;AACX,OAAK,MAAM,SAAS,MAAM;AACxB,QAAI,CAAC,KAAK;AAAQ;AAAG,UAAE;AAAA,aAAa,OAAO,KAAK;AAAA,EAClD,CAAC;AACD,SAAO;AACT;;;ACJe,SAARC,eAAiB,UAAU;AAChC,MAAI,OAAO,CAAC,GAAG,GAAG,OAAO,KAAK,OAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAChE,MAAI;AAAM,SAAK,KAAK,IAAI,eAAO,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,CAAC;AAChG,SAAO,IAAI,KAAK,IAAI,GAAG;AACrB,QAAI,CAAC,SAAS,OAAO,EAAE,MAAM,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE,EAAE,KAAK,KAAK,QAAQ;AAC7G,UAAI,MAAM,KAAK,MAAM,GAAG,MAAM,KAAK,MAAM,GAAG,MAAM,KAAK,MAAM;AAC7D,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AAAA,IAC1E;AAAA,EACF;AACA,SAAO;AACT;;;ACjBe,SAARC,oBAAiB,UAAU;AAChC,MAAI,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG;AAC1B,MAAI,KAAK;AAAO,SAAK,KAAK,IAAI,eAAO,KAAK,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,CAAC;AAC5G,SAAO,IAAI,KAAK,IAAI,GAAG;AACrB,QAAI,OAAO,EAAE;AACb,QAAI,KAAK,QAAQ;AACf,UAAI,OAAO,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,MAAM,KAAK,MAAM,GAAG,MAAM,KAAK,MAAM,GAAG,MAAM,KAAK,MAAM;AACtI,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACxE,UAAI,QAAQ,KAAK,CAAC;AAAG,aAAK,KAAK,IAAI,eAAO,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AAAA,IAC1E;AACA,SAAK,KAAK,CAAC;AAAA,EACb;AACA,SAAO,IAAI,KAAK,IAAI,GAAG;AACrB,aAAS,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EACrD;AACA,SAAO;AACT;;;ACxBO,SAASC,UAAS,GAAG;AAC1B,SAAO,EAAE,CAAC;AACZ;AAEe,SAARC,WAAiB,GAAG;AACzB,SAAO,UAAU,UAAU,KAAK,KAAK,GAAG,QAAQ,KAAK;AACvD;;;ACNO,SAAS,SAAS,GAAG;AAC1B,SAAO,EAAE,CAAC;AACZ;AAEe,SAAR,UAAiB,GAAG;AACzB,SAAO,UAAU,UAAU,KAAK,KAAK,GAAG,QAAQ,KAAK;AACvD;;;ACNO,SAAS,SAAS,GAAG;AAC1B,SAAO,EAAE,CAAC;AACZ;AAEe,SAAR,UAAiB,GAAG;AACzB,SAAO,UAAU,UAAU,KAAK,KAAK,GAAG,QAAQ,KAAK;AACvD;;;ACQe,SAAR,OAAwB,OAAOC,IAAGC,IAAGC,IAAG;AAC7C,MAAI,OAAO,IAAI,OAAOF,MAAK,OAAOG,YAAWH,IAAGC,MAAK,OAAO,WAAWA,IAAGC,MAAK,OAAO,WAAWA,IAAG,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AAChI,SAAO,SAAS,OAAO,OAAO,KAAK,OAAO,KAAK;AACjD;AAEA,SAAS,OAAOF,IAAGC,IAAGC,IAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC/C,OAAK,KAAKF;AACV,OAAK,KAAKC;AACV,OAAK,KAAKC;AACV,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,QAAQ;AACf;AAEA,SAASE,WAAU,MAAM;AACvB,MAAI,OAAO,EAAC,MAAM,KAAK,KAAI,GAAG,OAAO;AACrC,SAAO,OAAO,KAAK;AAAM,WAAO,KAAK,OAAO,EAAC,MAAM,KAAK,KAAI;AAC5D,SAAO;AACT;AAEA,IAAIC,aAAY,OAAO,YAAY,OAAO;AAE1CA,WAAU,OAAO,WAAW;AAC1B,MAAI,OAAO,IAAI,OAAO,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,GACvG,OAAO,KAAK,OACZ,OACA;AAEJ,MAAI,CAAC;AAAM,WAAO;AAElB,MAAI,CAAC,KAAK;AAAQ,WAAO,KAAK,QAAQD,WAAU,IAAI,GAAG;AAEvD,UAAQ,CAAC,EAAC,QAAQ,MAAM,QAAQ,KAAK,QAAQ,IAAI,MAAM,CAAC,EAAC,CAAC;AAC1D,SAAO,OAAO,MAAM,IAAI,GAAG;AACzB,aAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,UAAI,QAAQ,KAAK,OAAO,CAAC,GAAG;AAC1B,YAAI,MAAM;AAAQ,gBAAM,KAAK,EAAC,QAAQ,OAAO,QAAQ,KAAK,OAAO,CAAC,IAAI,IAAI,MAAM,CAAC,EAAC,CAAC;AAAA;AAC9E,eAAK,OAAO,CAAC,IAAIA,WAAU,KAAK;AAAA,MACvC;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEAC,WAAU,MAAMC;AAChBD,WAAU,SAASE;AACnBF,WAAU,QAAQG;AAClBH,WAAU,OAAOI;AACjBJ,WAAU,SAASK;AACnBL,WAAU,OAAOM;AACjBN,WAAU,SAASO;AACnBP,WAAU,YAAYQ;AACtBR,WAAU,OAAOS;AACjBT,WAAU,OAAOU;AACjBV,WAAU,QAAQW;AAClBX,WAAU,aAAaY;AACvBZ,WAAU,IAAIa;AACdb,WAAU,IAAI;AACdA,WAAU,IAAI;;;AC7EC,SAAR,iBAAiBc,IAAG;AACzB,SAAO,WAAW;AAChB,WAAOA;AAAA,EACT;AACF;;;ACJe,SAAR,eAAiB,QAAQ;AAC9B,UAAQ,OAAO,IAAI,OAAO;AAC5B;;;ACIA,SAAS,EAAE,GAAG;AACZ,SAAO,EAAE,IAAI,EAAE;AACjB;AAEA,SAAS,EAAE,GAAG;AACZ,SAAO,EAAE,IAAI,EAAE;AACjB;AAEA,SAAS,EAAE,GAAG;AACZ,SAAO,EAAE,IAAI,EAAE;AACjB;AAEe,SAAR,gBAAiB,QAAQ;AAC9B,MAAI,OACA,MACA,OACA,QACA,WAAW,GACX,aAAa;AAEjB,MAAI,OAAO,WAAW;AAAY,aAAS,iBAAS,UAAU,OAAO,IAAI,CAAC,MAAM;AAEhF,WAAS,QAAQ;AACf,QAAI,GAAG,IAAI,MAAM,QACb,MACA,MACA,IACA,IACA,IACA,IACA;AAEJ,aAAS,IAAI,GAAG,IAAI,YAAY,EAAE,GAAG;AACnC,cACK,SAAS,IAAI,WAAW,OAAO,CAAC,IAC/B,SAAS,IAAI,SAAS,OAAO,GAAG,CAAC,IACjC,SAAS,IAAI,OAAO,OAAO,GAAG,GAAG,CAAC,IACnC,MACD,WAAW,OAAO;AAEtB,WAAK,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACtB,eAAO,MAAM,CAAC;AACd,aAAK,MAAM,KAAK,KAAK,GAAG,MAAM,KAAK;AACnC,aAAK,KAAK,IAAI,KAAK;AACnB,YAAI,OAAO,GAAG;AAAE,eAAK,KAAK,IAAI,KAAK;AAAA,QAAI;AACvC,YAAI,OAAO,GAAG;AAAE,eAAK,KAAK,IAAI,KAAK;AAAA,QAAI;AACvC,aAAK,MAAM,KAAK;AAAA,MAClB;AAAA,IACF;AAEA,aAAS,MAAM,UAAU,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAC3D,UAAI,OAAO,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AAC9C,UAAI,KAAK,KAAK,CAAC,GACX,KAAK,KAAK,CAAC,GACX,KAAK,KAAK,CAAC,GACX,KAAK,KAAK,IAAI,GACd,KAAK,KAAK,OAAK,CAAC,GAChB,KAAK,KAAK,OAAK,CAAC;AAEpB,UAAI,OAAO,SAAS,MAAM,KAAK,SAAS,GAAG,IAAI,KAAK;AACpD,UAAI,MAAM;AACR,YAAI,KAAK,QAAQ,KAAK,OAAO;AAC3B,cAAIC,KAAI,KAAK,KAAK,IAAI,KAAK,IACvBC,KAAK,OAAO,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,GACxCC,KAAK,OAAO,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,GACxC,IAAIF,KAAIA,KAAIC,KAAIA,KAAIC,KAAIA;AAC5B,cAAI,IAAI,IAAI,GAAG;AACb,gBAAIF,OAAM;AAAG,cAAAA,KAAI,eAAO,MAAM,GAAG,KAAKA,KAAIA;AAC1C,gBAAI,OAAO,KAAKC,OAAM;AAAG,cAAAA,KAAI,eAAO,MAAM,GAAG,KAAKA,KAAIA;AACtD,gBAAI,OAAO,KAAKC,OAAM;AAAG,cAAAA,KAAI,eAAO,MAAM,GAAG,KAAKA,KAAIA;AACtD,iBAAK,KAAK,IAAI,KAAK,KAAK,CAAC,MAAM,IAAI;AAEnC,iBAAK,OAAOF,MAAK,MAAM,KAAK,MAAM,OAAO,MAAM;AAC/C,gBAAI,OAAO,GAAG;AAAE,mBAAK,OAAOC,MAAK,KAAK;AAAA,YAAG;AACzC,gBAAI,OAAO,GAAG;AAAE,mBAAK,OAAOC,MAAK,KAAK;AAAA,YAAG;AAEzC,iBAAK,MAAMF,MAAK,IAAI,IAAI;AACxB,gBAAI,OAAO,GAAG;AAAE,mBAAK,MAAMC,KAAI;AAAA,YAAG;AAClC,gBAAI,OAAO,GAAG;AAAE,mBAAK,MAAMC,KAAI;AAAA,YAAG;AAAA,UACpC;AAAA,QACF;AACA;AAAA,MACF;AACA,aAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KACxB,OAAO,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,MACtC,OAAO,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AAAA,IAChD;AAAA,EACF;AAEA,WAAS,QAAQ,UAAU;AACzB,QAAI,SAAS;AAAM,aAAO,SAAS,IAAI,MAAM,SAAS,KAAK,KAAK;AAChE,aAAS,IAAI,SAAS,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACvD,UAAI,SAAS,CAAC,KAAK,SAAS,CAAC,EAAE,IAAI,SAAS,GAAG;AAC7C,iBAAS,IAAI,SAAS,CAAC,EAAE;AAAA,MAC3B;AAAA,IACF;AAAA,EACF;AAEA,WAAS,aAAa;AACpB,QAAI,CAAC;AAAO;AACZ,QAAI,GAAG,IAAI,MAAM,QAAQ;AACzB,YAAQ,IAAI,MAAM,CAAC;AACnB,SAAK,IAAI,GAAG,IAAI,GAAG,EAAE;AAAG,aAAO,MAAM,CAAC,GAAG,MAAM,KAAK,KAAK,IAAI,CAAC,OAAO,MAAM,GAAG,KAAK;AAAA,EACrF;AAEA,QAAM,aAAa,SAAS,WAAW,MAAM;AAC3C,YAAQ;AACR,aAAS,KAAK,KAAK,SAAO,OAAO,QAAQ,UAAU,KAAK,KAAK;AAC7D,WAAO,KAAK,KAAK,SAAO,CAAC,GAAG,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,KAAK;AACpD,eAAW;AAAA,EACb;AAEA,QAAM,aAAa,SAAS,GAAG;AAC7B,WAAO,UAAU,UAAU,aAAa,CAAC,GAAG,SAAS;AAAA,EACvD;AAEA,QAAM,WAAW,SAAS,GAAG;AAC3B,WAAO,UAAU,UAAU,WAAW,CAAC,GAAG,SAAS;AAAA,EACrD;AAEA,QAAM,SAAS,SAAS,GAAG;AACzB,WAAO,UAAU,UAAU,SAAS,OAAO,MAAM,aAAa,IAAI,iBAAS,CAAC,CAAC,GAAG,WAAW,GAAG,SAAS;AAAA,EACzG;AAEA,SAAO;AACT;;;AChIA,SAAS,MAAM,GAAG;AAChB,SAAO,EAAE;AACX;AAEA,SAAS,KAAK,UAAU,QAAQ;AAC9B,MAAI,OAAO,SAAS,IAAI,MAAM;AAC9B,MAAI,CAAC;AAAM,UAAM,IAAI,MAAM,qBAAqB,MAAM;AACtD,SAAO;AACT;AAEe,SAAR,aAAiB,OAAO;AAC7B,MAAI,KAAK,OACL,WAAW,iBACX,WACA,WAAW,iBAAS,EAAE,GACtB,WACA,OACA,MACA,OACA,MACA,QACA,aAAa;AAEjB,MAAI,SAAS;AAAM,YAAQ,CAAC;AAE5B,WAAS,gBAAgB,MAAM;AAC7B,WAAO,IAAI,KAAK,IAAI,MAAM,KAAK,OAAO,KAAK,GAAG,MAAM,KAAK,OAAO,KAAK,CAAC;AAAA,EACxE;AAEA,WAAS,MAAM,OAAO;AACpB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAI,YAAY,EAAE,GAAG;AACrD,eAAS,IAAI,GAAG,MAAM,QAAQ,QAAQC,KAAI,GAAGC,KAAI,GAAGC,KAAI,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,GAAG;AAC3E,eAAO,MAAM,CAAC,GAAG,SAAS,KAAK,QAAQ,SAAS,KAAK;AACrD,QAAAF,KAAI,OAAO,IAAI,OAAO,KAAK,OAAO,IAAI,OAAO,MAAM,eAAO,MAAM;AAChE,YAAI,OAAO,GAAG;AAAE,UAAAC,KAAI,OAAO,IAAI,OAAO,KAAK,OAAO,IAAI,OAAO,MAAM,eAAO,MAAM;AAAA,QAAG;AACnF,YAAI,OAAO,GAAG;AAAE,UAAAC,KAAI,OAAO,IAAI,OAAO,KAAK,OAAO,IAAI,OAAO,MAAM,eAAO,MAAM;AAAA,QAAG;AACnF,YAAI,KAAK,KAAKF,KAAIA,KAAIC,KAAIA,KAAIC,KAAIA,EAAC;AACnC,aAAK,IAAI,UAAU,CAAC,KAAK,IAAI,QAAQ,UAAU,CAAC;AAChD,QAAAF,MAAK,GAAGC,MAAK,GAAGC,MAAK;AAErB,eAAO,MAAMF,MAAK,IAAI,KAAK,CAAC;AAC5B,YAAI,OAAO,GAAG;AAAE,iBAAO,MAAMC,KAAI;AAAA,QAAG;AACpC,YAAI,OAAO,GAAG;AAAE,iBAAO,MAAMC,KAAI;AAAA,QAAG;AAEpC,eAAO,MAAMF,MAAK,IAAI,IAAI;AAC1B,YAAI,OAAO,GAAG;AAAE,iBAAO,MAAMC,KAAI;AAAA,QAAG;AACpC,YAAI,OAAO,GAAG;AAAE,iBAAO,MAAMC,KAAI;AAAA,QAAG;AAAA,MACtC;AAAA,IACF;AAAA,EACF;AAEA,WAAS,aAAa;AACpB,QAAI,CAAC;AAAO;AAEZ,QAAI,GACA,IAAI,MAAM,QACVC,KAAI,MAAM,QACV,WAAW,IAAI,IAAI,MAAM,IAAI,CAAC,GAAGC,OAAM,CAAC,GAAG,GAAGA,IAAG,KAAK,GAAG,CAAC,CAAC,CAAC,GAC5D;AAEJ,SAAK,IAAI,GAAG,QAAQ,IAAI,MAAM,CAAC,GAAG,IAAID,IAAG,EAAE,GAAG;AAC5C,aAAO,MAAM,CAAC,GAAG,KAAK,QAAQ;AAC9B,UAAI,OAAO,KAAK,WAAW;AAAU,aAAK,SAAS,KAAK,UAAU,KAAK,MAAM;AAC7E,UAAI,OAAO,KAAK,WAAW;AAAU,aAAK,SAAS,KAAK,UAAU,KAAK,MAAM;AAC7E,YAAM,KAAK,OAAO,KAAK,KAAK,MAAM,KAAK,OAAO,KAAK,KAAK,KAAK;AAC7D,YAAM,KAAK,OAAO,KAAK,KAAK,MAAM,KAAK,OAAO,KAAK,KAAK,KAAK;AAAA,IAC/D;AAEA,SAAK,IAAI,GAAG,OAAO,IAAI,MAAMA,EAAC,GAAG,IAAIA,IAAG,EAAE,GAAG;AAC3C,aAAO,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,MAAM,KAAK,OAAO,KAAK,KAAK,MAAM,KAAK,OAAO,KAAK,IAAI,MAAM,KAAK,OAAO,KAAK;AAAA,IAC3G;AAEA,gBAAY,IAAI,MAAMA,EAAC,GAAG,mBAAmB;AAC7C,gBAAY,IAAI,MAAMA,EAAC,GAAG,mBAAmB;AAAA,EAC/C;AAEA,WAAS,qBAAqB;AAC5B,QAAI,CAAC;AAAO;AAEZ,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAI,GAAG,EAAE,GAAG;AAC5C,gBAAU,CAAC,IAAI,CAAC,SAAS,MAAM,CAAC,GAAG,GAAG,KAAK;AAAA,IAC7C;AAAA,EACF;AAEA,WAAS,qBAAqB;AAC5B,QAAI,CAAC;AAAO;AAEZ,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAI,GAAG,EAAE,GAAG;AAC5C,gBAAU,CAAC,IAAI,CAAC,SAAS,MAAM,CAAC,GAAG,GAAG,KAAK;AAAA,IAC7C;AAAA,EACF;AAEA,QAAM,aAAa,SAAS,WAAW,MAAM;AAC3C,YAAQ;AACR,aAAS,KAAK,KAAK,SAAO,OAAO,QAAQ,UAAU,KAAK,KAAK;AAC7D,WAAO,KAAK,KAAK,SAAO,CAAC,GAAG,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,KAAK;AACpD,eAAW;AAAA,EACb;AAEA,QAAM,QAAQ,SAAS,GAAG;AACxB,WAAO,UAAU,UAAU,QAAQ,GAAG,WAAW,GAAG,SAAS;AAAA,EAC/D;AAEA,QAAM,KAAK,SAAS,GAAG;AACrB,WAAO,UAAU,UAAU,KAAK,GAAG,SAAS;AAAA,EAC9C;AAEA,QAAM,aAAa,SAAS,GAAG;AAC7B,WAAO,UAAU,UAAU,aAAa,CAAC,GAAG,SAAS;AAAA,EACvD;AAEA,QAAM,WAAW,SAAS,GAAG;AAC3B,WAAO,UAAU,UAAU,WAAW,OAAO,MAAM,aAAa,IAAI,iBAAS,CAAC,CAAC,GAAG,mBAAmB,GAAG,SAAS;AAAA,EACnH;AAEA,QAAM,WAAW,SAAS,GAAG;AAC3B,WAAO,UAAU,UAAU,WAAW,OAAO,MAAM,aAAa,IAAI,iBAAS,CAAC,CAAC,GAAG,mBAAmB,GAAG,SAAS;AAAA,EACnH;AAEA,SAAO;AACT;;;AC1HA,IAAM,IAAI;AACV,IAAM,IAAI;AACV,IAAM,IAAI;AAEK,SAAR,cAAmB;AACxB,MAAI,IAAI;AACR,SAAO,OAAO,KAAK,IAAI,IAAI,KAAK,KAAK;AACvC;;;ACJA,IAAI,iBAAiB;AAEd,SAASE,GAAE,GAAG;AACnB,SAAO,EAAE;AACX;AAEO,SAASC,GAAE,GAAG;AACnB,SAAO,EAAE;AACX;AAEO,SAASC,GAAE,GAAG;AACnB,SAAO,EAAE;AACX;AAEA,IAAI,gBAAgB;AAApB,IACI,mBAAmB,KAAK,MAAM,IAAI,KAAK,KAAK,CAAC;AADjD,IAEI,kBAAkB,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,GAAG;AAExC,SAAR,mBAAiB,OAAO,eAAe;AAC5C,kBAAgB,iBAAiB;AAEjC,MAAI,OAAO,KAAK,IAAI,gBAAgB,KAAK,IAAI,GAAG,KAAK,MAAM,aAAa,CAAC,CAAC,GACtE,YACA,QAAQ,GACR,WAAW,MACX,aAAa,IAAI,KAAK,IAAI,UAAU,IAAI,GAAG,GAC3C,cAAc,GACd,gBAAgB,KAChB,SAAS,oBAAI,IAAI,GACjB,UAAU,MAAM,IAAI,GACpB,QAAQ,iBAAS,QAAQ,KAAK,GAC9B,SAAS,YAAI;AAEjB,MAAI,SAAS;AAAM,YAAQ,CAAC;AAE5B,WAAS,OAAO;AACd,SAAK;AACL,UAAM,KAAK,QAAQ,UAAU;AAC7B,QAAI,QAAQ,UAAU;AACpB,cAAQ,KAAK;AACb,YAAM,KAAK,OAAO,UAAU;AAAA,IAC9B;AAAA,EACF;AAEA,WAAS,KAAK,YAAY;AACxB,QAAI,GAAG,IAAI,MAAM,QAAQ;AAEzB,QAAI,eAAe;AAAW,mBAAa;AAE3C,aAAS,IAAI,GAAG,IAAI,YAAY,EAAE,GAAG;AACnC,gBAAU,cAAc,SAAS;AAEjC,aAAO,QAAQ,SAAU,OAAO;AAC9B,cAAM,KAAK;AAAA,MACb,CAAC;AAED,WAAK,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACtB,eAAO,MAAM,CAAC;AACd,YAAI,KAAK,MAAM;AAAM,eAAK,KAAK,KAAK,MAAM;AAAA;AACrC,eAAK,IAAI,KAAK,IAAI,KAAK,KAAK;AACjC,YAAI,OAAO,GAAG;AACZ,cAAI,KAAK,MAAM;AAAM,iBAAK,KAAK,KAAK,MAAM;AAAA;AACrC,iBAAK,IAAI,KAAK,IAAI,KAAK,KAAK;AAAA,QACnC;AACA,YAAI,OAAO,GAAG;AACZ,cAAI,KAAK,MAAM;AAAM,iBAAK,KAAK,KAAK,MAAM;AAAA;AACrC,iBAAK,IAAI,KAAK,IAAI,KAAK,KAAK;AAAA,QACnC;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,kBAAkB;AACzB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,MAAM,IAAI,GAAG,EAAE,GAAG;AAClD,aAAO,MAAM,CAAC,GAAG,KAAK,QAAQ;AAC9B,UAAI,KAAK,MAAM;AAAM,aAAK,IAAI,KAAK;AACnC,UAAI,KAAK,MAAM;AAAM,aAAK,IAAI,KAAK;AACnC,UAAI,KAAK,MAAM;AAAM,aAAK,IAAI,KAAK;AACnC,UAAI,MAAM,KAAK,CAAC,KAAM,OAAO,KAAK,MAAM,KAAK,CAAC,KAAO,OAAO,KAAK,MAAM,KAAK,CAAC,GAAI;AAC/E,YAAI,SAAS,iBAAiB,OAAO,IAAI,KAAK,KAAK,MAAM,CAAC,IAAK,OAAO,IAAI,KAAK,KAAK,MAAM,CAAC,IAAI,IAC7F,YAAY,IAAI,kBAChB,WAAW,IAAI;AAEjB,YAAI,SAAS,GAAG;AACd,eAAK,IAAI;AAAA,QACX,WAAW,SAAS,GAAG;AACrB,eAAK,IAAI,SAAS,KAAK,IAAI,SAAS;AACpC,eAAK,IAAI,SAAS,KAAK,IAAI,SAAS;AAAA,QACtC,OAAO;AACL,eAAK,IAAI,SAAS,KAAK,IAAI,SAAS,IAAI,KAAK,IAAI,QAAQ;AACzD,eAAK,IAAI,SAAS,KAAK,IAAI,SAAS;AACpC,eAAK,IAAI,SAAS,KAAK,IAAI,SAAS,IAAI,KAAK,IAAI,QAAQ;AAAA,QAC3D;AAAA,MACF;AACA,UAAI,MAAM,KAAK,EAAE,KAAM,OAAO,KAAK,MAAM,KAAK,EAAE,KAAO,OAAO,KAAK,MAAM,KAAK,EAAE,GAAI;AAClF,aAAK,KAAK;AACV,YAAI,OAAO,GAAG;AAAE,eAAK,KAAK;AAAA,QAAG;AAC7B,YAAI,OAAO,GAAG;AAAE,eAAK,KAAK;AAAA,QAAG;AAAA,MAC/B;AAAA,IACF;AAAA,EACF;AAEA,WAAS,gBAAgB,OAAO;AAC9B,QAAI,MAAM;AAAY,YAAM,WAAW,OAAO,QAAQ,IAAI;AAC1D,WAAO;AAAA,EACT;AAEA,kBAAgB;AAEhB,SAAO,aAAa;AAAA,IAClB;AAAA,IAEA,SAAS,WAAW;AAClB,aAAO,QAAQ,QAAQ,IAAI,GAAG;AAAA,IAChC;AAAA,IAEA,MAAM,WAAW;AACf,aAAO,QAAQ,KAAK,GAAG;AAAA,IACzB;AAAA,IAEA,eAAe,SAAS,GAAG;AACzB,aAAO,UAAU,UACV,OAAO,KAAK,IAAI,gBAAgB,KAAK,IAAI,GAAG,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,QAAQ,eAAe,GAAG,cAC/F;AAAA,IACR;AAAA,IAEA,OAAO,SAAS,GAAG;AACjB,aAAO,UAAU,UAAU,QAAQ,GAAG,gBAAgB,GAAG,OAAO,QAAQ,eAAe,GAAG,cAAc;AAAA,IAC1G;AAAA,IAEA,OAAO,SAAS,GAAG;AACjB,aAAO,UAAU,UAAU,QAAQ,CAAC,GAAG,cAAc;AAAA,IACvD;AAAA,IAEA,UAAU,SAAS,GAAG;AACpB,aAAO,UAAU,UAAU,WAAW,CAAC,GAAG,cAAc;AAAA,IAC1D;AAAA,IAEA,YAAY,SAAS,GAAG;AACtB,aAAO,UAAU,UAAU,aAAa,CAAC,GAAG,cAAc,CAAC;AAAA,IAC7D;AAAA,IAEA,aAAa,SAAS,GAAG;AACvB,aAAO,UAAU,UAAU,cAAc,CAAC,GAAG,cAAc;AAAA,IAC7D;AAAA,IAEA,eAAe,SAAS,GAAG;AACzB,aAAO,UAAU,UAAU,gBAAgB,IAAI,GAAG,cAAc,IAAI;AAAA,IACtE;AAAA,IAEA,cAAc,SAAS,GAAG;AACxB,aAAO,UAAU,UAAU,SAAS,GAAG,OAAO,QAAQ,eAAe,GAAG,cAAc;AAAA,IACxF;AAAA,IAEA,OAAO,SAAS,MAAM,GAAG;AACvB,aAAO,UAAU,SAAS,KAAM,KAAK,OAAO,OAAO,OAAO,IAAI,IAAI,OAAO,IAAI,MAAM,gBAAgB,CAAC,CAAC,GAAI,cAAc,OAAO,IAAI,IAAI;AAAA,IACxI;AAAA,IAEA,MAAM,WAAW;AACf,UAAI,OAAO,MAAM,UAAU,MAAM,KAAK,SAAS;AAC/C,UAAIF,KAAI,KAAK,MAAM,KAAK,GACpBC,MAAK,OAAO,IAAI,KAAK,MAAM,IAAI,SAAS,GACxCC,MAAK,OAAO,IAAI,KAAK,MAAM,IAAI,SAAS,GACxC,SAAS,KAAK,MAAM,KAAK;AAE7B,UAAI,IAAI,GACJ,IAAI,MAAM,QACV,IACA,IACA,IACA,IACA,MACA;AAEJ,gBAAU;AAEV,WAAK,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACtB,eAAO,MAAM,CAAC;AACd,aAAKF,KAAI,KAAK;AACd,aAAKC,MAAK,KAAK,KAAK;AACpB,aAAKC,MAAK,KAAK,KAAI;AACnB,aAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC9B,YAAI,KAAK;AAAQ,oBAAU,MAAM,SAAS;AAAA,MAC5C;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,IAAI,SAAS,MAAM,GAAG;AACpB,aAAO,UAAU,SAAS,KAAK,MAAM,GAAG,MAAM,CAAC,GAAG,cAAc,MAAM,GAAG,IAAI;AAAA,IAC/E;AAAA,EACF;AACF;;;AC/Le,SAAR,mBAAmB;AACxB,MAAI,OACA,MACA,MACA,QACA,OACA,WAAW,iBAAS,GAAG,GACvB,WACA,eAAe,GACf,eAAe,UACf,SAAS;AAEb,WAAS,MAAM,GAAG;AAChB,QAAI,GACA,IAAI,MAAM,QACV,QACK,SAAS,IAAI,WAAW,OAAOC,EAAC,IAC/B,SAAS,IAAI,SAAS,OAAOA,IAAGC,EAAC,IACjC,SAAS,IAAI,OAAO,OAAOD,IAAGC,IAAGC,EAAC,IACnC,MACD,WAAW,UAAU;AAE7B,SAAK,QAAQ,GAAG,IAAI,GAAG,IAAI,GAAG,EAAE;AAAG,aAAO,MAAM,CAAC,GAAG,KAAK,MAAM,KAAK;AAAA,EACtE;AAEA,WAAS,aAAa;AACpB,QAAI,CAAC;AAAO;AACZ,QAAI,GAAG,IAAI,MAAM,QAAQC;AACzB,gBAAY,IAAI,MAAM,CAAC;AACvB,SAAK,IAAI,GAAG,IAAI,GAAG,EAAE;AAAG,MAAAA,QAAO,MAAM,CAAC,GAAG,UAAUA,MAAK,KAAK,IAAI,CAAC,SAASA,OAAM,GAAG,KAAK;AAAA,EAC3F;AAEA,WAAS,WAAW,UAAU;AAC5B,QAAIC,YAAW,GAAG,GAAGC,IAAG,SAAS,GAAGL,IAAGC,IAAGC,IAAG;AAC7C,QAAI,cAAc,SAAS;AAG3B,QAAI,aAAa;AACf,WAAKF,KAAIC,KAAIC,KAAI,IAAI,GAAG,IAAI,aAAa,EAAE,GAAG;AAC5C,aAAK,IAAI,SAAS,CAAC,OAAOG,KAAI,KAAK,IAAI,EAAE,KAAK,IAAI;AAChD,UAAAD,aAAY,EAAE,OAAO,UAAUC,IAAGL,MAAKK,MAAK,EAAE,KAAK,IAAIJ,MAAKI,MAAK,EAAE,KAAK,IAAIH,MAAKG,MAAK,EAAE,KAAK;AAAA,QAC/F;AAAA,MACF;AACA,MAAAD,aAAY,KAAK,KAAK,IAAI,WAAW;AAErC,eAAS,IAAIJ,KAAI;AACjB,UAAI,OAAO,GAAG;AAAE,iBAAS,IAAIC,KAAI;AAAA,MAAQ;AACzC,UAAI,OAAO,GAAG;AAAE,iBAAS,IAAIC,KAAI;AAAA,MAAQ;AAAA,IAC3C,OAGK;AACH,UAAI;AACJ,QAAE,IAAI,EAAE,KAAK;AACb,UAAI,OAAO,GAAG;AAAE,UAAE,IAAI,EAAE,KAAK;AAAA,MAAG;AAChC,UAAI,OAAO,GAAG;AAAE,UAAE,IAAI,EAAE,KAAK;AAAA,MAAG;AAChC;AAAG,QAAAE,aAAY,UAAU,EAAE,KAAK,KAAK;AAAA,aAC9B,IAAI,EAAE;AAAA,IACf;AAEA,aAAS,QAAQA;AAAA,EACnB;AAEA,WAAS,MAAM,UAAU,IAAI,MAAM,MAAM,MAAM;AAC7C,QAAI,CAAC,SAAS;AAAO,aAAO;AAC5B,QAAIE,MAAK,CAAC,MAAM,MAAM,IAAI,EAAE,OAAK,CAAC;AAElC,QAAIN,KAAI,SAAS,IAAI,KAAK,GACtBC,KAAK,OAAO,IAAI,SAAS,IAAI,KAAK,IAAI,GACtCC,KAAK,OAAO,IAAI,SAAS,IAAI,KAAK,IAAI,GACtC,IAAII,MAAK,IACT,IAAIN,KAAIA,KAAIC,KAAIA,KAAIC,KAAIA;AAI5B,QAAI,IAAI,IAAI,SAAS,GAAG;AACtB,UAAI,IAAI,cAAc;AACpB,YAAIF,OAAM;AAAG,UAAAA,KAAI,eAAO,MAAM,GAAG,KAAKA,KAAIA;AAC1C,YAAI,OAAO,KAAKC,OAAM;AAAG,UAAAA,KAAI,eAAO,MAAM,GAAG,KAAKA,KAAIA;AACtD,YAAI,OAAO,KAAKC,OAAM;AAAG,UAAAA,KAAI,eAAO,MAAM,GAAG,KAAKA,KAAIA;AACtD,YAAI,IAAI;AAAc,cAAI,KAAK,KAAK,eAAe,CAAC;AACpD,aAAK,MAAMF,KAAI,SAAS,QAAQ,QAAQ;AACxC,YAAI,OAAO,GAAG;AAAE,eAAK,MAAMC,KAAI,SAAS,QAAQ,QAAQ;AAAA,QAAG;AAC3D,YAAI,OAAO,GAAG;AAAE,eAAK,MAAMC,KAAI,SAAS,QAAQ,QAAQ;AAAA,QAAG;AAAA,MAC7D;AACA,aAAO;AAAA,IACT,WAGS,SAAS,UAAU,KAAK;AAAc;AAG/C,QAAI,SAAS,SAAS,QAAQ,SAAS,MAAM;AAC3C,UAAIF,OAAM;AAAG,QAAAA,KAAI,eAAO,MAAM,GAAG,KAAKA,KAAIA;AAC1C,UAAI,OAAO,KAAKC,OAAM;AAAG,QAAAA,KAAI,eAAO,MAAM,GAAG,KAAKA,KAAIA;AACtD,UAAI,OAAO,KAAKC,OAAM;AAAG,QAAAA,KAAI,eAAO,MAAM,GAAG,KAAKA,KAAIA;AACtD,UAAI,IAAI;AAAc,YAAI,KAAK,KAAK,eAAe,CAAC;AAAA,IACtD;AAEA;AAAG,UAAI,SAAS,SAAS,MAAM;AAC7B,YAAI,UAAU,SAAS,KAAK,KAAK,IAAI,QAAQ;AAC7C,aAAK,MAAMF,KAAI;AACf,YAAI,OAAO,GAAG;AAAE,eAAK,MAAMC,KAAI;AAAA,QAAG;AAClC,YAAI,OAAO,GAAG;AAAE,eAAK,MAAMC,KAAI;AAAA,QAAG;AAAA,MACpC;AAAA,WAAS,WAAW,SAAS;AAAA,EAC/B;AAEA,QAAM,aAAa,SAAS,WAAW,MAAM;AAC3C,YAAQ;AACR,aAAS,KAAK,KAAK,SAAO,OAAO,QAAQ,UAAU,KAAK,KAAK;AAC7D,WAAO,KAAK,KAAK,SAAO,CAAC,GAAG,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,KAAK;AACpD,eAAW;AAAA,EACb;AAEA,QAAM,WAAW,SAAS,GAAG;AAC3B,WAAO,UAAU,UAAU,WAAW,OAAO,MAAM,aAAa,IAAI,iBAAS,CAAC,CAAC,GAAG,WAAW,GAAG,SAAS;AAAA,EAC3G;AAEA,QAAM,cAAc,SAAS,GAAG;AAC9B,WAAO,UAAU,UAAU,eAAe,IAAI,GAAG,SAAS,KAAK,KAAK,YAAY;AAAA,EAClF;AAEA,QAAM,cAAc,SAAS,GAAG;AAC9B,WAAO,UAAU,UAAU,eAAe,IAAI,GAAG,SAAS,KAAK,KAAK,YAAY;AAAA,EAClF;AAEA,QAAM,QAAQ,SAAS,GAAG;AACxB,WAAO,UAAU,UAAU,SAAS,IAAI,GAAG,SAAS,KAAK,KAAK,MAAM;AAAA,EACtE;AAEA,SAAO;AACT;;;ACxIe,SAAR,eAAiB,QAAQK,IAAGC,IAAGC,IAAG;AACvC,MAAI,OACA,MACA,WAAW,iBAAS,GAAG,GACvB,WACA;AAEJ,MAAI,OAAO,WAAW;AAAY,aAAS,iBAAS,CAAC,MAAM;AAC3D,MAAIF,MAAK;AAAM,IAAAA,KAAI;AACnB,MAAIC,MAAK;AAAM,IAAAA,KAAI;AACnB,MAAIC,MAAK;AAAM,IAAAA,KAAI;AAEnB,WAAS,MAAM,OAAO;AACpB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAI,GAAG,EAAE,GAAG;AAC5C,UAAI,OAAO,MAAM,CAAC,GACd,KAAK,KAAK,IAAIF,MAAK,MACnB,MAAM,KAAK,KAAK,KAAKC,MAAK,MAC1B,MAAM,KAAK,KAAK,KAAKC,MAAK,MAC1B,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,GACzC,KAAK,SAAS,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,QAAQ;AACnD,WAAK,MAAM,KAAK;AAChB,UAAI,OAAK,GAAG;AAAE,aAAK,MAAM,KAAK;AAAA,MAAG;AACjC,UAAI,OAAK,GAAG;AAAE,aAAK,MAAM,KAAK;AAAA,MAAG;AAAA,IACnC;AAAA,EACF;AAEA,WAAS,aAAa;AACpB,QAAI,CAAC;AAAO;AACZ,QAAI,GAAG,IAAI,MAAM;AACjB,gBAAY,IAAI,MAAM,CAAC;AACvB,eAAW,IAAI,MAAM,CAAC;AACtB,SAAK,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACtB,eAAS,CAAC,IAAI,CAAC,OAAO,MAAM,CAAC,GAAG,GAAG,KAAK;AACxC,gBAAU,CAAC,IAAI,MAAM,SAAS,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,MAAM,CAAC,GAAG,GAAG,KAAK;AAAA,IACtE;AAAA,EACF;AAEA,QAAM,aAAa,SAAS,cAAc,MAAM;AAC9C,YAAQ;AACR,WAAO,KAAK,KAAK,SAAO,CAAC,GAAG,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,KAAK;AACpD,eAAW;AAAA,EACb;AAEA,QAAM,WAAW,SAAS,GAAG;AAC3B,WAAO,UAAU,UAAU,WAAW,OAAO,MAAM,aAAa,IAAI,iBAAS,CAAC,CAAC,GAAG,WAAW,GAAG,SAAS;AAAA,EAC3G;AAEA,QAAM,SAAS,SAAS,GAAG;AACzB,WAAO,UAAU,UAAU,SAAS,OAAO,MAAM,aAAa,IAAI,iBAAS,CAAC,CAAC,GAAG,WAAW,GAAG,SAAS;AAAA,EACzG;AAEA,QAAM,IAAI,SAAS,GAAG;AACpB,WAAO,UAAU,UAAUF,KAAI,CAAC,GAAG,SAASA;AAAA,EAC9C;AAEA,QAAM,IAAI,SAAS,GAAG;AACpB,WAAO,UAAU,UAAUC,KAAI,CAAC,GAAG,SAASA;AAAA,EAC9C;AAEA,QAAM,IAAI,SAAS,GAAG;AACpB,WAAO,UAAU,UAAUC,KAAI,CAAC,GAAG,SAASA;AAAA,EAC9C;AAEA,SAAO;AACT;;;AChEe,SAARC,WAAiBC,IAAG;AACzB,MAAI,WAAW,iBAAS,GAAG,GACvB,OACA,WACA;AAEJ,MAAI,OAAOA,OAAM;AAAY,IAAAA,KAAI,iBAASA,MAAK,OAAO,IAAI,CAACA,EAAC;AAE5D,WAAS,MAAM,OAAO;AACpB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,MAAM,IAAI,GAAG,EAAE,GAAG;AAClD,aAAO,MAAM,CAAC,GAAG,KAAK,OAAO,GAAG,CAAC,IAAI,KAAK,KAAK,UAAU,CAAC,IAAI;AAAA,IAChE;AAAA,EACF;AAEA,WAAS,aAAa;AACpB,QAAI,CAAC;AAAO;AACZ,QAAI,GAAG,IAAI,MAAM;AACjB,gBAAY,IAAI,MAAM,CAAC;AACvB,SAAK,IAAI,MAAM,CAAC;AAChB,SAAK,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACtB,gBAAU,CAAC,IAAI,MAAM,GAAG,CAAC,IAAI,CAACA,GAAE,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,MAAM,CAAC,GAAG,GAAG,KAAK;AAAA,IACzF;AAAA,EACF;AAEA,QAAM,aAAa,SAAS,GAAG;AAC7B,YAAQ;AACR,eAAW;AAAA,EACb;AAEA,QAAM,WAAW,SAAS,GAAG;AAC3B,WAAO,UAAU,UAAU,WAAW,OAAO,MAAM,aAAa,IAAI,iBAAS,CAAC,CAAC,GAAG,WAAW,GAAG,SAAS;AAAA,EAC3G;AAEA,QAAM,IAAI,SAAS,GAAG;AACpB,WAAO,UAAU,UAAUA,KAAI,OAAO,MAAM,aAAa,IAAI,iBAAS,CAAC,CAAC,GAAG,WAAW,GAAG,SAASA;AAAA,EACpG;AAEA,SAAO;AACT;;;ACtCe,SAARC,WAAiBC,IAAG;AACzB,MAAI,WAAW,iBAAS,GAAG,GACvB,OACA,WACA;AAEJ,MAAI,OAAOA,OAAM;AAAY,IAAAA,KAAI,iBAASA,MAAK,OAAO,IAAI,CAACA,EAAC;AAE5D,WAAS,MAAM,OAAO;AACpB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,MAAM,IAAI,GAAG,EAAE,GAAG;AAClD,aAAO,MAAM,CAAC,GAAG,KAAK,OAAO,GAAG,CAAC,IAAI,KAAK,KAAK,UAAU,CAAC,IAAI;AAAA,IAChE;AAAA,EACF;AAEA,WAAS,aAAa;AACpB,QAAI,CAAC;AAAO;AACZ,QAAI,GAAG,IAAI,MAAM;AACjB,gBAAY,IAAI,MAAM,CAAC;AACvB,SAAK,IAAI,MAAM,CAAC;AAChB,SAAK,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACtB,gBAAU,CAAC,IAAI,MAAM,GAAG,CAAC,IAAI,CAACA,GAAE,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,MAAM,CAAC,GAAG,GAAG,KAAK;AAAA,IACzF;AAAA,EACF;AAEA,QAAM,aAAa,SAAS,GAAG;AAC7B,YAAQ;AACR,eAAW;AAAA,EACb;AAEA,QAAM,WAAW,SAAS,GAAG;AAC3B,WAAO,UAAU,UAAU,WAAW,OAAO,MAAM,aAAa,IAAI,iBAAS,CAAC,CAAC,GAAG,WAAW,GAAG,SAAS;AAAA,EAC3G;AAEA,QAAM,IAAI,SAAS,GAAG;AACpB,WAAO,UAAU,UAAUA,KAAI,OAAO,MAAM,aAAa,IAAI,iBAAS,CAAC,CAAC,GAAG,WAAW,GAAG,SAASA;AAAA,EACpG;AAEA,SAAO;AACT;;;ACtCe,SAARC,WAAiBC,IAAG;AACzB,MAAI,WAAW,iBAAS,GAAG,GACvB,OACA,WACA;AAEJ,MAAI,OAAOA,OAAM;AAAY,IAAAA,KAAI,iBAASA,MAAK,OAAO,IAAI,CAACA,EAAC;AAE5D,WAAS,MAAM,OAAO;AACpB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,MAAM,IAAI,GAAG,EAAE,GAAG;AAClD,aAAO,MAAM,CAAC,GAAG,KAAK,OAAO,GAAG,CAAC,IAAI,KAAK,KAAK,UAAU,CAAC,IAAI;AAAA,IAChE;AAAA,EACF;AAEA,WAAS,aAAa;AACpB,QAAI,CAAC;AAAO;AACZ,QAAI,GAAG,IAAI,MAAM;AACjB,gBAAY,IAAI,MAAM,CAAC;AACvB,SAAK,IAAI,MAAM,CAAC;AAChB,SAAK,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACtB,gBAAU,CAAC,IAAI,MAAM,GAAG,CAAC,IAAI,CAACA,GAAE,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,MAAM,CAAC,GAAG,GAAG,KAAK;AAAA,IACzF;AAAA,EACF;AAEA,QAAM,aAAa,SAAS,GAAG;AAC7B,YAAQ;AACR,eAAW;AAAA,EACb;AAEA,QAAM,WAAW,SAAS,GAAG;AAC3B,WAAO,UAAU,UAAU,WAAW,OAAO,MAAM,aAAa,IAAI,iBAAS,CAAC,CAAC,GAAG,WAAW,GAAG,SAAS;AAAA,EAC3G;AAEA,QAAM,IAAI,SAAS,GAAG;AACpB,WAAO,UAAU,UAAUA,KAAI,OAAO,MAAM,aAAa,IAAI,iBAAS,CAAC,CAAC,GAAG,WAAW,GAAG,SAASA;AAAA,EACpG;AAEA,SAAO;AACT;",
  "names": ["x", "y", "z", "x", "x", "z", "x", "x2", "x3", "x", "x", "add_default", "x", "y", "z", "add", "addAll", "cover_default", "x", "y", "z", "data_default", "extent_default", "find_default", "x", "y", "z", "x2", "y2", "z2", "x3", "y3", "z3", "remove_default", "x", "y", "z", "removeAll", "root_default", "size_default", "visit_default", "visitAfter_default", "defaultX", "x_default", "x", "y", "z", "defaultX", "leaf_copy", "treeProto", "add_default", "addAll", "cover_default", "data_default", "extent_default", "find_default", "remove_default", "removeAll", "root_default", "size_default", "visit_default", "visitAfter_default", "x_default", "x", "x", "y", "z", "x", "y", "z", "m", "i", "x", "y", "z", "x", "y", "z", "node", "strength", "c", "x2", "x", "y", "z", "x_default", "x", "y_default", "y", "z_default", "z"]
}
