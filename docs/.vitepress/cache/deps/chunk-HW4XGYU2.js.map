{
  "version": 3,
  "sources": ["../../../dev/core/src/Maths/math.scalar.ts", "../../../dev/core/src/Maths/math.color.ts"],
  "sourcesContent": ["import { Clamp, Lerp, NormalizeRadians, RandomRange, ToHex, WithinEpsilon } from \"./math.scalar.functions\";\r\n\r\n/**\r\n * Scalar computation library\r\n */\r\nexport class Scalar {\r\n    /**\r\n     * Two pi constants convenient for computation.\r\n     */\r\n    public static TwoPi: number = Math.PI * 2;\r\n\r\n    /**\r\n     * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\r\n     * @param a number\r\n     * @param b number\r\n     * @param epsilon (default = 1.401298E-45)\r\n     * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\r\n     */\r\n    public static WithinEpsilon: (a: number, b: number, epsilon?: number) => boolean = WithinEpsilon;\r\n\r\n    /**\r\n     * Returns a string : the upper case translation of the number i to hexadecimal.\r\n     * @param i number\r\n     * @returns the upper case translation of the number i to hexadecimal.\r\n     */\r\n    public static ToHex: (i: number) => string = ToHex;\r\n\r\n    /**\r\n     * Returns -1 if value is negative and +1 is value is positive.\r\n     * @param value the value\r\n     * @returns the value itself if it's equal to zero.\r\n     */\r\n    public static Sign(value: number): number {\r\n        value = +value; // convert to a number\r\n\r\n        if (value === 0 || isNaN(value)) {\r\n            return value;\r\n        }\r\n\r\n        return value > 0 ? 1 : -1;\r\n    }\r\n\r\n    /**\r\n     * Returns the value itself if it's between min and max.\r\n     * Returns min if the value is lower than min.\r\n     * Returns max if the value is greater than max.\r\n     * @param value the value to clmap\r\n     * @param min the min value to clamp to (default: 0)\r\n     * @param max the max value to clamp to (default: 1)\r\n     * @returns the clamped value\r\n     */\r\n    public static Clamp: (value: number, min?: number, max?: number) => number = Clamp;\r\n\r\n    /**\r\n     * the log2 of value.\r\n     * @param value the value to compute log2 of\r\n     * @returns the log2 of value.\r\n     */\r\n    public static Log2(value: number): number {\r\n        return Math.log(value) * Math.LOG2E;\r\n    }\r\n\r\n    /**\r\n     * the floor part of a log2 value.\r\n     * @param value the value to compute log2 of\r\n     * @returns the log2 of value.\r\n     */\r\n    public static ILog2(value: number): number {\r\n        if (Math.log2) {\r\n            return Math.floor(Math.log2(value));\r\n        }\r\n\r\n        if (value < 0) {\r\n            return NaN;\r\n        } else if (value === 0) {\r\n            return -Infinity;\r\n        }\r\n\r\n        let n = 0;\r\n        if (value < 1) {\r\n            while (value < 1) {\r\n                n++;\r\n                value = value * 2;\r\n            }\r\n            n = -n;\r\n        } else if (value > 1) {\r\n            while (value > 1) {\r\n                n++;\r\n                value = Math.floor(value / 2);\r\n            }\r\n        }\r\n\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * Loops the value, so that it is never larger than length and never smaller than 0.\r\n     *\r\n     * This is similar to the modulo operator but it works with floating point numbers.\r\n     * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.\r\n     * With t = 5 and length = 2.5, the result would be 0.0.\r\n     * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\r\n     * @param value the value\r\n     * @param length the length\r\n     * @returns the looped value\r\n     */\r\n    public static Repeat(value: number, length: number): number {\r\n        return value - Math.floor(value / length) * length;\r\n    }\r\n\r\n    /**\r\n     * Normalize the value between 0.0 and 1.0 using min and max values\r\n     * @param value value to normalize\r\n     * @param min max to normalize between\r\n     * @param max min to normalize between\r\n     * @returns the normalized value\r\n     */\r\n    public static Normalize(value: number, min: number, max: number): number {\r\n        return (value - min) / (max - min);\r\n    }\r\n\r\n    /**\r\n     * Denormalize the value from 0.0 and 1.0 using min and max values\r\n     * @param normalized value to denormalize\r\n     * @param min max to denormalize between\r\n     * @param max min to denormalize between\r\n     * @returns the denormalized value\r\n     */\r\n    public static Denormalize(normalized: number, min: number, max: number): number {\r\n        return normalized * (max - min) + min;\r\n    }\r\n\r\n    /**\r\n     * Calculates the shortest difference between two given angles given in degrees.\r\n     * @param current current angle in degrees\r\n     * @param target target angle in degrees\r\n     * @returns the delta\r\n     */\r\n    public static DeltaAngle(current: number, target: number): number {\r\n        let num: number = Scalar.Repeat(target - current, 360.0);\r\n        if (num > 180.0) {\r\n            num -= 360.0;\r\n        }\r\n        return num;\r\n    }\r\n\r\n    /**\r\n     * PingPongs the value t, so that it is never larger than length and never smaller than 0.\r\n     * @param tx value\r\n     * @param length length\r\n     * @returns The returned value will move back and forth between 0 and length\r\n     */\r\n    public static PingPong(tx: number, length: number): number {\r\n        const t: number = Scalar.Repeat(tx, length * 2.0);\r\n        return length - Math.abs(t - length);\r\n    }\r\n\r\n    /**\r\n     * Interpolates between min and max with smoothing at the limits.\r\n     *\r\n     * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up\r\n     * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\r\n     * @param from from\r\n     * @param to to\r\n     * @param tx value\r\n     * @returns the smooth stepped value\r\n     */\r\n    public static SmoothStep(from: number, to: number, tx: number): number {\r\n        let t: number = Scalar.Clamp(tx);\r\n        t = -2.0 * t * t * t + 3.0 * t * t;\r\n        return to * t + from * (1.0 - t);\r\n    }\r\n\r\n    /**\r\n     * Moves a value current towards target.\r\n     *\r\n     * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.\r\n     * Negative values of maxDelta pushes the value away from target.\r\n     * @param current current value\r\n     * @param target target value\r\n     * @param maxDelta max distance to move\r\n     * @returns resulting value\r\n     */\r\n    public static MoveTowards(current: number, target: number, maxDelta: number): number {\r\n        let result: number = 0;\r\n        if (Math.abs(target - current) <= maxDelta) {\r\n            result = target;\r\n        } else {\r\n            result = current + Scalar.Sign(target - current) * maxDelta;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\r\n     *\r\n     * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta\r\n     *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\r\n     * @param current current value\r\n     * @param target target value\r\n     * @param maxDelta max distance to move\r\n     * @returns resulting angle\r\n     */\r\n    public static MoveTowardsAngle(current: number, target: number, maxDelta: number): number {\r\n        const num: number = Scalar.DeltaAngle(current, target);\r\n        let result: number = 0;\r\n        if (-maxDelta < num && num < maxDelta) {\r\n            result = target;\r\n        } else {\r\n            target = current + num;\r\n            result = Scalar.MoveTowards(current, target, maxDelta);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar.\r\n     * @param start start value\r\n     * @param end target value\r\n     * @param amount amount to lerp between\r\n     * @returns the lerped value\r\n     */\r\n    public static Lerp: (start: number, end: number, amount: number) => number = Lerp;\r\n\r\n    /**\r\n     * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.\r\n     * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\r\n     * @param start start value\r\n     * @param end target value\r\n     * @param amount amount to lerp between\r\n     * @returns the lerped value\r\n     */\r\n    public static LerpAngle(start: number, end: number, amount: number): number {\r\n        let num: number = Scalar.Repeat(end - start, 360.0);\r\n        if (num > 180.0) {\r\n            num -= 360.0;\r\n        }\r\n        return start + num * Clamp(amount);\r\n    }\r\n\r\n    /**\r\n     * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\r\n     * @param a start value\r\n     * @param b target value\r\n     * @param value value between a and b\r\n     * @returns the inverseLerp value\r\n     */\r\n    public static InverseLerp(a: number, b: number, value: number): number {\r\n        let result: number = 0;\r\n        if (a != b) {\r\n            result = Clamp((value - a) / (b - a));\r\n        } else {\r\n            result = 0.0;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\".\r\n     * @see http://mathworld.wolfram.com/HermitePolynomial.html\r\n     * @param value1 defines the first control point\r\n     * @param tangent1 defines the first tangent\r\n     * @param value2 defines the second control point\r\n     * @param tangent2 defines the second tangent\r\n     * @param amount defines the amount on the interpolation spline (between 0 and 1)\r\n     * @returns hermite result\r\n     */\r\n    public static Hermite(value1: number, tangent1: number, value2: number, tangent2: number, amount: number): number {\r\n        const squared = amount * amount;\r\n        const cubed = amount * squared;\r\n        const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\r\n        const part2 = -2.0 * cubed + 3.0 * squared;\r\n        const part3 = cubed - 2.0 * squared + amount;\r\n        const part4 = cubed - squared;\r\n\r\n        return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;\r\n    }\r\n\r\n    /**\r\n     * Returns a new scalar which is the 1st derivative of the Hermite spline defined by the scalars \"value1\", \"value2\", \"tangent1\", \"tangent2\".\r\n     * @param value1 defines the first control point\r\n     * @param tangent1 defines the first tangent\r\n     * @param value2 defines the second control point\r\n     * @param tangent2 defines the second tangent\r\n     * @param time define where the derivative must be done\r\n     * @returns 1st derivative\r\n     */\r\n    public static Hermite1stDerivative(value1: number, tangent1: number, value2: number, tangent2: number, time: number): number {\r\n        const t2 = time * time;\r\n        return (t2 - time) * 6 * value1 + (3 * t2 - 4 * time + 1) * tangent1 + (-t2 + time) * 6 * value2 + (3 * t2 - 2 * time) * tangent2;\r\n    }\r\n\r\n    /**\r\n     * Returns a random float number between and min and max values\r\n     * @param min min value of random\r\n     * @param max max value of random\r\n     * @returns random value\r\n     */\r\n    public static RandomRange: (min: number, max: number) => number = RandomRange;\r\n\r\n    /**\r\n     * This function returns percentage of a number in a given range.\r\n     *\r\n     * RangeToPercent(40,20,60) will return 0.5 (50%)\r\n     * RangeToPercent(34,0,100) will return 0.34 (34%)\r\n     * @param number to convert to percentage\r\n     * @param min min range\r\n     * @param max max range\r\n     * @returns the percentage\r\n     */\r\n    public static RangeToPercent(number: number, min: number, max: number): number {\r\n        return (number - min) / (max - min);\r\n    }\r\n\r\n    /**\r\n     * This function returns number that corresponds to the percentage in a given range.\r\n     *\r\n     * PercentToRange(0.34,0,100) will return 34.\r\n     * @param percent to convert to number\r\n     * @param min min range\r\n     * @param max max range\r\n     * @returns the number\r\n     */\r\n    public static PercentToRange(percent: number, min: number, max: number): number {\r\n        return (max - min) * percent + min;\r\n    }\r\n\r\n    /**\r\n     * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\r\n     * @param angle The angle to normalize in radian.\r\n     * @returns The converted angle.\r\n     */\r\n    public static NormalizeRadians: (angle: number) => number = NormalizeRadians;\r\n\r\n    /**\r\n     * Returns the highest common factor of two integers.\r\n     * @param a first parameter\r\n     * @param b second parameter\r\n     * @returns HCF of a and b\r\n     */\r\n    public static HCF(a: number, b: number): number {\r\n        const r: number = a % b;\r\n        if (r === 0) {\r\n            return b;\r\n        }\r\n        return Scalar.HCF(b, r);\r\n    }\r\n}\r\n", "import type { Constructor, DeepImmutable, FloatArray, Tuple } from \"../types\";\r\nimport { Scalar } from \"./math.scalar\";\r\nimport { Clamp, ToHex } from \"./math.scalar.functions\";\r\nimport { ToLinearSpace, ToGammaSpace, Epsilon } from \"./math.constants\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport type { Tensor } from \"./tensor\";\r\nimport type { IColor3Like, IColor4Like } from \"./math.like\";\r\n\r\nfunction colorChannelToLinearSpace(color: number): number {\r\n    return Math.pow(color, ToLinearSpace);\r\n}\r\n\r\nfunction colorChannelToLinearSpaceExact(color: number): number {\r\n    if (color <= 0.04045) {\r\n        return 0.0773993808 * color;\r\n    }\r\n    return Math.pow(0.947867299 * (color + 0.055), 2.4);\r\n}\r\n\r\nfunction colorChannelToGammaSpace(color: number): number {\r\n    return Math.pow(color, ToGammaSpace);\r\n}\r\n\r\nfunction colorChannelToGammaSpaceExact(color: number): number {\r\n    if (color <= 0.0031308) {\r\n        return 12.92 * color;\r\n    }\r\n    return 1.055 * Math.pow(color, 0.41666) - 0.055;\r\n}\r\n\r\n/**\r\n * Class used to hold a RGB color\r\n */\r\nexport class Color3 implements Tensor<Tuple<number, 3>>, IColor3Like {\r\n    /**\r\n     * @see Tensor.dimension\r\n     */\r\n    public declare readonly dimension: [3];\r\n\r\n    /**\r\n     * @see Tensor.rank\r\n     */\r\n    public declare readonly rank: 1;\r\n\r\n    /**\r\n     * Creates a new Color3 object from red, green, blue values, all between 0 and 1\r\n     * @param r defines the red component (between 0 and 1, default is 0)\r\n     * @param g defines the green component (between 0 and 1, default is 0)\r\n     * @param b defines the blue component (between 0 and 1, default is 0)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the red component (between 0 and 1, default is 0)\r\n         */\r\n        public r: number = 0,\r\n        /**\r\n         * Defines the green component (between 0 and 1, default is 0)\r\n         */\r\n        public g: number = 0,\r\n        /**\r\n         * Defines the blue component (between 0 and 1, default is 0)\r\n         */\r\n        public b: number = 0\r\n    ) {}\r\n\r\n    /**\r\n     * Creates a string with the Color3 current values\r\n     * @returns the string representation of the Color3 object\r\n     */\r\n    public toString(): string {\r\n        return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \"}\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"Color3\"\r\n     * @returns \"Color3\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Color3\";\r\n    }\r\n\r\n    /**\r\n     * Compute the Color3 hash code\r\n     * @returns an unique number that can be used to hash Color3 objects\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = (this.r * 255) | 0;\r\n        hash = (hash * 397) ^ ((this.g * 255) | 0);\r\n        hash = (hash * 397) ^ ((this.b * 255) | 0);\r\n        return hash;\r\n    }\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Stores in the given array from the given starting index the red, green, blue values as successive elements\r\n     * @param array defines the array where to store the r,g,b components\r\n     * @param index defines an optional index in the target array to define where to start storing values\r\n     * @returns the current Color3 object\r\n     */\r\n    public toArray(array: FloatArray, index: number = 0): this {\r\n        array[index] = this.r;\r\n        array[index + 1] = this.g;\r\n        array[index + 2] = this.b;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update the current color with values stored in an array from the starting index of the given array\r\n     * @param array defines the source array\r\n     * @param offset defines an offset in the source array\r\n     * @returns the current Color3 object\r\n     */\r\n    public fromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): this {\r\n        Color3.FromArrayToRef(array, offset, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color4 object from the current Color3 and the given alpha\r\n     * @param alpha defines the alpha component on the new Color4 object (default is 1)\r\n     * @returns a new Color4 object\r\n     */\r\n    public toColor4(alpha: number = 1): Color4 {\r\n        return new Color4(this.r, this.g, this.b, alpha);\r\n    }\r\n\r\n    /**\r\n     * Returns a new array populated with 3 numeric elements : red, green and blue values\r\n     * @returns the new array\r\n     */\r\n    public asArray(): Tuple<number, 3> {\r\n        return [this.r, this.g, this.b];\r\n    }\r\n\r\n    /**\r\n     * Returns the luminance value\r\n     * @returns a float value\r\n     */\r\n    public toLuminance(): number {\r\n        return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;\r\n    }\r\n\r\n    /**\r\n     * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\r\n     * @param otherColor defines the second operand\r\n     * @returns the new Color3 object\r\n     */\r\n    public multiply(otherColor: DeepImmutable<this>): this {\r\n        return new (this.constructor as Constructor<typeof Color3, this>)(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);\r\n    }\r\n\r\n    /**\r\n     * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\r\n     * @param otherColor defines the second operand\r\n     * @param result defines the Color3 object where to store the result\r\n     * @returns the result Color3\r\n     */\r\n    public multiplyToRef<T extends this>(otherColor: DeepImmutable<this>, result: T): T {\r\n        result.r = this.r * otherColor.r;\r\n        result.g = this.g * otherColor.g;\r\n        result.b = this.b * otherColor.b;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current Color3 coordinates by the given ones\r\n     * @param otherColor defines the second operand\r\n     * @returns the current updated Color3\r\n     */\r\n    public multiplyInPlace(otherColor: DeepImmutable<Color3>): this {\r\n        this.r *= otherColor.r;\r\n        this.g *= otherColor.g;\r\n        this.b *= otherColor.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color3 set with the result of the multiplication of the current Color3 coordinates by the given floats\r\n     * @param r defines the r coordinate of the operand\r\n     * @param g defines the g coordinate of the operand\r\n     * @param b defines the b coordinate of the operand\r\n     * @returns the new Color3\r\n     */\r\n    public multiplyByFloats(r: number, g: number, b: number): this {\r\n        return new (this.constructor as Constructor<typeof Color3, this>)(this.r * r, this.g * g, this.b * b);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public divide(_other: DeepImmutable<this>): this {\r\n        throw new ReferenceError(\"Can not divide a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public divideToRef<T extends this>(_other: DeepImmutable<this>, _result: T): T {\r\n        throw new ReferenceError(\"Can not divide a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public divideInPlace(_other: DeepImmutable<this>): this {\r\n        throw new ReferenceError(\"Can not divide a color\");\r\n    }\r\n\r\n    /**\r\n     * Updates the current Color3 with the minimal coordinate values between its and the given color ones\r\n     * @param other defines the second operand\r\n     * @returns the current updated Color3\r\n     */\r\n    public minimizeInPlace(other: DeepImmutable<this>): this {\r\n        return this.minimizeInPlaceFromFloats(other.r, other.g, other.b);\r\n    }\r\n\r\n    /**\r\n     * Updates the current Color3 with the maximal coordinate values between its and the given color ones.\r\n     * @param other defines the second operand\r\n     * @returns the current updated Color3\r\n     */\r\n    public maximizeInPlace(other: DeepImmutable<this>): this {\r\n        return this.maximizeInPlaceFromFloats(other.r, other.g, other.b);\r\n    }\r\n\r\n    /**\r\n     * Updates the current Color3 with the minimal coordinate values between its and the given coordinates\r\n     * @param r defines the r coordinate of the operand\r\n     * @param g defines the g coordinate of the operand\r\n     * @param b defines the b coordinate of the operand\r\n     * @returns the current updated Color3\r\n     */\r\n    public minimizeInPlaceFromFloats(r: number, g: number, b: number): this {\r\n        this.r = Math.min(r, this.r);\r\n        this.g = Math.min(g, this.g);\r\n        this.b = Math.min(b, this.b);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the current Color3 with the maximal coordinate values between its and the given coordinates.\r\n     * @param r defines the r coordinate of the operand\r\n     * @param g defines the g coordinate of the operand\r\n     * @param b defines the b coordinate of the operand\r\n     * @returns the current updated Color3\r\n     */\r\n    public maximizeInPlaceFromFloats(r: number, g: number, b: number): this {\r\n        this.r = Math.max(r, this.r);\r\n        this.g = Math.max(g, this.g);\r\n        this.b = Math.max(b, this.b);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public floorToRef<T extends this>(_result: T): T {\r\n        throw new ReferenceError(\"Can not floor a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public floor(): this {\r\n        throw new ReferenceError(\"Can not floor a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public fractToRef<T extends this>(_result: T): T {\r\n        throw new ReferenceError(\"Can not fract a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public fract(): this {\r\n        throw new ReferenceError(\"Can not fract a color\");\r\n    }\r\n\r\n    /**\r\n     * Determines equality between Color3 objects\r\n     * @param otherColor defines the second operand\r\n     * @returns true if the rgb values are equal to the given ones\r\n     */\r\n    public equals(otherColor: DeepImmutable<this>): boolean {\r\n        return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b;\r\n    }\r\n\r\n    /**\r\n     * Alias for equalsToFloats\r\n     * @param r red color component\r\n     * @param g green color component\r\n     * @param b blue color component\r\n     * @returns boolean\r\n     */\r\n    public equalsFloats(r: number, g: number, b: number): boolean {\r\n        return this.equalsToFloats(r, g, b);\r\n    }\r\n\r\n    /**\r\n     * Determines equality between the current Color3 object and a set of r,b,g values\r\n     * @param r defines the red component to check\r\n     * @param g defines the green component to check\r\n     * @param b defines the blue component to check\r\n     * @returns true if the rgb values are equal to the given ones\r\n     */\r\n    public equalsToFloats(r: number, g: number, b: number): boolean {\r\n        return this.r === r && this.g === g && this.b === b;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the current Color3 and the given color coordinates are distant less than epsilon\r\n     * @param otherColor defines the second operand\r\n     * @param epsilon defines the minimal distance to define values as equals\r\n     * @returns true if both colors are distant less than epsilon\r\n     */\r\n    public equalsWithEpsilon(otherColor: DeepImmutable<this>, epsilon: number = Epsilon): boolean {\r\n        return Scalar.WithinEpsilon(this.r, otherColor.r, epsilon) && Scalar.WithinEpsilon(this.g, otherColor.g, epsilon) && Scalar.WithinEpsilon(this.b, otherColor.b, epsilon);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public negate(): this {\r\n        throw new ReferenceError(\"Can not negate a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public negateInPlace(): this {\r\n        throw new ReferenceError(\"Can not negate a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public negateToRef<T extends this>(_result: T): T {\r\n        throw new ReferenceError(\"Can not negate a color\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 with the current Color3 values multiplied by scale\r\n     * @param scale defines the scaling factor to apply\r\n     * @returns a new Color3 object\r\n     */\r\n    public scale(scale: number): this {\r\n        return new (this.constructor as Constructor<typeof Color3, this>)(this.r * scale, this.g * scale, this.b * scale);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the Color3 values by the float \"scale\"\r\n     * @param scale defines the scaling factor to apply\r\n     * @returns the current updated Color3\r\n     */\r\n    public scaleInPlace(scale: number): this {\r\n        this.r *= scale;\r\n        this.g *= scale;\r\n        this.b *= scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the rgb values by scale and stores the result into \"result\"\r\n     * @param scale defines the scaling factor\r\n     * @param result defines the Color3 object where to store the result\r\n     * @returns the result Color3\r\n     */\r\n    public scaleToRef<T extends this>(scale: number, result: T): T {\r\n        result.r = this.r * scale;\r\n        result.g = this.g * scale;\r\n        result.b = this.b * scale;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Scale the current Color3 values by a factor and add the result to a given Color3\r\n     * @param scale defines the scale factor\r\n     * @param result defines color to store the result into\r\n     * @returns the result Color3\r\n     */\r\n    public scaleAndAddToRef<T extends this>(scale: number, result: T): T {\r\n        result.r += this.r * scale;\r\n        result.g += this.g * scale;\r\n        result.b += this.b * scale;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Clamps the rgb values by the min and max values and stores the result into \"result\"\r\n     * @param min defines minimum clamping value (default is 0)\r\n     * @param max defines maximum clamping value (default is 1)\r\n     * @param result defines color to store the result into\r\n     * @returns the result Color3\r\n     */\r\n    public clampToRef<T extends this>(min: number = 0, max: number = 1, result: T): T {\r\n        result.r = Clamp(this.r, min, max);\r\n        result.g = Clamp(this.g, min, max);\r\n        result.b = Clamp(this.b, min, max);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 set with the added values of the current Color3 and of the given one\r\n     * @param otherColor defines the second operand\r\n     * @returns the new Color3\r\n     */\r\n    public add(otherColor: DeepImmutable<this>): this {\r\n        return new (this.constructor as Constructor<typeof Color3, this>)(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);\r\n    }\r\n\r\n    /**\r\n     * Adds the given color to the current Color3\r\n     * @param otherColor defines the second operand\r\n     * @returns the current updated Color3\r\n     */\r\n    public addInPlace(otherColor: DeepImmutable<this>): this {\r\n        this.r += otherColor.r;\r\n        this.g += otherColor.g;\r\n        this.b += otherColor.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the given coordinates to the current Color3\r\n     * @param r defines the r coordinate of the operand\r\n     * @param g defines the g coordinate of the operand\r\n     * @param b defines the b coordinate of the operand\r\n     * @returns the current updated Color3\r\n     */\r\n    public addInPlaceFromFloats(r: number, g: number, b: number): this {\r\n        this.r += r;\r\n        this.g += g;\r\n        this.b += b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\r\n     * @param otherColor defines the second operand\r\n     * @param result defines Color3 object to store the result into\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public addToRef<T extends this>(otherColor: DeepImmutable<this>, result: T): T {\r\n        result.r = this.r + otherColor.r;\r\n        result.g = this.g + otherColor.g;\r\n        result.b = this.b + otherColor.b;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color3 set with the subtracted values of the given one from the current Color3\r\n     * @param otherColor defines the second operand\r\n     * @returns the new Color3\r\n     */\r\n    public subtract(otherColor: DeepImmutable<this>): this {\r\n        return new (this.constructor as Constructor<typeof Color3, this>)(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);\r\n    }\r\n\r\n    /**\r\n     * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\r\n     * @param otherColor defines the second operand\r\n     * @param result defines Color3 object to store the result into\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public subtractToRef<T extends this>(otherColor: DeepImmutable<this>, result: T): T {\r\n        result.r = this.r - otherColor.r;\r\n        result.g = this.g - otherColor.g;\r\n        result.b = this.b - otherColor.b;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Subtract the given color from the current Color3\r\n     * @param otherColor defines the second operand\r\n     * @returns the current updated Color3\r\n     */\r\n    public subtractInPlace(otherColor: DeepImmutable<this>): this {\r\n        this.r -= otherColor.r;\r\n        this.g -= otherColor.g;\r\n        this.b -= otherColor.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color3 set with the subtraction of the given floats from the current Color3 coordinates\r\n     * @param r defines the r coordinate of the operand\r\n     * @param g defines the g coordinate of the operand\r\n     * @param b defines the b coordinate of the operand\r\n     * @returns the resulting Color3\r\n     */\r\n    public subtractFromFloats(r: number, g: number, b: number): this {\r\n        return new (this.constructor as Constructor<typeof Color3, this>)(this.r - r, this.g - g, this.b - b);\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current Color3 coordinates and set the given color \"result\" with this result\r\n     * @param r defines the r coordinate of the operand\r\n     * @param g defines the g coordinate of the operand\r\n     * @param b defines the b coordinate of the operand\r\n     * @param result defines the Color3 object where to store the result\r\n     * @returns the result\r\n     */\r\n    public subtractFromFloatsToRef<T extends Color3>(r: number, g: number, b: number, result: T): T {\r\n        return result.copyFromFloats(this.r - r, this.g - g, this.b - b);\r\n    }\r\n\r\n    /**\r\n     * Copy the current object\r\n     * @returns a new Color3 copied the current one\r\n     */\r\n    public clone(): this {\r\n        return new (this.constructor as Constructor<typeof Color3, this>)(this.r, this.g, this.b);\r\n    }\r\n\r\n    /**\r\n     * Copies the rgb values from the source in the current Color3\r\n     * @param source defines the source Color3 object\r\n     * @returns the updated Color3 object\r\n     */\r\n    public copyFrom(source: DeepImmutable<this>): this {\r\n        this.r = source.r;\r\n        this.g = source.g;\r\n        this.b = source.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the Color3 rgb values from the given floats\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @returns the current Color3 object\r\n     */\r\n    public copyFromFloats(r: number, g: number, b: number): this {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the Color3 rgb values from the given floats\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @returns the current Color3 object\r\n     */\r\n    public set(r: number, g: number, b: number): this {\r\n        return this.copyFromFloats(r, g, b);\r\n    }\r\n\r\n    /**\r\n     * Copies the given float to the current Color3 coordinates\r\n     * @param v defines the r, g and b coordinates of the operand\r\n     * @returns the current updated Color3\r\n     */\r\n    public setAll(v: number): this {\r\n        this.r = this.g = this.b = v;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Compute the Color3 hexadecimal code as a string\r\n     * @returns a string containing the hexadecimal representation of the Color3 object\r\n     */\r\n    public toHexString(): string {\r\n        const intR = Math.round(this.r * 255);\r\n        const intG = Math.round(this.g * 255);\r\n        const intB = Math.round(this.b * 255);\r\n        return \"#\" + ToHex(intR) + ToHex(intG) + ToHex(intB);\r\n    }\r\n\r\n    /**\r\n     * Converts current color in rgb space to HSV values\r\n     * @returns a new color3 representing the HSV values\r\n     */\r\n    public toHSV(): this {\r\n        const result = new (this.constructor as Constructor<typeof Color3, this>)();\r\n\r\n        this.toHSVToRef(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Converts current color in rgb space to HSV values\r\n     * @param result defines the Color3 where to store the HSV values\r\n     */\r\n    public toHSVToRef(result: this) {\r\n        const r = this.r;\r\n        const g = this.g;\r\n        const b = this.b;\r\n\r\n        const max = Math.max(r, g, b);\r\n        const min = Math.min(r, g, b);\r\n        let h = 0;\r\n        let s = 0;\r\n        const v = max;\r\n\r\n        const dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color3 converted from the current one to linear space\r\n     * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\r\n     * @returns a new Color3 object\r\n     */\r\n    public toLinearSpace(exact = false): this {\r\n        const convertedColor = new (this.constructor as Constructor<typeof Color3, this>)();\r\n        this.toLinearSpaceToRef(convertedColor, exact);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color3 object where to store the linear space version\r\n     * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\r\n     * @returns the unmodified Color3\r\n     */\r\n    public toLinearSpaceToRef(convertedColor: this, exact = false): this {\r\n        if (exact) {\r\n            convertedColor.r = colorChannelToLinearSpaceExact(this.r);\r\n            convertedColor.g = colorChannelToLinearSpaceExact(this.g);\r\n            convertedColor.b = colorChannelToLinearSpaceExact(this.b);\r\n        } else {\r\n            convertedColor.r = colorChannelToLinearSpace(this.r);\r\n            convertedColor.g = colorChannelToLinearSpace(this.g);\r\n            convertedColor.b = colorChannelToLinearSpace(this.b);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color3 converted from the current one to gamma space\r\n     * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\r\n     * @returns a new Color3 object\r\n     */\r\n    public toGammaSpace(exact = false): this {\r\n        const convertedColor = new (this.constructor as Constructor<typeof Color3, this>)();\r\n        this.toGammaSpaceToRef(convertedColor, exact);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color3 object where to store the gamma space version\r\n     * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\r\n     * @returns the unmodified Color3\r\n     */\r\n    public toGammaSpaceToRef(convertedColor: this, exact = false): this {\r\n        if (exact) {\r\n            convertedColor.r = colorChannelToGammaSpaceExact(this.r);\r\n            convertedColor.g = colorChannelToGammaSpaceExact(this.g);\r\n            convertedColor.b = colorChannelToGammaSpaceExact(this.b);\r\n        } else {\r\n            convertedColor.r = colorChannelToGammaSpace(this.r);\r\n            convertedColor.g = colorChannelToGammaSpace(this.g);\r\n            convertedColor.b = colorChannelToGammaSpace(this.b);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n\r\n    private static _BlackReadOnly = Color3.Black() as DeepImmutable<Color3>;\r\n\r\n    /**\r\n     * Converts Hue, saturation and value to a Color3 (RGB)\r\n     * @param hue defines the hue (value between 0 and 360)\r\n     * @param saturation defines the saturation (value between 0 and 1)\r\n     * @param value defines the value (value between 0 and 1)\r\n     * @param result defines the Color3 where to store the RGB values\r\n     */\r\n    public static HSVtoRGBToRef(hue: number, saturation: number, value: number, result: Color3) {\r\n        const chroma = value * saturation;\r\n        const h = hue / 60;\r\n        const x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        let r = 0;\r\n        let g = 0;\r\n        let b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        const m = value - chroma;\r\n        result.set(r + m, g + m, b + m);\r\n    }\r\n\r\n    /**\r\n     * Converts Hue, saturation and value to a new Color3 (RGB)\r\n     * @param hue defines the hue (value between 0 and 360)\r\n     * @param saturation defines the saturation (value between 0 and 1)\r\n     * @param value defines the value (value between 0 and 1)\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromHSV(hue: number, saturation: number, value: number): Color3 {\r\n        const result = new Color3(0, 0, 0);\r\n        Color3.HSVtoRGBToRef(hue, saturation, value, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from the string containing valid hexadecimal values\r\n     * @param hex defines a string containing valid hexadecimal values\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromHexString(hex: string): Color3 {\r\n        if (hex.substring(0, 1) !== \"#\" || hex.length !== 7) {\r\n            return new Color3(0, 0, 0);\r\n        }\r\n\r\n        const r = parseInt(hex.substring(1, 3), 16);\r\n        const g = parseInt(hex.substring(3, 5), 16);\r\n        const b = parseInt(hex.substring(5, 7), 16);\r\n\r\n        return Color3.FromInts(r, g, b);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from the starting index of the given array\r\n     * @param array defines the source array\r\n     * @param offset defines an offset in the source array\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Color3 {\r\n        return new Color3(array[offset], array[offset + 1], array[offset + 2]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from the starting index element of the given array\r\n     * @param array defines the source array to read from\r\n     * @param offset defines the offset in the source array\r\n     * @param result defines the target Color3 object\r\n     */\r\n    public static FromArrayToRef(array: DeepImmutable<ArrayLike<number>>, offset: number = 0, result: Color3) {\r\n        result.r = array[offset];\r\n        result.g = array[offset + 1];\r\n        result.b = array[offset + 2];\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from integer values (\\< 256)\r\n     * @param r defines the red component to read from (value between 0 and 255)\r\n     * @param g defines the green component to read from (value between 0 and 255)\r\n     * @param b defines the blue component to read from (value between 0 and 255)\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromInts(r: number, g: number, b: number): Color3 {\r\n        return new Color3(r / 255.0, g / 255.0, b / 255.0);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\r\n     * @param start defines the start Color3 value\r\n     * @param end defines the end Color3 value\r\n     * @param amount defines the gradient value between start and end\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Lerp(start: DeepImmutable<Color3>, end: DeepImmutable<Color3>, amount: number): Color3 {\r\n        const result = new Color3(0.0, 0.0, 0.0);\r\n        Color3.LerpToRef(start, end, amount, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\r\n     * @param left defines the start value\r\n     * @param right defines the end value\r\n     * @param amount defines the gradient factor\r\n     * @param result defines the Color3 object where to store the result\r\n     */\r\n    public static LerpToRef(left: DeepImmutable<Color3>, right: DeepImmutable<Color3>, amount: number, result: Color3): void {\r\n        result.r = left.r + (right.r - left.r) * amount;\r\n        result.g = left.g + (right.g - left.g) * amount;\r\n        result.b = left.b + (right.b - left.b) * amount;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\r\n     * @param value1 defines the first control point\r\n     * @param tangent1 defines the first tangent Color3\r\n     * @param value2 defines the second control point\r\n     * @param tangent2 defines the second tangent Color3\r\n     * @param amount defines the amount on the interpolation spline (between 0 and 1)\r\n     * @returns the new Color3\r\n     */\r\n    public static Hermite(value1: DeepImmutable<Color3>, tangent1: DeepImmutable<Color3>, value2: DeepImmutable<Color3>, tangent2: DeepImmutable<Color3>, amount: number): Color3 {\r\n        const squared = amount * amount;\r\n        const cubed = amount * squared;\r\n        const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\r\n        const part2 = -2.0 * cubed + 3.0 * squared;\r\n        const part3 = cubed - 2.0 * squared + amount;\r\n        const part4 = cubed - squared;\r\n\r\n        const r = value1.r * part1 + value2.r * part2 + tangent1.r * part3 + tangent2.r * part4;\r\n        const g = value1.g * part1 + value2.g * part2 + tangent1.g * part3 + tangent2.g * part4;\r\n        const b = value1.b * part1 + value2.b * part2 + tangent1.b * part3 + tangent2.b * part4;\r\n        return new Color3(r, g, b);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color3 which is the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\r\n     * @param value1 defines the first control point\r\n     * @param tangent1 defines the first tangent\r\n     * @param value2 defines the second control point\r\n     * @param tangent2 defines the second tangent\r\n     * @param time define where the derivative must be done\r\n     * @returns 1st derivative\r\n     */\r\n    public static Hermite1stDerivative(\r\n        value1: DeepImmutable<Color3>,\r\n        tangent1: DeepImmutable<Color3>,\r\n        value2: DeepImmutable<Color3>,\r\n        tangent2: DeepImmutable<Color3>,\r\n        time: number\r\n    ): Color3 {\r\n        const result = Color3.Black();\r\n\r\n        this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color3 which is the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\r\n     * @param value1 defines the first control point\r\n     * @param tangent1 defines the first tangent\r\n     * @param value2 defines the second control point\r\n     * @param tangent2 defines the second tangent\r\n     * @param time define where the derivative must be done\r\n     * @param result define where to store the derivative\r\n     */\r\n    public static Hermite1stDerivativeToRef(\r\n        value1: DeepImmutable<Color3>,\r\n        tangent1: DeepImmutable<Color3>,\r\n        value2: DeepImmutable<Color3>,\r\n        tangent2: DeepImmutable<Color3>,\r\n        time: number,\r\n        result: Color3\r\n    ) {\r\n        const t2 = time * time;\r\n\r\n        result.r = (t2 - time) * 6 * value1.r + (3 * t2 - 4 * time + 1) * tangent1.r + (-t2 + time) * 6 * value2.r + (3 * t2 - 2 * time) * tangent2.r;\r\n        result.g = (t2 - time) * 6 * value1.g + (3 * t2 - 4 * time + 1) * tangent1.g + (-t2 + time) * 6 * value2.g + (3 * t2 - 2 * time) * tangent2.g;\r\n        result.b = (t2 - time) * 6 * value1.b + (3 * t2 - 4 * time + 1) * tangent1.b + (-t2 + time) * 6 * value2.b + (3 * t2 - 2 * time) * tangent2.b;\r\n    }\r\n\r\n    /**\r\n     * Returns a Color3 value containing a red color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Red(): Color3 {\r\n        return new Color3(1, 0, 0);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a green color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Green(): Color3 {\r\n        return new Color3(0, 1, 0);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a blue color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Blue(): Color3 {\r\n        return new Color3(0, 0, 1);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a black color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Black(): Color3 {\r\n        return new Color3(0, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Gets a Color3 value containing a black color that must not be updated\r\n     */\r\n    public static get BlackReadOnly(): DeepImmutable<Color3> {\r\n        return Color3._BlackReadOnly;\r\n    }\r\n\r\n    /**\r\n     * Returns a Color3 value containing a white color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static White(): Color3 {\r\n        return new Color3(1, 1, 1);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a purple color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Purple(): Color3 {\r\n        return new Color3(0.5, 0, 0.5);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a magenta color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Magenta(): Color3 {\r\n        return new Color3(1, 0, 1);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a yellow color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Yellow(): Color3 {\r\n        return new Color3(1, 1, 0);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a gray color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Gray(): Color3 {\r\n        return new Color3(0.5, 0.5, 0.5);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a teal color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Teal(): Color3 {\r\n        return new Color3(0, 1.0, 1.0);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a random color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Random(): Color3 {\r\n        return new Color3(Math.random(), Math.random(), Math.random());\r\n    }\r\n}\r\nObject.defineProperties(Color3.prototype, {\r\n    dimension: { value: [3] },\r\n    rank: { value: 1 },\r\n});\r\n\r\n/**\r\n * Class used to hold a RBGA color\r\n */\r\nexport class Color4 implements Tensor<Tuple<number, 4>>, IColor4Like {\r\n    /**\r\n     * @see Tensor.dimension\r\n     */\r\n    public declare readonly dimension: [4];\r\n\r\n    /**\r\n     * @see Tensor.rank\r\n     */\r\n    public declare readonly rank: 1;\r\n\r\n    /**\r\n     * Creates a new Color4 object from red, green, blue values, all between 0 and 1\r\n     * @param r defines the red component (between 0 and 1, default is 0)\r\n     * @param g defines the green component (between 0 and 1, default is 0)\r\n     * @param b defines the blue component (between 0 and 1, default is 0)\r\n     * @param a defines the alpha component (between 0 and 1, default is 1)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the red component (between 0 and 1, default is 0)\r\n         */\r\n        public r: number = 0,\r\n        /**\r\n         * Defines the green component (between 0 and 1, default is 0)\r\n         */\r\n        public g: number = 0,\r\n        /**\r\n         * Defines the blue component (between 0 and 1, default is 0)\r\n         */\r\n        public b: number = 0,\r\n        /**\r\n         * Defines the alpha component (between 0 and 1, default is 1)\r\n         */\r\n        public a: number = 1\r\n    ) {}\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\r\n     * @returns the new array\r\n     */\r\n    public asArray(): Tuple<number, 4> {\r\n        return [this.r, this.g, this.b, this.a];\r\n    }\r\n\r\n    /**\r\n     * Stores from the starting index in the given array the Color4 successive values\r\n     * @param array defines the array where to store the r,g,b components\r\n     * @param index defines an optional index in the target array to define where to start storing values\r\n     * @returns the current Color4 object\r\n     */\r\n    public toArray(array: FloatArray, index: number = 0): this {\r\n        array[index] = this.r;\r\n        array[index + 1] = this.g;\r\n        array[index + 2] = this.b;\r\n        array[index + 3] = this.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update the current color with values stored in an array from the starting index of the given array\r\n     * @param array defines the source array\r\n     * @param offset defines an offset in the source array\r\n     * @returns the current Color4 object\r\n     */\r\n    public fromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): this {\r\n        this.r = array[offset];\r\n        this.g = array[offset + 1];\r\n        this.b = array[offset + 2];\r\n        this.a = array[offset + 3];\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Determines equality between Color4 objects\r\n     * @param otherColor defines the second operand\r\n     * @returns true if the rgba values are equal to the given ones\r\n     */\r\n    public equals(otherColor: DeepImmutable<this>): boolean {\r\n        return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b && this.a === otherColor.a;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 set with the added values of the current Color4 and of the given one\r\n     * @param otherColor defines the second operand\r\n     * @returns a new Color4 object\r\n     */\r\n    public add(otherColor: DeepImmutable<this>): this {\r\n        return new (this.constructor as Constructor<typeof Color4, this>)(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b, this.a + otherColor.a);\r\n    }\r\n\r\n    /**\r\n     * Updates the given color \"result\" with the result of the addition of the current Color4 and the given one.\r\n     * @param otherColor the color to add\r\n     * @param result the color to store the result\r\n     * @returns result input\r\n     */\r\n    public addToRef<T extends Color4>(otherColor: DeepImmutable<this>, result: T): T {\r\n        result.r = this.r + otherColor.r;\r\n        result.g = this.g + otherColor.g;\r\n        result.b = this.b + otherColor.b;\r\n        result.a = this.a + otherColor.a;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Adds in place the given Color4 values to the current Color4 object\r\n     * @param otherColor defines the second operand\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public addInPlace(otherColor: DeepImmutable<this>): this {\r\n        this.r += otherColor.r;\r\n        this.g += otherColor.g;\r\n        this.b += otherColor.b;\r\n        this.a += otherColor.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the given coordinates to the current Color4\r\n     * @param r defines the r coordinate of the operand\r\n     * @param g defines the g coordinate of the operand\r\n     * @param b defines the b coordinate of the operand\r\n     * @param a defines the a coordinate of the operand\r\n     * @returns the current updated Color4\r\n     */\r\n    public addInPlaceFromFloats(r: number, g: number, b: number, a: number): this {\r\n        this.r += r;\r\n        this.g += g;\r\n        this.b += b;\r\n        this.a += a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 set with the subtracted values of the given one from the current Color4\r\n     * @param otherColor defines the second operand\r\n     * @returns a new Color4 object\r\n     */\r\n    public subtract(otherColor: DeepImmutable<this>): this {\r\n        return new (this.constructor as Constructor<typeof Color4, this>)(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b, this.a - otherColor.a);\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\r\n     * @param otherColor defines the second operand\r\n     * @param result defines the Color4 object where to store the result\r\n     * @returns the result Color4 object\r\n     */\r\n    public subtractToRef<T extends this>(otherColor: DeepImmutable<this>, result: T): T {\r\n        result.r = this.r - otherColor.r;\r\n        result.g = this.g - otherColor.g;\r\n        result.b = this.b - otherColor.b;\r\n        result.a = this.a - otherColor.a;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Subtract in place the given color from the current Color4.\r\n     * @param otherColor the color to subtract\r\n     * @returns the updated Color4.\r\n     */\r\n    public subtractInPlace(otherColor: DeepImmutable<Color4>): this {\r\n        this.r -= otherColor.r;\r\n        this.g -= otherColor.g;\r\n        this.b -= otherColor.b;\r\n        this.a -= otherColor.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color4 set with the result of the subtraction of the given floats from the current Color4 coordinates.\r\n     * @param r value to subtract\r\n     * @param g value to subtract\r\n     * @param b value to subtract\r\n     * @param a value to subtract\r\n     * @returns new color containing the result\r\n     */\r\n    public subtractFromFloats(r: number, g: number, b: number, a: number): this {\r\n        return new (this.constructor as Constructor<typeof Color4, this>)(this.r - r, this.g - g, this.b - b, this.a - a);\r\n    }\r\n\r\n    /**\r\n     * Sets the given color \"result\" set with the result of the subtraction of the given floats from the current Color4 coordinates.\r\n     * @param r value to subtract\r\n     * @param g value to subtract\r\n     * @param b value to subtract\r\n     * @param a value to subtract\r\n     * @param result the color to store the result in\r\n     * @returns result input\r\n     */\r\n    public subtractFromFloatsToRef<T extends Color4>(r: number, g: number, b: number, a: number, result: T): T {\r\n        result.r = this.r - r;\r\n        result.g = this.g - g;\r\n        result.b = this.b - b;\r\n        result.a = this.a - a;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 with the current Color4 values multiplied by scale\r\n     * @param scale defines the scaling factor to apply\r\n     * @returns a new Color4 object\r\n     */\r\n    public scale(scale: number): this {\r\n        return new (this.constructor as Constructor<typeof Color4, this>)(this.r * scale, this.g * scale, this.b * scale, this.a * scale);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the Color4 values by the float \"scale\"\r\n     * @param scale defines the scaling factor to apply\r\n     * @returns the current updated Color4\r\n     */\r\n    public scaleInPlace(scale: number): this {\r\n        this.r *= scale;\r\n        this.g *= scale;\r\n        this.b *= scale;\r\n        this.a *= scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current Color4 values by scale and stores the result in \"result\"\r\n     * @param scale defines the scaling factor to apply\r\n     * @param result defines the Color4 object where to store the result\r\n     * @returns the result Color4\r\n     */\r\n    public scaleToRef<T extends this>(scale: number, result: T): T {\r\n        result.r = this.r * scale;\r\n        result.g = this.g * scale;\r\n        result.b = this.b * scale;\r\n        result.a = this.a * scale;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Scale the current Color4 values by a factor and add the result to a given Color4\r\n     * @param scale defines the scale factor\r\n     * @param result defines the Color4 object where to store the result\r\n     * @returns the result Color4\r\n     */\r\n    public scaleAndAddToRef<T extends this>(scale: number, result: T): T {\r\n        result.r += this.r * scale;\r\n        result.g += this.g * scale;\r\n        result.b += this.b * scale;\r\n        result.a += this.a * scale;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Clamps the rgb values by the min and max values and stores the result into \"result\"\r\n     * @param min defines minimum clamping value (default is 0)\r\n     * @param max defines maximum clamping value (default is 1)\r\n     * @param result defines color to store the result into.\r\n     * @returns the result Color4\r\n     */\r\n    public clampToRef<T extends this>(min: number = 0, max: number = 1, result: T): T {\r\n        result.r = Clamp(this.r, min, max);\r\n        result.g = Clamp(this.g, min, max);\r\n        result.b = Clamp(this.b, min, max);\r\n        result.a = Clamp(this.a, min, max);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Multiply an Color4 value by another and return a new Color4 object\r\n     * @param color defines the Color4 value to multiply by\r\n     * @returns a new Color4 object\r\n     */\r\n    public multiply(color: DeepImmutable<this>): this {\r\n        return new (this.constructor as Constructor<typeof Color4, this>)(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);\r\n    }\r\n\r\n    /**\r\n     * Multiply a Color4 value by another and push the result in a reference value\r\n     * @param color defines the Color4 value to multiply by\r\n     * @param result defines the Color4 to fill the result in\r\n     * @returns the result Color4\r\n     */\r\n    public multiplyToRef<T extends this>(color: DeepImmutable<this>, result: T): T {\r\n        result.r = this.r * color.r;\r\n        result.g = this.g * color.g;\r\n        result.b = this.b * color.b;\r\n        result.a = this.a * color.a;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Multiplies in place the current Color4 by the given one.\r\n     * @param otherColor color to multiple with\r\n     * @returns the updated Color4.\r\n     */\r\n    public multiplyInPlace(otherColor: DeepImmutable<Color4>): this {\r\n        this.r *= otherColor.r;\r\n        this.g *= otherColor.g;\r\n        this.b *= otherColor.b;\r\n        this.a *= otherColor.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color4 set with the multiplication result of the given floats and the current Color4 coordinates.\r\n     * @param r value multiply with\r\n     * @param g value multiply with\r\n     * @param b value multiply with\r\n     * @param a value multiply with\r\n     * @returns resulting new color\r\n     */\r\n    public multiplyByFloats(r: number, g: number, b: number, a: number): this {\r\n        return new (this.constructor as Constructor<typeof Color4, this>)(this.r * r, this.g * g, this.b * b, this.a * a);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public divide(_other: DeepImmutable<this>): this {\r\n        throw new ReferenceError(\"Can not divide a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public divideToRef<T extends this>(_other: DeepImmutable<this>, _result: T): T {\r\n        throw new ReferenceError(\"Can not divide a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public divideInPlace(_other: DeepImmutable<this>): this {\r\n        throw new ReferenceError(\"Can not divide a color\");\r\n    }\r\n\r\n    /**\r\n     * Updates the Color4 coordinates with the minimum values between its own and the given color ones\r\n     * @param other defines the second operand\r\n     * @returns the current updated Color4\r\n     */\r\n    public minimizeInPlace(other: DeepImmutable<Color4>): this {\r\n        this.r = Math.min(this.r, other.r);\r\n        this.g = Math.min(this.g, other.g);\r\n        this.b = Math.min(this.b, other.b);\r\n        this.a = Math.min(this.a, other.a);\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates the Color4 coordinates with the maximum values between its own and the given color ones\r\n     * @param other defines the second operand\r\n     * @returns the current updated Color4\r\n     */\r\n    public maximizeInPlace(other: DeepImmutable<Color4>): this {\r\n        this.r = Math.max(this.r, other.r);\r\n        this.g = Math.max(this.g, other.g);\r\n        this.b = Math.max(this.b, other.b);\r\n        this.a = Math.max(this.a, other.a);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the current Color4 with the minimal coordinate values between its and the given coordinates\r\n     * @param r defines the r coordinate of the operand\r\n     * @param g defines the g coordinate of the operand\r\n     * @param b defines the b coordinate of the operand\r\n     * @param a defines the a coordinate of the operand\r\n     * @returns the current updated Color4\r\n     */\r\n    public minimizeInPlaceFromFloats(r: number, g: number, b: number, a: number): this {\r\n        this.r = Math.min(r, this.r);\r\n        this.g = Math.min(g, this.g);\r\n        this.b = Math.min(b, this.b);\r\n        this.a = Math.min(a, this.a);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the current Color4 with the maximal coordinate values between its and the given coordinates.\r\n     * @param r defines the r coordinate of the operand\r\n     * @param g defines the g coordinate of the operand\r\n     * @param b defines the b coordinate of the operand\r\n     * @param a defines the a coordinate of the operand\r\n     * @returns the current updated Color4\r\n     */\r\n    public maximizeInPlaceFromFloats(r: number, g: number, b: number, a: number): this {\r\n        this.r = Math.max(r, this.r);\r\n        this.g = Math.max(g, this.g);\r\n        this.b = Math.max(b, this.b);\r\n        this.a = Math.max(a, this.a);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public floorToRef<T extends this>(_result: T): T {\r\n        throw new ReferenceError(\"Can not floor a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public floor(): this {\r\n        throw new ReferenceError(\"Can not floor a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public fractToRef<T extends this>(_result: T): T {\r\n        throw new ReferenceError(\"Can not fract a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public fract(): this {\r\n        throw new ReferenceError(\"Can not fract a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public negate(): this {\r\n        throw new ReferenceError(\"Can not negate a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public negateInPlace(): this {\r\n        throw new ReferenceError(\"Can not negate a color\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Do not use\r\n     */\r\n    public negateToRef<T extends this>(_result: T): T {\r\n        throw new ReferenceError(\"Can not negate a color\");\r\n    }\r\n\r\n    /**\r\n     * Boolean : True if the current Color4 coordinates are each beneath the distance \"epsilon\" from the given color ones.\r\n     * @param otherColor color to compare against\r\n     * @param epsilon (Default: very small number)\r\n     * @returns true if they are equal\r\n     */\r\n    public equalsWithEpsilon(otherColor: DeepImmutable<Color4>, epsilon: number = Epsilon): boolean {\r\n        return (\r\n            Scalar.WithinEpsilon(this.r, otherColor.r, epsilon) &&\r\n            Scalar.WithinEpsilon(this.g, otherColor.g, epsilon) &&\r\n            Scalar.WithinEpsilon(this.b, otherColor.b, epsilon) &&\r\n            Scalar.WithinEpsilon(this.a, otherColor.a, epsilon)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Boolean : True if the given floats are strictly equal to the current Color4 coordinates.\r\n     * @param x x value to compare against\r\n     * @param y y value to compare against\r\n     * @param z z value to compare against\r\n     * @param w w value to compare against\r\n     * @returns true if equal\r\n     */\r\n    public equalsToFloats(x: number, y: number, z: number, w: number): boolean {\r\n        return this.r === x && this.g === y && this.b === z && this.a === w;\r\n    }\r\n\r\n    /**\r\n     * Creates a string with the Color4 current values\r\n     * @returns the string representation of the Color4 object\r\n     */\r\n    public toString(): string {\r\n        return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \" A:\" + this.a + \"}\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"Color4\"\r\n     * @returns \"Color4\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Color4\";\r\n    }\r\n\r\n    /**\r\n     * Compute the Color4 hash code\r\n     * @returns an unique number that can be used to hash Color4 objects\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = (this.r * 255) | 0;\r\n        hash = (hash * 397) ^ ((this.g * 255) | 0);\r\n        hash = (hash * 397) ^ ((this.b * 255) | 0);\r\n        hash = (hash * 397) ^ ((this.a * 255) | 0);\r\n        return hash;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 copied from the current one\r\n     * @returns a new Color4 object\r\n     */\r\n    public clone(): this {\r\n        const result = new (this.constructor as Constructor<typeof Color4, this>)();\r\n        return result.copyFrom(this);\r\n    }\r\n\r\n    /**\r\n     * Copies the given Color4 values into the current one\r\n     * @param source defines the source Color4 object\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public copyFrom(source: DeepImmutable<Color4>): this {\r\n        this.r = source.r;\r\n        this.g = source.g;\r\n        this.b = source.b;\r\n        this.a = source.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given float values into the current one\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @param a defines the alpha component to read from\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public copyFromFloats(r: number, g: number, b: number, a: number): this {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given float values into the current one\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @param a defines the alpha component to read from\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public set(r: number, g: number, b: number, a: number): this {\r\n        return this.copyFromFloats(r, g, b, a);\r\n    }\r\n\r\n    /**\r\n     * Copies the given float to the current Vector4 coordinates\r\n     * @param v defines the r, g, b, and a coordinates of the operand\r\n     * @returns the current updated Vector4\r\n     */\r\n    public setAll(v: number): this {\r\n        this.r = this.g = this.b = this.a = v;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Compute the Color4 hexadecimal code as a string\r\n     * @param returnAsColor3 defines if the string should only contains RGB values (off by default)\r\n     * @returns a string containing the hexadecimal representation of the Color4 object\r\n     */\r\n    public toHexString(returnAsColor3 = false): string {\r\n        const intR = Math.round(this.r * 255);\r\n        const intG = Math.round(this.g * 255);\r\n        const intB = Math.round(this.b * 255);\r\n\r\n        if (returnAsColor3) {\r\n            return \"#\" + ToHex(intR) + ToHex(intG) + ToHex(intB);\r\n        }\r\n\r\n        const intA = Math.round(this.a * 255);\r\n        return \"#\" + ToHex(intR) + ToHex(intG) + ToHex(intB) + ToHex(intA);\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color4 converted from the current one to linear space\r\n     * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\r\n     * @returns a new Color4 object\r\n     */\r\n    public toLinearSpace(exact = false): Color4 {\r\n        const convertedColor = new Color4();\r\n        this.toLinearSpaceToRef(convertedColor, exact);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color4 object where to store the linear space version\r\n     * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\r\n     * @returns the unmodified Color4\r\n     */\r\n    public toLinearSpaceToRef(convertedColor: Color4, exact = false): Color4 {\r\n        if (exact) {\r\n            convertedColor.r = colorChannelToLinearSpaceExact(this.r);\r\n            convertedColor.g = colorChannelToLinearSpaceExact(this.g);\r\n            convertedColor.b = colorChannelToLinearSpaceExact(this.b);\r\n        } else {\r\n            convertedColor.r = colorChannelToLinearSpace(this.r);\r\n            convertedColor.g = colorChannelToLinearSpace(this.g);\r\n            convertedColor.b = colorChannelToLinearSpace(this.b);\r\n        }\r\n        convertedColor.a = this.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color4 converted from the current one to gamma space\r\n     * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\r\n     * @returns a new Color4 object\r\n     */\r\n    public toGammaSpace(exact = false): Color4 {\r\n        const convertedColor = new Color4();\r\n        this.toGammaSpaceToRef(convertedColor, exact);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color4 object where to store the gamma space version\r\n     * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\r\n     * @returns the unmodified Color4\r\n     */\r\n    public toGammaSpaceToRef(convertedColor: Color4, exact = false): Color4 {\r\n        if (exact) {\r\n            convertedColor.r = colorChannelToGammaSpaceExact(this.r);\r\n            convertedColor.g = colorChannelToGammaSpaceExact(this.g);\r\n            convertedColor.b = colorChannelToGammaSpaceExact(this.b);\r\n        } else {\r\n            convertedColor.r = colorChannelToGammaSpace(this.r);\r\n            convertedColor.g = colorChannelToGammaSpace(this.g);\r\n            convertedColor.b = colorChannelToGammaSpace(this.b);\r\n        }\r\n        convertedColor.a = this.a;\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new Color4 from the string containing valid hexadecimal values.\r\n     *\r\n     * A valid hex string is either in the format #RRGGBB or #RRGGBBAA.\r\n     *\r\n     * When a hex string without alpha is passed, the resulting Color4 has\r\n     * its alpha value set to 1.0.\r\n     *\r\n     * An invalid string results in a Color with all its channels set to 0.0,\r\n     * i.e. \"transparent black\".\r\n     *\r\n     * @param hex defines a string containing valid hexadecimal values\r\n     * @returns a new Color4 object\r\n     */\r\n    public static FromHexString(hex: string): Color4 {\r\n        if (hex.substring(0, 1) !== \"#\" || (hex.length !== 9 && hex.length !== 7)) {\r\n            return new Color4(0.0, 0.0, 0.0, 0.0);\r\n        }\r\n\r\n        const r = parseInt(hex.substring(1, 3), 16);\r\n        const g = parseInt(hex.substring(3, 5), 16);\r\n        const b = parseInt(hex.substring(5, 7), 16);\r\n        const a = hex.length === 9 ? parseInt(hex.substring(7, 9), 16) : 255;\r\n\r\n        return Color4.FromInts(r, g, b, a);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\r\n     * @param left defines the start value\r\n     * @param right defines the end value\r\n     * @param amount defines the gradient factor\r\n     * @returns a new Color4 object\r\n     */\r\n    public static Lerp(left: DeepImmutable<Color4>, right: DeepImmutable<Color4>, amount: number): Color4 {\r\n        const result = new Color4(0.0, 0.0, 0.0, 0.0);\r\n        Color4.LerpToRef(left, right, amount, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\r\n     * @param left defines the start value\r\n     * @param right defines the end value\r\n     * @param amount defines the gradient factor\r\n     * @param result defines the Color4 object where to store data\r\n     */\r\n    public static LerpToRef(left: DeepImmutable<Color4>, right: DeepImmutable<Color4>, amount: number, result: Color4): void {\r\n        result.r = left.r + (right.r - left.r) * amount;\r\n        result.g = left.g + (right.g - left.g) * amount;\r\n        result.b = left.b + (right.b - left.b) * amount;\r\n        result.a = left.a + (right.a - left.a) * amount;\r\n    }\r\n\r\n    /**\r\n     * Interpolate between two Color4 using Hermite interpolation\r\n     * @param value1 defines first Color4\r\n     * @param tangent1 defines the incoming tangent\r\n     * @param value2 defines second Color4\r\n     * @param tangent2 defines the outgoing tangent\r\n     * @param amount defines the target Color4\r\n     * @returns the new interpolated Color4\r\n     */\r\n    public static Hermite(value1: DeepImmutable<Color4>, tangent1: DeepImmutable<Color4>, value2: DeepImmutable<Color4>, tangent2: DeepImmutable<Color4>, amount: number): Color4 {\r\n        const squared = amount * amount;\r\n        const cubed = amount * squared;\r\n        const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\r\n        const part2 = -2.0 * cubed + 3.0 * squared;\r\n        const part3 = cubed - 2.0 * squared + amount;\r\n        const part4 = cubed - squared;\r\n\r\n        const r = value1.r * part1 + value2.r * part2 + tangent1.r * part3 + tangent2.r * part4;\r\n        const g = value1.g * part1 + value2.g * part2 + tangent1.g * part3 + tangent2.g * part4;\r\n        const b = value1.b * part1 + value2.b * part2 + tangent1.b * part3 + tangent2.b * part4;\r\n        const a = value1.a * part1 + value2.a * part2 + tangent1.a * part3 + tangent2.a * part4;\r\n        return new Color4(r, g, b, a);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color4 which is the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\r\n     * @param value1 defines the first control point\r\n     * @param tangent1 defines the first tangent\r\n     * @param value2 defines the second control point\r\n     * @param tangent2 defines the second tangent\r\n     * @param time define where the derivative must be done\r\n     * @returns 1st derivative\r\n     */\r\n    public static Hermite1stDerivative(\r\n        value1: DeepImmutable<Color4>,\r\n        tangent1: DeepImmutable<Color4>,\r\n        value2: DeepImmutable<Color4>,\r\n        tangent2: DeepImmutable<Color4>,\r\n        time: number\r\n    ): Color4 {\r\n        const result = new Color4();\r\n\r\n        this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Update a Color4 with the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\r\n     * @param value1 defines the first control point\r\n     * @param tangent1 defines the first tangent\r\n     * @param value2 defines the second control point\r\n     * @param tangent2 defines the second tangent\r\n     * @param time define where the derivative must be done\r\n     * @param result define where to store the derivative\r\n     */\r\n    public static Hermite1stDerivativeToRef(\r\n        value1: DeepImmutable<Color4>,\r\n        tangent1: DeepImmutable<Color4>,\r\n        value2: DeepImmutable<Color4>,\r\n        tangent2: DeepImmutable<Color4>,\r\n        time: number,\r\n        result: Color4\r\n    ) {\r\n        const t2 = time * time;\r\n\r\n        result.r = (t2 - time) * 6 * value1.r + (3 * t2 - 4 * time + 1) * tangent1.r + (-t2 + time) * 6 * value2.r + (3 * t2 - 2 * time) * tangent2.r;\r\n        result.g = (t2 - time) * 6 * value1.g + (3 * t2 - 4 * time + 1) * tangent1.g + (-t2 + time) * 6 * value2.g + (3 * t2 - 2 * time) * tangent2.g;\r\n        result.b = (t2 - time) * 6 * value1.b + (3 * t2 - 4 * time + 1) * tangent1.b + (-t2 + time) * 6 * value2.b + (3 * t2 - 2 * time) * tangent2.b;\r\n        result.a = (t2 - time) * 6 * value1.a + (3 * t2 - 4 * time + 1) * tangent1.a + (-t2 + time) * 6 * value2.a + (3 * t2 - 2 * time) * tangent2.a;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 from a Color3 and an alpha value\r\n     * @param color3 defines the source Color3 to read from\r\n     * @param alpha defines the alpha component (1.0 by default)\r\n     * @returns a new Color4 object\r\n     */\r\n    public static FromColor3(color3: DeepImmutable<Color3>, alpha: number = 1.0): Color4 {\r\n        return new Color4(color3.r, color3.g, color3.b, alpha);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 from the starting index element of the given array\r\n     * @param array defines the source array to read from\r\n     * @param offset defines the offset in the source array\r\n     * @returns a new Color4 object\r\n     */\r\n    public static FromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Color4 {\r\n        return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 from the starting index element of the given array\r\n     * @param array defines the source array to read from\r\n     * @param offset defines the offset in the source array\r\n     * @param result defines the target Color4 object\r\n     */\r\n    public static FromArrayToRef(array: DeepImmutable<ArrayLike<number>>, offset: number = 0, result: Color4) {\r\n        result.r = array[offset];\r\n        result.g = array[offset + 1];\r\n        result.b = array[offset + 2];\r\n        result.a = array[offset + 3];\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from integer values (less than 256)\r\n     * @param r defines the red component to read from (value between 0 and 255)\r\n     * @param g defines the green component to read from (value between 0 and 255)\r\n     * @param b defines the blue component to read from (value between 0 and 255)\r\n     * @param a defines the alpha component to read from (value between 0 and 255)\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromInts(r: number, g: number, b: number, a: number): Color4 {\r\n        return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);\r\n    }\r\n\r\n    /**\r\n     * Check the content of a given array and convert it to an array containing RGBA data\r\n     * If the original array was already containing count * 4 values then it is returned directly\r\n     * @param colors defines the array to check\r\n     * @param count defines the number of RGBA data to expect\r\n     * @returns an array containing count * 4 values (RGBA)\r\n     */\r\n    public static CheckColors4(colors: number[], count: number): number[] {\r\n        // Check if color3 was used\r\n        if (colors.length === count * 3) {\r\n            const colors4 = [];\r\n            for (let index = 0; index < colors.length; index += 3) {\r\n                const newIndex = (index / 3) * 4;\r\n                colors4[newIndex] = colors[index];\r\n                colors4[newIndex + 1] = colors[index + 1];\r\n                colors4[newIndex + 2] = colors[index + 2];\r\n                colors4[newIndex + 3] = 1.0;\r\n            }\r\n\r\n            return colors4;\r\n        }\r\n\r\n        return colors;\r\n    }\r\n}\r\nObject.defineProperties(Color4.prototype, {\r\n    dimension: { value: [4] },\r\n    rank: { value: 1 },\r\n});\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class TmpColors {\r\n    public static Color3: Color3[] = ArrayTools.BuildArray(3, Color3.Black);\r\n    public static Color4: Color4[] = ArrayTools.BuildArray(3, () => new Color4(0, 0, 0, 0));\r\n}\r\n\r\nRegisterClass(\"BABYLON.Color3\", Color3);\r\nRegisterClass(\"BABYLON.Color4\", Color4);\r\n"],
  "mappings": "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",
  "names": []
}
