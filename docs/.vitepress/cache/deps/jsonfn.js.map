{
  "version": 3,
  "sources": ["../../../node_modules/jsonfn/jsonfn.js"],
  "sourcesContent": ["/**\n* JSONfn - javascript plugin to convert javascript objects, ( including ones with functions ) \n* to string and vise versa.\n*  \n* Version - 0.31.0\n* Copyright (c) 2012 Vadim Kiryukhin\n* vkiryukhin @ gmail.com\n* http://www.eslinstructor.net/jsonfn/\n* \n* Dual licensed under the MIT and GPL licenses:\n*   http://www.opensource.org/licenses/mit-license.php\n*   http://www.gnu.org/licenses/gpl.html\n*\n*   USAGE:\n* \n*   require('jsonfn').JSONfn.stringify(obj);\n*\trequire('jsonfn').JSONfn.parse(str);\n*\n*        @obj   -  javascript object;\n*\t\t @strfn -  String in JSON format; \n*\n*   Examples:\n*\t\t\n*   var strfn = require('jsonfn').JSONfn.stringify(obj);\n*\tvar objfn = require('jsonfn').JSONfn.parse(strfn);\n*\n*/\n\n// Create a JSON object only if it does not already exist. \nvar JSONfn;\nif (!JSONfn) {\n    JSONfn = {};\n}\n\n(function () {\n\t\n\tJSONfn.stringify = function(obj) {\n\t\treturn JSON.stringify(obj,function(key, value){\n\t\t\t\treturn (typeof value === 'function' ) ? value.toString() : value;\n\t\t\t});\n\t}\n\n\tJSONfn.parse = function(str) {\n\t\treturn JSON.parse(str,function(key, value){\n\t\t\tif(typeof value != 'string') return value;\n\t\t\treturn ( value.substring(0,8) == 'function') ? eval('('+value+')') : value;\n\t\t});\n\t}\n}());\n\nexports.JSONfn = JSONfn;\t\n"],
  "mappings": ";;;;;AAAA;AAAA;AA6BA,QAAI;AACJ,QAAI,CAAC,QAAQ;AACT,eAAS,CAAC;AAAA,IACd;AAEA,KAAC,WAAY;AAEZ,aAAO,YAAY,SAAS,KAAK;AAChC,eAAO,KAAK,UAAU,KAAI,SAASA,MAAKC,QAAM;AAC5C,iBAAQ,OAAOA,WAAU,aAAeA,OAAM,SAAS,IAAIA;AAAA,QAC5D,CAAC;AAAA,MACH;AAEA,aAAO,QAAQ,SAAS,KAAK;AAC5B,eAAO,KAAK,MAAM,KAAI,SAAS,KAAK,OAAM;AACzC,cAAG,OAAO,SAAS;AAAU,mBAAO;AACpC,iBAAS,MAAM,UAAU,GAAE,CAAC,KAAK,aAAc,KAAK,MAAI,QAAM,GAAG,IAAI;AAAA,QACtE,CAAC;AAAA,MACF;AAAA,IACD,GAAE;AAEF,YAAQ,SAAS;AAAA;AAAA;",
  "names": ["key", "value"]
}
