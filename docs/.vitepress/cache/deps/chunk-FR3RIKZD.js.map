{
  "version": 3,
  "sources": ["../../../dev/core/src/Animations/animationGroup.ts", "../../../dev/core/src/Behaviors/Meshes/fadeInOutBehavior.ts", "../../../dev/core/src/Misc/pivotTools.ts", "../../../dev/core/src/Meshes/Builders/planeBuilder.ts", "../../../dev/core/src/Behaviors/Meshes/pointerDragBehavior.ts", "../../../dev/core/src/Behaviors/Meshes/baseSixDofDragBehavior.ts", "../../../dev/core/src/Behaviors/Meshes/sixDofDragBehavior.ts", "../../../dev/core/src/Behaviors/Meshes/surfaceMagnetismBehavior.ts", "../../../dev/core/src/Behaviors/Meshes/followBehavior.ts", "../../../dev/core/src/Behaviors/Meshes/handConstraintBehavior.ts", "../../../dev/core/src/Gizmos/gizmo.ts", "../../../dev/core/src/Meshes/Builders/boxBuilder.ts", "../../../dev/core/src/Engines/constants.ts", "../../../dev/core/src/Events/clipboardEvents.ts", "../../../dev/core/src/Layers/layerSceneComponent.ts", "../../../dev/core/src/Shaders/layer.fragment.ts", "../../../dev/core/src/Shaders/layer.vertex.ts", "../../../dev/core/src/Layers/layer.ts"],
  "sourcesContent": ["import type { Animatable } from \"./animatable\";\r\nimport { Animation } from \"./animation\";\r\nimport type { IMakeAnimationAdditiveOptions } from \"./animation\";\r\nimport type { IAnimationKey } from \"./animationKey\";\r\n\r\nimport type { Scene, IDisposable } from \"../scene\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\nimport type { AbstractScene } from \"../abstractScene\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport type { AnimationGroupMask } from \"./animationGroupMask\";\r\n\r\n/**\r\n * This class defines the direct association between an animation and a target\r\n */\r\nexport class TargetedAnimation {\r\n    /**\r\n     * Animation to perform\r\n     */\r\n    public animation: Animation;\r\n    /**\r\n     * Target to animate\r\n     */\r\n    public target: any;\r\n\r\n    /**\r\n     * Returns the string \"TargetedAnimation\"\r\n     * @returns \"TargetedAnimation\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"TargetedAnimation\";\r\n    }\r\n\r\n    /**\r\n     * Serialize the object\r\n     * @returns the JSON object representing the current entity\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n        serializationObject.animation = this.animation.serialize();\r\n        serializationObject.targetId = this.target.id;\r\n\r\n        return serializationObject;\r\n    }\r\n}\r\n\r\n/**\r\n * Options to be used when creating an additive group animation\r\n */\r\nexport interface IMakeAnimationGroupAdditiveOptions extends IMakeAnimationAdditiveOptions {\r\n    /**\r\n     * Defines if the animation group should be cloned or not (default is false)\r\n     */\r\n    cloneOriginalAnimationGroup?: boolean;\r\n    /**\r\n     * The name of the cloned animation group if cloneOriginalAnimationGroup is true\r\n     */\r\n    clonedAnimationGroupName?: string;\r\n}\r\n\r\n/**\r\n * Use this class to create coordinated animations on multiple targets\r\n */\r\nexport class AnimationGroup implements IDisposable {\r\n    private _scene: Scene;\r\n\r\n    private _targetedAnimations = new Array<TargetedAnimation>();\r\n    private _animatables = new Array<Animatable>();\r\n    private _from = Number.MAX_VALUE;\r\n    private _to = -Number.MAX_VALUE;\r\n    private _isStarted: boolean;\r\n    private _isPaused: boolean;\r\n    private _speedRatio = 1;\r\n    private _loopAnimation = false;\r\n    private _isAdditive = false;\r\n    private _weight = -1;\r\n    private _playOrder = 0;\r\n    private _enableBlending: Nullable<boolean> = null;\r\n    private _blendingSpeed: Nullable<number> = null;\r\n    private _numActiveAnimatables = 0;\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * This observable will notify when one animation have ended\r\n     */\r\n    public onAnimationEndObservable = new Observable<TargetedAnimation>();\r\n\r\n    /**\r\n     * Observer raised when one animation loops\r\n     */\r\n    public onAnimationLoopObservable = new Observable<TargetedAnimation>();\r\n\r\n    /**\r\n     * Observer raised when all animations have looped\r\n     */\r\n    public onAnimationGroupLoopObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * This observable will notify when all animations have ended.\r\n     */\r\n    public onAnimationGroupEndObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * This observable will notify when all animations have paused.\r\n     */\r\n    public onAnimationGroupPauseObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * This observable will notify when all animations are playing.\r\n     */\r\n    public onAnimationGroupPlayObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    private _mask: Nullable<AnimationGroupMask> = null;\r\n\r\n    /**\r\n     * Gets or sets the mask associated with this animation group. This mask is used to filter which objects should be animated.\r\n     */\r\n    public get mask() {\r\n        return this._mask;\r\n    }\r\n\r\n    public set mask(value: Nullable<AnimationGroupMask>) {\r\n        if (this._mask === value) {\r\n            return;\r\n        }\r\n\r\n        this._mask = value;\r\n\r\n        this.syncWithMask(true);\r\n    }\r\n\r\n    /**\r\n     * Makes sure that the animations are either played or stopped according to the animation group mask.\r\n     * Note however that the call won't have any effect if the animation group has not been started yet.\r\n     * @param forceUpdate If true, forces to loop over the animatables even if no mask is defined (used internally, you shouldn't need to use it). Default: false.\r\n     */\r\n    public syncWithMask(forceUpdate = false) {\r\n        if (!this.mask && !forceUpdate) {\r\n            this._numActiveAnimatables = this._targetedAnimations.length;\r\n            return;\r\n        }\r\n\r\n        this._numActiveAnimatables = 0;\r\n\r\n        for (let i = 0; i < this._animatables.length; ++i) {\r\n            const animatable = this._animatables[i];\r\n\r\n            if (!this.mask || this.mask.disabled || this.mask.retainsTarget(animatable.target.name)) {\r\n                this._numActiveAnimatables++;\r\n                if (animatable.paused) {\r\n                    animatable.restart();\r\n                }\r\n            } else {\r\n                if (!animatable.paused) {\r\n                    animatable.pause();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all animations for the targets not retained by the animation group mask.\r\n     * Use this function if you know you won't need those animations anymore and if you want to free memory.\r\n     */\r\n    public removeUnmaskedAnimations() {\r\n        if (!this.mask || this.mask.disabled) {\r\n            return;\r\n        }\r\n\r\n        // Removes all animatables (in case the animation group has already been started)\r\n        for (let i = 0; i < this._animatables.length; ++i) {\r\n            const animatable = this._animatables[i];\r\n\r\n            if (!this.mask.retainsTarget(animatable.target.name)) {\r\n                animatable.stop();\r\n                this._animatables.splice(i, 1);\r\n                --i;\r\n            }\r\n        }\r\n\r\n        // Removes the targeted animations\r\n        for (let index = 0; index < this._targetedAnimations.length; index++) {\r\n            const targetedAnimation = this._targetedAnimations[index];\r\n\r\n            if (!this.mask.retainsTarget(targetedAnimation.target.name)) {\r\n                this._targetedAnimations.splice(index, 1);\r\n                --index;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the first frame\r\n     */\r\n    public get from(): number {\r\n        return this._from;\r\n    }\r\n\r\n    public set from(value: number) {\r\n        if (this._from === value) {\r\n            return;\r\n        }\r\n\r\n        this._from = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.fromFrame = this._from;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the last frame\r\n     */\r\n    public get to(): number {\r\n        return this._to;\r\n    }\r\n\r\n    public set to(value: number) {\r\n        if (this._to === value) {\r\n            return;\r\n        }\r\n\r\n        this._to = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.toFrame = this._to;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Define if the animations are started\r\n     */\r\n    public get isStarted(): boolean {\r\n        return this._isStarted;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating that the current group is playing\r\n     */\r\n    public get isPlaying(): boolean {\r\n        return this._isStarted && !this._isPaused;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the speed ratio to use for all animations\r\n     */\r\n    public get speedRatio(): number {\r\n        return this._speedRatio;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the speed ratio to use for all animations\r\n     */\r\n    public set speedRatio(value: number) {\r\n        if (this._speedRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._speedRatio = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.speedRatio = this._speedRatio;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets if all animations should loop or not\r\n     */\r\n    public get loopAnimation(): boolean {\r\n        return this._loopAnimation;\r\n    }\r\n\r\n    public set loopAnimation(value: boolean) {\r\n        if (this._loopAnimation === value) {\r\n            return;\r\n        }\r\n\r\n        this._loopAnimation = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.loopAnimation = this._loopAnimation;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets if all animations should be evaluated additively\r\n     */\r\n    public get isAdditive(): boolean {\r\n        return this._isAdditive;\r\n    }\r\n\r\n    public set isAdditive(value: boolean) {\r\n        if (this._isAdditive === value) {\r\n            return;\r\n        }\r\n\r\n        this._isAdditive = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.isAdditive = this._isAdditive;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the weight to apply to all animations of the group\r\n     */\r\n    public get weight(): number {\r\n        return this._weight;\r\n    }\r\n\r\n    public set weight(value: number) {\r\n        if (this._weight === value) {\r\n            return;\r\n        }\r\n\r\n        this._weight = value;\r\n        this.setWeightForAllAnimatables(this._weight);\r\n    }\r\n\r\n    /**\r\n     * Gets the targeted animations for this animation group\r\n     */\r\n    public get targetedAnimations(): Array<TargetedAnimation> {\r\n        return this._targetedAnimations;\r\n    }\r\n\r\n    /**\r\n     * returning the list of animatables controlled by this animation group.\r\n     */\r\n    public get animatables(): Array<Animatable> {\r\n        return this._animatables;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of target animations\r\n     */\r\n    public get children() {\r\n        return this._targetedAnimations;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the order of play of the animation group (default: 0)\r\n     */\r\n    public get playOrder() {\r\n        return this._playOrder;\r\n    }\r\n\r\n    public set playOrder(value: number) {\r\n        if (this._playOrder === value) {\r\n            return;\r\n        }\r\n\r\n        this._playOrder = value;\r\n\r\n        if (this._animatables.length > 0) {\r\n            for (let i = 0; i < this._animatables.length; i++) {\r\n                this._animatables[i].playOrder = this._playOrder;\r\n            }\r\n\r\n            this._scene.sortActiveAnimatables();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allows the animations of the animation group to blend with current running animations\r\n     * Note that a null value means that each animation will use their own existing blending configuration (Animation.enableBlending)\r\n     */\r\n    public get enableBlending() {\r\n        return this._enableBlending;\r\n    }\r\n\r\n    public set enableBlending(value: Nullable<boolean>) {\r\n        if (this._enableBlending === value) {\r\n            return;\r\n        }\r\n\r\n        this._enableBlending = value;\r\n\r\n        if (value !== null) {\r\n            for (let i = 0; i < this._targetedAnimations.length; ++i) {\r\n                this._targetedAnimations[i].animation.enableBlending = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the animation blending speed\r\n     * Note that a null value means that each animation will use their own existing blending configuration (Animation.blendingSpeed)\r\n     */\r\n    public get blendingSpeed() {\r\n        return this._blendingSpeed;\r\n    }\r\n\r\n    public set blendingSpeed(value: Nullable<number>) {\r\n        if (this._blendingSpeed === value) {\r\n            return;\r\n        }\r\n\r\n        this._blendingSpeed = value;\r\n\r\n        if (value !== null) {\r\n            for (let i = 0; i < this._targetedAnimations.length; ++i) {\r\n                this._targetedAnimations[i].animation.blendingSpeed = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the length (in seconds) of the animation group\r\n     * This function assumes that all animations are played at the same framePerSecond speed!\r\n     * Note: you can only call this method after you've added at least one targeted animation!\r\n     * @param from Starting frame range (default is AnimationGroup.from)\r\n     * @param to Ending frame range (default is AnimationGroup.to)\r\n     * @returns The length in seconds\r\n     */\r\n    public getLength(from?: number, to?: number): number {\r\n        from = from ?? this._from;\r\n        to = to ?? this._to;\r\n\r\n        const fps = this.targetedAnimations[0].animation.framePerSecond * this._speedRatio;\r\n\r\n        return (to - from) / fps;\r\n    }\r\n\r\n    /**\r\n     * Merge the array of animation groups into a new animation group\r\n     * @param animationGroups List of animation groups to merge\r\n     * @param disposeSource If true, animation groups will be disposed after being merged (default: true)\r\n     * @param normalize If true, animation groups will be normalized before being merged, so that all animations have the same \"from\" and \"to\" frame (default: false)\r\n     * @param weight Weight for the new animation group. If not provided, it will inherit the weight from the first animation group of the array\r\n     * @returns The new animation group or null if no animation groups were passed\r\n     */\r\n    public static MergeAnimationGroups(animationGroups: Array<AnimationGroup>, disposeSource = true, normalize = false, weight?: number): Nullable<AnimationGroup> {\r\n        if (animationGroups.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        weight = weight ?? animationGroups[0].weight;\r\n\r\n        let beginFrame = Number.MAX_VALUE;\r\n        let endFrame = -Number.MAX_VALUE;\r\n\r\n        if (normalize) {\r\n            for (const animationGroup of animationGroups) {\r\n                if (animationGroup.from < beginFrame) {\r\n                    beginFrame = animationGroup.from;\r\n                }\r\n\r\n                if (animationGroup.to > endFrame) {\r\n                    endFrame = animationGroup.to;\r\n                }\r\n            }\r\n        }\r\n\r\n        const mergedAnimationGroup = new AnimationGroup(animationGroups[0].name + \"_merged\", animationGroups[0]._scene, weight);\r\n\r\n        for (const animationGroup of animationGroups) {\r\n            if (normalize) {\r\n                animationGroup.normalize(beginFrame, endFrame);\r\n            }\r\n\r\n            for (const targetedAnimation of animationGroup.targetedAnimations) {\r\n                mergedAnimationGroup.addTargetedAnimation(targetedAnimation.animation, targetedAnimation.target);\r\n            }\r\n\r\n            if (disposeSource) {\r\n                animationGroup.dispose();\r\n            }\r\n        }\r\n\r\n        return mergedAnimationGroup;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new Animation Group.\r\n     * This helps managing several animations at once.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/groupAnimations\r\n     * @param name Defines the name of the group\r\n     * @param scene Defines the scene the group belongs to\r\n     * @param weight Defines the weight to use for animations in the group (-1.0 by default, meaning \"no weight\")\r\n     * @param playOrder Defines the order of play of the animation group (default is 0)\r\n     */\r\n    public constructor(\r\n        /** The name of the animation group */\r\n        public name: string,\r\n        scene: Nullable<Scene> = null,\r\n        weight = -1,\r\n        playOrder = 0\r\n    ) {\r\n        this._scene = scene || EngineStore.LastCreatedScene!;\r\n        this._weight = weight;\r\n        this._playOrder = playOrder;\r\n        this.uniqueId = this._scene.getUniqueId();\r\n\r\n        this._scene.addAnimationGroup(this);\r\n    }\r\n\r\n    /**\r\n     * Add an animation (with its target) in the group\r\n     * @param animation defines the animation we want to add\r\n     * @param target defines the target of the animation\r\n     * @returns the TargetedAnimation object\r\n     */\r\n    public addTargetedAnimation(animation: Animation, target: any): TargetedAnimation {\r\n        const targetedAnimation = new TargetedAnimation();\r\n        targetedAnimation.animation = animation;\r\n        targetedAnimation.target = target;\r\n\r\n        const keys = animation.getKeys();\r\n        if (this._from > keys[0].frame) {\r\n            this._from = keys[0].frame;\r\n        }\r\n\r\n        if (this._to < keys[keys.length - 1].frame) {\r\n            this._to = keys[keys.length - 1].frame;\r\n        }\r\n\r\n        if (this._enableBlending !== null) {\r\n            animation.enableBlending = this._enableBlending;\r\n        }\r\n\r\n        if (this._blendingSpeed !== null) {\r\n            animation.blendingSpeed = this._blendingSpeed;\r\n        }\r\n\r\n        this._targetedAnimations.push(targetedAnimation);\r\n\r\n        return targetedAnimation;\r\n    }\r\n\r\n    /**\r\n     * Remove an animation from the group\r\n     * @param animation defines the animation we want to remove\r\n     */\r\n    public removeTargetedAnimation(animation: Animation) {\r\n        for (let index = this._targetedAnimations.length - 1; index > -1; index--) {\r\n            const targetedAnimation = this._targetedAnimations[index];\r\n            if (targetedAnimation.animation === animation) {\r\n                this._targetedAnimations.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function will normalize every animation in the group to make sure they all go from beginFrame to endFrame\r\n     * It can add constant keys at begin or end\r\n     * @param beginFrame defines the new begin frame for all animations or the smallest begin frame of all animations if null (defaults to null)\r\n     * @param endFrame defines the new end frame for all animations or the largest end frame of all animations if null (defaults to null)\r\n     * @returns the animation group\r\n     */\r\n    public normalize(beginFrame: Nullable<number> = null, endFrame: Nullable<number> = null): AnimationGroup {\r\n        if (beginFrame == null) {\r\n            beginFrame = this._from;\r\n        }\r\n        if (endFrame == null) {\r\n            endFrame = this._to;\r\n        }\r\n\r\n        for (let index = 0; index < this._targetedAnimations.length; index++) {\r\n            const targetedAnimation = this._targetedAnimations[index];\r\n            const keys = targetedAnimation.animation.getKeys();\r\n            const startKey = keys[0];\r\n            const endKey = keys[keys.length - 1];\r\n\r\n            if (startKey.frame > beginFrame) {\r\n                const newKey: IAnimationKey = {\r\n                    frame: beginFrame,\r\n                    value: startKey.value,\r\n                    inTangent: startKey.inTangent,\r\n                    outTangent: startKey.outTangent,\r\n                    interpolation: startKey.interpolation,\r\n                };\r\n                keys.splice(0, 0, newKey);\r\n            }\r\n\r\n            if (endKey.frame < endFrame) {\r\n                const newKey: IAnimationKey = {\r\n                    frame: endFrame,\r\n                    value: endKey.value,\r\n                    inTangent: endKey.inTangent,\r\n                    outTangent: endKey.outTangent,\r\n                    interpolation: endKey.interpolation,\r\n                };\r\n                keys.push(newKey);\r\n            }\r\n        }\r\n\r\n        this._from = beginFrame;\r\n        this._to = endFrame;\r\n\r\n        return this;\r\n    }\r\n\r\n    private _animationLoopCount: number;\r\n    private _animationLoopFlags: boolean[] = [];\r\n\r\n    private _processLoop(animatable: Animatable, targetedAnimation: TargetedAnimation, index: number) {\r\n        animatable.onAnimationLoop = () => {\r\n            this.onAnimationLoopObservable.notifyObservers(targetedAnimation);\r\n\r\n            if (this._animationLoopFlags[index]) {\r\n                return;\r\n            }\r\n\r\n            this._animationLoopFlags[index] = true;\r\n\r\n            this._animationLoopCount++;\r\n            if (this._animationLoopCount === this._numActiveAnimatables) {\r\n                this.onAnimationGroupLoopObservable.notifyObservers(this);\r\n                this._animationLoopCount = 0;\r\n                this._animationLoopFlags.length = 0;\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Start all animations on given targets\r\n     * @param loop defines if animations must loop\r\n     * @param speedRatio defines the ratio to apply to animation speed (1 by default)\r\n     * @param from defines the from key (optional)\r\n     * @param to defines the to key (optional)\r\n     * @param isAdditive defines the additive state for the resulting animatables (optional)\r\n     * @returns the current animation group\r\n     */\r\n    public start(loop = false, speedRatio = 1, from?: number, to?: number, isAdditive?: boolean): AnimationGroup {\r\n        if (this._isStarted || this._targetedAnimations.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        this._loopAnimation = loop;\r\n\r\n        this._animationLoopCount = 0;\r\n        this._animationLoopFlags.length = 0;\r\n\r\n        for (let index = 0; index < this._targetedAnimations.length; index++) {\r\n            const targetedAnimation = this._targetedAnimations[index];\r\n            const animatable = this._scene.beginDirectAnimation(\r\n                targetedAnimation.target,\r\n                [targetedAnimation.animation],\r\n                from !== undefined ? from : this._from,\r\n                to !== undefined ? to : this._to,\r\n                loop,\r\n                speedRatio,\r\n                undefined,\r\n                undefined,\r\n                isAdditive !== undefined ? isAdditive : this._isAdditive\r\n            );\r\n            animatable.weight = this._weight;\r\n            animatable.playOrder = this._playOrder;\r\n            animatable.onAnimationEnd = () => {\r\n                this.onAnimationEndObservable.notifyObservers(targetedAnimation);\r\n                this._checkAnimationGroupEnded(animatable);\r\n            };\r\n\r\n            this._processLoop(animatable, targetedAnimation, index);\r\n            this._animatables.push(animatable);\r\n        }\r\n\r\n        this.syncWithMask();\r\n\r\n        this._scene.sortActiveAnimatables();\r\n\r\n        this._speedRatio = speedRatio;\r\n\r\n        this._isStarted = true;\r\n        this._isPaused = false;\r\n\r\n        this.onAnimationGroupPlayObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Pause all animations\r\n     * @returns the animation group\r\n     */\r\n    public pause(): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            return this;\r\n        }\r\n\r\n        this._isPaused = true;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.pause();\r\n        }\r\n\r\n        this.onAnimationGroupPauseObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Play all animations to initial state\r\n     * This function will start() the animations if they were not started or will restart() them if they were paused\r\n     * @param loop defines if animations must loop\r\n     * @returns the animation group\r\n     */\r\n    public play(loop?: boolean): AnimationGroup {\r\n        // only if all animatables are ready and exist\r\n        if (this.isStarted && this._animatables.length === this._targetedAnimations.length) {\r\n            if (loop !== undefined) {\r\n                this.loopAnimation = loop;\r\n            }\r\n            this.restart();\r\n        } else {\r\n            this.stop();\r\n            this.start(loop, this._speedRatio);\r\n        }\r\n\r\n        this._isPaused = false;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reset all animations to initial state\r\n     * @returns the animation group\r\n     */\r\n    public reset(): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            this.play();\r\n            this.goToFrame(0);\r\n            this.stop();\r\n            return this;\r\n        }\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.reset();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Restart animations from key 0\r\n     * @returns the animation group\r\n     */\r\n    public restart(): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            return this;\r\n        }\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.restart();\r\n        }\r\n\r\n        this.syncWithMask();\r\n\r\n        this.onAnimationGroupPlayObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Stop all animations\r\n     * @returns the animation group\r\n     */\r\n    public stop(): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            return this;\r\n        }\r\n\r\n        const list = this._animatables.slice();\r\n        for (let index = 0; index < list.length; index++) {\r\n            list[index].stop(undefined, undefined, true);\r\n        }\r\n\r\n        // We will take care of removing all stopped animatables\r\n        let curIndex = 0;\r\n        for (let index = 0; index < this._scene._activeAnimatables.length; index++) {\r\n            const animatable = this._scene._activeAnimatables[index];\r\n            if (animatable._runtimeAnimations.length > 0) {\r\n                this._scene._activeAnimatables[curIndex++] = animatable;\r\n            }\r\n        }\r\n        this._scene._activeAnimatables.length = curIndex;\r\n\r\n        this._isStarted = false;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set animation weight for all animatables\r\n     *\r\n     * @since 6.12.4\r\n     *  You can pass the weight to the AnimationGroup constructor, or use the weight property to set it after the group has been created,\r\n     *  making it easier to define the overall animation weight than calling setWeightForAllAnimatables() after the animation group has been started\r\n     * @param weight defines the weight to use\r\n     * @returns the animationGroup\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#animation-weights\r\n     */\r\n    public setWeightForAllAnimatables(weight: number): AnimationGroup {\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.weight = weight;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Synchronize and normalize all animatables with a source animatable\r\n     * @param root defines the root animatable to synchronize with (null to stop synchronizing)\r\n     * @returns the animationGroup\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#animation-weights\r\n     */\r\n    public syncAllAnimationsWith(root: Nullable<Animatable>): AnimationGroup {\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.syncWith(root);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Goes to a specific frame in this animation group\r\n     * @param frame the frame number to go to\r\n     * @returns the animationGroup\r\n     */\r\n    public goToFrame(frame: number): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            return this;\r\n        }\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.goToFrame(frame);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Dispose all associated resources\r\n     */\r\n    public dispose(): void {\r\n        this._targetedAnimations.length = 0;\r\n        this._animatables.length = 0;\r\n\r\n        // Remove from scene\r\n        const index = this._scene.animationGroups.indexOf(this);\r\n\r\n        if (index > -1) {\r\n            this._scene.animationGroups.splice(index, 1);\r\n        }\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.animationGroups.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.animationGroups.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        this.onAnimationEndObservable.clear();\r\n        this.onAnimationGroupEndObservable.clear();\r\n        this.onAnimationGroupPauseObservable.clear();\r\n        this.onAnimationGroupPlayObservable.clear();\r\n        this.onAnimationLoopObservable.clear();\r\n        this.onAnimationGroupLoopObservable.clear();\r\n    }\r\n\r\n    private _checkAnimationGroupEnded(animatable: Animatable) {\r\n        // animatable should be taken out of the array\r\n        const idx = this._animatables.indexOf(animatable);\r\n        if (idx > -1) {\r\n            this._animatables.splice(idx, 1);\r\n        }\r\n\r\n        // all animatables were removed? animation group ended!\r\n        if (this._animatables.length === 0) {\r\n            this._isStarted = false;\r\n            this.onAnimationGroupEndObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone the current animation group and returns a copy\r\n     * @param newName defines the name of the new group\r\n     * @param targetConverter defines an optional function used to convert current animation targets to new ones\r\n     * @param cloneAnimations defines if the animations should be cloned or referenced\r\n     * @returns the new animation group\r\n     */\r\n    public clone(newName: string, targetConverter?: (oldTarget: any) => any, cloneAnimations = false): AnimationGroup {\r\n        const newGroup = new AnimationGroup(newName || this.name, this._scene, this._weight, this._playOrder);\r\n\r\n        newGroup._from = this.from;\r\n        newGroup._to = this.to;\r\n        newGroup._speedRatio = this.speedRatio;\r\n        newGroup._loopAnimation = this.loopAnimation;\r\n        newGroup._isAdditive = this.isAdditive;\r\n        newGroup._enableBlending = this.enableBlending;\r\n        newGroup._blendingSpeed = this.blendingSpeed;\r\n        newGroup.metadata = this.metadata;\r\n        newGroup.mask = this.mask;\r\n\r\n        for (const targetAnimation of this._targetedAnimations) {\r\n            newGroup.addTargetedAnimation(\r\n                cloneAnimations ? targetAnimation.animation.clone() : targetAnimation.animation,\r\n                targetConverter ? targetConverter(targetAnimation.target) : targetAnimation.target\r\n            );\r\n        }\r\n\r\n        return newGroup;\r\n    }\r\n\r\n    /**\r\n     * Serializes the animationGroup to an object\r\n     * @returns Serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.from = this.from;\r\n        serializationObject.to = this.to;\r\n        serializationObject.speedRatio = this.speedRatio;\r\n        serializationObject.loopAnimation = this.loopAnimation;\r\n        serializationObject.isAdditive = this.isAdditive;\r\n        serializationObject.weight = this.weight;\r\n        serializationObject.playOrder = this.playOrder;\r\n        serializationObject.enableBlending = this.enableBlending;\r\n        serializationObject.blendingSpeed = this.blendingSpeed;\r\n\r\n        serializationObject.targetedAnimations = [];\r\n        for (let targetedAnimationIndex = 0; targetedAnimationIndex < this.targetedAnimations.length; targetedAnimationIndex++) {\r\n            const targetedAnimation = this.targetedAnimations[targetedAnimationIndex];\r\n            serializationObject.targetedAnimations[targetedAnimationIndex] = targetedAnimation.serialize();\r\n        }\r\n\r\n        if (Tags && Tags.HasTags(this)) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n\r\n        // Metadata\r\n        if (this.metadata) {\r\n            serializationObject.metadata = this.metadata;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Returns a new AnimationGroup object parsed from the source provided.\r\n     * @param parsedAnimationGroup defines the source\r\n     * @param scene defines the scene that will receive the animationGroup\r\n     * @returns a new AnimationGroup\r\n     */\r\n    public static Parse(parsedAnimationGroup: any, scene: Scene): AnimationGroup {\r\n        const animationGroup = new AnimationGroup(parsedAnimationGroup.name, scene, parsedAnimationGroup.weight, parsedAnimationGroup.playOrder);\r\n        for (let i = 0; i < parsedAnimationGroup.targetedAnimations.length; i++) {\r\n            const targetedAnimation = parsedAnimationGroup.targetedAnimations[i];\r\n            const animation = Animation.Parse(targetedAnimation.animation);\r\n            const id = targetedAnimation.targetId;\r\n            if (targetedAnimation.animation.property === \"influence\") {\r\n                // morph target animation\r\n                const morphTarget = scene.getMorphTargetById(id);\r\n                if (morphTarget) {\r\n                    animationGroup.addTargetedAnimation(animation, morphTarget);\r\n                }\r\n            } else {\r\n                const targetNode = scene.getNodeById(id);\r\n\r\n                if (targetNode != null) {\r\n                    animationGroup.addTargetedAnimation(animation, targetNode);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(animationGroup, parsedAnimationGroup.tags);\r\n        }\r\n\r\n        if (parsedAnimationGroup.from !== null && parsedAnimationGroup.to !== null) {\r\n            animationGroup.normalize(parsedAnimationGroup.from, parsedAnimationGroup.to);\r\n        }\r\n\r\n        if (parsedAnimationGroup.speedRatio !== undefined) {\r\n            animationGroup._speedRatio = parsedAnimationGroup.speedRatio;\r\n        }\r\n        if (parsedAnimationGroup.loopAnimation !== undefined) {\r\n            animationGroup._loopAnimation = parsedAnimationGroup.loopAnimation;\r\n        }\r\n\r\n        if (parsedAnimationGroup.isAdditive !== undefined) {\r\n            animationGroup._isAdditive = parsedAnimationGroup.isAdditive;\r\n        }\r\n\r\n        if (parsedAnimationGroup.weight !== undefined) {\r\n            animationGroup._weight = parsedAnimationGroup.weight;\r\n        }\r\n\r\n        if (parsedAnimationGroup.playOrder !== undefined) {\r\n            animationGroup._playOrder = parsedAnimationGroup.playOrder;\r\n        }\r\n\r\n        if (parsedAnimationGroup.enableBlending !== undefined) {\r\n            animationGroup._enableBlending = parsedAnimationGroup.enableBlending;\r\n        }\r\n\r\n        if (parsedAnimationGroup.blendingSpeed !== undefined) {\r\n            animationGroup._blendingSpeed = parsedAnimationGroup.blendingSpeed;\r\n        }\r\n\r\n        if (parsedAnimationGroup.metadata !== undefined) {\r\n            animationGroup.metadata = parsedAnimationGroup.metadata;\r\n        }\r\n\r\n        return animationGroup;\r\n    }\r\n\r\n    /**\r\n     * Convert the keyframes for all animations belonging to the group to be relative to a given reference frame.\r\n     * @param sourceAnimationGroup defines the AnimationGroup containing animations to convert\r\n     * @param referenceFrame defines the frame that keyframes in the range will be relative to (default: 0)\r\n     * @param range defines the name of the AnimationRange belonging to the animations in the group to convert\r\n     * @param cloneOriginal defines whether or not to clone the group and convert the clone or convert the original group (default is false)\r\n     * @param clonedName defines the name of the resulting cloned AnimationGroup if cloneOriginal is true\r\n     * @returns a new AnimationGroup if cloneOriginal is true or the original AnimationGroup if cloneOriginal is false\r\n     */\r\n    public static MakeAnimationAdditive(sourceAnimationGroup: AnimationGroup, referenceFrame: number, range?: string, cloneOriginal?: boolean, clonedName?: string): AnimationGroup;\r\n\r\n    /**\r\n     * Convert the keyframes for all animations belonging to the group to be relative to a given reference frame.\r\n     * @param sourceAnimationGroup defines the AnimationGroup containing animations to convert\r\n     * @param options defines the options to use when converting keyframes\r\n     * @returns a new AnimationGroup if options.cloneOriginalAnimationGroup is true or the original AnimationGroup if options.cloneOriginalAnimationGroup is false\r\n     */\r\n    public static MakeAnimationAdditive(sourceAnimationGroup: AnimationGroup, options?: IMakeAnimationGroupAdditiveOptions): AnimationGroup;\r\n\r\n    /** @internal */\r\n    public static MakeAnimationAdditive(\r\n        sourceAnimationGroup: AnimationGroup,\r\n        referenceFrameOrOptions?: number | IMakeAnimationGroupAdditiveOptions,\r\n        range?: string,\r\n        cloneOriginal = false,\r\n        clonedName?: string\r\n    ): AnimationGroup {\r\n        let options: IMakeAnimationGroupAdditiveOptions;\r\n\r\n        if (typeof referenceFrameOrOptions === \"object\") {\r\n            options = referenceFrameOrOptions;\r\n        } else {\r\n            options = {\r\n                referenceFrame: referenceFrameOrOptions,\r\n                range: range,\r\n                cloneOriginalAnimationGroup: cloneOriginal,\r\n                clonedAnimationName: clonedName,\r\n            };\r\n        }\r\n\r\n        let animationGroup = sourceAnimationGroup;\r\n        if (options.cloneOriginalAnimationGroup) {\r\n            animationGroup = sourceAnimationGroup.clone(options.clonedAnimationGroupName || animationGroup.name);\r\n        }\r\n\r\n        const targetedAnimations = animationGroup.targetedAnimations;\r\n        for (let index = 0; index < targetedAnimations.length; index++) {\r\n            const targetedAnimation = targetedAnimations[index];\r\n            targetedAnimation.animation = Animation.MakeAnimationAdditive(targetedAnimation.animation, options);\r\n        }\r\n\r\n        animationGroup.isAdditive = true;\r\n\r\n        if (options.clipKeys) {\r\n            // We need to recalculate the from/to frames for the animation group because some keys may have been removed\r\n            let from = Number.MAX_VALUE;\r\n            let to = -Number.MAX_VALUE;\r\n\r\n            const targetedAnimations = animationGroup.targetedAnimations;\r\n            for (let index = 0; index < targetedAnimations.length; index++) {\r\n                const targetedAnimation = targetedAnimations[index];\r\n                const animation = targetedAnimation.animation;\r\n                const keys = animation.getKeys();\r\n\r\n                if (from > keys[0].frame) {\r\n                    from = keys[0].frame;\r\n                }\r\n\r\n                if (to < keys[keys.length - 1].frame) {\r\n                    to = keys[keys.length - 1].frame;\r\n                }\r\n            }\r\n\r\n            animationGroup._from = from;\r\n            animationGroup._to = to;\r\n        }\r\n\r\n        return animationGroup;\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation, keeping only the keys that are inside a given key range\r\n     * @param sourceAnimationGroup defines the animation group on which to operate\r\n     * @param fromKey defines the lower bound of the range\r\n     * @param toKey defines the upper bound of the range\r\n     * @param name defines the name of the new animation group. If not provided, use the same name as animationGroup\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the keys. Default is false, so animations will be cloned\r\n     * @returns a new animation group stripped from all the keys outside the given range\r\n     */\r\n    public static ClipKeys(sourceAnimationGroup: AnimationGroup, fromKey: number, toKey: number, name?: string, dontCloneAnimations?: boolean): AnimationGroup {\r\n        const animationGroup = sourceAnimationGroup.clone(name || sourceAnimationGroup.name);\r\n\r\n        return AnimationGroup.ClipKeysInPlace(animationGroup, fromKey, toKey, dontCloneAnimations);\r\n    }\r\n\r\n    /**\r\n     * Updates an existing animation, keeping only the keys that are inside a given key range\r\n     * @param animationGroup defines the animation group on which to operate\r\n     * @param fromKey defines the lower bound of the range\r\n     * @param toKey defines the upper bound of the range\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the keys. Default is false, so animations will be cloned\r\n     * @returns the animationGroup stripped from all the keys outside the given range\r\n     */\r\n    public static ClipKeysInPlace(animationGroup: AnimationGroup, fromKey: number, toKey: number, dontCloneAnimations?: boolean): AnimationGroup {\r\n        return AnimationGroup.ClipInPlace(animationGroup, fromKey, toKey, dontCloneAnimations, false);\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation, keeping only the frames that are inside a given frame range\r\n     * @param sourceAnimationGroup defines the animation group on which to operate\r\n     * @param fromFrame defines the lower bound of the range\r\n     * @param toFrame defines the upper bound of the range\r\n     * @param name defines the name of the new animation group. If not provided, use the same name as animationGroup\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the frames. Default is false, so animations will be cloned\r\n     * @returns a new animation group stripped from all the frames outside the given range\r\n     */\r\n    public static ClipFrames(sourceAnimationGroup: AnimationGroup, fromFrame: number, toFrame: number, name?: string, dontCloneAnimations?: boolean): AnimationGroup {\r\n        const animationGroup = sourceAnimationGroup.clone(name || sourceAnimationGroup.name);\r\n\r\n        return AnimationGroup.ClipFramesInPlace(animationGroup, fromFrame, toFrame, dontCloneAnimations);\r\n    }\r\n\r\n    /**\r\n     * Updates an existing animation, keeping only the frames that are inside a given frame range\r\n     * @param animationGroup defines the animation group on which to operate\r\n     * @param fromFrame defines the lower bound of the range\r\n     * @param toFrame defines the upper bound of the range\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the frames. Default is false, so animations will be cloned\r\n     * @returns the animationGroup stripped from all the frames outside the given range\r\n     */\r\n    public static ClipFramesInPlace(animationGroup: AnimationGroup, fromFrame: number, toFrame: number, dontCloneAnimations?: boolean): AnimationGroup {\r\n        return AnimationGroup.ClipInPlace(animationGroup, fromFrame, toFrame, dontCloneAnimations, true);\r\n    }\r\n\r\n    /**\r\n     * Updates an existing animation, keeping only the keys that are inside a given key or frame range\r\n     * @param animationGroup defines the animation group on which to operate\r\n     * @param start defines the lower bound of the range\r\n     * @param end defines the upper bound of the range\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the keys. Default is false, so animations will be cloned\r\n     * @param useFrame defines if the range is defined by frame numbers or key indices (default is false which means use key indices)\r\n     * @returns the animationGroup stripped from all the keys outside the given range\r\n     */\r\n    public static ClipInPlace(animationGroup: AnimationGroup, start: number, end: number, dontCloneAnimations?: boolean, useFrame = false): AnimationGroup {\r\n        let from = Number.MAX_VALUE;\r\n        let to = -Number.MAX_VALUE;\r\n\r\n        const targetedAnimations = animationGroup.targetedAnimations;\r\n        for (let index = 0; index < targetedAnimations.length; index++) {\r\n            const targetedAnimation = targetedAnimations[index];\r\n            const animation = dontCloneAnimations ? targetedAnimation.animation : targetedAnimation.animation.clone();\r\n\r\n            if (useFrame) {\r\n                // Make sure we have keys corresponding to the bounds of the frame range\r\n                animation.createKeyForFrame(start);\r\n                animation.createKeyForFrame(end);\r\n            }\r\n\r\n            const keys = animation.getKeys();\r\n            const newKeys: IAnimationKey[] = [];\r\n\r\n            let startFrame = Number.MAX_VALUE;\r\n            for (let k = 0; k < keys.length; k++) {\r\n                const key = keys[k];\r\n                if ((!useFrame && k >= start && k <= end) || (useFrame && key.frame >= start && key.frame <= end)) {\r\n                    const newKey: IAnimationKey = {\r\n                        frame: key.frame,\r\n                        value: key.value.clone ? key.value.clone() : key.value,\r\n                        inTangent: key.inTangent,\r\n                        outTangent: key.outTangent,\r\n                        interpolation: key.interpolation,\r\n                        lockedTangent: key.lockedTangent,\r\n                    };\r\n                    if (startFrame === Number.MAX_VALUE) {\r\n                        startFrame = newKey.frame;\r\n                    }\r\n                    newKey.frame -= startFrame;\r\n                    newKeys.push(newKey);\r\n                }\r\n            }\r\n\r\n            if (newKeys.length === 0) {\r\n                targetedAnimations.splice(index, 1);\r\n                index--;\r\n                continue;\r\n            }\r\n\r\n            if (from > newKeys[0].frame) {\r\n                from = newKeys[0].frame;\r\n            }\r\n\r\n            if (to < newKeys[newKeys.length - 1].frame) {\r\n                to = newKeys[newKeys.length - 1].frame;\r\n            }\r\n\r\n            animation.setKeys(newKeys, true);\r\n            targetedAnimation.animation = animation; // in case the animation has been cloned\r\n        }\r\n\r\n        animationGroup._from = from;\r\n        animationGroup._to = to;\r\n\r\n        return animationGroup;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"AnimationGroup\"\r\n     * @returns \"AnimationGroup\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AnimationGroup\";\r\n    }\r\n\r\n    /**\r\n     * Creates a detailed string about the object\r\n     * @param fullDetails defines if the output string will support multiple levels of logging within scene loading\r\n     * @returns a string representing the object\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name;\r\n        ret += \", type: \" + this.getClassName();\r\n        if (fullDetails) {\r\n            ret += \", from: \" + this._from;\r\n            ret += \", to: \" + this._to;\r\n            ret += \", isStarted: \" + this._isStarted;\r\n            ret += \", speedRatio: \" + this._speedRatio;\r\n            ret += \", targetedAnimations length: \" + this._targetedAnimations.length;\r\n            ret += \", animatables length: \" + this._animatables;\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n", "import type { Behavior } from \"../behavior\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to fade in and out\r\n */\r\nexport class FadeInOutBehavior implements Behavior<Mesh> {\r\n    /**\r\n     * Time in milliseconds to delay before fading in (Default: 0)\r\n     */\r\n    public fadeInDelay = 0;\r\n\r\n    /**\r\n     * Time in milliseconds to delay before fading out (Default: 0)\r\n     */\r\n    public fadeOutDelay = 0;\r\n\r\n    /**\r\n     * Time in milliseconds for the mesh to fade in (Default: 300)\r\n     */\r\n    public fadeInTime = 300;\r\n\r\n    /**\r\n     * Time in milliseconds for the mesh to fade out (Default: 300)\r\n     */\r\n    public fadeOutTime = 300;\r\n\r\n    /**\r\n     * Time in milliseconds to delay before fading in (Default: 0)\r\n     * Will set both fade in and out delay to the same value\r\n     */\r\n    public get delay(): number {\r\n        return this.fadeInDelay;\r\n    }\r\n\r\n    public set delay(value: number) {\r\n        this.fadeInDelay = value;\r\n        this.fadeOutDelay = value;\r\n    }\r\n\r\n    private _millisecondsPerFrame = 1000 / 60;\r\n    private _hovered = false;\r\n    private _hoverValue = 0;\r\n    private _ownerNode: Nullable<Mesh> = null;\r\n    private _onBeforeRenderObserver: Nullable<Observer<Scene>> | undefined;\r\n    private _delay: number = 0;\r\n    private _time: number = 300;\r\n\r\n    /**\r\n     * Instantiates the FadeInOutBehavior\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"FadeInOut\";\r\n    }\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * Attaches the fade behavior on the passed in mesh\r\n     * @param ownerNode The mesh that will be faded in/out once attached\r\n     */\r\n    public attach(ownerNode: Mesh): void {\r\n        this._ownerNode = ownerNode;\r\n        this._setAllVisibility(this._ownerNode, 0);\r\n    }\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        this._ownerNode = null;\r\n    }\r\n\r\n    /**\r\n     * Triggers the mesh to begin fading in (or out)\r\n     * @param fadeIn if the object should fade in or out (true to fade in)\r\n     */\r\n    public fadeIn(fadeIn: boolean = true) {\r\n        this._delay = fadeIn ? this.fadeInDelay : this.fadeOutDelay;\r\n        this._time = fadeIn ? this.fadeInTime : this.fadeOutTime;\r\n\r\n        // Cancel any pending updates\r\n        this._detachObserver();\r\n\r\n        // If fading in and already visible or fading out and already not visible do nothing\r\n        if (this._ownerNode && ((fadeIn && this._ownerNode.visibility >= 1) || (!fadeIn && this._ownerNode.visibility <= 0))) {\r\n            return;\r\n        }\r\n\r\n        this._hovered = fadeIn;\r\n        if (!this._hovered) {\r\n            // Make the delay the negative of fadeout delay so the hoverValue is kept above 1 until\r\n            // fadeOutDelay has elapsed\r\n            this._delay *= -1;\r\n        }\r\n\r\n        // Reset the hoverValue.  This is necessary because we may have been fading out, e.g. but not yet reached\r\n        // the delay, so the hover value is greater than 1\r\n        if (this._ownerNode!.visibility >= 1) {\r\n            this._hoverValue = this._time;\r\n        } else if (this._ownerNode!.visibility <= 0) {\r\n            this._hoverValue = 0;\r\n        }\r\n        this._update();\r\n    }\r\n\r\n    /**\r\n     * Triggers the mesh to begin fading out\r\n     */\r\n    public fadeOut() {\r\n        this.fadeIn(false);\r\n    }\r\n\r\n    private _update = () => {\r\n        if (this._ownerNode) {\r\n            this._hoverValue += this._hovered ? this._millisecondsPerFrame : -this._millisecondsPerFrame;\r\n\r\n            this._setAllVisibility(this._ownerNode, (this._hoverValue - this._delay) / this._time);\r\n\r\n            if (this._ownerNode.visibility > 1) {\r\n                this._setAllVisibility(this._ownerNode, 1);\r\n                if (this._hoverValue > this._time) {\r\n                    this._hoverValue = this._time;\r\n                    this._detachObserver();\r\n                    return;\r\n                }\r\n            } else if (this._ownerNode.visibility < 0) {\r\n                this._setAllVisibility(this._ownerNode, 0);\r\n                if (this._hoverValue < 0) {\r\n                    this._hoverValue = 0;\r\n                    this._detachObserver();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this._attachObserver();\r\n        }\r\n    };\r\n\r\n    private _setAllVisibility(mesh: AbstractMesh, value: number) {\r\n        mesh.visibility = value;\r\n        mesh.getChildMeshes().forEach((c) => {\r\n            this._setAllVisibility(c, value);\r\n        });\r\n    }\r\n\r\n    private _attachObserver() {\r\n        if (!this._onBeforeRenderObserver) {\r\n            this._onBeforeRenderObserver = this._ownerNode?.getScene().onBeforeRenderObservable.add(this._update);\r\n        }\r\n    }\r\n\r\n    private _detachObserver() {\r\n        if (this._onBeforeRenderObserver) {\r\n            this._ownerNode?.getScene().onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n            this._onBeforeRenderObserver = null;\r\n        }\r\n    }\r\n}\r\n", "import { Vector3, Matrix } from \"../Maths/math.vector\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\n\r\n/**\r\n * Class containing a set of static utilities functions for managing Pivots\r\n * @internal\r\n */\r\nexport class PivotTools {\r\n    // Stores the state of the pivot cache (_oldPivotPoint, _pivotTranslation)\r\n    // store/remove pivot point should only be applied during their outermost calls\r\n    private static _PivotCached = 0;\r\n    private static _OldPivotPoint = new Vector3();\r\n    private static _PivotTranslation = new Vector3();\r\n    private static _PivotTmpVector = new Vector3();\r\n    private static _PivotPostMultiplyPivotMatrix = false;\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _RemoveAndStorePivotPoint(mesh: TransformNode) {\r\n        if (mesh && PivotTools._PivotCached === 0) {\r\n            // Save old pivot and set pivot to 0,0,0\r\n            mesh.getPivotPointToRef(PivotTools._OldPivotPoint);\r\n            PivotTools._PivotPostMultiplyPivotMatrix = mesh._postMultiplyPivotMatrix;\r\n            if (!PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0)) {\r\n                mesh.setPivotMatrix(Matrix.IdentityReadOnly);\r\n                PivotTools._OldPivotPoint.subtractToRef(mesh.getPivotPoint(), PivotTools._PivotTranslation);\r\n                PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\r\n                PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\r\n                PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\r\n                mesh.position.addInPlace(PivotTools._PivotTmpVector);\r\n            }\r\n        }\r\n        PivotTools._PivotCached++;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _RestorePivotPoint(mesh: TransformNode) {\r\n        if (mesh && !PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0) && PivotTools._PivotCached === 1) {\r\n            mesh.setPivotPoint(PivotTools._OldPivotPoint);\r\n            mesh._postMultiplyPivotMatrix = PivotTools._PivotPostMultiplyPivotMatrix;\r\n            PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\r\n            PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\r\n            PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\r\n            mesh.position.subtractInPlace(PivotTools._PivotTmpVector);\r\n        }\r\n        this._PivotCached--;\r\n    }\r\n}\r\n", "import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Plane } from \"../../Maths/math.plane\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a Plane\r\n * @param options an object used to set the following optional parameters for the plane, required but can be empty\r\n * * size sets the width and height of the plane to the value of size, optional default 1\r\n * * width sets the width (x direction) of the plane, overwrites the width set by size, optional, default size\r\n * * height sets the height (y direction) of the plane, overwrites the height set by size, optional, default size\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the box\r\n */\r\nexport function CreatePlaneVertexData(options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n\r\n    const width: number = options.width || options.size || 1;\r\n    const height: number = options.height || options.size || 1;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // Vertices\r\n    const halfWidth = width / 2.0;\r\n    const halfHeight = height / 2.0;\r\n\r\n    positions.push(-halfWidth, -halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(0.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 : 0.0);\r\n\r\n    positions.push(halfWidth, -halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(1.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 : 0.0);\r\n\r\n    positions.push(halfWidth, halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(1.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 0.0 : 1.0);\r\n\r\n    positions.push(-halfWidth, halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(0.0, CompatibilityOptions.UseOpenGLOrientationForUV ? 0.0 : 1.0);\r\n\r\n    // Indices\r\n    indices.push(0);\r\n    indices.push(1);\r\n    indices.push(2);\r\n\r\n    indices.push(0);\r\n    indices.push(2);\r\n    indices.push(3);\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a plane mesh\r\n * * The parameter `size` sets the size (float) of both sides of the plane at once (default 1)\r\n * * You can set some different plane dimensions by using the parameters `width` and `height` (both by default have the same value of `size`)\r\n * * The parameter `sourcePlane` is a Plane instance. It builds a mesh plane from a Math plane\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the plane mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#plane\r\n */\r\nexport function CreatePlane(\r\n    name: string,\r\n    options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4; updatable?: boolean; sourcePlane?: Plane } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const plane = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    plane._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreatePlaneVertexData(options);\r\n\r\n    vertexData.applyToMesh(plane, options.updatable);\r\n\r\n    if (options.sourcePlane) {\r\n        plane.translate(options.sourcePlane.normal, -options.sourcePlane.d);\r\n        plane.setDirection(options.sourcePlane.normal.scale(-1));\r\n    }\r\n\r\n    return plane;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const PlaneBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreatePlane,\r\n};\r\n\r\nVertexData.CreatePlane = CreatePlaneVertexData;\r\nMesh.CreatePlane = (name: string, size: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        size,\r\n        width: size,\r\n        height: size,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreatePlane(name, options, scene);\r\n};\r\n", "import type { Behavior } from \"../../Behaviors/behavior\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { TmpVectors, Vector3 } from \"../../Maths/math.vector\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Ray } from \"../../Culling/ray\";\r\nimport { PivotTools } from \"../../Misc/pivotTools\";\r\nimport type { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport { CreatePlane } from \"../../Meshes/Builders/planeBuilder\";\r\n\r\nimport type { IPointerEvent } from \"../../Events/deviceInputEvents\";\r\nimport { Epsilon } from \"../../Maths/math.constants\";\r\n\r\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to be dragged around the screen based on pointer events\r\n */\r\nexport class PointerDragBehavior implements Behavior<AbstractMesh> {\r\n    private static _AnyMouseId = -2;\r\n    /**\r\n     * Abstract mesh the behavior is set on\r\n     */\r\n    public attachedNode: AbstractMesh;\r\n    protected _dragPlane: Mesh;\r\n    private _scene: Scene;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _beforeRenderObserver: Nullable<Observer<Scene>>;\r\n    private static _PlaneScene: Scene;\r\n    private _useAlternatePickedPointAboveMaxDragAngleDragSpeed = -1.1;\r\n    private _activeDragButton: number = -1;\r\n    private _activePointerInfo: Nullable<PointerInfo>;\r\n    /**\r\n     * The maximum tolerated angle between the drag plane and dragging pointer rays to trigger pointer events. Set to 0 to allow any angle (default: 0)\r\n     */\r\n    public maxDragAngle = 0;\r\n    /**\r\n     * Butttons that can be used to initiate a drag\r\n     */\r\n    public dragButtons = [0, 1, 2];\r\n    /**\r\n     * @internal\r\n     */\r\n    public _useAlternatePickedPointAboveMaxDragAngle = false;\r\n    /**\r\n     * Get or set the currentDraggingPointerId\r\n     * @deprecated Please use currentDraggingPointerId instead\r\n     */\r\n    public get currentDraggingPointerID(): number {\r\n        return this.currentDraggingPointerId;\r\n    }\r\n    public set currentDraggingPointerID(currentDraggingPointerID: number) {\r\n        this.currentDraggingPointerId = currentDraggingPointerID;\r\n    }\r\n    /**\r\n     * The id of the pointer that is currently interacting with the behavior (-1 when no pointer is active)\r\n     */\r\n    public currentDraggingPointerId = -1;\r\n    /**\r\n     * The last position where the pointer hit the drag plane in world space\r\n     */\r\n    public lastDragPosition: Vector3;\r\n    /**\r\n     * If the behavior is currently in a dragging state\r\n     */\r\n    public dragging = false;\r\n    /**\r\n     * The distance towards the target drag position to move each frame. This can be useful to avoid jitter. Set this to 1 for no delay. (Default: 0.2)\r\n     */\r\n    public dragDeltaRatio = 0.2;\r\n    /**\r\n     * If the drag plane orientation should be updated during the dragging (Default: true)\r\n     */\r\n    public updateDragPlane = true;\r\n    // Debug mode will display drag planes to help visualize behavior\r\n    private _debugMode = false;\r\n    private _moving = false;\r\n    /**\r\n     *  Fires each time the attached mesh is dragged with the pointer\r\n     *  * delta between last drag position and current drag position in world space\r\n     *  * dragDistance along the drag axis\r\n     *  * dragPlaneNormal normal of the current drag plane used during the drag\r\n     *  * dragPlanePoint in world space where the drag intersects the drag plane\r\n     *\r\n     *  (if validatedDrag is used, the position of the attached mesh might not equal dragPlanePoint)\r\n     */\r\n    public onDragObservable = new Observable<{\r\n        delta: Vector3;\r\n        dragPlanePoint: Vector3;\r\n        dragPlaneNormal: Vector3;\r\n        dragDistance: number;\r\n        pointerId: number;\r\n        pointerInfo: Nullable<PointerInfo>;\r\n    }>();\r\n    /**\r\n     *  Fires each time a drag begins (eg. mouse down on mesh)\r\n     *  * dragPlanePoint in world space where the drag intersects the drag plane\r\n     *\r\n     *  (if validatedDrag is used, the position of the attached mesh might not equal dragPlanePoint)\r\n     */\r\n    public onDragStartObservable = new Observable<{ dragPlanePoint: Vector3; pointerId: number; pointerInfo: Nullable<PointerInfo> }>();\r\n    /**\r\n     *  Fires each time a drag ends (eg. mouse release after drag)\r\n     *  * dragPlanePoint in world space where the drag intersects the drag plane\r\n     *\r\n     *  (if validatedDrag is used, the position of the attached mesh might not equal dragPlanePoint)\r\n     */\r\n    public onDragEndObservable = new Observable<{ dragPlanePoint: Vector3; pointerId: number; pointerInfo: Nullable<PointerInfo> }>();\r\n    /**\r\n     *  Fires each time behavior enabled state changes\r\n     */\r\n    public onEnabledObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     *  If the attached mesh should be moved when dragged\r\n     */\r\n    public moveAttached = true;\r\n\r\n    /**\r\n     *  If the drag behavior will react to drag events (Default: true)\r\n     */\r\n    public set enabled(value: boolean) {\r\n        if (value != this._enabled) {\r\n            this.onEnabledObservable.notifyObservers(value);\r\n        }\r\n        this._enabled = value;\r\n    }\r\n\r\n    public get enabled() {\r\n        return this._enabled;\r\n    }\r\n    private _enabled = true;\r\n\r\n    /**\r\n     * If pointer events should start and release the drag (Default: true)\r\n     */\r\n    public startAndReleaseDragOnPointerEvents = true;\r\n    /**\r\n     * If camera controls should be detached during the drag\r\n     */\r\n    public detachCameraControls = true;\r\n\r\n    /**\r\n     * If set, the drag plane/axis will be rotated based on the attached mesh's world rotation (Default: true)\r\n     */\r\n    public useObjectOrientationForDragging = true;\r\n\r\n    private _options: { dragAxis?: Vector3; dragPlaneNormal?: Vector3 };\r\n\r\n    /**\r\n     * Gets the options used by the behavior\r\n     */\r\n    public get options(): { dragAxis?: Vector3; dragPlaneNormal?: Vector3 } {\r\n        return this._options;\r\n    }\r\n\r\n    /**\r\n     * Sets the options used by the behavior\r\n     */\r\n    public set options(options: { dragAxis?: Vector3; dragPlaneNormal?: Vector3 }) {\r\n        this._options = options;\r\n    }\r\n\r\n    /**\r\n     * Creates a pointer drag behavior that can be attached to a mesh\r\n     * @param options The drag axis or normal of the plane that will be dragged across. If no options are specified the drag plane will always face the ray's origin (eg. camera)\r\n     * @param options.dragAxis\r\n     * @param options.dragPlaneNormal\r\n     */\r\n    constructor(options?: { dragAxis?: Vector3; dragPlaneNormal?: Vector3 }) {\r\n        this._options = options ? options : {};\r\n\r\n        let optionCount = 0;\r\n        if (this._options.dragAxis) {\r\n            optionCount++;\r\n        }\r\n        if (this._options.dragPlaneNormal) {\r\n            optionCount++;\r\n        }\r\n        if (optionCount > 1) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"Multiple drag modes specified in dragBehavior options. Only one expected\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Predicate to determine if it is valid to move the object to a new position when it is moved.\r\n     * In the case of rotation gizmo, target contains the angle.\r\n     * @param target destination position or desired angle delta\r\n     * @returns boolean for whether or not it is valid to move\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public validateDrag = (target: Vector3) => {\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"PointerDrag\";\r\n    }\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    private _tmpVector = new Vector3(0, 0, 0);\r\n    private _alternatePickedPoint = new Vector3(0, 0, 0);\r\n    private _worldDragAxis = new Vector3(0, 0, 0);\r\n    private _targetPosition = new Vector3(0, 0, 0);\r\n    private _attachedToElement: boolean = false;\r\n    /**\r\n     * Attaches the drag behavior the passed in mesh\r\n     * @param ownerNode The mesh that will be dragged around once attached\r\n     * @param predicate Predicate to use for pick filtering\r\n     */\r\n    public attach(ownerNode: AbstractMesh, predicate?: (m: AbstractMesh) => boolean): void {\r\n        this._scene = ownerNode.getScene();\r\n        ownerNode.isNearGrabbable = true;\r\n        this.attachedNode = ownerNode;\r\n\r\n        // Initialize drag plane to not interfere with existing scene\r\n        if (!PointerDragBehavior._PlaneScene) {\r\n            if (this._debugMode) {\r\n                PointerDragBehavior._PlaneScene = this._scene;\r\n            } else {\r\n                PointerDragBehavior._PlaneScene = new Scene(this._scene.getEngine(), { virtual: true });\r\n                PointerDragBehavior._PlaneScene.detachControl();\r\n                this._scene.onDisposeObservable.addOnce(() => {\r\n                    PointerDragBehavior._PlaneScene.dispose();\r\n                    (<any>PointerDragBehavior._PlaneScene) = null;\r\n                });\r\n            }\r\n        }\r\n        this._dragPlane = CreatePlane(\r\n            \"pointerDragPlane\",\r\n            { size: this._debugMode ? 1 : 10000, updatable: false, sideOrientation: Mesh.DOUBLESIDE },\r\n            PointerDragBehavior._PlaneScene\r\n        );\r\n\r\n        // State of the drag\r\n        this.lastDragPosition = new Vector3(0, 0, 0);\r\n\r\n        const pickPredicate = predicate\r\n            ? predicate\r\n            : (m: AbstractMesh) => {\r\n                  return this.attachedNode == m || m.isDescendantOf(this.attachedNode);\r\n              };\r\n\r\n        this._pointerObserver = this._scene.onPointerObservable.add((pointerInfo) => {\r\n            if (!this.enabled) {\r\n                // If behavior is disabled before releaseDrag is ever called, call it now.\r\n                if (this._attachedToElement) {\r\n                    this.releaseDrag();\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            if (pointerInfo.type == PointerEventTypes.POINTERDOWN) {\r\n                if (\r\n                    this.startAndReleaseDragOnPointerEvents &&\r\n                    !this.dragging &&\r\n                    pointerInfo.pickInfo &&\r\n                    pointerInfo.pickInfo.hit &&\r\n                    pointerInfo.pickInfo.pickedMesh &&\r\n                    pointerInfo.pickInfo.pickedPoint &&\r\n                    pointerInfo.pickInfo.ray &&\r\n                    pickPredicate(pointerInfo.pickInfo.pickedMesh)\r\n                ) {\r\n                    if (this._activeDragButton === -1 && this.dragButtons.indexOf(pointerInfo.event.button) !== -1) {\r\n                        this._activeDragButton = pointerInfo.event.button;\r\n                        this._activePointerInfo = pointerInfo;\r\n                        this._startDrag((<IPointerEvent>pointerInfo.event).pointerId, pointerInfo.pickInfo.ray, pointerInfo.pickInfo.pickedPoint);\r\n                    }\r\n                }\r\n            } else if (pointerInfo.type == PointerEventTypes.POINTERUP) {\r\n                if (\r\n                    this.startAndReleaseDragOnPointerEvents &&\r\n                    this.currentDraggingPointerId == (<IPointerEvent>pointerInfo.event).pointerId &&\r\n                    (this._activeDragButton === pointerInfo.event.button || this._activeDragButton === -1)\r\n                ) {\r\n                    this.releaseDrag();\r\n                }\r\n            } else if (pointerInfo.type == PointerEventTypes.POINTERMOVE) {\r\n                const pointerId = (<IPointerEvent>pointerInfo.event).pointerId;\r\n\r\n                // If drag was started with anyMouseID specified, set pointerID to the next mouse that moved\r\n                if (this.currentDraggingPointerId === PointerDragBehavior._AnyMouseId && pointerId !== PointerDragBehavior._AnyMouseId) {\r\n                    const evt = <IPointerEvent>pointerInfo.event;\r\n                    const isMouseEvent = evt.pointerType === \"mouse\" || (!this._scene.getEngine().hostInformation.isMobile && evt instanceof MouseEvent);\r\n                    if (isMouseEvent) {\r\n                        if (this._lastPointerRay[this.currentDraggingPointerId]) {\r\n                            this._lastPointerRay[pointerId] = this._lastPointerRay[this.currentDraggingPointerId];\r\n                            delete this._lastPointerRay[this.currentDraggingPointerId];\r\n                        }\r\n                        this.currentDraggingPointerId = pointerId;\r\n                    }\r\n                }\r\n\r\n                // Keep track of last pointer ray, this is used simulating the start of a drag in startDrag()\r\n                if (!this._lastPointerRay[pointerId]) {\r\n                    this._lastPointerRay[pointerId] = new Ray(new Vector3(), new Vector3());\r\n                }\r\n                if (pointerInfo.pickInfo && pointerInfo.pickInfo.ray) {\r\n                    this._lastPointerRay[pointerId].origin.copyFrom(pointerInfo.pickInfo.ray.origin);\r\n                    this._lastPointerRay[pointerId].direction.copyFrom(pointerInfo.pickInfo.ray.direction);\r\n\r\n                    if (this.currentDraggingPointerId == pointerId && this.dragging) {\r\n                        this._moveDrag(pointerInfo.pickInfo.ray);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this._beforeRenderObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n            if (this._moving && this.moveAttached) {\r\n                let needMatrixUpdate = false;\r\n                PivotTools._RemoveAndStorePivotPoint(this.attachedNode);\r\n                // Slowly move mesh to avoid jitter\r\n                this._targetPosition.subtractToRef(this.attachedNode.absolutePosition, this._tmpVector);\r\n                this._tmpVector.scaleInPlace(this.dragDeltaRatio);\r\n                this.attachedNode.getAbsolutePosition().addToRef(this._tmpVector, this._tmpVector);\r\n                if (this.validateDrag(this._tmpVector)) {\r\n                    this.attachedNode.setAbsolutePosition(this._tmpVector);\r\n                    needMatrixUpdate = true;\r\n                }\r\n                PivotTools._RestorePivotPoint(this.attachedNode);\r\n                if (needMatrixUpdate) {\r\n                    this.attachedNode.computeWorldMatrix();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Force release the drag action by code.\r\n     */\r\n    public releaseDrag() {\r\n        if (this.dragging) {\r\n            this.dragging = false;\r\n            this.onDragEndObservable.notifyObservers({ dragPlanePoint: this.lastDragPosition, pointerId: this.currentDraggingPointerId, pointerInfo: this._activePointerInfo });\r\n        }\r\n\r\n        this.currentDraggingPointerId = -1;\r\n        this._activeDragButton = -1;\r\n        this._activePointerInfo = null;\r\n        this._moving = false;\r\n\r\n        // Reattach camera controls\r\n        if (this.detachCameraControls && this._attachedToElement && this._scene.activeCamera && !this._scene.activeCamera.leftCamera) {\r\n            if (this._scene.activeCamera.getClassName() === \"ArcRotateCamera\") {\r\n                const arcRotateCamera = this._scene.activeCamera as ArcRotateCamera;\r\n                arcRotateCamera.attachControl(\r\n                    arcRotateCamera.inputs ? arcRotateCamera.inputs.noPreventDefault : true,\r\n                    arcRotateCamera._useCtrlForPanning,\r\n                    arcRotateCamera._panningMouseButton\r\n                );\r\n            } else {\r\n                this._scene.activeCamera.attachControl(this._scene.activeCamera.inputs ? this._scene.activeCamera.inputs.noPreventDefault : true);\r\n            }\r\n            this._attachedToElement = false;\r\n        }\r\n    }\r\n\r\n    private _startDragRay = new Ray(new Vector3(), new Vector3());\r\n    private _lastPointerRay: { [key: number]: Ray } = {};\r\n    /**\r\n     * Simulates the start of a pointer drag event on the behavior\r\n     * @param pointerId pointerID of the pointer that should be simulated (Default: Any mouse pointer ID)\r\n     * @param fromRay initial ray of the pointer to be simulated (Default: Ray from camera to attached mesh)\r\n     * @param startPickedPoint picked point of the pointer to be simulated (Default: attached mesh position)\r\n     */\r\n    public startDrag(pointerId: number = PointerDragBehavior._AnyMouseId, fromRay?: Ray, startPickedPoint?: Vector3) {\r\n        this._startDrag(pointerId, fromRay, startPickedPoint);\r\n\r\n        let lastRay = this._lastPointerRay[pointerId];\r\n        if (pointerId === PointerDragBehavior._AnyMouseId) {\r\n            lastRay = this._lastPointerRay[<any>Object.keys(this._lastPointerRay)[0]];\r\n        }\r\n\r\n        if (lastRay) {\r\n            // if there was a last pointer ray drag the object there\r\n            this._moveDrag(lastRay);\r\n        }\r\n    }\r\n\r\n    protected _startDrag(pointerId: number, fromRay?: Ray, startPickedPoint?: Vector3) {\r\n        if (!this._scene.activeCamera || this.dragging || !this.attachedNode) {\r\n            return;\r\n        }\r\n\r\n        PivotTools._RemoveAndStorePivotPoint(this.attachedNode);\r\n        // Create start ray from the camera to the object\r\n        if (fromRay) {\r\n            this._startDragRay.direction.copyFrom(fromRay.direction);\r\n            this._startDragRay.origin.copyFrom(fromRay.origin);\r\n        } else {\r\n            this._startDragRay.origin.copyFrom(this._scene.activeCamera.position);\r\n            this.attachedNode.getWorldMatrix().getTranslationToRef(this._tmpVector);\r\n            this._tmpVector.subtractToRef(this._scene.activeCamera.position, this._startDragRay.direction);\r\n        }\r\n\r\n        this._updateDragPlanePosition(this._startDragRay, startPickedPoint ? startPickedPoint : this._tmpVector);\r\n\r\n        const pickedPoint = this._pickWithRayOnDragPlane(this._startDragRay);\r\n        if (pickedPoint) {\r\n            this.dragging = true;\r\n            this.currentDraggingPointerId = pointerId;\r\n            this.lastDragPosition.copyFrom(pickedPoint);\r\n            this.onDragStartObservable.notifyObservers({ dragPlanePoint: pickedPoint, pointerId: this.currentDraggingPointerId, pointerInfo: this._activePointerInfo });\r\n            this._targetPosition.copyFrom(this.attachedNode.getAbsolutePosition());\r\n\r\n            // Detatch camera controls\r\n            if (this.detachCameraControls && this._scene.activeCamera && this._scene.activeCamera.inputs && !this._scene.activeCamera.leftCamera) {\r\n                if (this._scene.activeCamera.inputs.attachedToElement) {\r\n                    this._scene.activeCamera.detachControl();\r\n                    this._attachedToElement = true;\r\n                } else {\r\n                    this._attachedToElement = false;\r\n                }\r\n            }\r\n        } else {\r\n            this.releaseDrag();\r\n        }\r\n        PivotTools._RestorePivotPoint(this.attachedNode);\r\n    }\r\n\r\n    private _dragDelta = new Vector3();\r\n    protected _moveDrag(ray: Ray) {\r\n        this._moving = true;\r\n        const pickedPoint = this._pickWithRayOnDragPlane(ray);\r\n\r\n        if (pickedPoint) {\r\n            PivotTools._RemoveAndStorePivotPoint(this.attachedNode);\r\n\r\n            if (this.updateDragPlane) {\r\n                this._updateDragPlanePosition(ray, pickedPoint);\r\n            }\r\n            let dragLength = 0;\r\n            // depending on the drag mode option drag accordingly\r\n            if (this._options.dragAxis) {\r\n                // Convert local drag axis to world if useObjectOrientationForDragging\r\n                this.useObjectOrientationForDragging\r\n                    ? Vector3.TransformCoordinatesToRef(this._options.dragAxis, this.attachedNode.getWorldMatrix().getRotationMatrix(), this._worldDragAxis)\r\n                    : this._worldDragAxis.copyFrom(this._options.dragAxis);\r\n\r\n                // Project delta drag from the drag plane onto the drag axis\r\n                pickedPoint.subtractToRef(this.lastDragPosition, this._tmpVector);\r\n                dragLength = Vector3.Dot(this._tmpVector, this._worldDragAxis);\r\n                this._worldDragAxis.scaleToRef(dragLength, this._dragDelta);\r\n            } else {\r\n                dragLength = this._dragDelta.length();\r\n                pickedPoint.subtractToRef(this.lastDragPosition, this._dragDelta);\r\n            }\r\n            this._targetPosition.addInPlace(this._dragDelta);\r\n            this.onDragObservable.notifyObservers({\r\n                dragDistance: dragLength,\r\n                delta: this._dragDelta,\r\n                dragPlanePoint: pickedPoint,\r\n                dragPlaneNormal: this._dragPlane.forward,\r\n                pointerId: this.currentDraggingPointerId,\r\n                pointerInfo: this._activePointerInfo,\r\n            });\r\n            this.lastDragPosition.copyFrom(pickedPoint);\r\n\r\n            PivotTools._RestorePivotPoint(this.attachedNode);\r\n        }\r\n    }\r\n\r\n    private _pickWithRayOnDragPlane(ray: Nullable<Ray>) {\r\n        if (!ray) {\r\n            return null;\r\n        }\r\n\r\n        // Calculate angle between plane normal and ray\r\n        let angle = Math.acos(Vector3.Dot(this._dragPlane.forward, ray.direction));\r\n        // Correct if ray is casted from oposite side\r\n        if (angle > Math.PI / 2) {\r\n            angle = Math.PI - angle;\r\n        }\r\n\r\n        // If the angle is too perpendicular to the plane pick another point on the plane where it is looking\r\n        if (this.maxDragAngle > 0 && angle > this.maxDragAngle) {\r\n            if (this._useAlternatePickedPointAboveMaxDragAngle) {\r\n                // Invert ray direction along the towards object axis\r\n                this._tmpVector.copyFrom(ray.direction);\r\n                this.attachedNode.absolutePosition.subtractToRef(ray.origin, this._alternatePickedPoint);\r\n                this._alternatePickedPoint.normalize();\r\n                this._alternatePickedPoint.scaleInPlace(this._useAlternatePickedPointAboveMaxDragAngleDragSpeed * Vector3.Dot(this._alternatePickedPoint, this._tmpVector));\r\n                this._tmpVector.addInPlace(this._alternatePickedPoint);\r\n\r\n                // Project resulting vector onto the drag plane and add it to the attached nodes absolute position to get a picked point\r\n                const dot = Vector3.Dot(this._dragPlane.forward, this._tmpVector);\r\n                this._dragPlane.forward.scaleToRef(-dot, this._alternatePickedPoint);\r\n                this._alternatePickedPoint.addInPlace(this._tmpVector);\r\n                this._alternatePickedPoint.addInPlace(this.attachedNode.absolutePosition);\r\n                return this._alternatePickedPoint;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        // use an infinite plane instead of ray picking a mesh that must be updated every frame\r\n        const planeNormal = this._dragPlane.forward;\r\n        const planePosition = this._dragPlane.position;\r\n        const dotProduct = ray.direction.dot(planeNormal);\r\n        if (Math.abs(dotProduct) < Epsilon) {\r\n            // Ray and plane are parallel, no intersection\r\n            return null;\r\n        }\r\n\r\n        planePosition.subtractToRef(ray.origin, TmpVectors.Vector3[0]);\r\n        const t = TmpVectors.Vector3[0].dot(planeNormal) / dotProduct;\r\n        // Ensure the intersection point is in front of the ray (t must be positive)\r\n        if (t < 0) {\r\n            // Intersection point is behind the ray\r\n            return null;\r\n        }\r\n\r\n        // Calculate the intersection point using the parameter t\r\n        ray.direction.scaleToRef(t, TmpVectors.Vector3[0]);\r\n        const intersectionPoint = ray.origin.add(TmpVectors.Vector3[0]);\r\n        return intersectionPoint;\r\n    }\r\n\r\n    // Variables to avoid instantiation in the below method\r\n    private _pointA = new Vector3(0, 0, 0);\r\n    private _pointC = new Vector3(0, 0, 0);\r\n    private _localAxis = new Vector3(0, 0, 0);\r\n    private _lookAt = new Vector3(0, 0, 0);\r\n    // Position the drag plane based on the attached mesh position, for single axis rotate the plane along the axis to face the camera\r\n    private _updateDragPlanePosition(ray: Ray, dragPlanePosition: Vector3) {\r\n        this._pointA.copyFrom(dragPlanePosition);\r\n        if (this._options.dragAxis) {\r\n            this.useObjectOrientationForDragging\r\n                ? Vector3.TransformCoordinatesToRef(this._options.dragAxis, this.attachedNode.getWorldMatrix().getRotationMatrix(), this._localAxis)\r\n                : this._localAxis.copyFrom(this._options.dragAxis);\r\n\r\n            // Calculate plane normal that is the cross product of local axis and (eye-dragPlanePosition)\r\n            ray.origin.subtractToRef(this._pointA, this._pointC);\r\n            this._pointC.normalize();\r\n            if (Math.abs(Vector3.Dot(this._localAxis, this._pointC)) > 0.999) {\r\n                // the drag axis is colinear with the (eye to position) ray. The cross product will give jittered values.\r\n                // A new axis vector need to be computed\r\n                if (Math.abs(Vector3.Dot(Vector3.UpReadOnly, this._pointC)) > 0.999) {\r\n                    this._lookAt.copyFrom(Vector3.Right());\r\n                } else {\r\n                    this._lookAt.copyFrom(Vector3.UpReadOnly);\r\n                }\r\n            } else {\r\n                Vector3.CrossToRef(this._localAxis, this._pointC, this._lookAt);\r\n                // Get perpendicular line from previous result and drag axis to adjust lineB to be perpendicular to camera\r\n                Vector3.CrossToRef(this._localAxis, this._lookAt, this._lookAt);\r\n                this._lookAt.normalize();\r\n            }\r\n\r\n            this._dragPlane.position.copyFrom(this._pointA);\r\n            this._pointA.addToRef(this._lookAt, this._lookAt);\r\n            this._dragPlane.lookAt(this._lookAt);\r\n        } else if (this._options.dragPlaneNormal) {\r\n            this.useObjectOrientationForDragging\r\n                ? Vector3.TransformCoordinatesToRef(this._options.dragPlaneNormal, this.attachedNode.getWorldMatrix().getRotationMatrix(), this._localAxis)\r\n                : this._localAxis.copyFrom(this._options.dragPlaneNormal);\r\n            this._dragPlane.position.copyFrom(this._pointA);\r\n            this._pointA.addToRef(this._localAxis, this._lookAt);\r\n            this._dragPlane.lookAt(this._lookAt);\r\n        } else {\r\n            this._dragPlane.position.copyFrom(this._pointA);\r\n            this._dragPlane.lookAt(ray.origin);\r\n        }\r\n        // Update the position of the drag plane so it doesn't get out of sync with the node (eg. when moving back and forth quickly)\r\n        this._dragPlane.position.copyFrom(this.attachedNode.getAbsolutePosition());\r\n\r\n        this._dragPlane.computeWorldMatrix(true);\r\n    }\r\n\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        this._lastPointerRay = {};\r\n        if (this.attachedNode) {\r\n            this.attachedNode.isNearGrabbable = false;\r\n        }\r\n        if (this._pointerObserver) {\r\n            this._scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n        if (this._beforeRenderObserver) {\r\n            this._scene.onBeforeRenderObservable.remove(this._beforeRenderObserver);\r\n        }\r\n        if (this._dragPlane) {\r\n            this._dragPlane.dispose();\r\n        }\r\n        this.releaseDrag();\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Behavior } from \"../../Behaviors/behavior\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Vector3, Quaternion, TmpVectors } from \"../../Maths/math.vector\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport type { PickingInfo } from \"../../Collisions/pickingInfo\";\r\nimport { Camera } from \"../../Cameras/camera\";\r\nimport type { Ray } from \"../../Culling/ray\";\r\nimport type { IPointerEvent } from \"../../Events/deviceInputEvents\";\r\nimport type { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\n\r\n/**\r\n * Data store to track virtual pointers movement\r\n */\r\ntype VirtualMeshInfo = {\r\n    dragging: boolean;\r\n    moving: boolean;\r\n    dragMesh: AbstractMesh;\r\n    originMesh: AbstractMesh;\r\n    pivotMesh: AbstractMesh;\r\n    startingPivotPosition: Vector3;\r\n    startingPivotOrientation: Quaternion;\r\n    startingPosition: Vector3;\r\n    startingOrientation: Quaternion;\r\n    lastOriginPosition: Vector3;\r\n    lastDragPosition: Vector3;\r\n};\r\n\r\n/**\r\n * Base behavior for six degrees of freedom interactions in XR experiences.\r\n * Creates virtual meshes that are dragged around\r\n * And observables for position/rotation changes\r\n */\r\nexport class BaseSixDofDragBehavior implements Behavior<Mesh> {\r\n    protected static _virtualScene: Scene;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _attachedToElement: boolean = false;\r\n    protected _virtualMeshesInfo: {\r\n        [id: number]: VirtualMeshInfo;\r\n    } = {};\r\n\r\n    private _tmpVector: Vector3 = new Vector3();\r\n    private _tmpQuaternion: Quaternion = new Quaternion();\r\n\r\n    protected _dragType = {\r\n        NONE: 0,\r\n        DRAG: 1,\r\n        DRAG_WITH_CONTROLLER: 2,\r\n        NEAR_DRAG: 3,\r\n    };\r\n\r\n    protected _scene: Scene;\r\n    protected _moving = false;\r\n    protected _ownerNode: TransformNode;\r\n    protected _dragging = this._dragType.NONE;\r\n\r\n    /**\r\n     * The list of child meshes that can receive drag events\r\n     * If `null`, all child meshes will receive drag event\r\n     */\r\n    public draggableMeshes: Nullable<AbstractMesh[]> = null;\r\n\r\n    /**\r\n     * How much faster the object should move when the controller is moving towards it. This is useful to bring objects that are far away from the user to them faster. Set this to 0 to avoid any speed increase. (Default: 3)\r\n     */\r\n    public zDragFactor = 3;\r\n    /**\r\n     * The id of the pointer that is currently interacting with the behavior (-1 when no pointer is active)\r\n     */\r\n    public get currentDraggingPointerId() {\r\n        if (this.currentDraggingPointerIds[0] !== undefined) {\r\n            return this.currentDraggingPointerIds[0];\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public set currentDraggingPointerId(value: number) {\r\n        this.currentDraggingPointerIds[0] = value;\r\n    }\r\n\r\n    /**\r\n     * In case of multipointer interaction, all pointer ids currently active are stored here\r\n     */\r\n    public currentDraggingPointerIds: number[] = [];\r\n\r\n    /**\r\n     * Get or set the currentDraggingPointerId\r\n     * @deprecated Please use currentDraggingPointerId instead\r\n     */\r\n    public get currentDraggingPointerID(): number {\r\n        return this.currentDraggingPointerId;\r\n    }\r\n    public set currentDraggingPointerID(currentDraggingPointerID: number) {\r\n        this.currentDraggingPointerId = currentDraggingPointerID;\r\n    }\r\n    /**\r\n    /**\r\n     * If camera controls should be detached during the drag\r\n     */\r\n    public detachCameraControls = true;\r\n\r\n    /**\r\n     * Fires each time a drag starts\r\n     */\r\n    public onDragStartObservable = new Observable<{ position: Vector3 }>();\r\n    /**\r\n     * Fires each time a drag happens\r\n     */\r\n    public onDragObservable = new Observable<{ delta: Vector3; position: Vector3; pickInfo: PickingInfo }>();\r\n    /**\r\n     *  Fires each time a drag ends (eg. mouse release after drag)\r\n     */\r\n    public onDragEndObservable = new Observable<{}>();\r\n\r\n    /**\r\n     * Should the behavior allow simultaneous pointers to interact with the owner node.\r\n     */\r\n    public allowMultiPointer: boolean = true;\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"BaseSixDofDrag\";\r\n    }\r\n\r\n    /**\r\n     *  Returns true if the attached mesh is currently moving with this behavior\r\n     */\r\n    public get isMoving(): boolean {\r\n        return this._moving;\r\n    }\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * In the case of multiple active cameras, the cameraToUseForPointers should be used if set instead of active camera\r\n     */\r\n    private get _pointerCamera() {\r\n        if (this._scene.cameraToUseForPointers) {\r\n            return this._scene.cameraToUseForPointers;\r\n        } else {\r\n            return this._scene.activeCamera;\r\n        }\r\n    }\r\n\r\n    private _createVirtualMeshInfo() {\r\n        // Setup virtual meshes to be used for dragging without dirtying the existing scene\r\n\r\n        const dragMesh = new AbstractMesh(\"\", BaseSixDofDragBehavior._virtualScene);\r\n        dragMesh.rotationQuaternion = new Quaternion();\r\n        const originMesh = new AbstractMesh(\"\", BaseSixDofDragBehavior._virtualScene);\r\n        originMesh.rotationQuaternion = new Quaternion();\r\n        const pivotMesh = new AbstractMesh(\"\", BaseSixDofDragBehavior._virtualScene);\r\n        pivotMesh.rotationQuaternion = new Quaternion();\r\n\r\n        return {\r\n            dragging: false,\r\n            moving: false,\r\n            dragMesh,\r\n            originMesh,\r\n            pivotMesh,\r\n            startingPivotPosition: new Vector3(),\r\n            startingPivotOrientation: new Quaternion(),\r\n            startingPosition: new Vector3(),\r\n            startingOrientation: new Quaternion(),\r\n            lastOriginPosition: new Vector3(),\r\n            lastDragPosition: new Vector3(),\r\n        };\r\n    }\r\n\r\n    protected _resetVirtualMeshesPosition() {\r\n        for (let i = 0; i < this.currentDraggingPointerIds.length; i++) {\r\n            this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].pivotMesh.position.copyFrom(this._ownerNode.getAbsolutePivotPoint());\r\n            this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].pivotMesh.rotationQuaternion!.copyFrom(this._ownerNode.rotationQuaternion!);\r\n            this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].startingPivotPosition.copyFrom(\r\n                this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].pivotMesh.position\r\n            );\r\n            this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].startingPivotOrientation.copyFrom(\r\n                this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].pivotMesh.rotationQuaternion!\r\n            );\r\n            this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].startingPosition.copyFrom(this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].dragMesh.position);\r\n            this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].startingOrientation.copyFrom(\r\n                this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].dragMesh.rotationQuaternion!\r\n            );\r\n        }\r\n    }\r\n\r\n    private _pointerUpdate2D(ray: Ray, pointerId: number, zDragFactor: number) {\r\n        if (this._pointerCamera && this._pointerCamera.cameraRigMode == Camera.RIG_MODE_NONE && !this._pointerCamera._isLeftCamera && !this._pointerCamera._isRightCamera) {\r\n            ray.origin.copyFrom(this._pointerCamera!.globalPosition);\r\n            zDragFactor = 0;\r\n        }\r\n\r\n        const virtualMeshesInfo = this._virtualMeshesInfo[pointerId];\r\n\r\n        // Calculate controller drag distance in controller space\r\n        const originDragDifference = TmpVectors.Vector3[0];\r\n        ray.origin.subtractToRef(virtualMeshesInfo.lastOriginPosition, originDragDifference);\r\n        virtualMeshesInfo.lastOriginPosition.copyFrom(ray.origin);\r\n        const localOriginDragDifference = -Vector3.Dot(originDragDifference, ray.direction);\r\n\r\n        virtualMeshesInfo.originMesh.addChild(virtualMeshesInfo.dragMesh);\r\n        virtualMeshesInfo.originMesh.addChild(virtualMeshesInfo.pivotMesh);\r\n\r\n        this._applyZOffset(virtualMeshesInfo.dragMesh, localOriginDragDifference, zDragFactor);\r\n        this._applyZOffset(virtualMeshesInfo.pivotMesh, localOriginDragDifference, zDragFactor);\r\n\r\n        // Update the controller position\r\n        virtualMeshesInfo.originMesh.position.copyFrom(ray.origin);\r\n        const lookAt = TmpVectors.Vector3[0];\r\n        ray.origin.addToRef(ray.direction, lookAt);\r\n        virtualMeshesInfo.originMesh.lookAt(lookAt);\r\n\r\n        virtualMeshesInfo.originMesh.removeChild(virtualMeshesInfo.dragMesh);\r\n        virtualMeshesInfo.originMesh.removeChild(virtualMeshesInfo.pivotMesh);\r\n    }\r\n\r\n    private _pointerUpdateXR(controllerAimTransform: TransformNode, controllerGripTransform: Nullable<TransformNode>, pointerId: number, zDragFactor: number) {\r\n        const virtualMeshesInfo = this._virtualMeshesInfo[pointerId];\r\n        virtualMeshesInfo.originMesh.position.copyFrom(controllerAimTransform.position);\r\n        if (this._dragging === this._dragType.NEAR_DRAG && controllerGripTransform) {\r\n            virtualMeshesInfo.originMesh.rotationQuaternion!.copyFrom(controllerGripTransform.rotationQuaternion!);\r\n        } else {\r\n            virtualMeshesInfo.originMesh.rotationQuaternion!.copyFrom(controllerAimTransform.rotationQuaternion!);\r\n        }\r\n\r\n        virtualMeshesInfo.pivotMesh.computeWorldMatrix(true);\r\n        virtualMeshesInfo.dragMesh.computeWorldMatrix(true);\r\n\r\n        // Z scaling logic\r\n        if (zDragFactor !== 0) {\r\n            // Camera.getForwardRay modifies TmpVectors.Vector[0-3], so cache it in advance\r\n            const cameraForwardVec = TmpVectors.Vector3[0];\r\n            const originDragDirection = TmpVectors.Vector3[1];\r\n            cameraForwardVec.copyFrom(this._pointerCamera!.getForwardRay().direction);\r\n            virtualMeshesInfo.originMesh.position.subtractToRef(virtualMeshesInfo.lastOriginPosition, originDragDirection);\r\n            virtualMeshesInfo.lastOriginPosition.copyFrom(virtualMeshesInfo.originMesh.position);\r\n            const controllerDragDistance = originDragDirection.length();\r\n            originDragDirection.normalize();\r\n\r\n            const cameraToDrag = TmpVectors.Vector3[2];\r\n            const controllerToDrag = TmpVectors.Vector3[3];\r\n            virtualMeshesInfo.dragMesh.absolutePosition.subtractToRef(this._pointerCamera!.globalPosition, cameraToDrag);\r\n            virtualMeshesInfo.dragMesh.absolutePosition.subtractToRef(virtualMeshesInfo.originMesh.position, controllerToDrag);\r\n            const controllerToDragDistance = controllerToDrag.length();\r\n            cameraToDrag.normalize();\r\n            controllerToDrag.normalize();\r\n\r\n            const controllerDragScaling = Math.abs(Vector3.Dot(originDragDirection, controllerToDrag)) * Vector3.Dot(originDragDirection, cameraForwardVec);\r\n            let zOffsetScaling = controllerDragScaling * zDragFactor * controllerDragDistance * controllerToDragDistance;\r\n\r\n            // Prevent pulling the mesh through the controller\r\n            const minDistanceFromControllerToDragMesh = 0.01;\r\n            if (zOffsetScaling < 0 && minDistanceFromControllerToDragMesh - controllerToDragDistance > zOffsetScaling) {\r\n                zOffsetScaling = Math.min(minDistanceFromControllerToDragMesh - controllerToDragDistance, 0);\r\n            }\r\n            controllerToDrag.scaleInPlace(zOffsetScaling);\r\n\r\n            controllerToDrag.addToRef(virtualMeshesInfo.pivotMesh.absolutePosition, this._tmpVector);\r\n            virtualMeshesInfo.pivotMesh.setAbsolutePosition(this._tmpVector);\r\n            controllerToDrag.addToRef(virtualMeshesInfo.dragMesh.absolutePosition, this._tmpVector);\r\n            virtualMeshesInfo.dragMesh.setAbsolutePosition(this._tmpVector);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attaches the scale behavior the passed in mesh\r\n     * @param ownerNode The mesh that will be scaled around once attached\r\n     */\r\n    public attach(ownerNode: TransformNode): void {\r\n        this._ownerNode = ownerNode;\r\n        this._scene = this._ownerNode.getScene();\r\n        if (!BaseSixDofDragBehavior._virtualScene) {\r\n            BaseSixDofDragBehavior._virtualScene = new Scene(this._scene.getEngine(), { virtual: true });\r\n            BaseSixDofDragBehavior._virtualScene.detachControl();\r\n        }\r\n\r\n        const pickPredicate = (m: AbstractMesh) => {\r\n            return this._ownerNode === m || (m.isDescendantOf(this._ownerNode) && (!this.draggableMeshes || this.draggableMeshes.indexOf(m) !== -1));\r\n        };\r\n\r\n        this._pointerObserver = this._scene.onPointerObservable.add((pointerInfo) => {\r\n            const pointerId = (<IPointerEvent>pointerInfo.event).pointerId;\r\n            if (!this._virtualMeshesInfo[pointerId]) {\r\n                this._virtualMeshesInfo[pointerId] = this._createVirtualMeshInfo();\r\n            }\r\n            const virtualMeshesInfo = this._virtualMeshesInfo[pointerId];\r\n            const isXRPointer = (<IPointerEvent>pointerInfo.event).pointerType === \"xr-near\" || (<IPointerEvent>pointerInfo.event).pointerType === \"xr\";\r\n\r\n            if (pointerInfo.type == PointerEventTypes.POINTERDOWN) {\r\n                if (\r\n                    !virtualMeshesInfo.dragging &&\r\n                    pointerInfo.pickInfo &&\r\n                    pointerInfo.pickInfo.hit &&\r\n                    pointerInfo.pickInfo.pickedMesh &&\r\n                    pointerInfo.pickInfo.pickedPoint &&\r\n                    pointerInfo.pickInfo.ray &&\r\n                    (!isXRPointer || pointerInfo.pickInfo.aimTransform) &&\r\n                    pickPredicate(pointerInfo.pickInfo.pickedMesh)\r\n                ) {\r\n                    if ((!this.allowMultiPointer || isXRPointer) && this.currentDraggingPointerIds.length > 0) {\r\n                        return;\r\n                    }\r\n\r\n                    if (\r\n                        this._pointerCamera &&\r\n                        this._pointerCamera.cameraRigMode === Camera.RIG_MODE_NONE &&\r\n                        !this._pointerCamera._isLeftCamera &&\r\n                        !this._pointerCamera._isRightCamera\r\n                    ) {\r\n                        pointerInfo.pickInfo.ray.origin.copyFrom(this._pointerCamera!.globalPosition);\r\n                    }\r\n\r\n                    this._ownerNode.computeWorldMatrix(true);\r\n                    const virtualMeshesInfo = this._virtualMeshesInfo[pointerId];\r\n\r\n                    if (isXRPointer) {\r\n                        this._dragging = pointerInfo.pickInfo.originMesh ? this._dragType.NEAR_DRAG : this._dragType.DRAG_WITH_CONTROLLER;\r\n                        virtualMeshesInfo.originMesh.position.copyFrom(pointerInfo.pickInfo.aimTransform!.position);\r\n                        if (this._dragging === this._dragType.NEAR_DRAG && pointerInfo.pickInfo.gripTransform) {\r\n                            virtualMeshesInfo.originMesh.rotationQuaternion!.copyFrom(pointerInfo.pickInfo.gripTransform.rotationQuaternion!);\r\n                        } else {\r\n                            virtualMeshesInfo.originMesh.rotationQuaternion!.copyFrom(pointerInfo.pickInfo.aimTransform!.rotationQuaternion!);\r\n                        }\r\n                    } else {\r\n                        this._dragging = this._dragType.DRAG;\r\n                        virtualMeshesInfo.originMesh.position.copyFrom(pointerInfo.pickInfo.ray.origin);\r\n                    }\r\n\r\n                    virtualMeshesInfo.lastOriginPosition.copyFrom(virtualMeshesInfo.originMesh.position);\r\n\r\n                    virtualMeshesInfo.dragMesh.position.copyFrom(pointerInfo.pickInfo.pickedPoint);\r\n                    virtualMeshesInfo.lastDragPosition.copyFrom(pointerInfo.pickInfo.pickedPoint);\r\n\r\n                    virtualMeshesInfo.pivotMesh.position.copyFrom(this._ownerNode.getAbsolutePivotPoint());\r\n                    virtualMeshesInfo.pivotMesh.rotationQuaternion!.copyFrom(this._ownerNode.absoluteRotationQuaternion);\r\n\r\n                    virtualMeshesInfo.startingPosition.copyFrom(virtualMeshesInfo.dragMesh.position);\r\n                    virtualMeshesInfo.startingPivotPosition.copyFrom(virtualMeshesInfo.pivotMesh.position);\r\n                    virtualMeshesInfo.startingOrientation.copyFrom(virtualMeshesInfo.dragMesh.rotationQuaternion!);\r\n                    virtualMeshesInfo.startingPivotOrientation.copyFrom(virtualMeshesInfo.pivotMesh.rotationQuaternion!);\r\n\r\n                    if (isXRPointer) {\r\n                        virtualMeshesInfo.originMesh.addChild(virtualMeshesInfo.dragMesh);\r\n                        virtualMeshesInfo.originMesh.addChild(virtualMeshesInfo.pivotMesh);\r\n                    } else {\r\n                        virtualMeshesInfo.originMesh.lookAt(virtualMeshesInfo.dragMesh.position);\r\n                    }\r\n\r\n                    // Update state\r\n                    virtualMeshesInfo.dragging = true;\r\n\r\n                    if (this.currentDraggingPointerIds.indexOf(pointerId) === -1) {\r\n                        this.currentDraggingPointerIds.push(pointerId);\r\n                    }\r\n\r\n                    // Detach camera controls\r\n                    if (this.detachCameraControls && this._pointerCamera && !this._pointerCamera.leftCamera) {\r\n                        if (this._pointerCamera.inputs && this._pointerCamera.inputs.attachedToElement) {\r\n                            this._pointerCamera.detachControl();\r\n                            this._attachedToElement = true;\r\n                        } else if (!this.allowMultiPointer || this.currentDraggingPointerIds.length === 0) {\r\n                            this._attachedToElement = false;\r\n                        }\r\n                    }\r\n\r\n                    this._targetDragStart(virtualMeshesInfo.pivotMesh.position, virtualMeshesInfo.pivotMesh.rotationQuaternion!, pointerId);\r\n                    this.onDragStartObservable.notifyObservers({ position: virtualMeshesInfo.pivotMesh.position });\r\n                }\r\n            } else if (pointerInfo.type == PointerEventTypes.POINTERUP || pointerInfo.type == PointerEventTypes.POINTERDOUBLETAP) {\r\n                const registeredPointerIndex = this.currentDraggingPointerIds.indexOf(pointerId);\r\n\r\n                // Update state\r\n                virtualMeshesInfo.dragging = false;\r\n\r\n                if (registeredPointerIndex !== -1) {\r\n                    this.currentDraggingPointerIds.splice(registeredPointerIndex, 1);\r\n                    if (this.currentDraggingPointerIds.length === 0) {\r\n                        this._moving = false;\r\n                        this._dragging = this._dragType.NONE;\r\n\r\n                        // Reattach camera controls\r\n                        if (this.detachCameraControls && this._attachedToElement && this._pointerCamera && !this._pointerCamera.leftCamera) {\r\n                            this._reattachCameraControls();\r\n                            this._attachedToElement = false;\r\n                        }\r\n                    }\r\n\r\n                    virtualMeshesInfo.originMesh.removeChild(virtualMeshesInfo.dragMesh);\r\n                    virtualMeshesInfo.originMesh.removeChild(virtualMeshesInfo.pivotMesh);\r\n                    this._targetDragEnd(pointerId);\r\n                    this.onDragEndObservable.notifyObservers({});\r\n                }\r\n            } else if (pointerInfo.type == PointerEventTypes.POINTERMOVE) {\r\n                const registeredPointerIndex = this.currentDraggingPointerIds.indexOf(pointerId);\r\n\r\n                if (registeredPointerIndex !== -1 && virtualMeshesInfo.dragging && pointerInfo.pickInfo && (pointerInfo.pickInfo.ray || pointerInfo.pickInfo.aimTransform)) {\r\n                    let zDragFactor = this.zDragFactor;\r\n\r\n                    // 2 pointer interaction should not have a z axis drag factor\r\n                    // as well as near interaction\r\n                    if (this.currentDraggingPointerIds.length > 1 || pointerInfo.pickInfo.originMesh) {\r\n                        zDragFactor = 0;\r\n                    }\r\n\r\n                    this._ownerNode.computeWorldMatrix(true);\r\n                    if (!isXRPointer) {\r\n                        this._pointerUpdate2D(pointerInfo.pickInfo.ray!, pointerId, zDragFactor);\r\n                    } else {\r\n                        this._pointerUpdateXR(pointerInfo.pickInfo.aimTransform!, pointerInfo.pickInfo.gripTransform, pointerId, zDragFactor);\r\n                    }\r\n\r\n                    // Get change in rotation\r\n                    this._tmpQuaternion.copyFrom(virtualMeshesInfo.startingPivotOrientation);\r\n                    this._tmpQuaternion.x = -this._tmpQuaternion.x;\r\n                    this._tmpQuaternion.y = -this._tmpQuaternion.y;\r\n                    this._tmpQuaternion.z = -this._tmpQuaternion.z;\r\n                    virtualMeshesInfo.pivotMesh.absoluteRotationQuaternion!.multiplyToRef(this._tmpQuaternion, this._tmpQuaternion);\r\n                    virtualMeshesInfo.pivotMesh.absolutePosition.subtractToRef(virtualMeshesInfo.startingPivotPosition, this._tmpVector);\r\n\r\n                    this.onDragObservable.notifyObservers({ delta: this._tmpVector, position: virtualMeshesInfo.pivotMesh.position, pickInfo: pointerInfo.pickInfo });\r\n\r\n                    // Notify herited methods and observables\r\n                    this._targetDrag(this._tmpVector, this._tmpQuaternion, pointerId);\r\n                    virtualMeshesInfo.lastDragPosition.copyFrom(virtualMeshesInfo.dragMesh.absolutePosition);\r\n\r\n                    this._moving = true;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _applyZOffset(node: TransformNode, localOriginDragDifference: number, zDragFactor: number) {\r\n        // Determine how much the controller moved to/away towards the dragged object and use this to move the object further when its further away\r\n        node.position.z -= node.position.z < 1 ? localOriginDragDifference * zDragFactor : localOriginDragDifference * zDragFactor * node.position.z;\r\n        if (node.position.z < 0) {\r\n            node.position.z = 0;\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _targetDragStart(worldPosition: Vector3, worldRotation: Quaternion, pointerId: number) {\r\n        // Herited classes can override that\r\n    }\r\n\r\n    protected _targetDrag(worldDeltaPosition: Vector3, worldDeltaRotation: Quaternion, pointerId: number) {\r\n        // Herited classes can override that\r\n    }\r\n\r\n    protected _targetDragEnd(pointerId: number) {\r\n        // Herited classes can override that\r\n    }\r\n\r\n    protected _reattachCameraControls() {\r\n        if (this._pointerCamera) {\r\n            // If the camera is an ArcRotateCamera, preserve the settings from the camera\r\n            // when reattaching control\r\n            if (this._pointerCamera.getClassName() === \"ArcRotateCamera\") {\r\n                const arcRotateCamera = this._pointerCamera as ArcRotateCamera;\r\n                arcRotateCamera.attachControl(\r\n                    arcRotateCamera.inputs ? arcRotateCamera.inputs.noPreventDefault : true,\r\n                    arcRotateCamera._useCtrlForPanning,\r\n                    arcRotateCamera._panningMouseButton\r\n                );\r\n            } else {\r\n                // preserve the settings from the camera when reattaching control\r\n                this._pointerCamera.attachControl(this._pointerCamera.inputs ? this._pointerCamera.inputs.noPreventDefault : true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        if (this._scene) {\r\n            if (this.detachCameraControls && this._attachedToElement && this._pointerCamera && !this._pointerCamera.leftCamera) {\r\n                this._reattachCameraControls();\r\n                this._attachedToElement = false;\r\n            }\r\n            this._scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        for (const pointerId in this._virtualMeshesInfo) {\r\n            this._virtualMeshesInfo[pointerId].originMesh.dispose();\r\n            this._virtualMeshesInfo[pointerId].dragMesh.dispose();\r\n        }\r\n\r\n        this.onDragEndObservable.clear();\r\n        this.onDragObservable.clear();\r\n        this.onDragStartObservable.clear();\r\n    }\r\n}\r\n", "import type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Vector3, Quaternion, Matrix, TmpVectors } from \"../../Maths/math.vector\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { BaseSixDofDragBehavior } from \"./baseSixDofDragBehavior\";\r\nimport { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { Space } from \"../../Maths/math.axis\";\r\n\r\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to be dragged around based on directions and origin of the pointer's ray\r\n */\r\nexport class SixDofDragBehavior extends BaseSixDofDragBehavior {\r\n    private _sceneRenderObserver: Nullable<Observer<Scene>> = null;\r\n    private _virtualTransformNode: TransformNode;\r\n\r\n    protected _targetPosition = new Vector3(0, 0, 0);\r\n    protected _targetOrientation = new Quaternion();\r\n    protected _targetScaling = new Vector3(1, 1, 1);\r\n    protected _startingPosition = new Vector3(0, 0, 0);\r\n    protected _startingOrientation = new Quaternion();\r\n    protected _startingScaling = new Vector3(1, 1, 1);\r\n\r\n    /**\r\n     * Fires when position is updated\r\n     */\r\n    public onPositionChangedObservable = new Observable<{ position: Vector3 }>();\r\n\r\n    /**\r\n     * The distance towards the target drag position to move each frame. This can be useful to avoid jitter. Set this to 1 for no delay. (Default: 0.2)\r\n     */\r\n    public dragDeltaRatio = 0.2;\r\n\r\n    /**\r\n     * If the object should rotate to face the drag origin\r\n     */\r\n    public rotateDraggedObject = true;\r\n\r\n    /**\r\n     * If `rotateDraggedObject` is set to `true`, this parameter determines if we are only rotating around the y axis (yaw)\r\n     */\r\n    public rotateAroundYOnly = false;\r\n\r\n    /**\r\n     * Should the behavior rotate 1:1 with the motion controller, when one is used.\r\n     */\r\n    public rotateWithMotionController = true;\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"SixDofDrag\";\r\n    }\r\n\r\n    /**\r\n     * Use this flag to update the target but not move the owner node towards the target\r\n     */\r\n    public disableMovement: boolean = false;\r\n\r\n    /**\r\n     * Should the object rotate towards the camera when we start dragging it\r\n     */\r\n    public faceCameraOnDragStart = false;\r\n\r\n    /**\r\n     * Attaches the six DoF drag behavior\r\n     * In XR mode the mesh and its children will have their isNearGrabbable property set to true\r\n     * @param ownerNode The mesh that will be dragged around once attached\r\n     */\r\n    public attach(ownerNode: Mesh): void {\r\n        super.attach(ownerNode);\r\n\r\n        ownerNode.isNearGrabbable = true;\r\n        // if it has children, make sure they are grabbable too\r\n        ownerNode.getChildMeshes().forEach((m) => {\r\n            m.isNearGrabbable = true;\r\n        });\r\n\r\n        // Node that will save the owner's transform\r\n        this._virtualTransformNode = new TransformNode(\"virtual_sixDof\", BaseSixDofDragBehavior._virtualScene);\r\n        this._virtualTransformNode.rotationQuaternion = Quaternion.Identity();\r\n\r\n        // On every frame move towards target scaling to avoid jitter caused by vr controllers\r\n        this._sceneRenderObserver = ownerNode.getScene().onBeforeRenderObservable.add(() => {\r\n            if (this.currentDraggingPointerIds.length === 1 && this._moving && !this.disableMovement) {\r\n                // 1 pointer only drags mesh\r\n                const deltaToAdd = TmpVectors.Vector3[0];\r\n                deltaToAdd.copyFrom(this._targetPosition).subtractInPlace(ownerNode.absolutePosition).scaleInPlace(this.dragDeltaRatio);\r\n                const deltaToAddTransformed = TmpVectors.Vector3[1];\r\n                deltaToAddTransformed.copyFrom(deltaToAdd);\r\n                // If the node has a parent, transform the delta to local space, so it can be added to the\r\n                // position in local space\r\n                if (ownerNode.parent) {\r\n                    const parentRotationMatrixInverse = TmpVectors.Matrix[0];\r\n                    (ownerNode.parent as TransformNode).absoluteRotationQuaternion.toRotationMatrix(parentRotationMatrixInverse);\r\n                    parentRotationMatrixInverse.invert();\r\n                    Vector3.TransformNormalToRef(deltaToAdd, parentRotationMatrixInverse, deltaToAddTransformed);\r\n                }\r\n                ownerNode.position.addInPlace(deltaToAddTransformed);\r\n\r\n                this.onPositionChangedObservable.notifyObservers({ position: ownerNode.absolutePosition });\r\n\r\n                // Only rotate the mesh if it's parent has uniform scaling\r\n                if (!ownerNode.parent || ((ownerNode.parent as TransformNode).scaling && !(ownerNode.parent as TransformNode).scaling.isNonUniformWithinEpsilon(0.001))) {\r\n                    const rotationToApply = TmpVectors.Quaternion[0];\r\n                    rotationToApply.copyFrom(this._targetOrientation);\r\n                    if (ownerNode.parent) {\r\n                        const parentRotationInverse = TmpVectors.Quaternion[0];\r\n                        parentRotationInverse.copyFrom((ownerNode.parent as TransformNode).absoluteRotationQuaternion);\r\n                        parentRotationInverse.invertInPlace();\r\n                        parentRotationInverse.multiplyToRef(this._targetOrientation, rotationToApply);\r\n                    }\r\n                    Quaternion.SlerpToRef(ownerNode.rotationQuaternion!, rotationToApply, this.dragDeltaRatio, ownerNode.rotationQuaternion!);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _getPositionOffsetAround(transformationLocalOrigin: Vector3, scaling: number, rotation: Quaternion): Vector3 {\r\n        const translationMatrix = TmpVectors.Matrix[0]; // T\r\n        const translationMatrixInv = TmpVectors.Matrix[1]; // T'\r\n        const rotationMatrix = TmpVectors.Matrix[2]; // R\r\n        const scaleMatrix = TmpVectors.Matrix[3]; // S\r\n        const finalMatrix = TmpVectors.Matrix[4]; // T' x R x S x T\r\n\r\n        Matrix.TranslationToRef(transformationLocalOrigin.x, transformationLocalOrigin.y, transformationLocalOrigin.z, translationMatrix); // T\r\n        Matrix.TranslationToRef(-transformationLocalOrigin.x, -transformationLocalOrigin.y, -transformationLocalOrigin.z, translationMatrixInv); // T'\r\n        Matrix.FromQuaternionToRef(rotation, rotationMatrix); // R\r\n        Matrix.ScalingToRef(scaling, scaling, scaling, scaleMatrix);\r\n        translationMatrixInv.multiplyToRef(rotationMatrix, finalMatrix); // T' x R\r\n        finalMatrix.multiplyToRef(scaleMatrix, finalMatrix); // T' x R x S\r\n        finalMatrix.multiplyToRef(translationMatrix, finalMatrix); // T' x R x S x T\r\n\r\n        return finalMatrix.getTranslation();\r\n    }\r\n\r\n    private _onePointerPositionUpdated(worldDeltaPosition: Vector3, worldDeltaRotation: Quaternion) {\r\n        const pointerDelta = TmpVectors.Vector3[0];\r\n        pointerDelta.setAll(0);\r\n\r\n        if (this._dragging === this._dragType.DRAG) {\r\n            if (this.rotateDraggedObject) {\r\n                if (this.rotateAroundYOnly) {\r\n                    // Convert change in rotation to only y axis rotation\r\n                    Quaternion.RotationYawPitchRollToRef(worldDeltaRotation.toEulerAngles().y, 0, 0, TmpVectors.Quaternion[0]);\r\n                } else {\r\n                    TmpVectors.Quaternion[0].copyFrom(worldDeltaRotation);\r\n                }\r\n                TmpVectors.Quaternion[0].multiplyToRef(this._startingOrientation, this._targetOrientation);\r\n            }\r\n        } else if (this._dragging === this._dragType.NEAR_DRAG || (this._dragging === this._dragType.DRAG_WITH_CONTROLLER && this.rotateWithMotionController)) {\r\n            worldDeltaRotation.multiplyToRef(this._startingOrientation, this._targetOrientation);\r\n        }\r\n\r\n        this._targetPosition.copyFrom(this._startingPosition).addInPlace(worldDeltaPosition);\r\n    }\r\n\r\n    private _twoPointersPositionUpdated() {\r\n        const startingPosition0 = this._virtualMeshesInfo[this.currentDraggingPointerIds[0]].startingPosition;\r\n        const startingPosition1 = this._virtualMeshesInfo[this.currentDraggingPointerIds[1]].startingPosition;\r\n        const startingCenter = TmpVectors.Vector3[0];\r\n        startingPosition0.addToRef(startingPosition1, startingCenter);\r\n        startingCenter.scaleInPlace(0.5);\r\n        const startingVector = TmpVectors.Vector3[1];\r\n        startingPosition1.subtractToRef(startingPosition0, startingVector);\r\n\r\n        const currentPosition0 = this._virtualMeshesInfo[this.currentDraggingPointerIds[0]].dragMesh.absolutePosition;\r\n        const currentPosition1 = this._virtualMeshesInfo[this.currentDraggingPointerIds[1]].dragMesh.absolutePosition;\r\n        const currentCenter = TmpVectors.Vector3[2];\r\n        currentPosition0.addToRef(currentPosition1, currentCenter);\r\n        currentCenter.scaleInPlace(0.5);\r\n        const currentVector = TmpVectors.Vector3[3];\r\n        currentPosition1.subtractToRef(currentPosition0, currentVector);\r\n\r\n        const scaling = currentVector.length() / startingVector.length();\r\n        const translation = currentCenter.subtract(startingCenter);\r\n        const rotationQuaternion = Quaternion.FromEulerAngles(\r\n            0,\r\n            Vector3.GetAngleBetweenVectorsOnPlane(startingVector.normalize(), currentVector.normalize(), Vector3.UpReadOnly),\r\n            0\r\n        );\r\n\r\n        const oldParent = this._ownerNode.parent;\r\n        this._ownerNode.setParent(null);\r\n\r\n        const positionOffset = this._getPositionOffsetAround(startingCenter.subtract(this._virtualTransformNode.getAbsolutePivotPoint()), scaling, rotationQuaternion);\r\n        this._virtualTransformNode.rotationQuaternion!.multiplyToRef(rotationQuaternion, this._ownerNode.rotationQuaternion!);\r\n        this._virtualTransformNode.scaling.scaleToRef(scaling, this._ownerNode.scaling);\r\n        this._virtualTransformNode.position.addToRef(translation.addInPlace(positionOffset), this._ownerNode.position);\r\n        this.onPositionChangedObservable.notifyObservers({ position: this._ownerNode.position });\r\n\r\n        this._ownerNode.setParent(oldParent);\r\n    }\r\n\r\n    protected _targetDragStart() {\r\n        const pointerCount = this.currentDraggingPointerIds.length;\r\n\r\n        if (!this._ownerNode.rotationQuaternion) {\r\n            this._ownerNode.rotationQuaternion = Quaternion.RotationYawPitchRoll(this._ownerNode.rotation.y, this._ownerNode.rotation.x, this._ownerNode.rotation.z);\r\n        }\r\n        const worldPivot = this._ownerNode.getAbsolutePivotPoint();\r\n\r\n        if (pointerCount === 1) {\r\n            this._targetPosition.copyFrom(this._ownerNode.absolutePosition);\r\n            this._targetOrientation.copyFrom(this._ownerNode.absoluteRotationQuaternion);\r\n            this._targetScaling.copyFrom(this._ownerNode.absoluteScaling);\r\n\r\n            if (this.faceCameraOnDragStart && this._scene.activeCamera) {\r\n                const toCamera = TmpVectors.Vector3[0];\r\n                this._scene.activeCamera.position.subtractToRef(worldPivot, toCamera);\r\n                toCamera.normalize();\r\n                const quat = TmpVectors.Quaternion[0];\r\n                if (this._scene.useRightHandedSystem) {\r\n                    Quaternion.FromLookDirectionRHToRef(toCamera, new Vector3(0, 1, 0), quat);\r\n                } else {\r\n                    Quaternion.FromLookDirectionLHToRef(toCamera, new Vector3(0, 1, 0), quat);\r\n                }\r\n                quat.normalize();\r\n                Quaternion.RotationYawPitchRollToRef(quat.toEulerAngles().y, 0, 0, TmpVectors.Quaternion[0]);\r\n                this._targetOrientation.copyFrom(TmpVectors.Quaternion[0]);\r\n            }\r\n            this._startingPosition.copyFrom(this._targetPosition);\r\n            this._startingOrientation.copyFrom(this._targetOrientation);\r\n            this._startingScaling.copyFrom(this._targetScaling);\r\n        } else if (pointerCount === 2) {\r\n            this._virtualTransformNode.setPivotPoint(new Vector3(0, 0, 0), Space.LOCAL);\r\n            this._virtualTransformNode.position.copyFrom(this._ownerNode.absolutePosition);\r\n            this._virtualTransformNode.scaling.copyFrom(this._ownerNode.absoluteScaling);\r\n            this._virtualTransformNode.rotationQuaternion!.copyFrom(this._ownerNode.absoluteRotationQuaternion);\r\n            this._virtualTransformNode.setPivotPoint(worldPivot, Space.WORLD);\r\n            this._resetVirtualMeshesPosition();\r\n        }\r\n    }\r\n\r\n    protected _targetDrag(worldDeltaPosition: Vector3, worldDeltaRotation: Quaternion) {\r\n        if (this.currentDraggingPointerIds.length === 1) {\r\n            this._onePointerPositionUpdated(worldDeltaPosition, worldDeltaRotation);\r\n        } else if (this.currentDraggingPointerIds.length === 2) {\r\n            this._twoPointersPositionUpdated();\r\n        }\r\n    }\r\n\r\n    protected _targetDragEnd() {\r\n        if (this.currentDraggingPointerIds.length === 1) {\r\n            // We still have 1 active pointer, we must simulate a dragstart with a reseted position/orientation\r\n            this._resetVirtualMeshesPosition();\r\n            const previousFaceCameraFlag = this.faceCameraOnDragStart;\r\n            this.faceCameraOnDragStart = false;\r\n            this._targetDragStart();\r\n            this.faceCameraOnDragStart = previousFaceCameraFlag;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        super.detach();\r\n\r\n        if (this._ownerNode) {\r\n            this._ownerNode.getScene().onBeforeRenderObservable.remove(this._sceneRenderObserver);\r\n        }\r\n\r\n        if (this._virtualTransformNode) {\r\n            this._virtualTransformNode.dispose();\r\n        }\r\n    }\r\n}\r\n", "import type { PickingInfo } from \"../../Collisions/pickingInfo\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Quaternion, TmpVectors, Vector3 } from \"../../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Behavior } from \"../behavior\";\r\n\r\n/**\r\n * A behavior that allows a transform node to stick to a surface position/orientation\r\n * @since 5.0.0\r\n */\r\nexport class SurfaceMagnetismBehavior implements Behavior<Mesh> {\r\n    private _scene: Scene;\r\n    private _attachedMesh: Nullable<Mesh>;\r\n    private _attachPointLocalOffset: Vector3 = new Vector3();\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _workingPosition: Vector3 = new Vector3();\r\n    private _workingQuaternion: Quaternion = new Quaternion();\r\n    private _lastTick: number = -1;\r\n    private _onBeforeRender: Nullable<Observer<Scene>>;\r\n    private _hit = false;\r\n\r\n    /**\r\n     * Distance offset from the hit point to place the target at, along the hit normal.\r\n     */\r\n    public hitNormalOffset: number = 0.05;\r\n\r\n    /**\r\n     * Name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"SurfaceMagnetism\";\r\n    }\r\n\r\n    /**\r\n     * Spatial mapping meshes to collide with\r\n     */\r\n    public meshes: AbstractMesh[] = [];\r\n\r\n    /**\r\n     * Function called when the behavior needs to be initialized (after attaching it to a target)\r\n     */\r\n    public init(): void {}\r\n\r\n    /**\r\n     * Set to false if the node should strictly follow the camera without any interpolation time\r\n     */\r\n    public interpolatePose = true;\r\n\r\n    /**\r\n     * Rate of interpolation of position and rotation of the attached node.\r\n     * Higher values will give a slower interpolation.\r\n     */\r\n    public lerpTime = 250;\r\n\r\n    /**\r\n     * If true, pitch and roll are omitted.\r\n     */\r\n    public keepOrientationVertical = true;\r\n\r\n    /**\r\n     * Is this behavior reacting to pointer events\r\n     */\r\n    public enabled = true;\r\n\r\n    /**\r\n     * Maximum distance for the node to stick to the surface\r\n     */\r\n    public maxStickingDistance = 0.8;\r\n\r\n    /**\r\n     * Attaches the behavior to a transform node\r\n     * @param target defines the target where the behavior is attached to\r\n     * @param scene the scene\r\n     */\r\n    public attach(target: Mesh, scene?: Scene): void {\r\n        this._attachedMesh = target;\r\n        this._scene = scene || target.getScene();\r\n        if (!this._attachedMesh.rotationQuaternion) {\r\n            this._attachedMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(this._attachedMesh.rotation.y, this._attachedMesh.rotation.x, this._attachedMesh.rotation.z);\r\n        }\r\n        this.updateAttachPoint();\r\n\r\n        this._workingPosition.copyFrom(this._attachedMesh.position);\r\n        this._workingQuaternion.copyFrom(this._attachedMesh.rotationQuaternion);\r\n        this._addObservables();\r\n    }\r\n\r\n    /**\r\n     * Detaches the behavior\r\n     */\r\n    public detach(): void {\r\n        this._attachedMesh = null;\r\n        this._removeObservables();\r\n    }\r\n\r\n    private _getTargetPose(pickingInfo: PickingInfo): Nullable<{ position: Vector3; quaternion: Quaternion }> {\r\n        if (!this._attachedMesh) {\r\n            return null;\r\n        }\r\n\r\n        if (pickingInfo && pickingInfo.hit) {\r\n            const pickedNormal = pickingInfo.getNormal(true, true);\r\n            const pickedPoint = pickingInfo.pickedPoint;\r\n\r\n            if (!pickedNormal || !pickedPoint) {\r\n                return null;\r\n            }\r\n            pickedNormal.normalize();\r\n\r\n            const worldTarget = TmpVectors.Vector3[0];\r\n            worldTarget.copyFrom(pickedNormal);\r\n            worldTarget.scaleInPlace(this.hitNormalOffset);\r\n            worldTarget.addInPlace(pickedPoint);\r\n\r\n            if (this._attachedMesh.parent) {\r\n                TmpVectors.Matrix[0].copyFrom(this._attachedMesh.parent.getWorldMatrix()).invert();\r\n                Vector3.TransformNormalToRef(worldTarget, TmpVectors.Matrix[0], worldTarget);\r\n            }\r\n\r\n            return {\r\n                position: worldTarget,\r\n                quaternion: Quaternion.RotationYawPitchRoll(\r\n                    -Math.atan2(pickedNormal.x, -pickedNormal.z),\r\n                    this.keepOrientationVertical ? 0 : Math.atan2(pickedNormal.y, Math.sqrt(pickedNormal.z * pickedNormal.z + pickedNormal.x * pickedNormal.x)),\r\n                    0\r\n                ),\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Updates the attach point with the current geometry extents of the attached mesh\r\n     */\r\n    public updateAttachPoint() {\r\n        this._getAttachPointOffsetToRef(this._attachPointLocalOffset);\r\n    }\r\n\r\n    /**\r\n     * Finds the intersection point of the given ray onto the meshes and updates the target.\r\n     * Transformation will be interpolated according to `interpolatePose` and `lerpTime` properties.\r\n     * If no mesh of `meshes` are hit, this does nothing.\r\n     * @param pickInfo The input pickingInfo that will be used to intersect the meshes\r\n     * @returns a boolean indicating if we found a hit to stick to\r\n     */\r\n    public findAndUpdateTarget(pickInfo: PickingInfo): boolean {\r\n        this._hit = false;\r\n        if (!pickInfo.ray) {\r\n            return false;\r\n        }\r\n\r\n        const subPicking = pickInfo.ray.intersectsMeshes(this.meshes)[0];\r\n\r\n        if (this._attachedMesh && subPicking && subPicking.hit && subPicking.pickedMesh) {\r\n            const pose = this._getTargetPose(subPicking);\r\n            if (pose && Vector3.Distance(this._attachedMesh.position, pose.position) < this.maxStickingDistance) {\r\n                this._workingPosition.copyFrom(pose.position);\r\n                this._workingQuaternion.copyFrom(pose.quaternion);\r\n                this._hit = true;\r\n            }\r\n        }\r\n\r\n        return this._hit;\r\n    }\r\n\r\n    private _getAttachPointOffsetToRef(ref: Vector3) {\r\n        if (!this._attachedMesh) {\r\n            ref.setAll(0);\r\n            return;\r\n        }\r\n\r\n        const storedQuat = TmpVectors.Quaternion[0];\r\n        storedQuat.copyFrom(this._attachedMesh.rotationQuaternion!);\r\n        this._attachedMesh.rotationQuaternion!.copyFromFloats(0, 0, 0, 1);\r\n        this._attachedMesh.computeWorldMatrix();\r\n        const boundingMinMax = this._attachedMesh.getHierarchyBoundingVectors();\r\n        const center = TmpVectors.Vector3[0];\r\n        boundingMinMax.max.addToRef(boundingMinMax.min, center);\r\n        center.scaleInPlace(0.5);\r\n        center.z = boundingMinMax.max.z;\r\n        // We max the z coordinate because we want the attach point to be on the back of the mesh\r\n        const invWorld = TmpVectors.Matrix[0];\r\n        this._attachedMesh.getWorldMatrix().invertToRef(invWorld);\r\n        Vector3.TransformCoordinatesToRef(center, invWorld, ref);\r\n        this._attachedMesh.rotationQuaternion!.copyFrom(storedQuat);\r\n    }\r\n\r\n    private _updateTransformToGoal(elapsed: number) {\r\n        if (!this._attachedMesh || !this._hit) {\r\n            return;\r\n        }\r\n\r\n        const oldParent = this._attachedMesh.parent;\r\n        this._attachedMesh.setParent(null);\r\n\r\n        const worldOffset = TmpVectors.Vector3[0];\r\n        Vector3.TransformNormalToRef(this._attachPointLocalOffset, this._attachedMesh.getWorldMatrix(), worldOffset);\r\n\r\n        if (!this.interpolatePose) {\r\n            this._attachedMesh.position.copyFrom(this._workingPosition).subtractInPlace(worldOffset);\r\n            this._attachedMesh.rotationQuaternion!.copyFrom(this._workingQuaternion);\r\n            return;\r\n        }\r\n\r\n        // position\r\n        const interpolatedPosition = new Vector3();\r\n        Vector3.SmoothToRef(this._attachedMesh.position, this._workingPosition, elapsed, this.lerpTime, interpolatedPosition);\r\n        this._attachedMesh.position.copyFrom(interpolatedPosition);\r\n\r\n        // rotation\r\n        const currentRotation = new Quaternion();\r\n        currentRotation.copyFrom(this._attachedMesh.rotationQuaternion!);\r\n        Quaternion.SmoothToRef(currentRotation, this._workingQuaternion, elapsed, this.lerpTime, this._attachedMesh.rotationQuaternion!);\r\n\r\n        this._attachedMesh.setParent(oldParent);\r\n    }\r\n\r\n    private _addObservables() {\r\n        this._pointerObserver = this._scene.onPointerObservable.add((pointerInfo) => {\r\n            if (this.enabled && pointerInfo.type == PointerEventTypes.POINTERMOVE && pointerInfo.pickInfo) {\r\n                this.findAndUpdateTarget(pointerInfo.pickInfo);\r\n            }\r\n        });\r\n\r\n        this._lastTick = Date.now();\r\n        this._onBeforeRender = this._scene.onBeforeRenderObservable.add(() => {\r\n            const tick = Date.now();\r\n            this._updateTransformToGoal(tick - this._lastTick);\r\n            this._lastTick = tick;\r\n        });\r\n    }\r\n\r\n    private _removeObservables() {\r\n        this._scene.onPointerObservable.remove(this._pointerObserver);\r\n        this._scene.onBeforeRenderObservable.remove(this._onBeforeRender);\r\n        this._pointerObserver = null;\r\n        this._onBeforeRender = null;\r\n    }\r\n}\r\n", "import type { Behavior } from \"../behavior\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport { Matrix, Quaternion, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Scalar } from \"../../Maths/math.scalar\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { Epsilon } from \"../../Maths/math.constants\";\r\n\r\n/**\r\n * A behavior that when attached to a mesh will follow a camera\r\n * @since 5.0.0\r\n */\r\nexport class FollowBehavior implements Behavior<TransformNode> {\r\n    private _scene: Scene;\r\n\r\n    // Memory cache to avoid GC usage\r\n    private _tmpQuaternion: Quaternion = new Quaternion();\r\n    private _tmpVectors: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];\r\n    private _tmpMatrix: Matrix = new Matrix();\r\n    private _tmpInvertView: Matrix = new Matrix();\r\n    private _tmpForward: Vector3 = new Vector3();\r\n    private _tmpNodeForward: Vector3 = new Vector3();\r\n    private _tmpPosition: Vector3 = new Vector3();\r\n\r\n    private _followedCamera: Nullable<Camera>;\r\n    private _onBeforeRender: Nullable<Observer<Scene>>;\r\n\r\n    private _workingPosition: Vector3 = new Vector3();\r\n    private _workingQuaternion: Quaternion = new Quaternion();\r\n    private _lastTick: number = -1;\r\n    private _recenterNextUpdate = true;\r\n\r\n    /**\r\n     * Attached node of this behavior\r\n     */\r\n    public attachedNode: Nullable<TransformNode>;\r\n\r\n    /**\r\n     * Set to false if the node should strictly follow the camera without any interpolation time\r\n     */\r\n    public interpolatePose = true;\r\n\r\n    /**\r\n     * Rate of interpolation of position and rotation of the attached node.\r\n     * Higher values will give a slower interpolation.\r\n     */\r\n    public lerpTime = 500;\r\n\r\n    /**\r\n     * If the behavior should ignore the pitch and roll of the camera.\r\n     */\r\n    public ignoreCameraPitchAndRoll = false;\r\n\r\n    /**\r\n     * Pitch offset from camera (relative to Max Distance)\r\n     * Is only effective if `ignoreCameraPitchAndRoll` is set to `true`.\r\n     */\r\n    public pitchOffset = 15;\r\n\r\n    /**\r\n     * The vertical angle from the camera forward axis to the owner will not exceed this value\r\n     */\r\n    public maxViewVerticalDegrees = 30;\r\n\r\n    /**\r\n     * The horizontal angle from the camera forward axis to the owner will not exceed this value\r\n     */\r\n    public maxViewHorizontalDegrees = 30;\r\n    /**\r\n     * The attached node will not reorient until the angle between its forward vector and the vector to the camera is greater than this value\r\n     */\r\n    public orientToCameraDeadzoneDegrees = 60;\r\n    /**\r\n     * Option to ignore distance clamping\r\n     */\r\n    public ignoreDistanceClamp = false;\r\n    /**\r\n     * Option to ignore angle clamping\r\n     */\r\n    public ignoreAngleClamp = false;\r\n    /**\r\n     * Max vertical distance between the attachedNode and camera\r\n     */\r\n    public verticalMaxDistance = 0;\r\n    /**\r\n     *  Default distance from eye to attached node, i.e. the sphere radius\r\n     */\r\n    public defaultDistance = 0.8;\r\n    /**\r\n     *  Max distance from eye to attached node, i.e. the sphere radius\r\n     */\r\n    public maximumDistance = 2;\r\n    /**\r\n     *  Min distance from eye to attached node, i.e. the sphere radius\r\n     */\r\n    public minimumDistance = 0.3;\r\n\r\n    /**\r\n     * Ignore vertical movement and lock the Y position of the object.\r\n     */\r\n    public useFixedVerticalOffset = false;\r\n\r\n    /**\r\n     * Fixed vertical position offset distance.\r\n     */\r\n    public fixedVerticalOffset = 0;\r\n\r\n    /**\r\n     * Enables/disables the behavior\r\n     * @internal\r\n     */\r\n    public _enabled = true;\r\n\r\n    /**\r\n     * The camera that should be followed by this behavior\r\n     */\r\n    public get followedCamera(): Nullable<Camera> {\r\n        return this._followedCamera || this._scene.activeCamera;\r\n    }\r\n\r\n    public set followedCamera(camera: Nullable<Camera>) {\r\n        this._followedCamera = camera;\r\n    }\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"Follow\";\r\n    }\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * Attaches the follow behavior\r\n     * @param ownerNode The mesh that will be following once attached\r\n     * @param followedCamera The camera that should be followed by the node\r\n     */\r\n    public attach(ownerNode: TransformNode, followedCamera?: Camera): void {\r\n        this._scene = ownerNode.getScene();\r\n        this.attachedNode = ownerNode;\r\n\r\n        if (followedCamera) {\r\n            this.followedCamera = followedCamera;\r\n        }\r\n\r\n        this._addObservables();\r\n    }\r\n\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        this.attachedNode = null;\r\n        this._removeObservables();\r\n    }\r\n\r\n    /**\r\n     * Recenters the attached node in front of the camera on the next update\r\n     */\r\n    public recenter() {\r\n        this._recenterNextUpdate = true;\r\n    }\r\n\r\n    private _angleBetweenVectorAndPlane(vector: Vector3, normal: Vector3) {\r\n        // Work on copies\r\n        this._tmpVectors[0].copyFrom(vector);\r\n        vector = this._tmpVectors[0];\r\n        this._tmpVectors[1].copyFrom(normal);\r\n        normal = this._tmpVectors[1];\r\n\r\n        vector.normalize();\r\n        normal.normalize();\r\n\r\n        return Math.PI / 2 - Math.acos(Vector3.Dot(vector, normal));\r\n    }\r\n\r\n    private _length2D(vector: Vector3) {\r\n        return Math.sqrt(vector.x * vector.x + vector.z * vector.z);\r\n    }\r\n\r\n    private _distanceClamp(currentToTarget: Vector3, moveToDefault: boolean = false) {\r\n        let minDistance = this.minimumDistance;\r\n        let maxDistance = this.maximumDistance;\r\n        const defaultDistance = this.defaultDistance;\r\n\r\n        const direction = this._tmpVectors[0];\r\n        direction.copyFrom(currentToTarget);\r\n        let currentDistance = direction.length();\r\n        direction.normalizeFromLength(currentDistance);\r\n\r\n        if (this.ignoreCameraPitchAndRoll) {\r\n            // If we don't account for pitch offset, the casted object will float up/down as the reference\r\n            // gets closer to it because we will still be casting in the direction of the pitched offset.\r\n            // To fix this, only modify the XZ position of the object.\r\n            minDistance = this._length2D(direction) * minDistance;\r\n            maxDistance = this._length2D(direction) * maxDistance;\r\n\r\n            const currentDistance2D = this._length2D(currentToTarget);\r\n            direction.scaleInPlace(currentDistance / currentDistance2D);\r\n            currentDistance = currentDistance2D;\r\n        }\r\n\r\n        let clampedDistance = currentDistance;\r\n\r\n        if (moveToDefault) {\r\n            clampedDistance = defaultDistance;\r\n        } else {\r\n            clampedDistance = Scalar.Clamp(currentDistance, minDistance, maxDistance);\r\n        }\r\n\r\n        currentToTarget.copyFrom(direction).scaleInPlace(clampedDistance);\r\n\r\n        return currentDistance !== clampedDistance;\r\n    }\r\n\r\n    private _applyVerticalClamp(currentToTarget: Vector3) {\r\n        if (this.verticalMaxDistance !== 0) {\r\n            currentToTarget.y = Scalar.Clamp(currentToTarget.y, -this.verticalMaxDistance, this.verticalMaxDistance);\r\n        }\r\n    }\r\n\r\n    private _toOrientationQuatToRef(vector: Vector3, quaternion: Quaternion) {\r\n        Quaternion.RotationYawPitchRollToRef(Math.atan2(vector.x, vector.z), Math.atan2(vector.y, Math.sqrt(vector.z * vector.z + vector.x * vector.x)), 0, quaternion);\r\n    }\r\n\r\n    private _applyPitchOffset(invertView: Matrix) {\r\n        const forward = this._tmpVectors[0];\r\n        const right = this._tmpVectors[1];\r\n        forward.copyFromFloats(0, 0, this._scene.useRightHandedSystem ? -1 : 1);\r\n        right.copyFromFloats(1, 0, 0);\r\n        Vector3.TransformNormalToRef(forward, invertView, forward);\r\n        forward.y = 0;\r\n        forward.normalize();\r\n        Vector3.TransformNormalToRef(right, invertView, right);\r\n\r\n        Quaternion.RotationAxisToRef(right, (this.pitchOffset * Math.PI) / 180, this._tmpQuaternion);\r\n        forward.rotateByQuaternionToRef(this._tmpQuaternion, forward);\r\n        this._toOrientationQuatToRef(forward, this._tmpQuaternion);\r\n        this._tmpQuaternion.toRotationMatrix(this._tmpMatrix);\r\n\r\n        // Since we already extracted position from the invert view matrix, we can\r\n        // disregard the position part of the matrix in the copy\r\n        invertView.copyFrom(this._tmpMatrix);\r\n    }\r\n\r\n    private _angularClamp(invertView: Matrix, currentToTarget: Vector3): boolean {\r\n        const forward = this._tmpVectors[5];\r\n        forward.copyFromFloats(0, 0, this._scene.useRightHandedSystem ? -1 : 1);\r\n        const right = this._tmpVectors[6];\r\n        right.copyFromFloats(1, 0, 0);\r\n\r\n        // forward and right are related to camera frame of reference\r\n        Vector3.TransformNormalToRef(forward, invertView, forward);\r\n        Vector3.TransformNormalToRef(right, invertView, right);\r\n\r\n        // Up is global Z\r\n        const up = Vector3.UpReadOnly;\r\n\r\n        const dist = currentToTarget.length();\r\n\r\n        if (dist < Epsilon) {\r\n            return false;\r\n        }\r\n\r\n        let angularClamped = false;\r\n        const rotationQuat = this._tmpQuaternion;\r\n\r\n        // X-axis leashing\r\n        if (this.ignoreCameraPitchAndRoll) {\r\n            const angle = Vector3.GetAngleBetweenVectorsOnPlane(currentToTarget, forward, right);\r\n            Quaternion.RotationAxisToRef(right, angle, rotationQuat);\r\n            currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\r\n        } else {\r\n            const angle = -Vector3.GetAngleBetweenVectorsOnPlane(currentToTarget, forward, right);\r\n            const minMaxAngle = ((this.maxViewVerticalDegrees * Math.PI) / 180) * 0.5;\r\n            if (angle < -minMaxAngle) {\r\n                Quaternion.RotationAxisToRef(right, -angle - minMaxAngle, rotationQuat);\r\n                currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\r\n                angularClamped = true;\r\n            } else if (angle > minMaxAngle) {\r\n                Quaternion.RotationAxisToRef(right, -angle + minMaxAngle, rotationQuat);\r\n                currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\r\n                angularClamped = true;\r\n            }\r\n        }\r\n\r\n        // Y-axis leashing\r\n        const angle = this._angleBetweenVectorAndPlane(currentToTarget, right) * (this._scene.useRightHandedSystem ? -1 : 1);\r\n        const minMaxAngle = ((this.maxViewHorizontalDegrees * Math.PI) / 180) * 0.5;\r\n        if (angle < -minMaxAngle) {\r\n            Quaternion.RotationAxisToRef(up, -angle - minMaxAngle, rotationQuat);\r\n            currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\r\n            angularClamped = true;\r\n        } else if (angle > minMaxAngle) {\r\n            Quaternion.RotationAxisToRef(up, -angle + minMaxAngle, rotationQuat);\r\n            currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\r\n            angularClamped = true;\r\n        }\r\n\r\n        return angularClamped;\r\n    }\r\n\r\n    private _orientationClamp(currentToTarget: Vector3, rotationQuaternion: Quaternion) {\r\n        // Construct a rotation quat from up vector and target vector\r\n        const toFollowed = this._tmpVectors[0];\r\n        toFollowed.copyFrom(currentToTarget).scaleInPlace(-1).normalize();\r\n\r\n        const up = this._tmpVectors[1];\r\n        const right = this._tmpVectors[2];\r\n        // We use global up vector to orient the following node (global +Y)\r\n        up.copyFromFloats(0, 1, 0);\r\n\r\n        // Gram-Schmidt to create an orthonormal frame\r\n        Vector3.CrossToRef(toFollowed, up, right);\r\n        const length = right.length();\r\n\r\n        if (length < Epsilon) {\r\n            return;\r\n        }\r\n\r\n        right.normalizeFromLength(length);\r\n\r\n        Vector3.CrossToRef(right, toFollowed, up);\r\n        if (this.attachedNode?.getScene().useRightHandedSystem) {\r\n            Quaternion.FromLookDirectionRHToRef(toFollowed, up, rotationQuaternion);\r\n        } else {\r\n            Quaternion.FromLookDirectionLHToRef(toFollowed, up, rotationQuaternion);\r\n        }\r\n    }\r\n\r\n    private _passedOrientationDeadzone(currentToTarget: Vector3, forward: Vector3) {\r\n        const leashToFollow = this._tmpVectors[5];\r\n        leashToFollow.copyFrom(currentToTarget);\r\n        leashToFollow.normalize();\r\n\r\n        const angle = Math.abs(Vector3.GetAngleBetweenVectorsOnPlane(forward, leashToFollow, Vector3.UpReadOnly));\r\n        return (angle * 180) / Math.PI > this.orientToCameraDeadzoneDegrees;\r\n    }\r\n\r\n    private _updateLeashing(camera: Camera) {\r\n        if (this.attachedNode && this._enabled) {\r\n            const oldParent = this.attachedNode.parent;\r\n            this.attachedNode.setParent(null);\r\n\r\n            const worldMatrix = this.attachedNode.getWorldMatrix();\r\n            const currentToTarget = this._workingPosition;\r\n            const rotationQuaternion = this._workingQuaternion;\r\n            const pivot = this.attachedNode.getPivotPoint();\r\n            const invertView = this._tmpInvertView;\r\n            invertView.copyFrom(camera.getViewMatrix());\r\n            invertView.invert();\r\n\r\n            Vector3.TransformCoordinatesToRef(pivot, worldMatrix, currentToTarget);\r\n            const position = this._tmpPosition;\r\n            position.copyFromFloats(0, 0, 0);\r\n            Vector3.TransformCoordinatesToRef(position, worldMatrix, position);\r\n            position.scaleInPlace(-1).subtractInPlace(pivot);\r\n            currentToTarget.subtractInPlace(camera.globalPosition);\r\n\r\n            if (this.ignoreCameraPitchAndRoll) {\r\n                this._applyPitchOffset(invertView);\r\n            }\r\n\r\n            let angularClamped = false;\r\n            const forward = this._tmpForward;\r\n            forward.copyFromFloats(0, 0, this._scene.useRightHandedSystem ? -1 : 1);\r\n            Vector3.TransformNormalToRef(forward, invertView, forward);\r\n\r\n            const nodeForward = this._tmpNodeForward;\r\n            nodeForward.copyFromFloats(0, 0, this._scene.useRightHandedSystem ? -1 : 1);\r\n            Vector3.TransformNormalToRef(nodeForward, worldMatrix, nodeForward);\r\n\r\n            if (this._recenterNextUpdate) {\r\n                currentToTarget.copyFrom(forward).scaleInPlace(this.defaultDistance);\r\n            } else {\r\n                if (this.ignoreAngleClamp) {\r\n                    const currentDistance = currentToTarget.length();\r\n                    currentToTarget.copyFrom(forward).scaleInPlace(currentDistance);\r\n                } else {\r\n                    angularClamped = this._angularClamp(invertView, currentToTarget);\r\n                }\r\n            }\r\n\r\n            let distanceClamped = false;\r\n            if (!this.ignoreDistanceClamp) {\r\n                distanceClamped = this._distanceClamp(currentToTarget, angularClamped);\r\n                this._applyVerticalClamp(currentToTarget);\r\n            }\r\n\r\n            if (this.useFixedVerticalOffset) {\r\n                currentToTarget.y = position.y - camera.globalPosition.y + this.fixedVerticalOffset;\r\n            }\r\n\r\n            if (angularClamped || distanceClamped || this._passedOrientationDeadzone(currentToTarget, nodeForward) || this._recenterNextUpdate) {\r\n                this._orientationClamp(currentToTarget, rotationQuaternion);\r\n            }\r\n\r\n            this._workingPosition.subtractInPlace(pivot);\r\n            this._recenterNextUpdate = false;\r\n\r\n            this.attachedNode.setParent(oldParent);\r\n        }\r\n    }\r\n\r\n    private _updateTransformToGoal(elapsed: number) {\r\n        if (!this.attachedNode || !this.followedCamera || !this._enabled) {\r\n            return;\r\n        }\r\n\r\n        if (!this.attachedNode.rotationQuaternion) {\r\n            this.attachedNode.rotationQuaternion = Quaternion.Identity();\r\n        }\r\n\r\n        const oldParent = this.attachedNode.parent;\r\n        this.attachedNode.setParent(null);\r\n\r\n        if (!this.interpolatePose) {\r\n            this.attachedNode.position.copyFrom(this.followedCamera.globalPosition).addInPlace(this._workingPosition);\r\n            this.attachedNode.rotationQuaternion.copyFrom(this._workingQuaternion);\r\n            return;\r\n        }\r\n\r\n        // position\r\n        const currentDirection = new Vector3();\r\n        currentDirection.copyFrom(this.attachedNode.position).subtractInPlace(this.followedCamera.globalPosition);\r\n        Vector3.SmoothToRef(currentDirection, this._workingPosition, elapsed, this.lerpTime, currentDirection);\r\n        currentDirection.addInPlace(this.followedCamera.globalPosition);\r\n        this.attachedNode.position.copyFrom(currentDirection);\r\n\r\n        // rotation\r\n        const currentRotation = new Quaternion();\r\n        currentRotation.copyFrom(this.attachedNode.rotationQuaternion);\r\n        Quaternion.SmoothToRef(currentRotation, this._workingQuaternion, elapsed, this.lerpTime, this.attachedNode.rotationQuaternion);\r\n\r\n        this.attachedNode.setParent(oldParent);\r\n    }\r\n\r\n    private _addObservables() {\r\n        this._lastTick = Date.now();\r\n        this._onBeforeRender = this._scene.onBeforeRenderObservable.add(() => {\r\n            if (!this.followedCamera) {\r\n                return;\r\n            }\r\n\r\n            const tick = Date.now();\r\n            this._updateLeashing(this.followedCamera);\r\n            this._updateTransformToGoal(tick - this._lastTick);\r\n            this._lastTick = tick;\r\n        });\r\n    }\r\n\r\n    private _removeObservables() {\r\n        if (this._onBeforeRender) {\r\n            this._scene.onBeforeRenderObservable.remove(this._onBeforeRender);\r\n        }\r\n    }\r\n}\r\n", "import type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { WebXRFeatureName } from \"../../XR/webXRFeaturesManager\";\r\nimport type { WebXRFeaturesManager } from \"../../XR/webXRFeaturesManager\";\r\nimport type { WebXREyeTracking } from \"../../XR/features/WebXREyeTracking\";\r\nimport type { WebXRHandTracking } from \"../../XR/features/WebXRHandTracking\";\r\nimport { WebXRHandJoint } from \"../../XR/features/WebXRHandTracking\";\r\nimport type { WebXRExperienceHelper } from \"../../XR/webXRExperienceHelper\";\r\nimport type { Behavior } from \"../behavior\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Quaternion, TmpVectors, Vector3 } from \"../../Maths/math.vector\";\r\nimport type { Ray } from \"../../Culling/ray\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n/**\r\n * Zones around the hand\r\n */\r\nexport enum HandConstraintZone {\r\n    /**\r\n     * Above finger tips\r\n     */\r\n    ABOVE_FINGER_TIPS,\r\n    /**\r\n     * Next to the thumb\r\n     */\r\n    RADIAL_SIDE,\r\n    /**\r\n     * Next to the pinky finger\r\n     */\r\n    ULNAR_SIDE,\r\n    /**\r\n     * Below the wrist\r\n     */\r\n    BELOW_WRIST,\r\n}\r\n\r\n/**\r\n * Orientations for the hand zones and for the attached node\r\n */\r\nexport enum HandConstraintOrientation {\r\n    /**\r\n     * Orientation is towards the camera\r\n     */\r\n    LOOK_AT_CAMERA,\r\n    /**\r\n     * Orientation is determined by the rotation of the palm\r\n     */\r\n    HAND_ROTATION,\r\n}\r\n\r\n/**\r\n * Orientations for the hand zones and for the attached node\r\n */\r\nexport enum HandConstraintVisibility {\r\n    /**\r\n     * Constraint is always visible\r\n     */\r\n    ALWAYS_VISIBLE,\r\n    /**\r\n     * Constraint is only visible when the palm is up\r\n     */\r\n    PALM_UP,\r\n    /**\r\n     * Constraint is only visible when the user is looking at the constraint.\r\n     * Uses XR Eye Tracking if enabled/available, otherwise uses camera direction\r\n     */\r\n    GAZE_FOCUS,\r\n    /**\r\n     * Constraint is only visible when the palm is up and the user is looking at it\r\n     */\r\n    PALM_AND_GAZE,\r\n}\r\n\r\ntype HandPoseInfo = {\r\n    position: Vector3;\r\n    quaternion: Quaternion;\r\n    id: string;\r\n};\r\n\r\n/**\r\n * Hand constraint behavior that makes the attached `TransformNode` follow hands in XR experiences.\r\n * @since 5.0.0\r\n */\r\nexport class HandConstraintBehavior implements Behavior<TransformNode> {\r\n    private _scene: Scene;\r\n    private _node: TransformNode;\r\n    private _eyeTracking: Nullable<WebXREyeTracking>;\r\n    private _handTracking: Nullable<WebXRHandTracking>;\r\n    private _sceneRenderObserver: Nullable<Observer<Scene>> = null;\r\n    private _zoneAxis: { [id: number]: Vector3 } = {};\r\n\r\n    /**\r\n     * Sets the HandConstraintVisibility level for the hand constraint\r\n     */\r\n    public handConstraintVisibility: HandConstraintVisibility = HandConstraintVisibility.PALM_AND_GAZE;\r\n\r\n    /**\r\n     * A number from 0.0 to 1.0, marking how restricted the direction the palm faces is for the attached node to be enabled.\r\n     * A 1 means the palm must be directly facing the user before the node is enabled, a 0 means it is always enabled.\r\n     * Used with HandConstraintVisibility.PALM_UP\r\n     */\r\n    public palmUpStrictness: number = 0.95;\r\n\r\n    /**\r\n     * The radius in meters around the center of the hand that the user must gaze inside for the attached node to be enabled and appear.\r\n     * Used with HandConstraintVisibility.GAZE_FOCUS\r\n     */\r\n    public gazeProximityRadius: number = 0.15;\r\n\r\n    /**\r\n     * Offset distance from the hand in meters\r\n     */\r\n    public targetOffset: number = 0.1;\r\n\r\n    /**\r\n     * Where to place the node regarding the center of the hand.\r\n     */\r\n    public targetZone: HandConstraintZone = HandConstraintZone.ULNAR_SIDE;\r\n\r\n    /**\r\n     * Orientation mode of the 4 zones around the hand\r\n     */\r\n    public zoneOrientationMode: HandConstraintOrientation = HandConstraintOrientation.HAND_ROTATION;\r\n    /**\r\n     * Orientation mode of the node attached to this behavior\r\n     */\r\n    public nodeOrientationMode: HandConstraintOrientation = HandConstraintOrientation.HAND_ROTATION;\r\n\r\n    /**\r\n     * Set the hand this behavior should follow. If set to \"none\", it will follow any visible hand (prioritising the left one).\r\n     */\r\n    public handedness: XRHandedness = \"none\";\r\n\r\n    /**\r\n     * Rate of interpolation of position and rotation of the attached node.\r\n     * Higher values will give a slower interpolation.\r\n     */\r\n    public lerpTime = 100;\r\n\r\n    /**\r\n     * Builds a hand constraint behavior\r\n     */\r\n    constructor() {\r\n        // For a right hand\r\n        this._zoneAxis[HandConstraintZone.ABOVE_FINGER_TIPS] = new Vector3(0, 1, 0);\r\n        this._zoneAxis[HandConstraintZone.RADIAL_SIDE] = new Vector3(-1, 0, 0);\r\n        this._zoneAxis[HandConstraintZone.ULNAR_SIDE] = new Vector3(1, 0, 0);\r\n        this._zoneAxis[HandConstraintZone.BELOW_WRIST] = new Vector3(0, -1, 0);\r\n    }\r\n\r\n    /** gets or sets behavior's name */\r\n    public get name() {\r\n        return \"HandConstraint\";\r\n    }\r\n\r\n    /** Enable the behavior */\r\n    public enable() {\r\n        this._node.setEnabled(true);\r\n    }\r\n\r\n    /** Disable the behavior */\r\n    public disable() {\r\n        this._node.setEnabled(false);\r\n    }\r\n\r\n    private _getHandPose(): Nullable<HandPoseInfo> {\r\n        if (!this._handTracking) {\r\n            return null;\r\n        }\r\n\r\n        // Retrieve any available hand, starting by the left\r\n        let hand;\r\n        if (this.handedness === \"none\") {\r\n            hand = this._handTracking.getHandByHandedness(\"left\") || this._handTracking.getHandByHandedness(\"right\");\r\n        } else {\r\n            hand = this._handTracking.getHandByHandedness(this.handedness);\r\n        }\r\n\r\n        if (hand) {\r\n            const pinkyMetacarpal = hand.getJointMesh(WebXRHandJoint.PINKY_FINGER_METACARPAL);\r\n            const middleMetacarpal = hand.getJointMesh(WebXRHandJoint.MIDDLE_FINGER_METACARPAL);\r\n            const wrist = hand.getJointMesh(WebXRHandJoint.WRIST);\r\n\r\n            if (wrist && middleMetacarpal && pinkyMetacarpal) {\r\n                const handPose: HandPoseInfo = { position: middleMetacarpal.absolutePosition, quaternion: new Quaternion(), id: hand.xrController.uniqueId };\r\n\r\n                // palm forward\r\n                const up = TmpVectors.Vector3[0];\r\n                const forward = TmpVectors.Vector3[1];\r\n                const left = TmpVectors.Vector3[2];\r\n                up.copyFrom(middleMetacarpal.absolutePosition).subtractInPlace(wrist.absolutePosition).normalize();\r\n                forward.copyFrom(pinkyMetacarpal.absolutePosition).subtractInPlace(middleMetacarpal.absolutePosition).normalize();\r\n\r\n                // Create vectors for a rotation quaternion, where forward points out from the palm\r\n                Vector3.CrossToRef(up, forward, forward);\r\n                Vector3.CrossToRef(forward, up, left);\r\n\r\n                Quaternion.FromLookDirectionLHToRef(forward, up, handPose.quaternion);\r\n\r\n                return handPose;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Initializes the hand constraint behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * Attaches the hand constraint to a `TransformNode`\r\n     * @param node defines the node to attach the behavior to\r\n     */\r\n    public attach(node: TransformNode): void {\r\n        this._node = node;\r\n        this._scene = node.getScene();\r\n\r\n        if (!this._node.rotationQuaternion) {\r\n            this._node.rotationQuaternion = Quaternion.RotationYawPitchRoll(this._node.rotation.y, this._node.rotation.x, this._node.rotation.z);\r\n        }\r\n\r\n        let lastTick = Date.now();\r\n        this._sceneRenderObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n            const pose = this._getHandPose();\r\n\r\n            this._node.reservedDataStore = this._node.reservedDataStore || {};\r\n            this._node.reservedDataStore.nearInteraction = this._node.reservedDataStore.nearInteraction || {};\r\n            this._node.reservedDataStore.nearInteraction.excludedControllerId = null;\r\n\r\n            if (pose) {\r\n                const zoneOffset = TmpVectors.Vector3[0];\r\n                const camera = this._scene.activeCamera;\r\n\r\n                zoneOffset.copyFrom(this._zoneAxis[this.targetZone]);\r\n\r\n                const cameraLookAtQuaternion = TmpVectors.Quaternion[0];\r\n                if (camera && (this.zoneOrientationMode === HandConstraintOrientation.LOOK_AT_CAMERA || this.nodeOrientationMode === HandConstraintOrientation.LOOK_AT_CAMERA)) {\r\n                    const toCamera = TmpVectors.Vector3[1];\r\n                    toCamera.copyFrom(camera.position).subtractInPlace(pose.position).normalize();\r\n                    if (this._scene.useRightHandedSystem) {\r\n                        Quaternion.FromLookDirectionRHToRef(toCamera, Vector3.UpReadOnly, cameraLookAtQuaternion);\r\n                    } else {\r\n                        Quaternion.FromLookDirectionLHToRef(toCamera, Vector3.UpReadOnly, cameraLookAtQuaternion);\r\n                    }\r\n                }\r\n\r\n                if (this.zoneOrientationMode === HandConstraintOrientation.HAND_ROTATION) {\r\n                    pose.quaternion.toRotationMatrix(TmpVectors.Matrix[0]);\r\n                } else {\r\n                    cameraLookAtQuaternion.toRotationMatrix(TmpVectors.Matrix[0]);\r\n                }\r\n\r\n                Vector3.TransformNormalToRef(zoneOffset, TmpVectors.Matrix[0], zoneOffset);\r\n                zoneOffset.scaleInPlace(this.targetOffset);\r\n\r\n                const targetPosition = TmpVectors.Vector3[2];\r\n                const targetRotation = TmpVectors.Quaternion[1];\r\n                targetPosition.copyFrom(pose.position).addInPlace(zoneOffset);\r\n\r\n                if (this.nodeOrientationMode === HandConstraintOrientation.HAND_ROTATION) {\r\n                    targetRotation.copyFrom(pose.quaternion);\r\n                } else {\r\n                    targetRotation.copyFrom(cameraLookAtQuaternion);\r\n                }\r\n\r\n                const elapsed = Date.now() - lastTick;\r\n\r\n                Vector3.SmoothToRef(this._node.position, targetPosition, elapsed, this.lerpTime, this._node.position);\r\n                Quaternion.SmoothToRef(this._node.rotationQuaternion!, targetRotation, elapsed, this.lerpTime, this._node.rotationQuaternion!);\r\n\r\n                this._node.reservedDataStore.nearInteraction.excludedControllerId = pose.id;\r\n            }\r\n\r\n            this._setVisibility(pose);\r\n\r\n            lastTick = Date.now();\r\n        });\r\n    }\r\n\r\n    private _setVisibility(pose: Nullable<HandPoseInfo>) {\r\n        let palmVisible = true;\r\n        let gazeVisible = true;\r\n        const camera = this._scene.activeCamera;\r\n\r\n        if (camera) {\r\n            const cameraForward = camera.getForwardRay();\r\n\r\n            if (this.handConstraintVisibility === HandConstraintVisibility.GAZE_FOCUS || this.handConstraintVisibility === HandConstraintVisibility.PALM_AND_GAZE) {\r\n                gazeVisible = false;\r\n                let gaze: Ray | undefined;\r\n                if (this._eyeTracking) {\r\n                    gaze = this._eyeTracking.getEyeGaze()!;\r\n                }\r\n\r\n                gaze = gaze || cameraForward;\r\n\r\n                const gazeToBehavior = TmpVectors.Vector3[0];\r\n                if (pose) {\r\n                    pose.position.subtractToRef(gaze.origin, gazeToBehavior);\r\n                } else {\r\n                    this._node.getAbsolutePosition().subtractToRef(gaze.origin, gazeToBehavior);\r\n                }\r\n\r\n                const projectedDistance = Vector3.Dot(gazeToBehavior, gaze.direction);\r\n                const projectedSquared = projectedDistance * projectedDistance;\r\n\r\n                if (projectedDistance > 0) {\r\n                    const radiusSquared = gazeToBehavior.lengthSquared() - projectedSquared;\r\n                    if (radiusSquared < this.gazeProximityRadius * this.gazeProximityRadius) {\r\n                        gazeVisible = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.handConstraintVisibility === HandConstraintVisibility.PALM_UP || this.handConstraintVisibility === HandConstraintVisibility.PALM_AND_GAZE) {\r\n                palmVisible = false;\r\n\r\n                if (pose) {\r\n                    const palmDirection = TmpVectors.Vector3[0];\r\n                    Vector3.LeftHandedForwardReadOnly.rotateByQuaternionToRef(pose.quaternion, palmDirection);\r\n\r\n                    if (Vector3.Dot(palmDirection, cameraForward.direction) > this.palmUpStrictness * 2 - 1) {\r\n                        palmVisible = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._node.setEnabled(palmVisible && gazeVisible);\r\n    }\r\n\r\n    /**\r\n     * Detaches the behavior from the `TransformNode`\r\n     */\r\n    public detach(): void {\r\n        this._scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);\r\n    }\r\n\r\n    /**\r\n     * Links the behavior to the XR experience in which to retrieve hand transform information.\r\n     * @param xr xr experience\r\n     */\r\n    public linkToXRExperience(xr: WebXRExperienceHelper | WebXRFeaturesManager) {\r\n        const featuresManager: WebXRFeaturesManager = (xr as WebXRExperienceHelper).featuresManager ? (xr as WebXRExperienceHelper).featuresManager : (xr as WebXRFeaturesManager);\r\n        if (!featuresManager) {\r\n            Tools.Error(\"XR features manager must be available or provided directly for the Hand Menu to work\");\r\n        } else {\r\n            try {\r\n                this._eyeTracking = featuresManager.getEnabledFeature(WebXRFeatureName.EYE_TRACKING) as WebXREyeTracking;\r\n            } catch {}\r\n\r\n            try {\r\n                this._handTracking = featuresManager.getEnabledFeature(WebXRFeatureName.HAND_TRACKING) as WebXRHandTracking;\r\n            } catch {\r\n                Tools.Error(\"Hand tracking must be enabled for the Hand Menu to work\");\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import type { Observer } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene, IDisposable } from \"../scene\";\r\nimport { Quaternion, Vector3, Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport type { TargetCamera } from \"../Cameras/targetCamera\";\r\nimport type { Node } from \"../node\";\r\nimport type { Bone } from \"../Bones/bone\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport type { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../Events/pointerEvents\";\r\nimport type { LinesMesh } from \"../Meshes/linesMesh\";\r\nimport type { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { ShadowLight } from \"../Lights/shadowLight\";\r\nimport { Light } from \"../Lights/light\";\r\n\r\n/**\r\n * Cache built by each axis. Used for managing state between all elements of gizmo for enhanced UI\r\n */\r\nexport interface GizmoAxisCache {\r\n    /** Mesh used to render the Gizmo */\r\n    gizmoMeshes: Mesh[];\r\n    /** Mesh used to detect user interaction with Gizmo */\r\n    colliderMeshes: Mesh[];\r\n    /** Material used to indicate color of gizmo mesh */\r\n    material: StandardMaterial;\r\n    /** Material used to indicate hover state of the Gizmo */\r\n    hoverMaterial: StandardMaterial;\r\n    /** Material used to indicate disabled state of the Gizmo */\r\n    disableMaterial: StandardMaterial;\r\n    /** Used to indicate Active state of the Gizmo */\r\n    active: boolean;\r\n    /** DragBehavior */\r\n    dragBehavior: PointerDragBehavior;\r\n}\r\n\r\n/**\r\n * Anchor options where the Gizmo can be positioned in relation to its anchored node\r\n */\r\nexport enum GizmoAnchorPoint {\r\n    /** The origin of the attached node */\r\n    Origin,\r\n    /** The pivot point of the attached node*/\r\n    Pivot,\r\n}\r\n\r\n/**\r\n * Coordinates mode: Local or World. Defines how axis is aligned: either on world axis or transform local axis\r\n */\r\nexport enum GizmoCoordinatesMode {\r\n    World,\r\n    Local,\r\n}\r\n\r\n/**\r\n * Interface for basic gizmo\r\n */\r\nexport interface IGizmo extends IDisposable {\r\n    /** True when the mouse pointer is hovered a gizmo mesh */\r\n    readonly isHovered: boolean;\r\n    /** The root mesh of the gizmo */\r\n    _rootMesh: Mesh;\r\n    /** Ratio for the scale of the gizmo */\r\n    scaleRatio: number;\r\n    /**\r\n     * Mesh that the gizmo will be attached to. (eg. on a drag gizmo the mesh that will be dragged)\r\n     * * When set, interactions will be enabled\r\n     */\r\n    attachedMesh: Nullable<AbstractMesh>;\r\n    /**\r\n     * Node that the gizmo will be attached to. (eg. on a drag gizmo the mesh, bone or NodeTransform that will be dragged)\r\n     * * When set, interactions will be enabled\r\n     */\r\n    attachedNode: Nullable<Node>;\r\n    /**\r\n     * If set the gizmo's rotation will be updated to match the attached mesh each frame (Default: true)\r\n     */\r\n    updateGizmoRotationToMatchAttachedMesh: boolean;\r\n    /** The utility layer the gizmo will be added to */\r\n    gizmoLayer: UtilityLayerRenderer;\r\n    /**\r\n     * If set the gizmo's position will be updated to match the attached mesh each frame (Default: true)\r\n     */\r\n    updateGizmoPositionToMatchAttachedMesh: boolean;\r\n    /**\r\n     * Defines where the gizmo will be positioned if `updateGizmoPositionToMatchAttachedMesh` is enabled.\r\n     * (Default: GizmoAnchorPoint.Origin)\r\n     */\r\n    anchorPoint: GizmoAnchorPoint;\r\n\r\n    /**\r\n     * Set the coordinate mode to use. By default it's local.\r\n     */\r\n    coordinatesMode: GizmoCoordinatesMode;\r\n\r\n    /**\r\n     * When set, the gizmo will always appear the same size no matter where the camera is (default: true)\r\n     */\r\n    updateScale: boolean;\r\n    /**\r\n     * posture that the gizmo will be display\r\n     * When set null, default value will be used (Quaternion(0, 0, 0, 1))\r\n     */\r\n    customRotationQuaternion: Nullable<Quaternion>;\r\n    /**\r\n     * Disposes and replaces the current meshes in the gizmo with the specified mesh\r\n     * @param mesh The mesh to replace the default mesh of the gizmo\r\n     */\r\n    setCustomMesh(mesh: Mesh): void;\r\n\r\n    /**\r\n     * Additional transform applied to the gizmo.\r\n     * It's useful when the gizmo is attached to a bone: if the bone is part of a skeleton attached to a mesh, you should define the mesh as additionalTransformNode if you want the gizmo to be displayed at the bone's correct location.\r\n     * Otherwise, as the gizmo is relative to the skeleton root, the mesh transformation will not be taken into account.\r\n     */\r\n    additionalTransformNode?: TransformNode | undefined;\r\n}\r\n/**\r\n * Renders gizmos on top of an existing scene which provide controls for position, rotation, etc.\r\n */\r\nexport class Gizmo implements IGizmo {\r\n    /**\r\n     * The root mesh of the gizmo\r\n     */\r\n    public _rootMesh: Mesh;\r\n    protected _attachedMesh: Nullable<AbstractMesh> = null;\r\n    protected _attachedNode: Nullable<Node> = null;\r\n    protected _customRotationQuaternion: Nullable<Quaternion> = null;\r\n    protected _additionalTransformNode?: TransformNode;\r\n    /**\r\n     * Ratio for the scale of the gizmo (Default: 1)\r\n     */\r\n    protected _scaleRatio = 1;\r\n\r\n    /**\r\n     * boolean updated by pointermove when a gizmo mesh is hovered\r\n     */\r\n    protected _isHovered = false;\r\n\r\n    /**\r\n     * When enabled, any gizmo operation will perserve scaling sign. Default is off.\r\n     * Only valid for TransformNode derived classes (Mesh, AbstractMesh, ...)\r\n     */\r\n    public static PreserveScaling = false;\r\n\r\n    /**\r\n     * There are 2 ways to preserve scaling: using mesh scaling or absolute scaling. Depending of hierarchy, non uniform scaling and LH or RH coordinates. One is preferable than the other.\r\n     * If the scaling to be preserved is the local scaling, then set this value to false.\r\n     * Default is true which means scaling to be preserved is absolute one (with hierarchy applied)\r\n     */\r\n    public static UseAbsoluteScaling = true;\r\n\r\n    /**\r\n     * Ratio for the scale of the gizmo (Default: 1)\r\n     */\r\n    public set scaleRatio(value: number) {\r\n        this._scaleRatio = value;\r\n    }\r\n\r\n    public get scaleRatio() {\r\n        return this._scaleRatio;\r\n    }\r\n\r\n    /**\r\n     * True when the mouse pointer is hovered a gizmo mesh\r\n     */\r\n    public get isHovered() {\r\n        return this._isHovered;\r\n    }\r\n\r\n    /**\r\n     * If a custom mesh has been set (Default: false)\r\n     */\r\n    protected _customMeshSet = false;\r\n    /**\r\n     * Mesh that the gizmo will be attached to. (eg. on a drag gizmo the mesh that will be dragged)\r\n     * * When set, interactions will be enabled\r\n     */\r\n    public get attachedMesh() {\r\n        return this._attachedMesh;\r\n    }\r\n    public set attachedMesh(value) {\r\n        this._attachedMesh = value;\r\n        if (value) {\r\n            this._attachedNode = value;\r\n        }\r\n        this._rootMesh.setEnabled(value ? true : false);\r\n        this._attachedNodeChanged(value);\r\n    }\r\n    /**\r\n     * Node that the gizmo will be attached to. (eg. on a drag gizmo the mesh, bone or NodeTransform that will be dragged)\r\n     * * When set, interactions will be enabled\r\n     */\r\n    public get attachedNode() {\r\n        return this._attachedNode;\r\n    }\r\n    public set attachedNode(value) {\r\n        this._attachedNode = value;\r\n        this._attachedMesh = null;\r\n        this._rootMesh.setEnabled(value ? true : false);\r\n        this._attachedNodeChanged(value);\r\n    }\r\n\r\n    /**\r\n     * Disposes and replaces the current meshes in the gizmo with the specified mesh\r\n     * @param mesh The mesh to replace the default mesh of the gizmo\r\n     */\r\n    public setCustomMesh(mesh: Mesh) {\r\n        if (mesh.getScene() != this.gizmoLayer.utilityLayerScene) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"When setting a custom mesh on a gizmo, the custom meshes scene must be the same as the gizmos (eg. gizmo.gizmoLayer.utilityLayerScene)\";\r\n        }\r\n        this._rootMesh.getChildMeshes().forEach((c) => {\r\n            c.dispose();\r\n        });\r\n        mesh.parent = this._rootMesh;\r\n        this._customMeshSet = true;\r\n    }\r\n\r\n    /**\r\n     * Additional transform applied to the gizmo.\r\n     * It's useful when the gizmo is attached to a bone: if the bone is part of a skeleton attached to a mesh, you should define the mesh as additionalTransformNode if you want the gizmo to be displayed at the bone's correct location.\r\n     * Otherwise, as the gizmo is relative to the skeleton root, the mesh transformation will not be taken into account.\r\n     */\r\n    public get additionalTransformNode() {\r\n        return this._additionalTransformNode;\r\n    }\r\n\r\n    public set additionalTransformNode(value: TransformNode | undefined) {\r\n        this._additionalTransformNode = value;\r\n    }\r\n\r\n    protected _updateGizmoRotationToMatchAttachedMesh = true;\r\n    protected _updateGizmoPositionToMatchAttachedMesh = true;\r\n    protected _anchorPoint = GizmoAnchorPoint.Origin;\r\n    protected _updateScale = true;\r\n    protected _coordinatesMode = GizmoCoordinatesMode.Local;\r\n\r\n    /**\r\n     * If set the gizmo's rotation will be updated to match the attached mesh each frame (Default: true)\r\n     * NOTE: This is only possible for meshes with uniform scaling, as otherwise it's not possible to decompose the rotation\r\n     */\r\n    public set updateGizmoRotationToMatchAttachedMesh(value: boolean) {\r\n        this._updateGizmoRotationToMatchAttachedMesh = value;\r\n    }\r\n    public get updateGizmoRotationToMatchAttachedMesh() {\r\n        return this._updateGizmoRotationToMatchAttachedMesh;\r\n    }\r\n    /**\r\n     * If set the gizmo's position will be updated to match the attached mesh each frame (Default: true)\r\n     */\r\n    public set updateGizmoPositionToMatchAttachedMesh(value: boolean) {\r\n        this._updateGizmoPositionToMatchAttachedMesh = value;\r\n    }\r\n    public get updateGizmoPositionToMatchAttachedMesh() {\r\n        return this._updateGizmoPositionToMatchAttachedMesh;\r\n    }\r\n\r\n    /**\r\n     * Defines where the gizmo will be positioned if `updateGizmoPositionToMatchAttachedMesh` is enabled.\r\n     * (Default: GizmoAnchorPoint.Origin)\r\n     */\r\n    public set anchorPoint(value: GizmoAnchorPoint) {\r\n        this._anchorPoint = value;\r\n    }\r\n    public get anchorPoint() {\r\n        return this._anchorPoint;\r\n    }\r\n\r\n    /**\r\n     * Set the coordinate system to use. By default it's local.\r\n     * But it's possible for a user to tweak so its local for translation and world for rotation.\r\n     * In that case, setting the coordinate system will change `updateGizmoRotationToMatchAttachedMesh` and `updateGizmoPositionToMatchAttachedMesh`\r\n     */\r\n    public set coordinatesMode(coordinatesMode: GizmoCoordinatesMode) {\r\n        this._coordinatesMode = coordinatesMode;\r\n        const local = coordinatesMode == GizmoCoordinatesMode.Local;\r\n        this.updateGizmoRotationToMatchAttachedMesh = local;\r\n        this.updateGizmoPositionToMatchAttachedMesh = true;\r\n    }\r\n\r\n    public get coordinatesMode() {\r\n        return this._coordinatesMode;\r\n    }\r\n\r\n    /**\r\n     * When set, the gizmo will always appear the same size no matter where the camera is (default: true)\r\n     */\r\n\r\n    public set updateScale(value: boolean) {\r\n        this._updateScale = value;\r\n    }\r\n    public get updateScale() {\r\n        return this._updateScale;\r\n    }\r\n    protected _interactionsEnabled = true;\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _attachedNodeChanged(value: Nullable<Node>) {}\r\n\r\n    protected _beforeRenderObserver: Nullable<Observer<Scene>>;\r\n    private _rightHandtoLeftHandMatrix = Matrix.RotationY(Math.PI);\r\n\r\n    /**\r\n     * Creates a gizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     */\r\n    constructor(\r\n        /** The utility layer the gizmo will be added to */\r\n        public gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer\r\n    ) {\r\n        this._rootMesh = new Mesh(\"gizmoRootNode\", gizmoLayer.utilityLayerScene);\r\n        this._rootMesh.rotationQuaternion = Quaternion.Identity();\r\n\r\n        this._beforeRenderObserver = this.gizmoLayer.utilityLayerScene.onBeforeRenderObservable.add(() => {\r\n            this._update();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * posture that the gizmo will be display\r\n     * When set null, default value will be used (Quaternion(0, 0, 0, 1))\r\n     */\r\n    public get customRotationQuaternion(): Nullable<Quaternion> {\r\n        return this._customRotationQuaternion;\r\n    }\r\n\r\n    public set customRotationQuaternion(customRotationQuaternion: Nullable<Quaternion>) {\r\n        this._customRotationQuaternion = customRotationQuaternion;\r\n    }\r\n\r\n    /**\r\n     * Updates the gizmo to match the attached mesh's position/rotation\r\n     */\r\n    protected _update() {\r\n        if (this.attachedNode) {\r\n            let effectiveNode = this.attachedNode;\r\n            if (this.attachedMesh) {\r\n                effectiveNode = this.attachedMesh || this.attachedNode;\r\n            }\r\n\r\n            // Position\r\n            if (this.updateGizmoPositionToMatchAttachedMesh) {\r\n                if (this.anchorPoint == GizmoAnchorPoint.Pivot && (<TransformNode>effectiveNode).getAbsolutePivotPoint) {\r\n                    const position = (<TransformNode>effectiveNode).getAbsolutePivotPoint();\r\n                    this._rootMesh.position.copyFrom(position);\r\n                } else {\r\n                    const row = effectiveNode.getWorldMatrix().getRow(3);\r\n                    const position = row ? row.toVector3() : new Vector3(0, 0, 0);\r\n                    this._rootMesh.position.copyFrom(position);\r\n                }\r\n            }\r\n\r\n            // Rotation\r\n            if (this.updateGizmoRotationToMatchAttachedMesh) {\r\n                const supportedNode =\r\n                    (<Mesh>effectiveNode)._isMesh ||\r\n                    effectiveNode.getClassName() === \"AbstractMesh\" ||\r\n                    effectiveNode.getClassName() === \"TransformNode\" ||\r\n                    effectiveNode.getClassName() === \"InstancedMesh\";\r\n                const transformNode = supportedNode ? (effectiveNode as TransformNode) : undefined;\r\n                effectiveNode.getWorldMatrix().decompose(undefined, this._rootMesh.rotationQuaternion!, undefined, Gizmo.PreserveScaling ? transformNode : undefined);\r\n                this._rootMesh.rotationQuaternion!.normalize();\r\n            } else {\r\n                if (this._customRotationQuaternion) {\r\n                    this._rootMesh.rotationQuaternion!.copyFrom(this._customRotationQuaternion);\r\n                } else {\r\n                    this._rootMesh.rotationQuaternion!.set(0, 0, 0, 1);\r\n                }\r\n            }\r\n\r\n            // Scale\r\n            if (this.updateScale) {\r\n                const activeCamera = this.gizmoLayer.utilityLayerScene.activeCamera!;\r\n                const cameraPosition = activeCamera.globalPosition;\r\n                this._rootMesh.position.subtractToRef(cameraPosition, TmpVectors.Vector3[0]);\r\n                let scale = this.scaleRatio;\r\n                if (activeCamera.mode == Camera.ORTHOGRAPHIC_CAMERA) {\r\n                    if (activeCamera.orthoTop && activeCamera.orthoBottom) {\r\n                        const orthoHeight = activeCamera.orthoTop - activeCamera.orthoBottom;\r\n                        scale *= orthoHeight;\r\n                    }\r\n                } else {\r\n                    const camForward = activeCamera.getScene().useRightHandedSystem ? Vector3.RightHandedForwardReadOnly : Vector3.LeftHandedForwardReadOnly;\r\n                    const direction = activeCamera.getDirection(camForward);\r\n                    scale *= Vector3.Dot(TmpVectors.Vector3[0], direction);\r\n                }\r\n                this._rootMesh.scaling.setAll(scale);\r\n\r\n                // Account for handedness, similar to Matrix.decompose\r\n                if (effectiveNode._getWorldMatrixDeterminant() < 0 && !Gizmo.PreserveScaling) {\r\n                    this._rootMesh.scaling.y *= -1;\r\n                }\r\n            } else {\r\n                this._rootMesh.scaling.setAll(this.scaleRatio);\r\n            }\r\n        }\r\n\r\n        if (this.additionalTransformNode) {\r\n            this._rootMesh.computeWorldMatrix(true);\r\n            this._rootMesh.getWorldMatrix().multiplyToRef(this.additionalTransformNode.getWorldMatrix(), TmpVectors.Matrix[0]);\r\n            TmpVectors.Matrix[0].decompose(this._rootMesh.scaling, this._rootMesh.rotationQuaternion!, this._rootMesh.position);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * if transform has a pivot and is not using PostMultiplyPivotMatrix, then the worldMatrix contains the pivot matrix (it's not cancelled at the end)\r\n     * so, when extracting the world matrix component, the translation (and other components) is containing the pivot translation.\r\n     * And the pivot is applied each frame. Removing it anyway here makes it applied only in computeWorldMatrix.\r\n     * @param transform local transform that needs to be transform by the pivot inverse matrix\r\n     * @param localMatrix local matrix that needs to be transform by the pivot inverse matrix\r\n     * @param result resulting matrix transformed by pivot inverse if the transform node is using pivot without using post Multiply Pivot Matrix\r\n     */\r\n    protected _handlePivotMatrixInverse(transform: TransformNode, localMatrix: Matrix, result: Matrix): void {\r\n        if (transform.isUsingPivotMatrix() && !transform.isUsingPostMultiplyPivotMatrix()) {\r\n            transform.getPivotMatrix().invertToRef(TmpVectors.Matrix[5]);\r\n            TmpVectors.Matrix[5].multiplyToRef(localMatrix, result);\r\n            return;\r\n        }\r\n        result.copyFrom(localMatrix);\r\n    }\r\n    /**\r\n     * computes the rotation/scaling/position of the transform once the Node world matrix has changed.\r\n     */\r\n    protected _matrixChanged() {\r\n        if (!this._attachedNode) {\r\n            return;\r\n        }\r\n\r\n        if ((<Camera>this._attachedNode)._isCamera) {\r\n            const camera = this._attachedNode as Camera;\r\n            let worldMatrix;\r\n            let worldMatrixUC;\r\n            if (camera.parent) {\r\n                const parentInv = TmpVectors.Matrix[1];\r\n                camera.parent._worldMatrix.invertToRef(parentInv);\r\n                this._attachedNode._worldMatrix.multiplyToRef(parentInv, TmpVectors.Matrix[0]);\r\n                worldMatrix = TmpVectors.Matrix[0];\r\n            } else {\r\n                worldMatrix = this._attachedNode._worldMatrix;\r\n            }\r\n\r\n            if (camera.getScene().useRightHandedSystem) {\r\n                // avoid desync with RH matrix computation. Otherwise, rotation of PI around Y axis happens each frame resulting in axis flipped because worldMatrix is computed as inverse of viewMatrix.\r\n                this._rightHandtoLeftHandMatrix.multiplyToRef(worldMatrix, TmpVectors.Matrix[1]);\r\n                worldMatrixUC = TmpVectors.Matrix[1];\r\n            } else {\r\n                worldMatrixUC = worldMatrix;\r\n            }\r\n\r\n            worldMatrixUC.decompose(TmpVectors.Vector3[1], TmpVectors.Quaternion[0], TmpVectors.Vector3[0]);\r\n\r\n            const inheritsTargetCamera =\r\n                this._attachedNode.getClassName() === \"FreeCamera\" ||\r\n                this._attachedNode.getClassName() === \"FlyCamera\" ||\r\n                this._attachedNode.getClassName() === \"ArcFollowCamera\" ||\r\n                this._attachedNode.getClassName() === \"TargetCamera\" ||\r\n                this._attachedNode.getClassName() === \"TouchCamera\" ||\r\n                this._attachedNode.getClassName() === \"UniversalCamera\";\r\n\r\n            if (inheritsTargetCamera) {\r\n                const targetCamera = this._attachedNode as TargetCamera;\r\n                targetCamera.rotation = TmpVectors.Quaternion[0].toEulerAngles();\r\n\r\n                if (targetCamera.rotationQuaternion) {\r\n                    targetCamera.rotationQuaternion.copyFrom(TmpVectors.Quaternion[0]);\r\n                    targetCamera.rotationQuaternion.normalize();\r\n                }\r\n            }\r\n\r\n            camera.position.copyFrom(TmpVectors.Vector3[0]);\r\n        } else if (\r\n            (<Mesh>this._attachedNode)._isMesh ||\r\n            this._attachedNode.getClassName() === \"AbstractMesh\" ||\r\n            this._attachedNode.getClassName() === \"TransformNode\" ||\r\n            this._attachedNode.getClassName() === \"InstancedMesh\"\r\n        ) {\r\n            const transform = this._attachedNode as TransformNode;\r\n            if (transform.parent) {\r\n                const parentInv = TmpVectors.Matrix[0];\r\n                const localMat = TmpVectors.Matrix[1];\r\n                transform.parent.getWorldMatrix().invertToRef(parentInv);\r\n                this._attachedNode.getWorldMatrix().multiplyToRef(parentInv, localMat);\r\n                const matrixToDecompose = TmpVectors.Matrix[4];\r\n                this._handlePivotMatrixInverse(transform, localMat, matrixToDecompose);\r\n                matrixToDecompose.decompose(\r\n                    TmpVectors.Vector3[0],\r\n                    TmpVectors.Quaternion[0],\r\n                    transform.position,\r\n                    Gizmo.PreserveScaling ? transform : undefined,\r\n                    Gizmo.UseAbsoluteScaling\r\n                );\r\n                TmpVectors.Quaternion[0].normalize();\r\n                if (transform.isUsingPivotMatrix()) {\r\n                    // Calculate the local matrix without the translation.\r\n                    // Copied from TranslateNode.computeWorldMatrix\r\n                    const r = TmpVectors.Quaternion[1];\r\n                    Quaternion.RotationYawPitchRollToRef(transform.rotation.y, transform.rotation.x, transform.rotation.z, r);\r\n\r\n                    const scaleMatrix = TmpVectors.Matrix[2];\r\n                    Matrix.ScalingToRef(transform.scaling.x, transform.scaling.y, transform.scaling.z, scaleMatrix);\r\n\r\n                    const rotationMatrix = TmpVectors.Matrix[2];\r\n                    r.toRotationMatrix(rotationMatrix);\r\n\r\n                    const pivotMatrix = transform.getPivotMatrix();\r\n                    const invPivotMatrix = TmpVectors.Matrix[3];\r\n                    pivotMatrix.invertToRef(invPivotMatrix);\r\n\r\n                    pivotMatrix.multiplyToRef(scaleMatrix, TmpVectors.Matrix[4]);\r\n                    TmpVectors.Matrix[4].multiplyToRef(rotationMatrix, TmpVectors.Matrix[5]);\r\n                    TmpVectors.Matrix[5].multiplyToRef(invPivotMatrix, TmpVectors.Matrix[6]);\r\n\r\n                    TmpVectors.Matrix[6].getTranslationToRef(TmpVectors.Vector3[1]);\r\n\r\n                    transform.position.subtractInPlace(TmpVectors.Vector3[1]);\r\n                }\r\n            } else {\r\n                const matrixToDecompose = TmpVectors.Matrix[4];\r\n                this._handlePivotMatrixInverse(transform, this._attachedNode._worldMatrix, matrixToDecompose);\r\n                matrixToDecompose.decompose(\r\n                    TmpVectors.Vector3[0],\r\n                    TmpVectors.Quaternion[0],\r\n                    transform.position,\r\n                    Gizmo.PreserveScaling ? transform : undefined,\r\n                    Gizmo.UseAbsoluteScaling\r\n                );\r\n            }\r\n            TmpVectors.Vector3[0].scaleInPlace(1.0 / transform.scalingDeterminant);\r\n            transform.scaling.copyFrom(TmpVectors.Vector3[0]);\r\n            if (!transform.billboardMode) {\r\n                if (transform.rotationQuaternion) {\r\n                    transform.rotationQuaternion.copyFrom(TmpVectors.Quaternion[0]);\r\n                    transform.rotationQuaternion.normalize();\r\n                } else {\r\n                    transform.rotation = TmpVectors.Quaternion[0].toEulerAngles();\r\n                }\r\n            }\r\n        } else if (this._attachedNode.getClassName() === \"Bone\") {\r\n            const bone = this._attachedNode as Bone;\r\n            const parent = bone.getParent();\r\n\r\n            if (parent) {\r\n                const invParent = TmpVectors.Matrix[0];\r\n                const boneLocalMatrix = TmpVectors.Matrix[1];\r\n                parent.getFinalMatrix().invertToRef(invParent);\r\n                bone.getFinalMatrix().multiplyToRef(invParent, boneLocalMatrix);\r\n                const lmat = bone.getLocalMatrix();\r\n                lmat.copyFrom(boneLocalMatrix);\r\n            } else {\r\n                const lmat = bone.getLocalMatrix();\r\n                lmat.copyFrom(bone.getFinalMatrix());\r\n            }\r\n            bone.markAsDirty();\r\n        } else {\r\n            const light = this._attachedNode as ShadowLight;\r\n            if (light.getTypeID) {\r\n                const type = light.getTypeID();\r\n                if (type === Light.LIGHTTYPEID_DIRECTIONALLIGHT || type === Light.LIGHTTYPEID_SPOTLIGHT || type === Light.LIGHTTYPEID_POINTLIGHT) {\r\n                    const parent = light.parent;\r\n\r\n                    if (parent) {\r\n                        const invParent = TmpVectors.Matrix[0];\r\n                        const nodeLocalMatrix = TmpVectors.Matrix[1];\r\n                        parent.getWorldMatrix().invertToRef(invParent);\r\n                        light.getWorldMatrix().multiplyToRef(invParent, nodeLocalMatrix);\r\n                        nodeLocalMatrix.decompose(undefined, TmpVectors.Quaternion[0], TmpVectors.Vector3[0]);\r\n                    } else {\r\n                        this._attachedNode._worldMatrix.decompose(undefined, TmpVectors.Quaternion[0], TmpVectors.Vector3[0]);\r\n                    }\r\n                    // setter doesn't copy values. Need a new Vector3\r\n                    light.position = new Vector3(TmpVectors.Vector3[0].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[0].z);\r\n                    if (light.direction) {\r\n                        light.direction = new Vector3(light.direction.x, light.direction.y, light.direction.z);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * refresh gizmo mesh material\r\n     * @param gizmoMeshes\r\n     * @param material material to apply\r\n     */\r\n    protected _setGizmoMeshMaterial(gizmoMeshes: Mesh[], material: StandardMaterial) {\r\n        if (gizmoMeshes) {\r\n            gizmoMeshes.forEach((m: Mesh) => {\r\n                m.material = material;\r\n                if ((<LinesMesh>m).color) {\r\n                    (<LinesMesh>m).color = material.diffuseColor;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribes to pointer up, down, and hover events. Used for responsive gizmos.\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param gizmoAxisCache Gizmo axis definition used for reactive gizmo UI\r\n     * @returns {Observer<PointerInfo>} pointerObserver\r\n     */\r\n    public static GizmoAxisPointerObserver(gizmoLayer: UtilityLayerRenderer, gizmoAxisCache: Map<Mesh, GizmoAxisCache>): Observer<PointerInfo> {\r\n        let dragging = false;\r\n\r\n        const pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (pointerInfo.pickInfo) {\r\n                // On Hover Logic\r\n                if (pointerInfo.type === PointerEventTypes.POINTERMOVE) {\r\n                    if (dragging) {\r\n                        return;\r\n                    }\r\n                    gizmoAxisCache.forEach((cache) => {\r\n                        if (cache.colliderMeshes && cache.gizmoMeshes) {\r\n                            const isHovered = cache.colliderMeshes?.indexOf(pointerInfo?.pickInfo?.pickedMesh as Mesh) != -1;\r\n                            const material = cache.dragBehavior.enabled ? (isHovered || cache.active ? cache.hoverMaterial : cache.material) : cache.disableMaterial;\r\n                            cache.gizmoMeshes.forEach((m: Mesh) => {\r\n                                m.material = material;\r\n                                if ((m as LinesMesh).color) {\r\n                                    (m as LinesMesh).color = material.diffuseColor;\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // On Mouse Down\r\n                if (pointerInfo.type === PointerEventTypes.POINTERDOWN) {\r\n                    // If user Clicked Gizmo\r\n                    if (gizmoAxisCache.has(pointerInfo.pickInfo.pickedMesh?.parent as Mesh)) {\r\n                        dragging = true;\r\n                        const statusMap = gizmoAxisCache.get(pointerInfo.pickInfo.pickedMesh?.parent as Mesh);\r\n                        statusMap!.active = true;\r\n                        gizmoAxisCache.forEach((cache) => {\r\n                            const isHovered = cache.colliderMeshes?.indexOf(pointerInfo?.pickInfo?.pickedMesh as Mesh) != -1;\r\n                            const material = (isHovered || cache.active) && cache.dragBehavior.enabled ? cache.hoverMaterial : cache.disableMaterial;\r\n                            cache.gizmoMeshes.forEach((m: Mesh) => {\r\n                                m.material = material;\r\n                                if ((m as LinesMesh).color) {\r\n                                    (m as LinesMesh).color = material.diffuseColor;\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // On Mouse Up\r\n                if (pointerInfo.type === PointerEventTypes.POINTERUP) {\r\n                    gizmoAxisCache.forEach((cache) => {\r\n                        cache.active = false;\r\n                        dragging = false;\r\n                        cache.gizmoMeshes.forEach((m: Mesh) => {\r\n                            m.material = cache.dragBehavior.enabled ? cache.material : cache.disableMaterial;\r\n                            if ((m as LinesMesh).color) {\r\n                                (m as LinesMesh).color = cache.material.diffuseColor;\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        return pointerObserver!;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        this._rootMesh.dispose();\r\n        if (this._beforeRenderObserver) {\r\n            this.gizmoLayer.utilityLayerScene.onBeforeRenderObservable.remove(this._beforeRenderObserver);\r\n        }\r\n    }\r\n}\r\n", "import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\nimport { CreateGroundVertexData } from \"./groundBuilder\";\r\n\r\n/**\r\n * Creates the VertexData for a box\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * size sets the width, height and depth of the box to the value of size, optional default 1\r\n * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\r\n * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\r\n * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\r\n * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the box\r\n */\r\nexport function CreateBoxVertexData(options: {\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    depth?: number;\r\n    faceUV?: Vector4[];\r\n    faceColors?: Color4[];\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n    wrap?: boolean;\r\n    topBaseAt?: number;\r\n    bottomBaseAt?: number;\r\n}): VertexData {\r\n    const nbFaces = 6;\r\n    let indices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];\r\n    const normals = [\r\n        0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0,\r\n        1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,\r\n    ];\r\n    const uvs = [];\r\n    let positions = [];\r\n    const width = options.width || options.size || 1;\r\n    const height = options.height || options.size || 1;\r\n    const depth = options.depth || options.size || 1;\r\n    const wrap = options.wrap || false;\r\n    let topBaseAt = options.topBaseAt === void 0 ? 1 : options.topBaseAt;\r\n    let bottomBaseAt = options.bottomBaseAt === void 0 ? 0 : options.bottomBaseAt;\r\n    topBaseAt = (topBaseAt + 4) % 4; // places values as 0 to 3\r\n    bottomBaseAt = (bottomBaseAt + 4) % 4; // places values as 0 to 3\r\n    const topOrder = [2, 0, 3, 1];\r\n    const bottomOrder = [2, 0, 1, 3];\r\n    let topIndex = topOrder[topBaseAt];\r\n    let bottomIndex = bottomOrder[bottomBaseAt];\r\n    let basePositions = [\r\n        1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1,\r\n        1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1,\r\n    ];\r\n    if (wrap) {\r\n        indices = [2, 3, 0, 2, 0, 1, 4, 5, 6, 4, 6, 7, 9, 10, 11, 9, 11, 8, 12, 14, 15, 12, 13, 14];\r\n        basePositions = [\r\n            -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1,\r\n        ];\r\n        let topFaceBase: any = [\r\n            [1, 1, 1],\r\n            [-1, 1, 1],\r\n            [-1, 1, -1],\r\n            [1, 1, -1],\r\n        ];\r\n        let bottomFaceBase: any = [\r\n            [-1, -1, 1],\r\n            [1, -1, 1],\r\n            [1, -1, -1],\r\n            [-1, -1, -1],\r\n        ];\r\n        const topFaceOrder: any = [17, 18, 19, 16];\r\n        const bottomFaceOrder: any = [22, 23, 20, 21];\r\n        while (topIndex > 0) {\r\n            topFaceBase.unshift(topFaceBase.pop());\r\n            topFaceOrder.unshift(topFaceOrder.pop());\r\n            topIndex--;\r\n        }\r\n        while (bottomIndex > 0) {\r\n            bottomFaceBase.unshift(bottomFaceBase.pop());\r\n            bottomFaceOrder.unshift(bottomFaceOrder.pop());\r\n            bottomIndex--;\r\n        }\r\n        topFaceBase = topFaceBase.flat();\r\n        bottomFaceBase = bottomFaceBase.flat();\r\n        basePositions = basePositions.concat(topFaceBase).concat(bottomFaceBase);\r\n        indices.push(topFaceOrder[0], topFaceOrder[2], topFaceOrder[3], topFaceOrder[0], topFaceOrder[1], topFaceOrder[2]);\r\n        indices.push(bottomFaceOrder[0], bottomFaceOrder[2], bottomFaceOrder[3], bottomFaceOrder[0], bottomFaceOrder[1], bottomFaceOrder[2]);\r\n    }\r\n    const scaleArray = [width / 2, height / 2, depth / 2];\r\n    positions = basePositions.reduce((accumulator: Array<number>, currentValue, currentIndex) => accumulator.concat(currentValue * scaleArray[currentIndex % 3]), []);\r\n\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const faceUV: Vector4[] = options.faceUV || new Array<Vector4>(6);\r\n    const faceColors = options.faceColors;\r\n    const colors = [];\r\n\r\n    // default face colors and UV if undefined\r\n    for (let f = 0; f < 6; f++) {\r\n        if (faceUV[f] === undefined) {\r\n            faceUV[f] = new Vector4(0, 0, 1, 1);\r\n        }\r\n        if (faceColors && faceColors[f] === undefined) {\r\n            faceColors[f] = new Color4(1, 1, 1, 1);\r\n        }\r\n    }\r\n\r\n    // Create each face in turn.\r\n    for (let index = 0; index < nbFaces; index++) {\r\n        uvs.push(faceUV[index].z, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\r\n        uvs.push(faceUV[index].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\r\n        uvs.push(faceUV[index].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\r\n        uvs.push(faceUV[index].z, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\r\n        if (faceColors) {\r\n            for (let c = 0; c < 4; c++) {\r\n                colors.push(faceColors[index].r, faceColors[index].g, faceColors[index].b, faceColors[index].a);\r\n            }\r\n        }\r\n    }\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    if (faceColors) {\r\n        const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\r\n        vertexData.colors = totalColors;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates the VertexData for a segmented box\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * size sets the width, height and depth of the box to the value of size, optional default 1\r\n * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\r\n * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\r\n * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\r\n * * segments sets the number of segments on the all axis (1 by default)\r\n * * widthSegments sets the number of segments on the x axis (1 by default)\r\n * * heightSegments sets the number of segments on the y axis (1 by default)\r\n * * depthSegments sets the number of segments on the z axis (1 by default)\r\n * @returns the VertexData of the box\r\n */\r\nexport function CreateSegmentedBoxVertexData(options: {\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    depth?: number;\r\n    segments?: number;\r\n    widthSegments?: number;\r\n    heightSegments?: number;\r\n    depthSegments?: number;\r\n}): VertexData {\r\n    const width = options.width || options.size || 1;\r\n    const height = options.height || options.size || 1;\r\n    const depth = options.depth || options.size || 1;\r\n    const widthSegments = (options.widthSegments || options.segments || 1) | 0;\r\n    const heightSegments = (options.heightSegments || options.segments || 1) | 0;\r\n    const depthSegments = (options.depthSegments || options.segments || 1) | 0;\r\n    const rotationMatrix = new Matrix();\r\n    const translationMatrix = new Matrix();\r\n    const transformMatrix = new Matrix();\r\n\r\n    const bottomPlane = CreateGroundVertexData({ width: width, height: depth, subdivisionsX: widthSegments, subdivisionsY: depthSegments });\r\n    Matrix.TranslationToRef(0, -height / 2, 0, translationMatrix);\r\n    Matrix.RotationZToRef(Math.PI, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    bottomPlane.transform(transformMatrix);\r\n\r\n    const topPlane = CreateGroundVertexData({ width: width, height: depth, subdivisionsX: widthSegments, subdivisionsY: depthSegments });\r\n    Matrix.TranslationToRef(0, height / 2, 0, transformMatrix);\r\n    topPlane.transform(transformMatrix);\r\n\r\n    const negXPlane = CreateGroundVertexData({ width: height, height: depth, subdivisionsX: heightSegments, subdivisionsY: depthSegments });\r\n    Matrix.TranslationToRef(-width / 2, 0, 0, translationMatrix);\r\n    Matrix.RotationZToRef(Math.PI / 2, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    negXPlane.transform(transformMatrix);\r\n\r\n    const posXPlane = CreateGroundVertexData({ width: height, height: depth, subdivisionsX: heightSegments, subdivisionsY: depthSegments });\r\n    Matrix.TranslationToRef(width / 2, 0, 0, translationMatrix);\r\n    Matrix.RotationZToRef(-Math.PI / 2, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    posXPlane.transform(transformMatrix);\r\n\r\n    const negZPlane = CreateGroundVertexData({ width: width, height: height, subdivisionsX: widthSegments, subdivisionsY: heightSegments });\r\n    Matrix.TranslationToRef(0, 0, -depth / 2, translationMatrix);\r\n    Matrix.RotationXToRef(-Math.PI / 2, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    negZPlane.transform(transformMatrix);\r\n\r\n    const posZPlane = CreateGroundVertexData({ width: width, height: height, subdivisionsX: widthSegments, subdivisionsY: heightSegments });\r\n    Matrix.TranslationToRef(0, 0, depth / 2, translationMatrix);\r\n    Matrix.RotationXToRef(Math.PI / 2, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    posZPlane.transform(transformMatrix);\r\n\r\n    // Result\r\n    bottomPlane.merge([topPlane, posXPlane, negXPlane, negZPlane, posZPlane], true);\r\n\r\n    return bottomPlane;\r\n}\r\n\r\n/**\r\n * Creates a box mesh\r\n * * The parameter `size` sets the size (float) of each box side (default 1)\r\n * * You can set some different box dimensions by using the parameters `width`, `height` and `depth` (all by default have the same value of `size`)\r\n * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of 6 Color3 elements) and `faceUV` (an array of 6 Vector4 elements)\r\n * * Please read this tutorial : https://doc.babylonjs.com/features/featuresDeepDive/materials/using/texturePerBoxFace\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#box\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the box mesh\r\n */\r\nexport function CreateBox(\r\n    name: string,\r\n    options: {\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        wrap?: boolean;\r\n        topBaseAt?: number;\r\n        bottomBaseAt?: number;\r\n        updatable?: boolean;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const box = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    box._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateBoxVertexData(options);\r\n\r\n    vertexData.applyToMesh(box, options.updatable);\r\n\r\n    return box;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated please use CreateBox directly\r\n */\r\nexport const BoxBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateBox,\r\n};\r\n\r\n// Side effects\r\nVertexData.CreateBox = CreateBoxVertexData;\r\n\r\nMesh.CreateBox = (name: string, size: number, scene: Nullable<Scene> = null, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        size,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateBox(name, options, scene);\r\n};\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\n/** Defines the cross module used constants to avoid circular dependencies */\r\nexport class Constants {\r\n    /** Defines that alpha blending is disabled */\r\n    public static readonly ALPHA_DISABLE = 0;\r\n    /** Defines that alpha blending is SRC ALPHA * SRC + DEST */\r\n    public static readonly ALPHA_ADD = 1;\r\n    /** Defines that alpha blending is SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_COMBINE = 2;\r\n    /** Defines that alpha blending is DEST - SRC * DEST */\r\n    public static readonly ALPHA_SUBTRACT = 3;\r\n    /** Defines that alpha blending is SRC * DEST */\r\n    public static readonly ALPHA_MULTIPLY = 4;\r\n    /** Defines that alpha blending is SRC ALPHA * SRC + (1 - SRC) * DEST */\r\n    public static readonly ALPHA_MAXIMIZED = 5;\r\n    /** Defines that alpha blending is SRC + DEST */\r\n    public static readonly ALPHA_ONEONE = 6;\r\n    /** Defines that alpha blending is SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_PREMULTIPLIED = 7;\r\n    /**\r\n     * Defines that alpha blending is SRC + (1 - SRC ALPHA) * DEST\r\n     * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_PREMULTIPLIED_PORTERDUFF = 8;\r\n    /** Defines that alpha blending is CST * SRC + (1 - CST) * DEST */\r\n    public static readonly ALPHA_INTERPOLATE = 9;\r\n    /**\r\n     * Defines that alpha blending is SRC + (1 - SRC) * DEST\r\n     * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_SCREENMODE = 10;\r\n    /**\r\n     * Defines that alpha blending is SRC + DST\r\n     * Alpha will be set to SRC ALPHA + DST ALPHA\r\n     */\r\n    public static readonly ALPHA_ONEONE_ONEONE = 11;\r\n    /**\r\n     * Defines that alpha blending is SRC * DST ALPHA + DST\r\n     * Alpha will be set to 0\r\n     */\r\n    public static readonly ALPHA_ALPHATOCOLOR = 12;\r\n    /**\r\n     * Defines that alpha blending is SRC * (1 - DST) + DST * (1 - SRC)\r\n     */\r\n    public static readonly ALPHA_REVERSEONEMINUS = 13;\r\n    /**\r\n     * Defines that alpha blending is SRC + DST * (1 - SRC ALPHA)\r\n     * Alpha will be set to SRC ALPHA + DST ALPHA * (1 - SRC ALPHA)\r\n     */\r\n    public static readonly ALPHA_SRC_DSTONEMINUSSRCALPHA = 14;\r\n    /**\r\n     * Defines that alpha blending is SRC + DST\r\n     * Alpha will be set to SRC ALPHA\r\n     */\r\n    public static readonly ALPHA_ONEONE_ONEZERO = 15;\r\n    /**\r\n     * Defines that alpha blending is SRC * (1 - DST) + DST * (1 - SRC)\r\n     * Alpha will be set to DST ALPHA\r\n     */\r\n    public static readonly ALPHA_EXCLUSION = 16;\r\n    /**\r\n     * Defines that alpha blending is SRC * SRC ALPHA + DST * (1 - SRC ALPHA)\r\n     * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DST ALPHA\r\n     */\r\n    public static readonly ALPHA_LAYER_ACCUMULATE = 17;\r\n\r\n    /** Defines that alpha blending equation a SUM */\r\n    public static readonly ALPHA_EQUATION_ADD = 0;\r\n    /** Defines that alpha blending equation a SUBSTRACTION */\r\n    public static readonly ALPHA_EQUATION_SUBSTRACT = 1;\r\n    /** Defines that alpha blending equation a REVERSE SUBSTRACTION */\r\n    public static readonly ALPHA_EQUATION_REVERSE_SUBTRACT = 2;\r\n    /** Defines that alpha blending equation a MAX operation */\r\n    public static readonly ALPHA_EQUATION_MAX = 3;\r\n    /** Defines that alpha blending equation a MIN operation */\r\n    public static readonly ALPHA_EQUATION_MIN = 4;\r\n    /**\r\n     * Defines that alpha blending equation a DARKEN operation:\r\n     * It takes the min of the src and sums the alpha channels.\r\n     */\r\n    public static readonly ALPHA_EQUATION_DARKEN = 5;\r\n\r\n    /** Defines that the resource is not delayed*/\r\n    public static readonly DELAYLOADSTATE_NONE = 0;\r\n    /** Defines that the resource was successfully delay loaded */\r\n    public static readonly DELAYLOADSTATE_LOADED = 1;\r\n    /** Defines that the resource is currently delay loading */\r\n    public static readonly DELAYLOADSTATE_LOADING = 2;\r\n    /** Defines that the resource is delayed and has not started loading */\r\n    public static readonly DELAYLOADSTATE_NOTLOADED = 4;\r\n\r\n    // Depth or Stencil test Constants.\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\r\n    public static readonly NEVER = 0x0200;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\r\n    public static readonly ALWAYS = 0x0207;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\r\n    public static readonly LESS = 0x0201;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\r\n    public static readonly EQUAL = 0x0202;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\r\n    public static readonly LEQUAL = 0x0203;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\r\n    public static readonly GREATER = 0x0204;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\r\n    public static readonly GEQUAL = 0x0206;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\r\n    public static readonly NOTEQUAL = 0x0205;\r\n\r\n    // Stencil Actions Constants.\r\n    /** Passed to stencilOperation to specify that stencil value must be kept */\r\n    public static readonly KEEP = 0x1e00;\r\n    /** Passed to stencilOperation to specify that stencil value must be zero */\r\n    public static readonly ZERO = 0x0000;\r\n    /** Passed to stencilOperation to specify that stencil value must be replaced */\r\n    public static readonly REPLACE = 0x1e01;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented */\r\n    public static readonly INCR = 0x1e02;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented */\r\n    public static readonly DECR = 0x1e03;\r\n    /** Passed to stencilOperation to specify that stencil value must be inverted */\r\n    public static readonly INVERT = 0x150a;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\r\n    public static readonly INCR_WRAP = 0x8507;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\r\n    public static readonly DECR_WRAP = 0x8508;\r\n\r\n    /** Texture is not repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_CLAMP_ADDRESSMODE = 0;\r\n    /** Texture is repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_WRAP_ADDRESSMODE = 1;\r\n    /** Texture is repeating and mirrored */\r\n    public static readonly TEXTURE_MIRROR_ADDRESSMODE = 2;\r\n\r\n    /** Flag to create a storage texture */\r\n    public static readonly TEXTURE_CREATIONFLAG_STORAGE = 1;\r\n\r\n    /** ALPHA */\r\n    public static readonly TEXTUREFORMAT_ALPHA = 0;\r\n    /** LUMINANCE */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE = 1;\r\n    /** LUMINANCE_ALPHA */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE_ALPHA = 2;\r\n    /** RGB */\r\n    public static readonly TEXTUREFORMAT_RGB = 4;\r\n    /** RGBA */\r\n    public static readonly TEXTUREFORMAT_RGBA = 5;\r\n    /** RED */\r\n    public static readonly TEXTUREFORMAT_RED = 6;\r\n    /** RED (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R = 6;\r\n    /** RG */\r\n    public static readonly TEXTUREFORMAT_RG = 7;\r\n    /** RED_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RED_INTEGER = 8;\r\n    /** RED_INTEGER (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R_INTEGER = 8;\r\n    /** RG_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RG_INTEGER = 9;\r\n    /** RGB_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGB_INTEGER = 10;\r\n    /** RGBA_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGBA_INTEGER = 11;\r\n    /** BGRA */\r\n    public static readonly TEXTUREFORMAT_BGRA = 12;\r\n\r\n    /** Depth 24 bits + Stencil 8 bits */\r\n    public static readonly TEXTUREFORMAT_DEPTH24_STENCIL8 = 13;\r\n    /** Depth 32 bits float */\r\n    public static readonly TEXTUREFORMAT_DEPTH32_FLOAT = 14;\r\n    /** Depth 16 bits */\r\n    public static readonly TEXTUREFORMAT_DEPTH16 = 15;\r\n    /** Depth 24 bits */\r\n    public static readonly TEXTUREFORMAT_DEPTH24 = 16;\r\n    /** Depth 24 bits unorm + Stencil 8 bits */\r\n    public static readonly TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 = 17;\r\n    /** Depth 32 bits float + Stencil 8 bits */\r\n    public static readonly TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8 = 18;\r\n    /** Stencil 8 bits */\r\n    public static readonly TEXTUREFORMAT_STENCIL8 = 19;\r\n    /** UNDEFINED */\r\n    public static readonly TEXTUREFORMAT_UNDEFINED = 0xffffffff;\r\n\r\n    /** Compressed BC7 */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGBA_BPTC_UNORM = 36492;\r\n    /** Compressed BC7 (SRGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 36493;\r\n    /** Compressed BC6 unsigned float */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 36495;\r\n    /** Compressed BC6 signed float */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 36494;\r\n    /** Compressed BC3 */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5 = 33779;\r\n    /** Compressed BC3 (SRGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919;\r\n    /** Compressed BC2 */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT3 = 33778;\r\n    /** Compressed BC2 (SRGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918;\r\n    /** Compressed BC1 (RGBA) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT1 = 33777;\r\n    /** Compressed BC1 (RGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGB_S3TC_DXT1 = 33776;\r\n    /** Compressed BC1 (SRGB+A) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917;\r\n    /** Compressed BC1 (SRGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916;\r\n    /** Compressed ASTC 4x4 */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGBA_ASTC_4x4 = 37808;\r\n    /** Compressed ASTC 4x4 (SRGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840;\r\n    /** Compressed ETC1 (RGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGB_ETC1_WEBGL = 36196;\r\n    /** Compressed ETC2 (RGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGB8_ETC2 = 37492;\r\n    /** Compressed ETC2 (SRGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB8_ETC2 = 37493;\r\n    /** Compressed ETC2 (RGB+A1) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494;\r\n    /** Compressed ETC2 (SRGB+A1)*/\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495;\r\n    /** Compressed ETC2 (RGB+A) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGBA8_ETC2_EAC = 37496;\r\n    /** Compressed ETC2 (SRGB+1) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497;\r\n\r\n    /** UNSIGNED_BYTE */\r\n    public static readonly TEXTURETYPE_UNSIGNED_BYTE = 0;\r\n    /** UNSIGNED_BYTE (2nd reference) */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT = 0;\r\n    /** FLOAT */\r\n    public static readonly TEXTURETYPE_FLOAT = 1;\r\n    /** HALF_FLOAT */\r\n    public static readonly TEXTURETYPE_HALF_FLOAT = 2;\r\n    /** BYTE */\r\n    public static readonly TEXTURETYPE_BYTE = 3;\r\n    /** SHORT */\r\n    public static readonly TEXTURETYPE_SHORT = 4;\r\n    /** UNSIGNED_SHORT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT = 5;\r\n    /** INT */\r\n    public static readonly TEXTURETYPE_INT = 6;\r\n    /** UNSIGNED_INT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INTEGER = 7;\r\n    /** UNSIGNED_SHORT_4_4_4_4 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = 8;\r\n    /** UNSIGNED_SHORT_5_5_5_1 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = 9;\r\n    /** UNSIGNED_SHORT_5_6_5 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = 10;\r\n    /** UNSIGNED_INT_2_10_10_10_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = 11;\r\n    /** UNSIGNED_INT_24_8 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_24_8 = 12;\r\n    /** UNSIGNED_INT_10F_11F_11F_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = 13;\r\n    /** UNSIGNED_INT_5_9_9_9_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = 14;\r\n    /** FLOAT_32_UNSIGNED_INT_24_8_REV */\r\n    public static readonly TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = 15;\r\n    /** UNDEFINED */\r\n    public static readonly TEXTURETYPE_UNDEFINED = 16;\r\n\r\n    /** 2D Texture target*/\r\n    public static readonly TEXTURE_2D = 3553;\r\n    /** 2D Array Texture target */\r\n    public static readonly TEXTURE_2D_ARRAY = 35866;\r\n    /** Cube Map Texture target */\r\n    public static readonly TEXTURE_CUBE_MAP = 34067;\r\n    /** Cube Map Array Texture target */\r\n    public static readonly TEXTURE_CUBE_MAP_ARRAY = 0xdeadbeef;\r\n    /** 3D Texture target */\r\n    public static readonly TEXTURE_3D = 32879;\r\n\r\n    /** nearest is mag = nearest and min = nearest and no mip */\r\n    public static readonly TEXTURE_NEAREST_SAMPLINGMODE = 1;\r\n    /** mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_NEAREST = 1;\r\n\r\n    /** Bilinear is mag = linear and min = linear and no mip */\r\n    public static readonly TEXTURE_BILINEAR_SAMPLINGMODE = 2;\r\n    /** mag = linear and min = linear and mip = none */\r\n    public static readonly TEXTURE_LINEAR_LINEAR = 2;\r\n\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_TRILINEAR_SAMPLINGMODE = 3;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPLINEAR = 3;\r\n\r\n    /** mag = nearest and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPNEAREST = 4;\r\n    /** mag = nearest and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPNEAREST = 5;\r\n    /** mag = nearest and min = linear and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPLINEAR = 6;\r\n    /** mag = nearest and min = linear and mip = none */\r\n    public static readonly TEXTURE_NEAREST_LINEAR = 7;\r\n    /** nearest is mag = nearest and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPLINEAR = 8;\r\n    /** mag = linear and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPNEAREST = 9;\r\n    /** mag = linear and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPLINEAR = 10;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPNEAREST = 11;\r\n    /** mag = linear and min = nearest and mip = none */\r\n    public static readonly TEXTURE_LINEAR_NEAREST = 12;\r\n\r\n    /** Explicit coordinates mode */\r\n    public static readonly TEXTURE_EXPLICIT_MODE = 0;\r\n    /** Spherical coordinates mode */\r\n    public static readonly TEXTURE_SPHERICAL_MODE = 1;\r\n    /** Planar coordinates mode */\r\n    public static readonly TEXTURE_PLANAR_MODE = 2;\r\n    /** Cubic coordinates mode */\r\n    public static readonly TEXTURE_CUBIC_MODE = 3;\r\n    /** Projection coordinates mode */\r\n    public static readonly TEXTURE_PROJECTION_MODE = 4;\r\n    /** Skybox coordinates mode */\r\n    public static readonly TEXTURE_SKYBOX_MODE = 5;\r\n    /** Inverse Cubic coordinates mode */\r\n    public static readonly TEXTURE_INVCUBIC_MODE = 6;\r\n    /** Equirectangular coordinates mode */\r\n    public static readonly TEXTURE_EQUIRECTANGULAR_MODE = 7;\r\n    /** Equirectangular Fixed coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MODE = 8;\r\n    /** Equirectangular Fixed Mirrored coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\r\n\r\n    /** Offline (baking) quality for texture filtering */\r\n    public static readonly TEXTURE_FILTERING_QUALITY_OFFLINE = 4096;\r\n\r\n    /** High quality for texture filtering */\r\n    public static readonly TEXTURE_FILTERING_QUALITY_HIGH = 64;\r\n\r\n    /** Medium quality for texture filtering */\r\n    public static readonly TEXTURE_FILTERING_QUALITY_MEDIUM = 16;\r\n\r\n    /** Low quality for texture filtering */\r\n    public static readonly TEXTURE_FILTERING_QUALITY_LOW = 8;\r\n\r\n    // Texture rescaling mode\r\n    /** Defines that texture rescaling will use a floor to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_FLOOR = 1;\r\n    /** Defines that texture rescaling will look for the nearest power of 2 size */\r\n    public static readonly SCALEMODE_NEAREST = 2;\r\n    /** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_CEILING = 3;\r\n\r\n    /**\r\n     * The dirty texture flag value\r\n     */\r\n    public static readonly MATERIAL_TextureDirtyFlag = 1;\r\n    /**\r\n     * The dirty light flag value\r\n     */\r\n    public static readonly MATERIAL_LightDirtyFlag = 2;\r\n    /**\r\n     * The dirty fresnel flag value\r\n     */\r\n    public static readonly MATERIAL_FresnelDirtyFlag = 4;\r\n    /**\r\n     * The dirty attribute flag value\r\n     */\r\n    public static readonly MATERIAL_AttributesDirtyFlag = 8;\r\n    /**\r\n     * The dirty misc flag value\r\n     */\r\n    public static readonly MATERIAL_MiscDirtyFlag = 16;\r\n    /**\r\n     * The dirty prepass flag value\r\n     */\r\n    public static readonly MATERIAL_PrePassDirtyFlag = 32;\r\n    /**\r\n     * The all dirty flag value\r\n     */\r\n    public static readonly MATERIAL_AllDirtyFlag = 63;\r\n\r\n    /**\r\n     * Returns the triangle fill mode\r\n     */\r\n    public static readonly MATERIAL_TriangleFillMode = 0;\r\n    /**\r\n     * Returns the wireframe mode\r\n     */\r\n    public static readonly MATERIAL_WireFrameFillMode = 1;\r\n    /**\r\n     * Returns the point fill mode\r\n     */\r\n    public static readonly MATERIAL_PointFillMode = 2;\r\n    /**\r\n     * Returns the point list draw mode\r\n     */\r\n    public static readonly MATERIAL_PointListDrawMode = 3;\r\n    /**\r\n     * Returns the line list draw mode\r\n     */\r\n    public static readonly MATERIAL_LineListDrawMode = 4;\r\n    /**\r\n     * Returns the line loop draw mode\r\n     */\r\n    public static readonly MATERIAL_LineLoopDrawMode = 5;\r\n    /**\r\n     * Returns the line strip draw mode\r\n     */\r\n    public static readonly MATERIAL_LineStripDrawMode = 6;\r\n\r\n    /**\r\n     * Returns the triangle strip draw mode\r\n     */\r\n    public static readonly MATERIAL_TriangleStripDrawMode = 7;\r\n    /**\r\n     * Returns the triangle fan draw mode\r\n     */\r\n    public static readonly MATERIAL_TriangleFanDrawMode = 8;\r\n\r\n    /**\r\n     * Stores the clock-wise side orientation\r\n     */\r\n    public static readonly MATERIAL_ClockWiseSideOrientation = 0;\r\n    /**\r\n     * Stores the counter clock-wise side orientation\r\n     */\r\n    public static readonly MATERIAL_CounterClockWiseSideOrientation = 1;\r\n\r\n    /**\r\n     * Nothing\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_NothingTrigger = 0;\r\n    /**\r\n     * On pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPickTrigger = 1;\r\n    /**\r\n     * On left pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnLeftPickTrigger = 2;\r\n    /**\r\n     * On right pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnRightPickTrigger = 3;\r\n    /**\r\n     * On center pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnCenterPickTrigger = 4;\r\n    /**\r\n     * On pick down\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPickDownTrigger = 5;\r\n    /**\r\n     * On double pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnDoublePickTrigger = 6;\r\n    /**\r\n     * On pick up\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPickUpTrigger = 7;\r\n    /**\r\n     * On pick out.\r\n     * This trigger will only be raised if you also declared a OnPickDown\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPickOutTrigger = 16;\r\n    /**\r\n     * On long press\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnLongPressTrigger = 8;\r\n    /**\r\n     * On pointer over\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPointerOverTrigger = 9;\r\n    /**\r\n     * On pointer out\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPointerOutTrigger = 10;\r\n    /**\r\n     * On every frame\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnEveryFrameTrigger = 11;\r\n    /**\r\n     * On intersection enter\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnIntersectionEnterTrigger = 12;\r\n    /**\r\n     * On intersection exit\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnIntersectionExitTrigger = 13;\r\n    /**\r\n     * On key down\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnKeyDownTrigger = 14;\r\n    /**\r\n     * On key up\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnKeyUpTrigger = 15;\r\n\r\n    /**\r\n     * Billboard mode will only apply to Y axis\r\n     */\r\n    public static readonly PARTICLES_BILLBOARDMODE_Y = 2;\r\n    /**\r\n     * Billboard mode will apply to all axes\r\n     */\r\n    public static readonly PARTICLES_BILLBOARDMODE_ALL = 7;\r\n    /**\r\n     * Special billboard mode where the particle will be biilboard to the camera but rotated to align with direction\r\n     */\r\n    public static readonly PARTICLES_BILLBOARDMODE_STRETCHED = 8;\r\n    /**\r\n     * Special billboard mode where the particle will be billboard to the camera but only around the axis of the direction of particle emission\r\n     */\r\n    public static readonly PARTICLES_BILLBOARDMODE_STRETCHED_LOCAL = 9;\r\n\r\n    /** Default culling strategy : this is an exclusion test and it's the more accurate.\r\n     *  Test order :\r\n     *  Is the bounding sphere outside the frustum ?\r\n     *  If not, are the bounding box vertices outside the frustum ?\r\n     *  It not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly MESHES_CULLINGSTRATEGY_STANDARD = 0;\r\n    /** Culling strategy : Bounding Sphere Only.\r\n     *  This is an exclusion test. It's faster than the standard strategy because the bounding box is not tested.\r\n     *  It's also less accurate than the standard because some not visible objects can still be selected.\r\n     *  Test : is the bounding sphere outside the frustum ?\r\n     *  If not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY = 1;\r\n    /** Culling strategy : Optimistic Inclusion.\r\n     *  This in an inclusion test first, then the standard exclusion test.\r\n     *  This can be faster when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the standard test when the tested object center is not the frustum but one of its bounding box vertex is still inside.\r\n     *  Anyway, it's as accurate as the standard strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the default culling strategy.\r\n     */\r\n    public static readonly MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION = 2;\r\n    /** Culling strategy : Optimistic Inclusion then Bounding Sphere Only.\r\n     *  This in an inclusion test first, then the bounding sphere only exclusion test.\r\n     *  This can be the fastest test when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the BoundingSphereOnly strategy when the tested object center is not in the frustum but its bounding sphere still intersects it.\r\n     *  It's less accurate than the standard strategy and as accurate as the BoundingSphereOnly strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the Bounding Sphere Only strategy. No Bounding Box is tested here.\r\n     */\r\n    public static readonly MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY = 3;\r\n\r\n    /**\r\n     * No logging while loading\r\n     */\r\n    public static readonly SCENELOADER_NO_LOGGING = 0;\r\n    /**\r\n     * Minimal logging while loading\r\n     */\r\n    public static readonly SCENELOADER_MINIMAL_LOGGING = 1;\r\n    /**\r\n     * Summary logging while loading\r\n     */\r\n    public static readonly SCENELOADER_SUMMARY_LOGGING = 2;\r\n    /**\r\n     * Detailed logging while loading\r\n     */\r\n    public static readonly SCENELOADER_DETAILED_LOGGING = 3;\r\n\r\n    /**\r\n     * Constant used to retrieve the irradiance texture index in the textures array in the prepass\r\n     * using getIndex(Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_IRRADIANCE_TEXTURE_TYPE = 0;\r\n    /**\r\n     * Constant used to retrieve the position texture index in the textures array in the prepass\r\n     * using getIndex(Constants.PREPASS_POSITION_TEXTURE_INDEX)\r\n     */\r\n    public static readonly PREPASS_POSITION_TEXTURE_TYPE = 1;\r\n    /**\r\n     * Constant used to retrieve the velocity texture index in the textures array in the prepass\r\n     * using getIndex(Constants.PREPASS_VELOCITY_TEXTURE_INDEX)\r\n     */\r\n    public static readonly PREPASS_VELOCITY_TEXTURE_TYPE = 2;\r\n    /**\r\n     * Constant used to retrieve the reflectivity texture index in the textures array in the prepass\r\n     * using the getIndex(Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_REFLECTIVITY_TEXTURE_TYPE = 3;\r\n    /**\r\n     * Constant used to retrieve the lit color texture index in the textures array in the prepass\r\n     * using the getIndex(Constants.PREPASS_COLOR_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_COLOR_TEXTURE_TYPE = 4;\r\n    /**\r\n     * Constant used to retrieve depth index in the textures array in the prepass\r\n     * using the getIndex(Constants.PREPASS_DEPTH_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_DEPTH_TEXTURE_TYPE = 5;\r\n    /**\r\n     * Constant used to retrieve normal index in the textures array in the prepass\r\n     * using the getIndex(Constants.PREPASS_NORMAL_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_NORMAL_TEXTURE_TYPE = 6;\r\n    /**\r\n     * Constant used to retrieve albedo index in the textures array in the prepass\r\n     * using the getIndex(Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_ALBEDO_SQRT_TEXTURE_TYPE = 7;\r\n\r\n    /** Flag to create a readable buffer (the buffer can be the source of a copy) */\r\n    public static readonly BUFFER_CREATIONFLAG_READ = 1;\r\n    /** Flag to create a writable buffer (the buffer can be the destination of a copy) */\r\n    public static readonly BUFFER_CREATIONFLAG_WRITE = 2;\r\n    /** Flag to create a readable and writable buffer */\r\n    public static readonly BUFFER_CREATIONFLAG_READWRITE = 3;\r\n    /** Flag to create a buffer suitable to be used as a uniform buffer */\r\n    public static readonly BUFFER_CREATIONFLAG_UNIFORM = 4;\r\n    /** Flag to create a buffer suitable to be used as a vertex buffer */\r\n    public static readonly BUFFER_CREATIONFLAG_VERTEX = 8;\r\n    /** Flag to create a buffer suitable to be used as an index buffer */\r\n    public static readonly BUFFER_CREATIONFLAG_INDEX = 16;\r\n    /** Flag to create a buffer suitable to be used as a storage buffer */\r\n    public static readonly BUFFER_CREATIONFLAG_STORAGE = 32;\r\n\r\n    /**\r\n     * Prefixes used by the engine for sub mesh draw wrappers\r\n     */\r\n\r\n    /** @internal */\r\n    public static readonly RENDERPASS_MAIN = 0;\r\n\r\n    /**\r\n     * Constant used as key code for Alt key\r\n     */\r\n    public static readonly INPUT_ALT_KEY = 18;\r\n\r\n    /**\r\n     * Constant used as key code for Ctrl key\r\n     */\r\n    public static readonly INPUT_CTRL_KEY = 17;\r\n\r\n    /**\r\n     * Constant used as key code for Meta key (Left Win, Left Cmd)\r\n     */\r\n    public static readonly INPUT_META_KEY1 = 91;\r\n\r\n    /**\r\n     * Constant used as key code for Meta key (Right Win)\r\n     */\r\n    public static readonly INPUT_META_KEY2 = 92;\r\n\r\n    /**\r\n     * Constant used as key code for Meta key (Right Win, Right Cmd)\r\n     */\r\n    public static readonly INPUT_META_KEY3 = 93;\r\n\r\n    /**\r\n     * Constant used as key code for Shift key\r\n     */\r\n    public static readonly INPUT_SHIFT_KEY = 16;\r\n\r\n    /** Standard snapshot rendering. In this mode, some form of dynamic behavior is possible (for eg, uniform buffers are still updated) */\r\n    public static readonly SNAPSHOTRENDERING_STANDARD = 0;\r\n\r\n    /** Fast snapshot rendering. In this mode, everything is static and only some limited form of dynamic behaviour is possible */\r\n    public static readonly SNAPSHOTRENDERING_FAST = 1;\r\n\r\n    /**\r\n     * This is the default projection mode used by the cameras.\r\n     * It helps recreating a feeling of perspective and better appreciate depth.\r\n     * This is the best way to simulate real life cameras.\r\n     */\r\n    public static readonly PERSPECTIVE_CAMERA = 0;\r\n    /**\r\n     * This helps creating camera with an orthographic mode.\r\n     * Orthographic is commonly used in engineering as a means to produce object specifications that communicate dimensions unambiguously, each line of 1 unit length (cm, meter..whatever) will appear to have the same length everywhere on the drawing. This allows the drafter to dimension only a subset of lines and let the reader know that other lines of that length on the drawing are also that length in reality. Every parallel line in the drawing is also parallel in the object.\r\n     */\r\n    public static readonly ORTHOGRAPHIC_CAMERA = 1;\r\n\r\n    /**\r\n     * This is the default FOV mode for perspective cameras.\r\n     * This setting aligns the upper and lower bounds of the viewport to the upper and lower bounds of the camera frustum.\r\n     */\r\n    public static readonly FOVMODE_VERTICAL_FIXED = 0;\r\n    /**\r\n     * This setting aligns the left and right bounds of the viewport to the left and right bounds of the camera frustum.\r\n     */\r\n    public static readonly FOVMODE_HORIZONTAL_FIXED = 1;\r\n\r\n    /**\r\n     * This specifies there is no need for a camera rig.\r\n     * Basically only one eye is rendered corresponding to the camera.\r\n     */\r\n    public static readonly RIG_MODE_NONE = 0;\r\n    /**\r\n     * Simulates a camera Rig with one blue eye and one red eye.\r\n     * This can be use with 3d blue and red glasses.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_ANAGLYPH = 10;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered side by side with a parallel target.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL = 11;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered side by side with a none parallel target.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED = 12;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered over under each other.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_OVERUNDER = 13;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered on successive lines interlaced for passive 3d monitors.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_INTERLACED = 14;\r\n    /**\r\n     * Defines that both eyes of the camera should be renderered in a VR mode (carbox).\r\n     */\r\n    public static readonly RIG_MODE_VR = 20;\r\n    /**\r\n     * Custom rig mode allowing rig cameras to be populated manually with any number of cameras\r\n     */\r\n    public static readonly RIG_MODE_CUSTOM = 22;\r\n\r\n    /**\r\n     * Maximum number of uv sets supported\r\n     */\r\n    public static readonly MAX_SUPPORTED_UV_SETS = 6;\r\n\r\n    /**\r\n     * GL constants\r\n     */\r\n    /** Alpha blend equation: ADD */\r\n    public static readonly GL_ALPHA_EQUATION_ADD = 0x8006;\r\n    /** Alpha equation: MIN */\r\n    public static readonly GL_ALPHA_EQUATION_MIN = 0x8007;\r\n    /** Alpha equation: MAX */\r\n    public static readonly GL_ALPHA_EQUATION_MAX = 0x8008;\r\n    /** Alpha equation: SUBTRACT */\r\n    public static readonly GL_ALPHA_EQUATION_SUBTRACT = 0x800a;\r\n    /** Alpha equation: REVERSE_SUBTRACT */\r\n    public static readonly GL_ALPHA_EQUATION_REVERSE_SUBTRACT = 0x800b;\r\n\r\n    /** Alpha blend function: SRC */\r\n    public static readonly GL_ALPHA_FUNCTION_SRC = 0x0300;\r\n    /** Alpha blend function: ONE_MINUS_SRC */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR = 0x0301;\r\n    /** Alpha blend function: SRC_ALPHA */\r\n    public static readonly GL_ALPHA_FUNCTION_SRC_ALPHA = 0x0302;\r\n    /** Alpha blend function: ONE_MINUS_SRC_ALPHA */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA = 0x0303;\r\n    /** Alpha blend function: DST_ALPHA */\r\n    public static readonly GL_ALPHA_FUNCTION_DST_ALPHA = 0x0304;\r\n    /** Alpha blend function: ONE_MINUS_DST_ALPHA */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_DST_ALPHA = 0x0305;\r\n    /** Alpha blend function: ONE_MINUS_DST */\r\n    public static readonly GL_ALPHA_FUNCTION_DST_COLOR = 0x0306;\r\n    /** Alpha blend function: ONE_MINUS_DST */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_DST_COLOR = 0x0307;\r\n    /** Alpha blend function: SRC_ALPHA_SATURATED */\r\n    public static readonly GL_ALPHA_FUNCTION_SRC_ALPHA_SATURATED = 0x0308;\r\n    /** Alpha blend function: CONSTANT */\r\n    public static readonly GL_ALPHA_FUNCTION_CONSTANT_COLOR = 0x8001;\r\n    /** Alpha blend function: ONE_MINUS_CONSTANT */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_COLOR = 0x8002;\r\n    /** Alpha blend function: CONSTANT_ALPHA */\r\n    public static readonly GL_ALPHA_FUNCTION_CONSTANT_ALPHA = 0x8003;\r\n    /** Alpha blend function: ONE_MINUS_CONSTANT_ALPHA */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_ALPHA = 0x8004;\r\n\r\n    /** URL to the snippet server. Points to the public snippet server by default */\r\n    public static SnippetUrl = \"https://snippet.babylonjs.com\";\r\n\r\n    /** The fog is deactivated */\r\n    public static FOGMODE_NONE = 0;\r\n    /** The fog density is following an exponential function */\r\n    public static FOGMODE_EXP = 1;\r\n    /** The fog density is following an exponential function faster than FOGMODE_EXP */\r\n    public static FOGMODE_EXP2 = 2;\r\n    /** The fog density is following a linear function. */\r\n    public static FOGMODE_LINEAR = 3;\r\n\r\n    /**\r\n     * The byte type.\r\n     */\r\n    public static BYTE = 5120;\r\n\r\n    /**\r\n     * The unsigned byte type.\r\n     */\r\n    public static UNSIGNED_BYTE = 5121;\r\n\r\n    /**\r\n     * The short type.\r\n     */\r\n    public static SHORT = 5122;\r\n\r\n    /**\r\n     * The unsigned short type.\r\n     */\r\n    public static UNSIGNED_SHORT = 5123;\r\n\r\n    /**\r\n     * The integer type.\r\n     */\r\n    public static INT = 5124;\r\n\r\n    /**\r\n     * The unsigned integer type.\r\n     */\r\n    public static UNSIGNED_INT = 5125;\r\n\r\n    /**\r\n     * The float type.\r\n     */\r\n    public static FLOAT = 5126;\r\n\r\n    /**\r\n     * Positions\r\n     */\r\n    public static PositionKind = \"position\";\r\n    /**\r\n     * Normals\r\n     */\r\n    public static NormalKind = \"normal\";\r\n    /**\r\n     * Tangents\r\n     */\r\n    public static TangentKind = \"tangent\";\r\n    /**\r\n     * Texture coordinates\r\n     */\r\n    public static UVKind = \"uv\";\r\n    /**\r\n     * Texture coordinates 2\r\n     */\r\n    public static UV2Kind = \"uv2\";\r\n    /**\r\n     * Texture coordinates 3\r\n     */\r\n    public static UV3Kind = \"uv3\";\r\n    /**\r\n     * Texture coordinates 4\r\n     */\r\n    public static UV4Kind = \"uv4\";\r\n    /**\r\n     * Texture coordinates 5\r\n     */\r\n    public static UV5Kind = \"uv5\";\r\n    /**\r\n     * Texture coordinates 6\r\n     */\r\n    public static UV6Kind = \"uv6\";\r\n    /**\r\n     * Colors\r\n     */\r\n    public static ColorKind = \"color\";\r\n    /**\r\n     * Instance Colors\r\n     */\r\n    public static ColorInstanceKind = \"instanceColor\";\r\n    /**\r\n     * Matrix indices (for bones)\r\n     */\r\n    public static MatricesIndicesKind = \"matricesIndices\";\r\n    /**\r\n     * Matrix weights (for bones)\r\n     */\r\n    public static MatricesWeightsKind = \"matricesWeights\";\r\n    /**\r\n     * Additional matrix indices (for bones)\r\n     */\r\n    public static MatricesIndicesExtraKind = \"matricesIndicesExtra\";\r\n    /**\r\n     * Additional matrix weights (for bones)\r\n     */\r\n    public static MatricesWeightsExtraKind = \"matricesWeightsExtra\";\r\n}\r\n", "/**\r\n * Gather the list of clipboard event types as constants.\r\n */\r\nexport class ClipboardEventTypes {\r\n    /**\r\n     * The clipboard event is fired when a copy command is active (pressed).\r\n     */\r\n    public static readonly COPY = 0x01; //\r\n    /**\r\n     *  The clipboard event is fired when a cut command is active (pressed).\r\n     */\r\n    public static readonly CUT = 0x02;\r\n\r\n    /**\r\n     * The clipboard event is fired when a paste command is active (pressed).\r\n     */\r\n    public static readonly PASTE = 0x03;\r\n}\r\n/**\r\n * This class is used to store clipboard related info for the onClipboardObservable event.\r\n */\r\nexport class ClipboardInfo {\r\n    /**\r\n     *Creates an instance of ClipboardInfo.\r\n     * @param type Defines the type of event (BABYLON.ClipboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (BABYLON.ClipboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: ClipboardEvent\r\n    ) {}\r\n\r\n    /**\r\n     *  Get the clipboard event's type from the keycode.\r\n     * @param keyCode Defines the keyCode for the current keyboard event.\r\n     * @returns {number}\r\n     */\r\n    public static GetTypeFromCharacter(keyCode: number): number {\r\n        const charCode = keyCode;\r\n        //TODO: add codes for extended ASCII\r\n        switch (charCode) {\r\n            case 67:\r\n                return ClipboardEventTypes.COPY;\r\n            case 86:\r\n                return ClipboardEventTypes.PASTE;\r\n            case 88:\r\n                return ClipboardEventTypes.CUT;\r\n            default:\r\n                return -1;\r\n        }\r\n    }\r\n}\r\n", "import type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { ISceneComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport type { Layer } from \"./layer\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { AbstractScene } from \"../abstractScene\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\ndeclare module \"../abstractScene\" {\r\n    export interface AbstractScene {\r\n        /**\r\n         * The list of layers (background and foreground) of the scene\r\n         */\r\n        layers: Array<Layer>;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the layer scene component responsible to manage any layers\r\n * in a given scene.\r\n */\r\nexport class LayerSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_LAYER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    private _engine: Engine;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene?: Scene) {\r\n        this.scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!this.scene) {\r\n            return;\r\n        }\r\n        this._engine = this.scene.getEngine();\r\n        this.scene.layers = [] as Layer[];\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._beforeCameraDrawStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERADRAW_LAYER, this, this._drawCameraBackground);\r\n        this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_LAYER, this, this._drawCameraForegroundWithPostProcessing);\r\n        this.scene._afterCameraPostProcessStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERAPOSTPROCESS_LAYER, this, this._drawCameraForegroundWithoutPostProcessing);\r\n\r\n        this.scene._beforeRenderTargetDrawStage.registerStep(SceneComponentConstants.STEP_BEFORERENDERTARGETDRAW_LAYER, this, this._drawRenderTargetBackground);\r\n        this.scene._afterRenderTargetDrawStage.registerStep(SceneComponentConstants.STEP_AFTERRENDERTARGETDRAW_LAYER, this, this._drawRenderTargetForegroundWithPostProcessing);\r\n        this.scene._afterRenderTargetPostProcessStage.registerStep(\r\n            SceneComponentConstants.STEP_AFTERRENDERTARGETPOSTPROCESS_LAYER,\r\n            this,\r\n            this._drawRenderTargetForegroundWithoutPostProcessing\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        const layers = this.scene.layers;\r\n\r\n        for (const layer of layers) {\r\n            layer._rebuild();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        const layers = this.scene.layers;\r\n\r\n        while (layers.length) {\r\n            layers[0].dispose();\r\n        }\r\n    }\r\n\r\n    private _draw(predicate: (layer: Layer) => boolean): void {\r\n        const layers = this.scene.layers;\r\n\r\n        if (layers.length) {\r\n            this._engine.setDepthBuffer(false);\r\n            for (const layer of layers) {\r\n                if (predicate(layer)) {\r\n                    layer.render();\r\n                }\r\n            }\r\n            this._engine.setDepthBuffer(true);\r\n        }\r\n    }\r\n\r\n    private _drawCameraPredicate(layer: Layer, isBackground: boolean, applyPostProcess: boolean, cameraLayerMask: number): boolean {\r\n        return (\r\n            !layer.renderOnlyInRenderTargetTextures &&\r\n            layer.isBackground === isBackground &&\r\n            layer.applyPostProcess === applyPostProcess &&\r\n            (layer.layerMask & cameraLayerMask) !== 0\r\n        );\r\n    }\r\n\r\n    private _drawCameraBackground(camera: Camera): void {\r\n        this._draw((layer: Layer) => {\r\n            return this._drawCameraPredicate(layer, true, true, camera.layerMask);\r\n        });\r\n    }\r\n\r\n    private _drawCameraForegroundWithPostProcessing(camera: Camera): void {\r\n        this._draw((layer: Layer) => {\r\n            return this._drawCameraPredicate(layer, false, true, camera.layerMask);\r\n        });\r\n    }\r\n\r\n    private _drawCameraForegroundWithoutPostProcessing(camera: Camera): void {\r\n        this._draw((layer: Layer) => {\r\n            return this._drawCameraPredicate(layer, false, false, camera.layerMask);\r\n        });\r\n    }\r\n\r\n    private _drawRenderTargetPredicate(layer: Layer, isBackground: boolean, applyPostProcess: boolean, cameraLayerMask: number, renderTargetTexture: RenderTargetTexture): boolean {\r\n        return (\r\n            layer.renderTargetTextures.length > 0 &&\r\n            layer.isBackground === isBackground &&\r\n            layer.applyPostProcess === applyPostProcess &&\r\n            layer.renderTargetTextures.indexOf(renderTargetTexture) > -1 &&\r\n            (layer.layerMask & cameraLayerMask) !== 0\r\n        );\r\n    }\r\n\r\n    private _drawRenderTargetBackground(renderTarget: RenderTargetTexture): void {\r\n        this._draw((layer: Layer) => {\r\n            return this._drawRenderTargetPredicate(layer, true, true, this.scene.activeCamera!.layerMask, renderTarget);\r\n        });\r\n    }\r\n\r\n    private _drawRenderTargetForegroundWithPostProcessing(renderTarget: RenderTargetTexture): void {\r\n        this._draw((layer: Layer) => {\r\n            return this._drawRenderTargetPredicate(layer, false, true, this.scene.activeCamera!.layerMask, renderTarget);\r\n        });\r\n    }\r\n\r\n    private _drawRenderTargetForegroundWithoutPostProcessing(renderTarget: RenderTargetTexture): void {\r\n        this._draw((layer: Layer) => {\r\n            return this._drawRenderTargetPredicate(layer, false, false, this.scene.activeCamera!.layerMask, renderTarget);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    public addFromContainer(container: AbstractScene): void {\r\n        if (!container.layers) {\r\n            return;\r\n        }\r\n        container.layers.forEach((layer) => {\r\n            this.scene.layers.push(layer);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    public removeFromContainer(container: AbstractScene, dispose = false): void {\r\n        if (!container.layers) {\r\n            return;\r\n        }\r\n        container.layers.forEach((layer) => {\r\n            const index = this.scene.layers.indexOf(layer);\r\n            if (index !== -1) {\r\n                this.scene.layers.splice(index, 1);\r\n            }\r\n            if (dispose) {\r\n                layer.dispose();\r\n            }\r\n        });\r\n    }\r\n}\r\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/helperFunctions\";\n\nconst name = \"layerPixelShader\";\nconst shader = `varying vec2 vUV;uniform sampler2D textureSampler;uniform vec4 color;\n#include<helperFunctions>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\nvec4 baseColor=texture2D(textureSampler,vUV);\n#ifdef LINEAR\nbaseColor.rgb=toGammaSpace(baseColor.rgb);\n#endif\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\ngl_FragColor=baseColor*color;\n#define CUSTOM_FRAGMENT_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const layerPixelShader = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"layerVertexShader\";\nconst shader = `attribute vec2 position;uniform vec2 scale;uniform vec2 offset;uniform mat4 textureMatrix;varying vec2 vUV;const vec2 madd=vec2(0.5,0.5);\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_VERTEX_MAIN_BEGIN\nvec2 shiftedPosition=position*scale+offset;vUV=vec2(textureMatrix*vec4(shiftedPosition*madd+madd,1.0,0.0));gl_Position=vec4(shiftedPosition,0.0,1.0);\n#define CUSTOM_VERTEX_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const layerVertexShader = { name, shader };\n", "import type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector2 } from \"../Maths/math.vector\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { LayerSceneComponent } from \"./layerSceneComponent\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { DrawWrapper } from \"../Materials/drawWrapper\";\r\n\r\nimport \"../Shaders/layer.fragment\";\r\nimport \"../Shaders/layer.vertex\";\r\n\r\n/**\r\n * This represents a full screen 2d layer.\r\n * This can be useful to display a picture in the  background of your scene for instance.\r\n * @see https://www.babylonjs-playground.com/#08A2BS#1\r\n */\r\nexport class Layer {\r\n    /**\r\n     * Define the texture the layer should display.\r\n     */\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Is the layer in background or foreground.\r\n     */\r\n    public isBackground: boolean;\r\n\r\n    private _applyPostProcess: boolean = true;\r\n    /**\r\n     * Determines if the layer is drawn before (true) or after (false) post-processing.\r\n     * If the layer is background, it is always before.\r\n     */\r\n    public set applyPostProcess(value: boolean) {\r\n        this._applyPostProcess = value;\r\n    }\r\n    public get applyPostProcess(): boolean {\r\n        return this.isBackground || this._applyPostProcess;\r\n    }\r\n\r\n    /**\r\n     * Define the color of the layer (instead of texture).\r\n     */\r\n    public color: Color4;\r\n\r\n    /**\r\n     * Define the scale of the layer in order to zoom in out of the texture.\r\n     */\r\n    public scale = new Vector2(1, 1);\r\n\r\n    /**\r\n     * Define an offset for the layer in order to shift the texture.\r\n     */\r\n    public offset = new Vector2(0, 0);\r\n\r\n    /**\r\n     * Define the alpha blending mode used in the layer in case the texture or color has an alpha.\r\n     */\r\n    public alphaBlendingMode = Constants.ALPHA_COMBINE;\r\n\r\n    /**\r\n     * Define if the layer should alpha test or alpha blend with the rest of the scene.\r\n     * Alpha test will not mix with the background color in case of transparency.\r\n     * It will either use the texture color or the background depending on the alpha value of the current pixel.\r\n     */\r\n    public alphaTest: boolean;\r\n\r\n    /**\r\n     * Define a mask to restrict the layer to only some of the scene cameras.\r\n     */\r\n    public layerMask: number = 0x0fffffff;\r\n\r\n    /**\r\n     * Define the list of render target the layer is visible into.\r\n     */\r\n    public renderTargetTextures: RenderTargetTexture[] = [];\r\n\r\n    /**\r\n     * Define if the layer is only used in renderTarget or if it also\r\n     * renders in the main frame buffer of the canvas.\r\n     */\r\n    public renderOnlyInRenderTargetTextures = false;\r\n\r\n    /**\r\n     * Define if the layer is enabled (ie. should be displayed). Default: true\r\n     */\r\n    public isEnabled = true;\r\n\r\n    private _scene: Scene;\r\n    private _vertexBuffers: { [key: string]: Nullable<VertexBuffer> } = {};\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _drawWrapper: DrawWrapper;\r\n    private _previousDefines: string;\r\n\r\n    /**\r\n     * An event triggered when the layer is disposed.\r\n     */\r\n    public onDisposeObservable = new Observable<Layer>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<Layer>>;\r\n    /**\r\n     * Back compatibility with callback before the onDisposeObservable existed.\r\n     * The set callback will be triggered when the layer has been disposed.\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered before rendering the scene\r\n     */\r\n    public onBeforeRenderObservable = new Observable<Layer>();\r\n\r\n    private _onBeforeRenderObserver: Nullable<Observer<Layer>>;\r\n    /**\r\n     * Back compatibility with callback before the onBeforeRenderObservable existed.\r\n     * The set callback will be triggered just before rendering the layer.\r\n     */\r\n    public set onBeforeRender(callback: () => void) {\r\n        if (this._onBeforeRenderObserver) {\r\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n        }\r\n        this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering the scene\r\n     */\r\n    public onAfterRenderObservable = new Observable<Layer>();\r\n\r\n    private _onAfterRenderObserver: Nullable<Observer<Layer>>;\r\n    /**\r\n     * Back compatibility with callback before the onAfterRenderObservable existed.\r\n     * The set callback will be triggered just after rendering the layer.\r\n     */\r\n    public set onAfterRender(callback: () => void) {\r\n        if (this._onAfterRenderObserver) {\r\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\r\n        }\r\n        this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new layer.\r\n     * This represents a full screen 2d layer.\r\n     * This can be useful to display a picture in the  background of your scene for instance.\r\n     * @see https://www.babylonjs-playground.com/#08A2BS#1\r\n     * @param name Define the name of the layer in the scene\r\n     * @param imgUrl Define the url of the texture to display in the layer\r\n     * @param scene Define the scene the layer belongs to\r\n     * @param isBackground Defines whether the layer is displayed in front or behind the scene\r\n     * @param color Defines a color for the layer\r\n     */\r\n    constructor(\r\n        /**\r\n         * Define the name of the layer.\r\n         */\r\n        public name: string,\r\n        imgUrl: Nullable<string>,\r\n        scene: Nullable<Scene>,\r\n        isBackground?: boolean,\r\n        color?: Color4\r\n    ) {\r\n        this.texture = imgUrl ? new Texture(imgUrl, scene, true) : null;\r\n        this.isBackground = isBackground === undefined ? true : isBackground;\r\n        this.color = color === undefined ? new Color4(1, 1, 1, 1) : color;\r\n\r\n        this._scene = <Scene>(scene || EngineStore.LastCreatedScene);\r\n        let layerComponent = this._scene._getComponent(SceneComponentConstants.NAME_LAYER) as LayerSceneComponent;\r\n        if (!layerComponent) {\r\n            layerComponent = new LayerSceneComponent(this._scene);\r\n            this._scene._addComponent(layerComponent);\r\n        }\r\n        this._scene.layers.push(this);\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        this._drawWrapper = new DrawWrapper(engine);\r\n\r\n        // VBO\r\n        const vertices = [];\r\n        vertices.push(1, 1);\r\n        vertices.push(-1, 1);\r\n        vertices.push(-1, -1);\r\n        vertices.push(1, -1);\r\n\r\n        const vertexBuffer = new VertexBuffer(engine, vertices, VertexBuffer.PositionKind, false, false, 2);\r\n        this._vertexBuffers[VertexBuffer.PositionKind] = vertexBuffer;\r\n\r\n        this._createIndexBuffer();\r\n    }\r\n\r\n    private _createIndexBuffer(): void {\r\n        const engine = this._scene.getEngine();\r\n\r\n        // Indices\r\n        const indices = [];\r\n        indices.push(0);\r\n        indices.push(1);\r\n        indices.push(2);\r\n\r\n        indices.push(0);\r\n        indices.push(2);\r\n        indices.push(3);\r\n\r\n        this._indexBuffer = engine.createIndexBuffer(indices);\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        const vb = this._vertexBuffers[VertexBuffer.PositionKind];\r\n\r\n        if (vb) {\r\n            vb._rebuild();\r\n        }\r\n\r\n        this._createIndexBuffer();\r\n    }\r\n\r\n    /**\r\n     * Checks if the layer is ready to be rendered\r\n     * @returns true if the layer is ready. False otherwise.\r\n     */\r\n    public isReady() {\r\n        const engine = this._scene.getEngine();\r\n\r\n        let defines = \"\";\r\n\r\n        if (this.alphaTest) {\r\n            defines = \"#define ALPHATEST\";\r\n        }\r\n\r\n        if (this.texture && !this.texture.gammaSpace) {\r\n            defines += \"\\n#define LINEAR\";\r\n        }\r\n\r\n        if (this._previousDefines !== defines) {\r\n            this._previousDefines = defines;\r\n            this._drawWrapper.effect = engine.createEffect(\"layer\", [VertexBuffer.PositionKind], [\"textureMatrix\", \"color\", \"scale\", \"offset\"], [\"textureSampler\"], defines);\r\n        }\r\n\r\n        const currentEffect = this._drawWrapper.effect;\r\n\r\n        return currentEffect?.isReady() && this.texture?.isReady();\r\n    }\r\n\r\n    /**\r\n     * Renders the layer in the scene.\r\n     */\r\n    public render(): void {\r\n        if (!this.isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        // Check\r\n        if (!this.isReady()) {\r\n            return;\r\n        }\r\n\r\n        const currentEffect = this._drawWrapper.effect!;\r\n\r\n        this.onBeforeRenderObservable.notifyObservers(this);\r\n\r\n        // Render\r\n        engine.enableEffect(this._drawWrapper);\r\n        engine.setState(false);\r\n\r\n        // Texture\r\n        currentEffect.setTexture(\"textureSampler\", this.texture);\r\n        currentEffect.setMatrix(\"textureMatrix\", this.texture!.getTextureMatrix());\r\n\r\n        // Color\r\n        currentEffect.setFloat4(\"color\", this.color.r, this.color.g, this.color.b, this.color.a);\r\n\r\n        // Scale / offset\r\n        currentEffect.setVector2(\"offset\", this.offset);\r\n        currentEffect.setVector2(\"scale\", this.scale);\r\n\r\n        // VBOs\r\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, currentEffect);\r\n\r\n        // Draw order\r\n        if (!this.alphaTest) {\r\n            engine.setAlphaMode(this.alphaBlendingMode);\r\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\r\n            engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n        } else {\r\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\r\n        }\r\n\r\n        this.onAfterRenderObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Disposes and releases the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        const vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\r\n        if (vertexBuffer) {\r\n            vertexBuffer.dispose();\r\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\r\n        }\r\n\r\n        if (this._indexBuffer) {\r\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\r\n            this._indexBuffer = null;\r\n        }\r\n\r\n        if (this.texture) {\r\n            this.texture.dispose();\r\n            this.texture = null;\r\n        }\r\n\r\n        // Clean RTT list\r\n        this.renderTargetTextures = [];\r\n\r\n        // Remove from scene\r\n        const index = this._scene.layers.indexOf(this);\r\n        this._scene.layers.splice(index, 1);\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n\r\n        this.onDisposeObservable.clear();\r\n        this.onAfterRenderObservable.clear();\r\n        this.onBeforeRenderObservable.clear();\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["name", "index", "targetedAnimations", "name", "virtualMeshesInfo", "angle", "minMaxAngle", "HandConstraintZone", "HandConstraintOrientation", "HandConstraintVisibility", "GizmoAnchorPoint", "GizmoCoordinatesMode", "_a", "_b", "name", "name", "shader", "name"]
}
