import { Node } from '@babylonjs/core';
import { Scene } from '@babylonjs/core/scene';
import { select, selectName, selectId, selectTag } from './utility/select';
import { bind, bindInstance } from './bind/bind';
import { position, positionX, positionY, positionZ } from './property/position';
import { translate } from './bind/translate';
import { rotation, rotationX, rotationY, rotationZ } from './property/rotation';
import { scaling, scalingX, scalingY, scalingZ } from './property/scaling';
import { get } from './utility/get';
import { addTags, hasTags, removeTags } from './property/tags';
import { action } from './property/actions';
import { ambientColor, diffuseColor, emissiveColor, material, specularColor, ambientTexture, diffuseTexture, emissiveTexture, specularTexture } from './property/material';
import { registerInstancedBuffer, setInstancedBuffer } from './property/instancedBuffer';
import { attr, props, prop } from './property/attr';
import { func } from './utility/func';
import { dispose } from './bind/dispose';
import { drawTextDT, scaleDT } from './property/dynamicTexture';
import { axisBasic } from '../prefabs/Axis/OLD/axisBasic';
import { createPipeAxis } from '../prefabs/Axis/OLD/AxisNew';
import { boundingBox } from './utility/boundingBox';
import { filter } from './utility/filter';
export declare class Selection {
    selected: Node[];
    scene: Scene;
    constructor(nodes: Node[], scene: Scene);
    select: typeof select;
    selectName: typeof selectName;
    selectId: typeof selectId;
    selectTag: typeof selectTag;
    bind: typeof bind;
    func: typeof func;
    bindInstance: typeof bindInstance;
    position: typeof position;
    positionX: typeof positionX;
    positionY: typeof positionY;
    positionZ: typeof positionZ;
    translate: typeof translate;
    rotation: typeof rotation;
    rotationX: typeof rotationX;
    rotationY: typeof rotationY;
    rotationZ: typeof rotationZ;
    scaling: typeof scaling;
    scalingX: typeof scalingX;
    scalingY: typeof scalingY;
    scalingZ: typeof scalingZ;
    get: typeof get;
    attr: typeof attr;
    addTags: typeof addTags;
    removeTags: typeof removeTags;
    hasTags: typeof hasTags;
    action: typeof action;
    material: typeof material;
    diffuseColor: typeof diffuseColor;
    specularColor: typeof specularColor;
    emissiveColor: typeof emissiveColor;
    ambientColor: typeof ambientColor;
    registerInstancedBuffer: typeof registerInstancedBuffer;
    setInstancedBuffer: typeof setInstancedBuffer;
    dispose: typeof dispose;
    diffuseTexture: typeof diffuseTexture;
    specularTexture: typeof specularTexture;
    emissiveTexture: typeof emissiveTexture;
    ambientTexture: typeof ambientTexture;
    scaleDT: typeof scaleDT;
    scaleToDT: typeof scaleDT;
    drawTextDT: typeof drawTextDT;
    axis: typeof axisBasic;
    boundingBox: typeof boundingBox;
    filter: typeof filter;
    pipeAxis: typeof createPipeAxis;
    props: typeof props;
    prop: typeof prop;
}
